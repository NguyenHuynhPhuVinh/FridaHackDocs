class <Module>
{
}

class Interop
{
    static /*0xe08070*/ void GetRandomBytes(byte* buffer, int length);

    class Kernel32
    {
        static /*0xe088e0*/ bool FreeLibrary(nint hModule);
        static /*0xe08f90*/ Microsoft.Win32.SafeHandles.SafeLibraryHandle LoadLibraryEx(string libFilename, nint reserved, int flags);
        static /*0xe08c50*/ bool GetFileMUIPath(uint flags, string filePath, System.Text.StringBuilder language, ref int languageLength, System.Text.StringBuilder fileMuiPath, ref int fileMuiPathLength, ref long enumerator);
        static /*0xe08970*/ uint GetDynamicTimeZoneInformation(ref Interop.Kernel32.TIME_DYNAMIC_ZONE_INFORMATION pTimeZoneInformation);
        static /*0xe08f00*/ uint GetTimeZoneInformation(ref Interop.Kernel32.TIME_ZONE_INFORMATION lpTimeZoneInformation);
        static /*0xe08180*/ bool CloseHandle(nint handle);
        static /*0xe08210*/ bool CreateDirectoryPrivate(string path, ref Interop.Kernel32.SECURITY_ATTRIBUTES lpSecurityAttributes);
        static /*0xe082b0*/ bool CreateDirectory(string path, ref Interop.Kernel32.SECURITY_ATTRIBUTES lpSecurityAttributes);
        static /*0xe083a0*/ nint CreateFilePrivate(string lpFileName, int dwDesiredAccess, System.IO.FileShare dwShareMode, Interop.Kernel32.SECURITY_ATTRIBUTES* securityAttrs, System.IO.FileMode dwCreationDisposition, int dwFlagsAndAttributes, nint hTemplateFile);
        static /*0xe08480*/ nint CreateFile_IntPtr(string lpFileName, int dwDesiredAccess, System.IO.FileShare dwShareMode, System.IO.FileMode dwCreationDisposition, int dwFlagsAndAttributes);
        static /*0xe085a0*/ Microsoft.Win32.SafeHandles.SafeFindHandle FindFirstFileExPrivate(string lpFileName, Interop.Kernel32.FINDEX_INFO_LEVELS fInfoLevelId, ref Interop.Kernel32.WIN32_FIND_DATA lpFindFileData, Interop.Kernel32.FINDEX_SEARCH_OPS fSearchOp, nint lpSearchFilter, int dwAdditionalFlags);
        static /*0xe086c0*/ Microsoft.Win32.SafeHandles.SafeFindHandle FindFirstFile(string fileName, ref Interop.Kernel32.WIN32_FIND_DATA data);
        static /*0xe087f0*/ int FormatMessage(int dwFlags, nint lpSource, uint dwMessageId, int dwLanguageId, char* lpBuffer, int nSize, nint[] arguments);
        static /*0xe08ef0*/ string GetMessage(int errorCode);
        static /*0xe08d90*/ string GetMessage(nint moduleHandle, int errorCode);
        static /*0xe09130*/ bool TryGetErrorMessage(nint moduleHandle, int errorCode, System.Span<char> buffer, ref string errorMsg);
        static /*0xe08a00*/ bool GetFileAttributesExPrivate(string name, Interop.Kernel32.GET_FILEEX_INFO_LEVELS fileInfoLevel, ref Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA lpFileInformation);
        static /*0xe08ab0*/ bool GetFileAttributesEx(string name, Interop.Kernel32.GET_FILEEX_INFO_LEVELS fileInfoLevel, ref Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA lpFileInformation);
        static /*0xe08ba0*/ bool GetFileInformationByHandleEx(nint hFile, Interop.Kernel32.FILE_INFO_BY_HANDLE_CLASS FileInformationClass, nint lpFileInformation, uint dwBufferSize);
        static /*0xe09090*/ bool SetThreadErrorMode(uint dwNewMode, ref uint lpOldMode);

        struct WIN32_FIND_DATA
        {
            /*0x10*/ uint dwFileAttributes;
            /*0x14*/ Interop.Kernel32.FILE_TIME ftCreationTime;
            /*0x1c*/ Interop.Kernel32.FILE_TIME ftLastAccessTime;
            /*0x24*/ Interop.Kernel32.FILE_TIME ftLastWriteTime;
            /*0x2c*/ uint nFileSizeHigh;
            /*0x30*/ uint nFileSizeLow;
            /*0x34*/ uint dwReserved0;
            /*0x38*/ uint dwReserved1;
            /*0x3c*/ Interop.Kernel32.WIN32_FIND_DATA.<_cFileName> _cFileName;
            /*0x244*/ Interop.Kernel32.WIN32_FIND_DATA.<_cAlternateFileName> _cAlternateFileName;

            /*0xe25a90*/ void SetFileName(string fileName);

            struct <_cFileName>e__FixedBuffer
            {
                /*0x10*/ char FixedElementField;
            }

            struct <_cAlternateFileName>e__FixedBuffer
            {
                /*0x10*/ char FixedElementField;
            }
        }

        struct REG_TZI_FORMAT
        {
            /*0x10*/ int Bias;
            /*0x14*/ int StandardBias;
            /*0x18*/ int DaylightBias;
            /*0x1c*/ Interop.Kernel32.SYSTEMTIME StandardDate;
            /*0x2c*/ Interop.Kernel32.SYSTEMTIME DaylightDate;

            /*0xe0c7a0*/ REG_TZI_FORMAT(ref Interop.Kernel32.TIME_ZONE_INFORMATION tzi);
        }

        struct SYSTEMTIME
        {
            /*0x10*/ ushort Year;
            /*0x12*/ ushort Month;
            /*0x14*/ ushort DayOfWeek;
            /*0x16*/ ushort Day;
            /*0x18*/ ushort Hour;
            /*0x1a*/ ushort Minute;
            /*0x1c*/ ushort Second;
            /*0x1e*/ ushort Milliseconds;

            /*0xe11130*/ bool Equals(ref Interop.Kernel32.SYSTEMTIME other);
        }

        struct TIME_DYNAMIC_ZONE_INFORMATION
        {
            /*0x10*/ int Bias;
            /*0x14*/ Interop.Kernel32.TIME_DYNAMIC_ZONE_INFORMATION.<StandardName> StandardName;
            /*0x54*/ Interop.Kernel32.SYSTEMTIME StandardDate;
            /*0x64*/ int StandardBias;
            /*0x68*/ Interop.Kernel32.TIME_DYNAMIC_ZONE_INFORMATION.<DaylightName> DaylightName;
            /*0xa8*/ Interop.Kernel32.SYSTEMTIME DaylightDate;
            /*0xb8*/ int DaylightBias;
            /*0xbc*/ Interop.Kernel32.TIME_DYNAMIC_ZONE_INFORMATION.<TimeZoneKeyName> TimeZoneKeyName;
            /*0x1bc*/ byte DynamicDaylightTimeDisabled;

            /*0xe252e0*/ string GetTimeZoneKeyName();

            struct <StandardName>e__FixedBuffer
            {
                /*0x10*/ char FixedElementField;
            }

            struct <DaylightName>e__FixedBuffer
            {
                /*0x10*/ char FixedElementField;
            }

            struct <TimeZoneKeyName>e__FixedBuffer
            {
                /*0x10*/ char FixedElementField;
            }
        }

        struct TIME_ZONE_INFORMATION
        {
            /*0x10*/ int Bias;
            /*0x14*/ Interop.Kernel32.TIME_ZONE_INFORMATION.<StandardName> StandardName;
            /*0x54*/ Interop.Kernel32.SYSTEMTIME StandardDate;
            /*0x64*/ int StandardBias;
            /*0x68*/ Interop.Kernel32.TIME_ZONE_INFORMATION.<DaylightName> DaylightName;
            /*0xa8*/ Interop.Kernel32.SYSTEMTIME DaylightDate;
            /*0xb8*/ int DaylightBias;

            /*0xe25320*/ TIME_ZONE_INFORMATION(ref Interop.Kernel32.TIME_DYNAMIC_ZONE_INFORMATION dtzi);
            /*0xe25310*/ string GetStandardName();
            /*0xe25300*/ string GetDaylightName();

            struct <StandardName>e__FixedBuffer
            {
                /*0x10*/ char FixedElementField;
            }

            struct <DaylightName>e__FixedBuffer
            {
                /*0x10*/ char FixedElementField;
            }
        }

        enum FILE_INFO_BY_HANDLE_CLASS
        {
            FileBasicInfo = 0,
            FileStandardInfo = 1,
            FileNameInfo = 2,
            FileRenameInfo = 3,
            FileDispositionInfo = 4,
            FileAllocationInfo = 5,
            FileEndOfFileInfo = 6,
            FileStreamInfo = 7,
            FileCompressionInfo = 8,
            FileAttributeTagInfo = 9,
            FileIdBothDirectoryInfo = 10,
            FileIdBothDirectoryRestartInfo = 11,
            FileIoPriorityHintInfo = 12,
            FileRemoteProtocolInfo = 13,
            FileFullDirectoryInfo = 14,
            FileFullDirectoryRestartInfo = 15,
        }

        struct FILE_TIME
        {
            /*0x10*/ uint dwLowDateTime;
            /*0x14*/ uint dwHighDateTime;
        }

        enum FINDEX_INFO_LEVELS
        {
            FindExInfoStandard = 0,
            FindExInfoBasic = 1,
            FindExInfoMaxInfoLevel = 2,
        }

        enum FINDEX_SEARCH_OPS
        {
            FindExSearchNameMatch = 0,
            FindExSearchLimitToDirectories = 1,
            FindExSearchLimitToDevices = 2,
            FindExSearchMaxSearchOp = 3,
        }

        enum GET_FILEEX_INFO_LEVELS
        {
            GetFileExInfoStandard = 0,
            GetFileExMaxInfoLevel = 1,
        }

        struct SECURITY_ATTRIBUTES
        {
            /*0x10*/ uint nLength;
            /*0x18*/ nint lpSecurityDescriptor;
            /*0x20*/ Interop.BOOL bInheritHandle;
        }

        struct WIN32_FILE_ATTRIBUTE_DATA
        {
            /*0x10*/ int dwFileAttributes;
            /*0x14*/ Interop.Kernel32.FILE_TIME ftCreationTime;
            /*0x1c*/ Interop.Kernel32.FILE_TIME ftLastAccessTime;
            /*0x24*/ Interop.Kernel32.FILE_TIME ftLastWriteTime;
            /*0x2c*/ uint nFileSizeHigh;
            /*0x30*/ uint nFileSizeLow;

            /*0xe25a60*/ void PopulateFrom(ref Interop.Kernel32.WIN32_FIND_DATA findData);
        }
    }

    class BCrypt
    {
        static /*0xe076a0*/ Interop.BCrypt.NTSTATUS BCryptGenRandom(nint hAlgorithm, byte* pbBuffer, int cbBuffer, int dwFlags);

        enum NTSTATUS
        {
            STATUS_SUCCESS = 0,
            STATUS_NOT_FOUND = 3221226021,
            STATUS_INVALID_PARAMETER = 3221225485,
            STATUS_NO_MEMORY = 3221225495,
        }
    }

    class User32
    {
        static /*0xe25930*/ int LoadString(Microsoft.Win32.SafeHandles.SafeLibraryHandle handle, int id, System.Text.StringBuilder buffer, int bufferLength);
    }

    enum BOOL
    {
        FALSE = 0,
        TRUE = 1,
    }

    enum BOOLEAN
    {
        FALSE = 0,
        TRUE = 1,
    }

    struct LongFileTime
    {
        /*0x10*/ long TicksSince1601;
    }

    struct UNICODE_STRING
    {
        /*0x10*/ ushort Length;
        /*0x12*/ ushort MaximumLength;
        /*0x18*/ nint Buffer;
    }

    class NtDll
    {
        static /*0xe0c4f0*/ int NtCreateFile(ref nint FileHandle, Interop.NtDll.DesiredAccess DesiredAccess, ref Interop.NtDll.OBJECT_ATTRIBUTES ObjectAttributes, ref Interop.NtDll.IO_STATUS_BLOCK IoStatusBlock, long* AllocationSize, System.IO.FileAttributes FileAttributes, System.IO.FileShare ShareAccess, Interop.NtDll.CreateDisposition CreateDisposition, Interop.NtDll.CreateOptions CreateOptions, void* EaBuffer, uint EaLength);
        static /*0xe0c260*/ System.ValueTuple<int, nint> CreateFile(System.ReadOnlySpan<char> path, nint rootDirectory, Interop.NtDll.CreateDisposition createDisposition, Interop.NtDll.DesiredAccess desiredAccess, System.IO.FileShare shareAccess, System.IO.FileAttributes fileAttributes, Interop.NtDll.CreateOptions createOptions, Interop.NtDll.ObjectAttributes objectAttributes);
        static /*0xe0c5f0*/ int NtQueryDirectoryFile(nint FileHandle, nint Event, nint ApcRoutine, nint ApcContext, ref Interop.NtDll.IO_STATUS_BLOCK IoStatusBlock, nint FileInformation, uint Length, Interop.NtDll.FILE_INFORMATION_CLASS FileInformationClass, Interop.BOOLEAN ReturnSingleEntry, Interop.UNICODE_STRING* FileName, Interop.BOOLEAN RestartScan);
        static /*0xe0c6f0*/ uint RtlNtStatusToDosError(int Status);

        struct FILE_FULL_DIR_INFORMATION
        {
            /*0x10*/ uint NextEntryOffset;
            /*0x14*/ uint FileIndex;
            /*0x18*/ Interop.LongFileTime CreationTime;
            /*0x20*/ Interop.LongFileTime LastAccessTime;
            /*0x28*/ Interop.LongFileTime LastWriteTime;
            /*0x30*/ Interop.LongFileTime ChangeTime;
            /*0x38*/ long EndOfFile;
            /*0x40*/ long AllocationSize;
            /*0x48*/ System.IO.FileAttributes FileAttributes;
            /*0x4c*/ uint FileNameLength;
            /*0x50*/ uint EaSize;
            /*0x54*/ char _fileName;

            static /*0xe07fe0*/ Interop.NtDll.FILE_FULL_DIR_INFORMATION* GetNextInfo(Interop.NtDll.FILE_FULL_DIR_INFORMATION* info);
            /*0xe08000*/ System.ReadOnlySpan<char> get_FileName();
        }

        enum FILE_INFORMATION_CLASS
        {
            FileDirectoryInformation = 1,
            FileFullDirectoryInformation = 2,
            FileBothDirectoryInformation = 3,
            FileBasicInformation = 4,
            FileStandardInformation = 5,
            FileInternalInformation = 6,
            FileEaInformation = 7,
            FileAccessInformation = 8,
            FileNameInformation = 9,
            FileRenameInformation = 10,
            FileLinkInformation = 11,
            FileNamesInformation = 12,
            FileDispositionInformation = 13,
            FilePositionInformation = 14,
            FileFullEaInformation = 15,
            FileModeInformation = 16,
            FileAlignmentInformation = 17,
            FileAllInformation = 18,
            FileAllocationInformation = 19,
            FileEndOfFileInformation = 20,
            FileAlternateNameInformation = 21,
            FileStreamInformation = 22,
            FilePipeInformation = 23,
            FilePipeLocalInformation = 24,
            FilePipeRemoteInformation = 25,
            FileMailslotQueryInformation = 26,
            FileMailslotSetInformation = 27,
            FileCompressionInformation = 28,
            FileObjectIdInformation = 29,
            FileCompletionInformation = 30,
            FileMoveClusterInformation = 31,
            FileQuotaInformation = 32,
            FileReparsePointInformation = 33,
            FileNetworkOpenInformation = 34,
            FileAttributeTagInformation = 35,
            FileTrackingInformation = 36,
            FileIdBothDirectoryInformation = 37,
            FileIdFullDirectoryInformation = 38,
            FileValidDataLengthInformation = 39,
            FileShortNameInformation = 40,
            FileIoCompletionNotificationInformation = 41,
            FileIoStatusBlockRangeInformation = 42,
            FileIoPriorityHintInformation = 43,
            FileSfioReserveInformation = 44,
            FileSfioVolumeInformation = 45,
            FileHardLinkInformation = 46,
            FileProcessIdsUsingFileInformation = 47,
            FileNormalizedNameInformation = 48,
            FileNetworkPhysicalNameInformation = 49,
            FileIdGlobalTxDirectoryInformation = 50,
            FileIsRemoteDeviceInformation = 51,
            FileUnusedInformation = 52,
            FileNumaNodeInformation = 53,
            FileStandardLinkInformation = 54,
            FileRemoteProtocolInformation = 55,
            FileRenameInformationBypassAccessCheck = 56,
            FileLinkInformationBypassAccessCheck = 57,
            FileVolumeNameInformation = 58,
            FileIdInformation = 59,
            FileIdExtdDirectoryInformation = 60,
            FileReplaceCompletionInformation = 61,
            FileHardLinkFullIdInformation = 62,
            FileIdExtdBothDirectoryInformation = 63,
            FileDispositionInformationEx = 64,
            FileRenameInformationEx = 65,
            FileRenameInformationExBypassAccessCheck = 66,
            FileDesiredStorageClassInformation = 67,
            FileStatInformation = 68,
        }

        struct IO_STATUS_BLOCK
        {
            /*0x10*/ Interop.NtDll.IO_STATUS_BLOCK.IO_STATUS Status;
            /*0x18*/ nint Information;

            struct IO_STATUS
            {
                /*0x10*/ uint Status;
                /*0x10*/ nint Pointer;
            }
        }

        struct OBJECT_ATTRIBUTES
        {
            /*0x10*/ uint Length;
            /*0x18*/ nint RootDirectory;
            /*0x20*/ Interop.UNICODE_STRING* ObjectName;
            /*0x28*/ Interop.NtDll.ObjectAttributes Attributes;
            /*0x30*/ void* SecurityDescriptor;
            /*0x38*/ void* SecurityQualityOfService;

            /*0xe0c770*/ OBJECT_ATTRIBUTES(Interop.UNICODE_STRING* objectName, Interop.NtDll.ObjectAttributes attributes, nint rootDirectory);
        }

        enum ObjectAttributes
        {
            OBJ_INHERIT = 2,
            OBJ_PERMANENT = 16,
            OBJ_EXCLUSIVE = 32,
            OBJ_CASE_INSENSITIVE = 64,
            OBJ_OPENIF = 128,
            OBJ_OPENLINK = 256,
        }

        enum CreateDisposition
        {
            FILE_SUPERSEDE = 0,
            FILE_OPEN = 1,
            FILE_CREATE = 2,
            FILE_OPEN_IF = 3,
            FILE_OVERWRITE = 4,
            FILE_OVERWRITE_IF = 5,
        }

        enum CreateOptions
        {
            FILE_DIRECTORY_FILE = 1,
            FILE_WRITE_THROUGH = 2,
            FILE_SEQUENTIAL_ONLY = 4,
            FILE_NO_INTERMEDIATE_BUFFERING = 8,
            FILE_SYNCHRONOUS_IO_ALERT = 16,
            FILE_SYNCHRONOUS_IO_NONALERT = 32,
            FILE_NON_DIRECTORY_FILE = 64,
            FILE_CREATE_TREE_CONNECTION = 128,
            FILE_COMPLETE_IF_OPLOCKED = 256,
            FILE_NO_EA_KNOWLEDGE = 512,
            FILE_RANDOM_ACCESS = 2048,
            FILE_DELETE_ON_CLOSE = 4096,
            FILE_OPEN_BY_FILE_ID = 8192,
            FILE_OPEN_FOR_BACKUP_INTENT = 16384,
            FILE_NO_COMPRESSION = 32768,
            FILE_OPEN_REQUIRING_OPLOCK = 65536,
            FILE_DISALLOW_EXCLUSIVE = 131072,
            FILE_SESSION_AWARE = 262144,
            FILE_RESERVE_OPFILTER = 1048576,
            FILE_OPEN_REPARSE_POINT = 2097152,
            FILE_OPEN_NO_RECALL = 4194304,
        }

        enum DesiredAccess
        {
            FILE_READ_DATA = 1,
            FILE_LIST_DIRECTORY = 1,
            FILE_WRITE_DATA = 2,
            FILE_ADD_FILE = 2,
            FILE_APPEND_DATA = 4,
            FILE_ADD_SUBDIRECTORY = 4,
            FILE_CREATE_PIPE_INSTANCE = 4,
            FILE_READ_EA = 8,
            FILE_WRITE_EA = 16,
            FILE_EXECUTE = 32,
            FILE_TRAVERSE = 32,
            FILE_DELETE_CHILD = 64,
            FILE_READ_ATTRIBUTES = 128,
            FILE_WRITE_ATTRIBUTES = 256,
            FILE_ALL_ACCESS = 983551,
            DELETE = 65536,
            READ_CONTROL = 131072,
            WRITE_DAC = 262144,
            WRITE_OWNER = 524288,
            SYNCHRONIZE = 1048576,
            STANDARD_RIGHTS_READ = 131072,
            STANDARD_RIGHTS_WRITE = 131072,
            STANDARD_RIGHTS_EXECUTE = 131072,
            FILE_GENERIC_READ = 2147483648,
            FILE_GENERIC_WRITE = 1073741824,
            FILE_GENERIC_EXECUTE = 536870912,
        }
    }

    class Advapi32
    {
        static /*0xe066e0*/ int RegCloseKey(nint hKey);
        static /*0xe06760*/ int RegEnumKeyEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle hKey, int dwIndex, char[] lpName, ref int lpcbName, int[] lpReserved, System.Text.StringBuilder lpClass, int[] lpcbClass, long[] lpftLastWriteTime);
        static /*0xe068f0*/ int RegOpenKeyEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle hKey, string lpSubKey, int ulOptions, int samDesired, ref Microsoft.Win32.SafeHandles.SafeRegistryHandle hkResult);
        static /*0xe06a60*/ int RegQueryInfoKey(Microsoft.Win32.SafeHandles.SafeRegistryHandle hKey, System.Text.StringBuilder lpClass, int[] lpcbClass, nint lpReserved_MustBeZero, ref int lpcSubKeys, int[] lpcbMaxSubKeyLen, int[] lpcbMaxClassLen, ref int lpcValues, int[] lpcbMaxValueNameLen, int[] lpcbMaxValueLen, int[] lpcbSecurityDescriptor, int[] lpftLastWriteTime);
        static /*0xe06ee0*/ int RegQueryValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle hKey, string lpValueName, int[] lpReserved, ref int lpType, byte[] lpData, ref int lpcbData);
        static /*0xe06c80*/ int RegQueryValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle hKey, string lpValueName, int[] lpReserved, ref int lpType, ref int lpData, ref int lpcbData);
        static /*0xe06db0*/ int RegQueryValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle hKey, string lpValueName, int[] lpReserved, ref int lpType, ref long lpData, ref int lpcbData);
        static /*0xe07080*/ int RegQueryValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle hKey, string lpValueName, int[] lpReserved, ref int lpType, char[] lpData, ref int lpcbData);
    }
}

class Locale
{
    static /*0x621ca0*/ string GetText(string msg);
}

class SR
{
    static /*0xe10d90*/ string GetString(string name, object[] args);
    static /*0xe10f80*/ string GetString(System.Globalization.CultureInfo culture, string name, object[] args);
    static /*0x621ca0*/ string GetString(string name);
    static /*0xe10c00*/ string Format(string resourceFormat, object p1);
    static /*0xe10a70*/ string Format(string resourceFormat, object p1, object p2);
    static /*0x621ca0*/ string GetResourceString(string str);
}

namespace Mono
{
    class Runtime
    {
        static /*0x0*/ object dump;

        static /*0xe109f0*/ Runtime();
    }

    struct RuntimeClassHandle
    {
        /*0x10*/ Mono.RuntimeStructs.MonoClass* value;

        static /*0xe10080*/ nint GetTypeFromClass(Mono.RuntimeStructs.MonoClass* klass);
        /*0x9e29e0*/ RuntimeClassHandle(Mono.RuntimeStructs.MonoClass* value);
        /*0xe100a0*/ RuntimeClassHandle(nint ptr);
        /*0x6937d0*/ Mono.RuntimeStructs.MonoClass* get_Value();
        /*0xe0ff50*/ bool Equals(object obj);
        /*0xe10050*/ int GetHashCode();
        /*0xe10090*/ System.RuntimeTypeHandle GetTypeHandle();
    }

    struct RuntimeRemoteClassHandle
    {
        /*0x10*/ Mono.RuntimeStructs.RemoteClass* value;

        /*0xe10870*/ Mono.RuntimeClassHandle get_ProxyClass();
    }

    struct RuntimeGenericParamInfoHandle
    {
        /*0x10*/ Mono.RuntimeStructs.GenericParamInfo* value;

        /*0xe100a0*/ RuntimeGenericParamInfoHandle(nint ptr);
        /*0xe10450*/ System.Type[] get_Constraints();
        /*0xe10430*/ System.Reflection.GenericParameterAttributes get_Attributes();
        /*0xe102e0*/ System.Type[] GetConstraints();
        /*0xe102b0*/ int GetConstraintsCount();
    }

    struct RuntimeEventHandle
    {
        /*0x10*/ nint value;

        /*0x9e29e0*/ RuntimeEventHandle(nint v);
        /*0x6937d0*/ nint get_Value();
        /*0xe100c0*/ bool Equals(object obj);
        /*0xe101c0*/ int GetHashCode();
    }

    struct RuntimePropertyHandle
    {
        /*0x10*/ nint value;

        /*0x9e29e0*/ RuntimePropertyHandle(nint v);
        /*0x6937d0*/ nint get_Value();
        /*0xe10770*/ bool Equals(object obj);
        /*0xe101c0*/ int GetHashCode();
    }

    struct RuntimeGPtrArrayHandle
    {
        /*0x10*/ Mono.RuntimeStructs.GPtrArray* value;

        static /*0xe101f0*/ void GPtrArrayFree(Mono.RuntimeStructs.GPtrArray* value);
        static /*0xe101d0*/ void DestroyAndFree(ref Mono.RuntimeGPtrArrayHandle h);
        /*0xe100a0*/ RuntimeGPtrArrayHandle(nint ptr);
        /*0xe10290*/ int get_Length();
        /*0xe10280*/ nint get_Item(int i);
        /*0xe10200*/ nint Lookup(int i);
    }

    class RuntimeMarshal
    {
        static /*0xe10650*/ string PtrToUtf8String(nint ptr);
        static /*0xe10620*/ Mono.SafeStringMarshal MarshalString(string str);
        static /*0xe10590*/ int DecodeBlobSize(nint in_ptr, ref nint out_ptr);
        static /*0xe10490*/ byte[] DecodeBlobArray(nint ptr);
        static /*0xe10460*/ int AsciHexDigitValue(int c);
        static /*0xe10610*/ void FreeAssemblyName(ref Mono.MonoAssemblyName name, bool freeStruct);
    }

    class RuntimeStructs
    {
        struct RemoteClass
        {
            /*0x10*/ nint default_vtable;
            /*0x18*/ nint xdomain_vtable;
            /*0x20*/ Mono.RuntimeStructs.MonoClass* proxy_class;
            /*0x28*/ nint proxy_class_name;
            /*0x30*/ uint interface_count;
        }

        struct MonoClass
        {
        }

        struct GenericParamInfo
        {
            /*0x10*/ Mono.RuntimeStructs.MonoClass* pklass;
            /*0x18*/ nint name;
            /*0x20*/ ushort flags;
            /*0x24*/ uint token;
            /*0x28*/ Mono.RuntimeStructs.MonoClass** constraints;
        }

        struct GPtrArray
        {
            /*0x10*/ nint* data;
            /*0x18*/ int len;
        }
    }

    struct MonoAssemblyName
    {
        /*0x10*/ nint name;
        /*0x18*/ nint culture;
        /*0x20*/ nint hash_value;
        /*0x28*/ nint public_key;
        /*0x30*/ Mono.MonoAssemblyName.<public_key_token> public_key_token;
        /*0x44*/ uint hash_alg;
        /*0x48*/ uint hash_len;
        /*0x4c*/ uint flags;
        /*0x50*/ ushort major;
        /*0x52*/ ushort minor;
        /*0x54*/ ushort build;
        /*0x56*/ ushort revision;
        /*0x58*/ ushort arch;

        struct <public_key_token>e__FixedBuffer
        {
            /*0x10*/ byte FixedElementField;
        }
    }

    struct ValueTuple
    {
    }

    struct ValueTuple<T1>
    {
        /*0x0*/ T1 Item1;
    }

    struct ValueTuple<T1, T2>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
    }

    struct ValueTuple<T1, T2, T3>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
    }

    struct ValueTuple<T1, T2, T3, T4>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
    }

    struct ValueTuple<T1, T2, T3, T4, T5>
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;
    }

    struct SafeGPtrArrayHandle : System.IDisposable
    {
        /*0x10*/ Mono.RuntimeGPtrArrayHandle handle;

        /*0xe100a0*/ SafeGPtrArrayHandle(nint ptr);
        /*0xe101d0*/ void Dispose();
        /*0xe10290*/ int get_Length();
        /*0xe10280*/ nint get_Item(int i);
    }

    struct SafeStringMarshal : System.IDisposable
    {
        /*0x10*/ string str;
        /*0x18*/ nint marshaled_string;

        static /*0xe11400*/ nint StringToUtf8_icall(ref string str);
        static /*0xe11410*/ nint StringToUtf8(string str);
        static /*0xe113f0*/ void GFree(nint ptr);
        /*0xe11430*/ SafeStringMarshal(string str);
        /*0xe11450*/ nint get_Value();
        /*0xe113b0*/ void Dispose();
    }

    namespace Xml
    {
        class SmallXmlParser
        {
            /*0x10*/ Mono.Xml.SmallXmlParser.IContentHandler handler;
            /*0x18*/ System.IO.TextReader reader;
            /*0x20*/ System.Collections.Stack elementNames;
            /*0x28*/ System.Collections.Stack xmlSpaces;
            /*0x30*/ string xmlSpace;
            /*0x38*/ System.Text.StringBuilder buffer;
            /*0x40*/ char[] nameBuffer;
            /*0x48*/ bool isWhitespace;
            /*0x50*/ Mono.Xml.SmallXmlParser.AttrListImpl attributes;
            /*0x58*/ int line;
            /*0x5c*/ int column;
            /*0x60*/ bool resetColumn;

            /*0xe19bf0*/ SmallXmlParser();
            /*0xe17390*/ System.Exception Error(string msg);
            /*0xe19a60*/ System.Exception UnexpectedEndError();
            /*0xe17790*/ bool IsNameChar(char c, bool start);
            /*0xe178a0*/ bool IsWhitespace(int c);
            /*0xe19970*/ void SkipWhitespaces();
            /*0xe17680*/ void HandleWhitespaces();
            /*0xe19980*/ void SkipWhitespaces(bool expected);
            /*0xe17ad0*/ int Peek();
            /*0xe19910*/ int Read();
            /*0xe17480*/ void Expect(int c);
            /*0xe197d0*/ string ReadUntil(char until, bool handleReferences);
            /*0xe19260*/ string ReadName();
            /*0xe178c0*/ void Parse(System.IO.TextReader input, Mono.Xml.SmallXmlParser.IContentHandler handler);
            /*0xe172d0*/ void Cleanup();
            /*0xe18340*/ void ReadContent();
            /*0xe175b0*/ void HandleBufferedContent();
            /*0xe180d0*/ void ReadCharacters();
            /*0xe19490*/ void ReadReference();
            /*0xe17ee0*/ int ReadCharacterReference();
            /*0xe17b00*/ void ReadAttribute(Mono.Xml.SmallXmlParser.AttrListImpl a);
            /*0xe17d90*/ void ReadCDATASection();
            /*0xe181f0*/ void ReadComment();

            interface IContentHandler
            {
                /*0x17aec0*/ void OnStartParsing(Mono.Xml.SmallXmlParser parser);
                /*0x17aec0*/ void OnEndParsing(Mono.Xml.SmallXmlParser parser);
                /*0x183150*/ void OnStartElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x17aec0*/ void OnEndElement(string name);
                /*0x183150*/ void OnProcessingInstruction(string name, string text);
                /*0x17aec0*/ void OnChars(string text);
                /*0x17aec0*/ void OnIgnorableWhitespace(string text);
            }

            interface IAttrList
            {
                /*0x184ab0*/ string GetValue(int i);
                /*0x1858d0*/ string GetValue(string name);
                /*0x1803b0*/ string[] get_Names();
                /*0x1803b0*/ string[] get_Values();
            }

            class AttrListImpl : Mono.Xml.SmallXmlParser.IAttrList
            {
                /*0x10*/ System.Collections.Generic.List<string> attrNames;
                /*0x18*/ System.Collections.Generic.List<string> attrValues;

                /*0xe07550*/ AttrListImpl();
                /*0xe073f0*/ string GetValue(int i);
                /*0xe07450*/ string GetValue(string name);
                /*0xe07600*/ string[] get_Names();
                /*0xe07650*/ string[] get_Values();
                /*0xe07360*/ void Clear();
                /*0xe07230*/ void Add(string name, string value);
            }
        }

        class SmallXmlParserException : System.SystemException
        {
            /*0x90*/ int line;
            /*0x94*/ int column;

            /*0xe17210*/ SmallXmlParserException(string msg, int line, int column);
        }
    }

    namespace Interop
    {
        class MonoPInvokeCallbackAttribute : System.Attribute
        {
            /*0x534220*/ MonoPInvokeCallbackAttribute(System.Type t);
        }
    }

    namespace Globalization
    {
        namespace Unicode
        {
            class CodePointIndexer
            {
                /*0x10*/ Mono.Globalization.Unicode.CodePointIndexer.TableRange[] ranges;
                /*0x18*/ int TotalCount;
                /*0x1c*/ int defaultIndex;
                /*0x20*/ int defaultCP;

                /*0xe07c10*/ CodePointIndexer(int[] starts, int[] ends, int defaultIndex, int defaultCP);
                /*0xe07b90*/ int ToIndex(int cp);

                struct TableRange
                {
                    /*0x10*/ int Start;
                    /*0x14*/ int End;
                    /*0x18*/ int Count;
                    /*0x1c*/ int IndexStart;
                    /*0x20*/ int IndexEnd;

                    /*0xe25440*/ TableRange(int start, int end, int indexStart);
                }
            }

            class TailoringInfo
            {
                /*0x10*/ int LCID;
                /*0x14*/ int TailoringIndex;
                /*0x18*/ int TailoringCount;
                /*0x1c*/ bool FrenchSort;

                /*0xe25460*/ TailoringInfo(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort);
            }

            class Contraction
            {
                /*0x10*/ int Index;
                /*0x18*/ char[] Source;
                /*0x20*/ string Replacement;
                /*0x28*/ byte[] SortKey;

                /*0xe07f70*/ Contraction(int index, char[] source, string replacement, byte[] sortkey);
            }

            class ContractionComparer : System.Collections.Generic.IComparer<Mono.Globalization.Unicode.Contraction>
            {
                static /*0x0*/ Mono.Globalization.Unicode.ContractionComparer Instance;

                static /*0xe07f00*/ ContractionComparer();
                /*0x32f970*/ ContractionComparer();
                /*0xe07e00*/ int Compare(Mono.Globalization.Unicode.Contraction c1, Mono.Globalization.Unicode.Contraction c2);
            }

            class Level2Map
            {
                /*0x10*/ byte Source;
                /*0x11*/ byte Replace;

                /*0xe093e0*/ Level2Map(byte source, byte replace);
            }

            class MSCompatUnicodeTable
            {
                static /*0x0*/ int MaxExpansionLength;
                static /*0x8*/ byte* ignorableFlags;
                static /*0x10*/ byte* categories;
                static /*0x18*/ byte* level1;
                static /*0x20*/ byte* level2;
                static /*0x28*/ byte* level3;
                static /*0x30*/ byte* cjkCHScategory;
                static /*0x38*/ byte* cjkCHTcategory;
                static /*0x40*/ byte* cjkJAcategory;
                static /*0x48*/ byte* cjkKOcategory;
                static /*0x50*/ byte* cjkCHSlv1;
                static /*0x58*/ byte* cjkCHTlv1;
                static /*0x60*/ byte* cjkJAlv1;
                static /*0x68*/ byte* cjkKOlv1;
                static /*0x70*/ byte* cjkKOlv2;
                static /*0x78*/ char[] tailoringArr;
                static /*0x80*/ Mono.Globalization.Unicode.TailoringInfo[] tailoringInfos;
                static /*0x88*/ object forLock;
                static /*0x90*/ bool isReady;

                static /*0xe0b700*/ MSCompatUnicodeTable();
                static /*0xe0aad0*/ Mono.Globalization.Unicode.TailoringInfo GetTailoringInfo(int lcid);
                static /*0xe09a10*/ void BuildTailoringTables(System.Globalization.CultureInfo culture, Mono.Globalization.Unicode.TailoringInfo t, ref Mono.Globalization.Unicode.Contraction[] contractions, ref Mono.Globalization.Unicode.Level2Map[] diacriticals);
                static /*0xe0b1a0*/ void SetCJKReferences(string name, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref byte* lv2Table);
                static /*0xe0a0e0*/ byte Category(int cp);
                static /*0xe0af90*/ byte Level1(int cp);
                static /*0xe0b040*/ byte Level2(int cp);
                static /*0xe0b0f0*/ byte Level3(int cp);
                static /*0xe0acf0*/ bool IsIgnorable(int cp, byte flag);
                static /*0xe0aca0*/ bool IsIgnorableNonSpacing(int cp);
                static /*0xe0b520*/ int ToKanaTypeInsensitive(int i);
                static /*0xe0b540*/ int ToWidthCompat(int i);
                static /*0xe0abf0*/ bool HasSpecialWeight(char c);
                static /*0xe0ac60*/ bool IsHalfWidthKana(char c);
                static /*0xe0ac80*/ bool IsHiragana(char c);
                static /*0xe0ae20*/ bool IsJapaneseSmallLetter(char c);
                static /*0xe0bd00*/ bool get_IsReady();
                static /*0xe0aa10*/ nint GetResource(string name);
                static /*0xe0b6c0*/ uint UInt32FromBytePtr(byte* raw, uint idx);
                static /*0xe0a8a0*/ void FillCJK(string culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref byte* lv2Table);
                static /*0xe0a190*/ void FillCJKCore(string culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer cjkLv2Indexer, ref byte* lv2Table);

                class <>c
                {
                    static /*0x0*/ Mono.Globalization.Unicode.MSCompatUnicodeTable.<> <>9;
                    static /*0x8*/ System.Comparison<Mono.Globalization.Unicode.Level2Map> <>9__17_0;

                    static /*0xe258c0*/ <>c();
                    /*0x32f970*/ <>c();
                    /*0xe25890*/ int <BuildTailoringTables>b__17_0(Mono.Globalization.Unicode.Level2Map a, Mono.Globalization.Unicode.Level2Map b);
                }
            }

            class MSCompatUnicodeTableUtil
            {
                static /*0x0*/ Mono.Globalization.Unicode.CodePointIndexer Ignorable;
                static /*0x8*/ Mono.Globalization.Unicode.CodePointIndexer Category;
                static /*0x10*/ Mono.Globalization.Unicode.CodePointIndexer Level1;
                static /*0x18*/ Mono.Globalization.Unicode.CodePointIndexer Level2;
                static /*0x20*/ Mono.Globalization.Unicode.CodePointIndexer Level3;
                static /*0x28*/ Mono.Globalization.Unicode.CodePointIndexer CjkCHS;
                static /*0x30*/ Mono.Globalization.Unicode.CodePointIndexer Cjk;

                static /*0xe09420*/ MSCompatUnicodeTableUtil();
            }

            class NormalizationTableUtil
            {
                static /*0x0*/ Mono.Globalization.Unicode.CodePointIndexer Prop;
                static /*0x8*/ Mono.Globalization.Unicode.CodePointIndexer Map;
                static /*0x10*/ Mono.Globalization.Unicode.CodePointIndexer Combining;
                static /*0x18*/ Mono.Globalization.Unicode.CodePointIndexer Composite;
                static /*0x20*/ Mono.Globalization.Unicode.CodePointIndexer Helper;

                static /*0xe0be40*/ NormalizationTableUtil();
                static /*0xe0bdd0*/ int PropIdx(int cp);
                static /*0xe0bd60*/ int MapIdx(int cp);
            }

            class SimpleCollator : System.Globalization.ISimpleCollator
            {
                static /*0x0*/ Mono.Globalization.Unicode.SimpleCollator invariant;
                /*0x10*/ System.Globalization.TextInfo textInfo;
                /*0x18*/ Mono.Globalization.Unicode.CodePointIndexer cjkIndexer;
                /*0x20*/ Mono.Globalization.Unicode.Contraction[] contractions;
                /*0x28*/ Mono.Globalization.Unicode.Level2Map[] level2Maps;
                /*0x30*/ byte[] unsafeFlags;
                /*0x38*/ byte* cjkCatTable;
                /*0x40*/ byte* cjkLv1Table;
                /*0x48*/ byte* cjkLv2Table;
                /*0x50*/ Mono.Globalization.Unicode.CodePointIndexer cjkLv2Indexer;
                /*0x58*/ int lcid;
                /*0x5c*/ bool frenchSort;

                static /*0xe16cc0*/ SimpleCollator();
                static /*0xe13640*/ System.Globalization.CultureInfo GetNeutralCulture(System.Globalization.CultureInfo info);
                static /*0xe14970*/ bool IsHalfKana(int cp, System.Globalization.CompareOptions opt);
                static /*0xe16ca0*/ byte ToDashTypeValue(Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, System.Globalization.CompareOptions opt);
                static /*0xe149f0*/ bool IsIgnorable(int i, System.Globalization.CompareOptions opt);
                /*0xe16d60*/ SimpleCollator(System.Globalization.CultureInfo culture);
                /*0xe16b30*/ void SetCJKTable(System.Globalization.CultureInfo culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref byte* lv2Table);
                /*0xe114c0*/ byte Category(int cp);
                /*0xe157b0*/ byte Level1(int cp);
                /*0xe15850*/ byte Level2(int cp, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext);
                /*0xe134a0*/ Mono.Globalization.Unicode.Contraction GetContraction(string s, int start, int end);
                /*0xe13350*/ Mono.Globalization.Unicode.Contraction GetContraction(string s, int start, int end, Mono.Globalization.Unicode.Contraction[] clist);
                /*0xe13e50*/ Mono.Globalization.Unicode.Contraction GetTailContraction(string s, int start, int end);
                /*0xe13c40*/ Mono.Globalization.Unicode.Contraction GetTailContraction(string s, int start, int end, Mono.Globalization.Unicode.Contraction[] clist);
                /*0xe130a0*/ int FilterOptions(int i, System.Globalization.CompareOptions opt);
                /*0xe13580*/ Mono.Globalization.Unicode.SimpleCollator.ExtenderType GetExtenderType(int i);
                /*0xe12e90*/ int FilterExtender(int i, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, System.Globalization.CompareOptions opt);
                /*0xe14c40*/ bool IsSafe(int i);
                /*0xe13b50*/ System.Globalization.SortKey GetSortKey(string s, System.Globalization.CompareOptions options);
                /*0xe136e0*/ System.Globalization.SortKey GetSortKey(string s, int start, int length, System.Globalization.CompareOptions options);
                /*0xe137e0*/ void GetSortKey(string s, int start, int end, Mono.Globalization.Unicode.SortKeyBuffer buf, System.Globalization.CompareOptions opt);
                /*0xe12870*/ void FillSortKeyRaw(int i, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, Mono.Globalization.Unicode.SortKeyBuffer buf, System.Globalization.CompareOptions opt);
                /*0xe12dc0*/ void FillSurrogateSortKeyRaw(int i, Mono.Globalization.Unicode.SortKeyBuffer buf);
                /*0xe16c90*/ int System.Globalization.ISimpleCollator.Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, System.Globalization.CompareOptions options);
                /*0xe12770*/ int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, System.Globalization.CompareOptions options);
                /*0xe11560*/ void ClearBuffer(byte* buffer, int size);
                /*0xe115a0*/ int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, ref bool targetConsumed, ref bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0xe11580*/ int CompareFlagPair(bool b1, bool b2);
                /*0xe14b00*/ bool IsPrefix(string src, string target, System.Globalization.CompareOptions opt);
                /*0xe14b40*/ bool IsPrefix(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0xe14a80*/ bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0xe14d70*/ bool IsSuffix(string src, string target, System.Globalization.CompareOptions opt);
                /*0xe14cb0*/ bool IsSuffix(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0xe169f0*/ int QuickIndexOf(string s, string target, int start, int length, ref bool testWasUnable);
                /*0xe146a0*/ int IndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0xe13f30*/ int IndexOfOrdinal(string s, string target, int start, int length);
                /*0xe13ff0*/ int IndexOfOrdinal(string s, char target, int start, int length);
                /*0xe14080*/ int IndexOfSortKey(string s, int start, int length, byte* sortkey, char target, int ti, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0xe14140*/ int IndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0xe15600*/ int LastIndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0xe14e30*/ int LastIndexOfOrdinal(string s, string target, int start, int length);
                /*0xe14fb0*/ int LastIndexOfSortKey(string s, int start, int orgStart, int length, byte* sortkey, int ti, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0xe15080*/ int LastIndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0xe16630*/ bool MatchesForward(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0xe16220*/ bool MatchesForwardCore(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, ref Mono.Globalization.Unicode.Contraction ct, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0xe16820*/ bool MatchesPrimitive(System.Globalization.CompareOptions opt, byte* source, int si, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, byte* target, int ti, bool noLv4);
                /*0xe16020*/ bool MatchesBackward(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0xe159e0*/ bool MatchesBackwardCore(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, ref Mono.Globalization.Unicode.Contraction ct, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);

                struct Context
                {
                    /*0x10*/ System.Globalization.CompareOptions Option;
                    /*0x18*/ byte* NeverMatchFlags;
                    /*0x20*/ byte* AlwaysMatchFlags;
                    /*0x28*/ byte* Buffer1;
                    /*0x30*/ byte* Buffer2;
                    /*0x38*/ int PrevCode;
                    /*0x40*/ byte* PrevSortKey;

                    /*0xe07dd0*/ Context(System.Globalization.CompareOptions opt, byte* alwaysMatchFlags, byte* neverMatchFlags, byte* buffer1, byte* buffer2, byte* prev1);
                }

                struct PreviousInfo
                {
                    /*0x10*/ int Code;
                    /*0x18*/ byte* SortKey;

                    /*0xe0c790*/ PreviousInfo(bool dummy);
                }

                struct Escape
                {
                    /*0x10*/ string Source;
                    /*0x18*/ int Index;
                    /*0x1c*/ int Start;
                    /*0x20*/ int End;
                    /*0x24*/ int Optional;
                }

                enum ExtenderType
                {
                    None = 0,
                    Simple = 1,
                    Voiced = 2,
                    Conditional = 3,
                    Buggy = 4,
                }
            }

            class SortKeyBuffer
            {
                /*0x10*/ byte[] l1b;
                /*0x18*/ byte[] l2b;
                /*0x20*/ byte[] l3b;
                /*0x28*/ byte[] l4sb;
                /*0x30*/ byte[] l4tb;
                /*0x38*/ byte[] l4kb;
                /*0x40*/ byte[] l4wb;
                /*0x48*/ byte[] l5b;
                /*0x50*/ string source;
                /*0x58*/ int l1;
                /*0x5c*/ int l2;
                /*0x60*/ int l3;
                /*0x64*/ int l4s;
                /*0x68*/ int l4t;
                /*0x6c*/ int l4k;
                /*0x70*/ int l4w;
                /*0x74*/ int l5;
                /*0x78*/ int lcid;
                /*0x7c*/ System.Globalization.CompareOptions options;
                /*0x80*/ bool processLevel2;
                /*0x81*/ bool frenchSort;
                /*0x82*/ bool frenchSorted;

                /*0x32f970*/ SortKeyBuffer(int lcid);
                /*0xe1ac10*/ void Reset();
                /*0xe1aa10*/ void Initialize(System.Globalization.CompareOptions options, int lcid, string s, bool frenchSort);
                /*0xe19e80*/ void AppendCJKExtension(byte lv1msb, byte lv1lsb);
                /*0xe19f50*/ void AppendKana(byte category, byte lv1, byte lv2, byte lv3, bool isSmallKana, byte markType, bool isKatakana, bool isHalfWidth);
                /*0xe1a100*/ void AppendNormal(byte category, byte lv1, byte lv2, byte lv3);
                /*0xe1a020*/ void AppendLevel5(byte category, byte lv1);
                /*0xe19dc0*/ void AppendBufferPrimitive(byte value, ref byte[] buf, ref int bidx);
                /*0xe1a340*/ System.Globalization.SortKey GetResultAndReset();
                /*0xe1a2f0*/ int GetOptimizedLength(byte[] data, int len, byte defaultValue);
                /*0xe1a370*/ System.Globalization.SortKey GetResult();
            }
        }
    }

    namespace Security
    {
        class BitConverterLE
        {
            static /*0xe078b0*/ byte[] GetUIntBytes(byte* bytes);
            static /*0xe07930*/ byte[] GetULongBytes(byte* bytes);
            static /*0xe07750*/ byte[] GetBytes(float value);
            static /*0xe077e0*/ byte[] GetBytes(double value);
            static /*0xe07ad0*/ void UIntFromBytes(byte* dst, byte[] src, int startIndex);
            static /*0xe07b40*/ void ULongFromBytes(byte* dst, byte[] src, int startIndex);
            static /*0xe07a50*/ float ToSingle(byte[] value, int startIndex);
            static /*0xe079f0*/ double ToDouble(byte[] value, int startIndex);
        }
    }
}

namespace Microsoft
{
    namespace Win32
    {
        class Registry
        {
            static /*0x0*/ Microsoft.Win32.RegistryKey CurrentUser;
            static /*0x8*/ Microsoft.Win32.RegistryKey LocalMachine;
            static /*0x10*/ Microsoft.Win32.RegistryKey ClassesRoot;
            static /*0x18*/ Microsoft.Win32.RegistryKey Users;
            static /*0x20*/ Microsoft.Win32.RegistryKey PerformanceData;
            static /*0x28*/ Microsoft.Win32.RegistryKey CurrentConfig;
            static /*0x30*/ Microsoft.Win32.RegistryKey DynData;

            static /*0xe0fc70*/ Registry();
        }

        enum RegistryHive
        {
            ClassesRoot = -2147483648,
            CurrentUser = -2147483647,
            LocalMachine = -2147483646,
            Users = -2147483645,
            PerformanceData = -2147483644,
            CurrentConfig = -2147483643,
            DynData = -2147483642,
        }

        class RegistryKey : System.MarshalByRefObject, System.IDisposable
        {
            static /*0x0*/ nint HKEY_CLASSES_ROOT;
            static /*0x8*/ nint HKEY_CURRENT_USER;
            static /*0x10*/ nint HKEY_LOCAL_MACHINE;
            static /*0x18*/ nint HKEY_USERS;
            static /*0x20*/ nint HKEY_PERFORMANCE_DATA;
            static /*0x28*/ nint HKEY_CURRENT_CONFIG;
            static /*0x30*/ nint HKEY_DYN_DATA;
            static /*0x38*/ string[] s_hkeyNames;
            /*0x18*/ Microsoft.Win32.SafeHandles.SafeRegistryHandle _hkey;
            /*0x20*/ string _keyName;
            /*0x28*/ bool _remoteKey;
            /*0x2c*/ Microsoft.Win32.RegistryKey.StateFlags _state;
            /*0x30*/ Microsoft.Win32.RegistryKeyPermissionCheck _checkMode;
            /*0x34*/ Microsoft.Win32.RegistryView _regView;

            static /*0xe0f800*/ RegistryKey();
            static /*0xe0ecf0*/ Microsoft.Win32.RegistryKey OpenBaseKeyCore(Microsoft.Win32.RegistryHive hKeyHive, Microsoft.Win32.RegistryView view);
            static /*0xe0cd60*/ int GetRegistryKeyAccess(bool isWritable);
            static /*0xe0ee60*/ Microsoft.Win32.RegistryKey OpenBaseKey(Microsoft.Win32.RegistryHive hKey, Microsoft.Win32.RegistryView view);
            static /*0xe0ca00*/ string FixupName(string name);
            static /*0xe0cc20*/ void FixupPath(System.Text.StringBuilder path);
            static /*0xe0f1b0*/ void ValidateKeyName(string name);
            static /*0xe0f600*/ void ValidateKeyView(Microsoft.Win32.RegistryView view);
            /*0xe0faf0*/ RegistryKey(Microsoft.Win32.SafeHandles.SafeRegistryHandle hkey, bool writable, bool systemkey, bool remoteKey, bool isPerfData, Microsoft.Win32.RegistryView view);
            /*0xe0c820*/ void ClosePerfDataKey();
            /*0xe0e600*/ Microsoft.Win32.RegistryKey InternalOpenSubKeyCore(string name, bool writable, bool throwOnPermissionFailure);
            /*0xe0e910*/ int InternalSubKeyCountCore();
            /*0xe0cf20*/ string[] InternalGetSubKeyNamesCore(int subkeys);
            /*0xe0d4e0*/ object InternalGetValueCore(string name, object defaultValue, bool doNotExpand);
            /*0xe0f660*/ void Win32Error(int errorCode, string str);
            /*0xe0c880*/ void Dispose();
            /*0xe0f060*/ Microsoft.Win32.RegistryKey OpenSubKey(string name, bool writable);
            /*0xe0eab0*/ int InternalSubKeyCount();
            /*0xe0cd80*/ string[] GetSubKeyNames();
            /*0xe0d260*/ string[] InternalGetSubKeyNames();
            /*0xe0cdf0*/ object GetValue(string name, object defaultValue, Microsoft.Win32.RegistryValueOptions options);
            /*0xe0e550*/ object InternalGetValue(string name, object defaultValue, bool doNotExpand, bool checkSecurity);
            /*0xe0f140*/ string ToString();
            /*0xe0c9a0*/ void EnsureNotDisposed();
            /*0xe0cd90*/ Microsoft.Win32.RegistryKeyPermissionCheck GetSubKeyPermissionCheck(bool subkeyWritable);
            /*0xe0ecd0*/ bool IsSystemKey();
            /*0xe0ecb0*/ bool IsPerfDataKey();

            enum StateFlags
            {
                Dirty = 1,
                SystemKey = 2,
                WriteAccess = 4,
                PerfData = 8,
            }
        }

        enum RegistryKeyPermissionCheck
        {
            Default = 0,
            ReadSubTree = 1,
            ReadWriteSubTree = 2,
        }

        enum RegistryValueOptions
        {
            None = 0,
            DoNotExpandEnvironmentNames = 1,
        }

        enum RegistryView
        {
            Default = 0,
            Registry64 = 256,
            Registry32 = 512,
        }

        class ThrowHelper
        {
            static /*0xe25730*/ void ThrowArgumentException(string msg, string argument);
            static /*0xe25790*/ void ThrowArgumentNullException(string argument);
            static /*0xe25840*/ void ThrowSecurityException(string msg);
            static /*0xe257e0*/ void ThrowObjectDisposedException(string objectName, string msg);
        }

        class Win32Native
        {
            static /*0xe25b50*/ string GetMessage(int hr);
            static /*0xe25ba0*/ int MakeHRFromErrorCode(int errorCode);
        }

        namespace SafeHandles
        {
            class SafeLibraryHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0xe11280*/ SafeLibraryHandle();
                /*0xe11300*/ bool ReleaseHandle();
            }

            class SafeRegistryHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0xe11280*/ SafeRegistryHandle();
                /*0xe11200*/ SafeRegistryHandle(nint preexistingHandle, bool ownsHandle);
                /*0xe11390*/ bool ReleaseHandle();
            }

            class SafeFileHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0xe11200*/ SafeFileHandle(nint preexistingHandle, bool ownsHandle);
                /*0xe11190*/ bool ReleaseHandle();
            }

            class SafeFindHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0xe11280*/ SafeFindHandle();
                /*0xe11230*/ bool ReleaseHandle();
            }

            class SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0xe11280*/ SafeWaitHandle();
                /*0xe11200*/ SafeWaitHandle(nint existingHandle, bool ownsHandle);
                /*0xe114a0*/ bool ReleaseHandle();
            }

            class SafeHandleZeroOrMinusOneIsInvalid : System.Runtime.InteropServices.SafeHandle
            {
                /*0xe11290*/ SafeHandleZeroOrMinusOneIsInvalid(bool ownsHandle);
                /*0xe112a0*/ bool get_IsInvalid();
            }
        }
    }
}

namespace Internal
{
    namespace Threading
    {
        namespace Tasks
        {
            namespace Tracing
            {
                class TaskTrace
                {
                    static /*0x0*/ Internal.Runtime.Augments.TaskTraceCallbacks s_callbacks;

                    static /*0xe256d0*/ bool get_Enabled();
                    static /*0xe25550*/ void TaskWaitBegin_Asynchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                    static /*0xe255d0*/ void TaskWaitBegin_Synchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                    static /*0xe25650*/ void TaskWaitEnd(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                    static /*0xe254b0*/ void TaskScheduled(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID, int CreatingTaskID, int TaskCreationOptions);
                }
            }
        }
    }

    namespace Runtime
    {
        namespace Augments
        {
            enum AsyncStatus
            {
                Started = 0,
                Completed = 1,
                Canceled = 2,
                Error = 3,
            }

            class TaskTraceCallbacks
            {
                /*0x17cb40*/ bool get_Enabled();
                void TaskWaitBegin_Asynchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                void TaskWaitBegin_Synchronous(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                void TaskWaitEnd(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID);
                void TaskScheduled(int OriginatingTaskSchedulerID, int OriginatingTaskID, int TaskID, int CreatingTaskID, int TaskCreationOptions);
            }

            class RuntimeAugments
            {
                static /*0x0*/ Internal.Runtime.Augments.ReflectionExecutionDomainCallbacks s_reflectionExecutionDomainCallbacks;

                static /*0xe0fe80*/ RuntimeAugments();
                static /*0xe0fe50*/ void ReportUnhandledException(System.Exception exception);
                static /*0xe0ff00*/ Internal.Runtime.Augments.ReflectionExecutionDomainCallbacks get_Callbacks();
            }

            class ReflectionExecutionDomainCallbacks
            {
                /*0x32f970*/ ReflectionExecutionDomainCallbacks();
                /*0xe0c7d0*/ System.Exception CreateMissingMetadataException(System.Type attributeType);
            }

            class RuntimeThread
            {
                static /*0x0*/ int OptimalMaxSpinWaitsPerSpinIteration;
                /*0x10*/ System.Threading.Thread thread;

                static /*0xe10990*/ RuntimeThread();
                static /*0xe10890*/ Internal.Runtime.Augments.RuntimeThread Create(System.Threading.ParameterizedThreadStart start, int maxStackSize);
                static /*0xe10930*/ void Sleep(int millisecondsTimeout);
                static /*0xe10980*/ bool Yield();
                static /*0xe10940*/ bool SpinWait(int iterations);
                static /*0x6bba80*/ int GetCurrentProcessorId();
                /*0x49b490*/ RuntimeThread(System.Threading.Thread t);
                /*0xe109d0*/ void set_IsBackground(bool value);
                /*0xe10960*/ void Start(object state);
            }
        }
    }
}

namespace System
{
    class String : System.IComparable, System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<char>, System.IComparable<string>, System.IEquatable<string>, System.IConvertible, System.ICloneable
    {
        static int StackallocIntBufferSizeLimit = 128;
        static int PROBABILISTICMAP_BLOCK_INDEX_MASK = 7;
        static int PROBABILISTICMAP_BLOCK_INDEX_SHIFT = 3;
        static int PROBABILISTICMAP_SIZE = 8;
        static /*0x0*/ string Empty;
        /*0x10*/ int _stringLength;
        /*0x14*/ char _firstChar;

        static /*0xe1e5e0*/ bool EqualsHelper(string strA, string strB);
        static /*0xe1ae10*/ int CompareOrdinalHelper(string strA, int indexA, int countA, string strB, int indexB, int countB);
        static /*0xe1aca0*/ int CompareOrdinalHelper(string strA, string strB);
        static /*0xe1b8c0*/ int Compare(string strA, string strB, System.StringComparison comparisonType);
        static /*0xe1bd20*/ int Compare(string strA, string strB, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);
        static /*0xe1bc60*/ int Compare(string strA, string strB, bool ignoreCase, System.Globalization.CultureInfo culture);
        static /*0xe1b3e0*/ int Compare(string strA, int indexA, string strB, int indexB, int length, System.StringComparison comparisonType);
        static /*0xe1b160*/ int CompareOrdinal(string strA, string strB);
        static /*0xe1ae60*/ int CompareOrdinal(System.ReadOnlySpan<char> strA, System.ReadOnlySpan<char> strB);
        static /*0xe1af00*/ int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length);
        static /*0xe1e610*/ bool Equals(string a, string b);
        static /*0xe1e9f0*/ bool Equals(string a, string b, System.StringComparison comparisonType);
        static /*0xe1e610*/ bool op_Equality(string a, string b);
        static /*0xe251a0*/ bool op_Inequality(string a, string b);
        static /*0xe1ac80*/ void CheckStringComparison(System.StringComparison comparisonType);
        static /*0xe1ed50*/ void FillStringChecked(string dest, int destPos, string src);
        static /*0xe1c340*/ string Concat(object arg0, object arg1);
        static /*0xe1c610*/ string Concat(object arg0, object arg1, object arg2);
        static /*0xe1c710*/ string Concat(string str0, string str1);
        static /*0xe1c3f0*/ string Concat(string str0, string str1, string str2);
        static /*0xe1bde0*/ string Concat(string str0, string str1, string str2, string str3);
        static /*0xe1c070*/ string Concat(string[] values);
        static /*0xe1f490*/ string Format(string format, object arg0);
        static /*0xe1f740*/ string Format(string format, object arg0, object arg1);
        static /*0xe1f350*/ string Format(string format, object arg0, object arg1, object arg2);
        static /*0xe1f1b0*/ string Format(string format, object[] args);
        static /*0xe1ef00*/ string Format(System.IFormatProvider provider, string format, object arg0);
        static /*0xe1f050*/ string Format(System.IFormatProvider provider, string format, object arg0, object arg1);
        static /*0xe1f5d0*/ string Format(System.IFormatProvider provider, string format, object arg0, object arg1, object arg2);
        static /*0xe10f80*/ string Format(System.IFormatProvider provider, string format, object[] args);
        static /*0xe1ede0*/ string FormatHelper(System.IFormatProvider provider, string format, System.ParamsArray args);
        static /*0xe21000*/ string Join(string separator, string[] value);
        static /*0xe210e0*/ string Join(string separator, string[] value, int startIndex, int count);
        static /*0xe20af0*/ string JoinCore(char* separator, int separatorLength, string[] value, int startIndex, int count);
        static /*0xe20740*/ void InitializeProbabilisticMap(uint* charMap, System.ReadOnlySpan<char> anyOf);
        static /*0xe1ac30*/ bool ArrayContains(char searchChar, char[] anyOf);
        static /*0xe20a10*/ bool IsCharBitSet(uint* charMap, byte value);
        static /*0xe22e40*/ void SetCharBit(uint* charMap, byte value);
        static /*0xe1d920*/ string Ctor(char[] value);
        static /*0xe1df40*/ string Ctor(char[] value, int startIndex, int length);
        static /*0xe1d6e0*/ string Ctor(char* ptr);
        static /*0xe1dd10*/ string Ctor(char* ptr, int startIndex, int length);
        static /*0xe1d490*/ string Ctor(sbyte* value, int startIndex, int length);
        static /*0xe1cdc0*/ string CreateStringForSByteConstructor(byte* pb, int numBytes);
        static /*0xe1dad0*/ string Ctor(sbyte* value, int startIndex, int length, System.Text.Encoding enc);
        static /*0xe1d9c0*/ string Ctor(char c, int count);
        static /*0xe1d860*/ string Ctor(System.ReadOnlySpan<char> value);
        static /*0x2a5510*/ string Create<TState>(int length, TState state, System.Buffers.SpanAction<char, TState> action);
        static /*0xe25120*/ System.ReadOnlySpan<char> op_Implicit(string value);
        static /*0xe1ccf0*/ string Copy(string str);
        static /*0xe20a30*/ bool IsNullOrEmpty(string value);
        static /*0xe20a40*/ bool IsNullOrWhiteSpace(string value);
        static /*0xe1ce40*/ string CreateStringFromEncoding(byte* bytes, int byteLength, System.Text.Encoding encoding);
        static /*0xe1cd90*/ string CreateFromChar(char c);
        static /*0x625790*/ void wstrcpy(char* dmem, char* smem, int charCount);
        static /*0xe251f0*/ int wcslen(char* ptr);
        static /*0xe1ed40*/ string FastAllocateString(int length);
        static /*0xe25030*/ void memset(byte* dest, int val, int len);
        static /*0xe25020*/ void memcpy(byte* dest, byte* src, int size);
        static /*0xe24ea0*/ void bzero(byte* dest, int len);
        static /*0xe24e60*/ void bzero_aligned_1(byte* dest, int len);
        static /*0xe24e70*/ void bzero_aligned_2(byte* dest, int len);
        static /*0xe24e80*/ void bzero_aligned_4(byte* dest, int len);
        static /*0xe24e90*/ void bzero_aligned_8(byte* dest, int len);
        static /*0xe24fe0*/ void memcpy_aligned_1(byte* dest, byte* src, int size);
        static /*0xe24ff0*/ void memcpy_aligned_2(byte* dest, byte* src, int size);
        static /*0xe25000*/ void memcpy_aligned_4(byte* dest, byte* src, int size);
        static /*0xe25010*/ void memcpy_aligned_8(byte* dest, byte* src, int size);
        /*0xe24e30*/ String(char[] value);
        /*0xe24e30*/ String(char[] value, int startIndex, int length);
        /*0xe24e30*/ String(char* value);
        /*0xe24e30*/ String(char* value, int startIndex, int length);
        /*0xe24e30*/ String(sbyte* value, int startIndex, int length);
        /*0xe24e30*/ String(sbyte* value, int startIndex, int length, System.Text.Encoding enc);
        /*0xe24e30*/ String(char c, int count);
        /*0xe24e40*/ String(System.ReadOnlySpan<char> value);
        /*0xe1b280*/ int CompareTo(object value);
        /*0xe1b1a0*/ int CompareTo(string strB);
        /*0xe1e4d0*/ bool EndsWith(string value);
        /*0xe1e180*/ bool EndsWith(string value, System.StringComparison comparisonType);
        /*0xe1e650*/ bool Equals(object obj);
        /*0xe1ed10*/ bool Equals(string value);
        /*0xe1e6e0*/ bool Equals(string value, System.StringComparison comparisonType);
        /*0xe1f880*/ int GetHashCode();
        /*0xe1f880*/ int GetLegacyNonRandomizedHashCode();
        /*0xe23bd0*/ bool StartsWith(string value);
        /*0xe23860*/ bool StartsWith(string value, System.StringComparison comparisonType);
        /*0xe20810*/ string Insert(int startIndex, string value);
        /*0xe221d0*/ string PadLeft(int totalWidth, char paddingChar);
        /*0xe222d0*/ string PadRight(int totalWidth, char paddingChar);
        /*0xe223d0*/ string Remove(int startIndex, int count);
        /*0xe225f0*/ string Remove(int startIndex);
        /*0xe22aa0*/ string Replace(char oldChar, char newChar);
        /*0xe22b90*/ string Replace(string oldValue, string newValue);
        /*0xe226d0*/ string ReplaceHelper(int oldValueLength, string newValue, System.ReadOnlySpan<int> indices);
        /*0xe23790*/ string[] Split(char separator, System.StringSplitOptions options);
        /*0xe23680*/ string[] Split(char[] separator);
        /*0xe23700*/ string[] Split(char[] separator, System.StringSplitOptions options);
        /*0xe22e60*/ string[] SplitInternal(System.ReadOnlySpan<char> separators, int count, System.StringSplitOptions options);
        /*0xe23160*/ string[] SplitKeepEmptyEntries(System.ReadOnlySpan<int> sepList, System.ReadOnlySpan<int> lengthList, int defaultLength, int count);
        /*0xe23390*/ string[] SplitOmitEmptyEntries(System.ReadOnlySpan<int> sepList, System.ReadOnlySpan<int> lengthList, int defaultLength, int count);
        /*0xe21e40*/ void MakeSeparatorList(System.ReadOnlySpan<char> separators, ref System.Collections.Generic.ValueListBuilder<int> sepListBuilder);
        /*0xe23ce0*/ string Substring(int startIndex);
        /*0xe23cf0*/ string Substring(int startIndex, int length);
        /*0xe209a0*/ string InternalSubString(int startIndex, int length);
        /*0xe24740*/ string ToLower();
        /*0xe247d0*/ string ToLower(System.Globalization.CultureInfo culture);
        /*0xe246b0*/ string ToLowerInvariant();
        /*0xe24900*/ string ToUpper(System.Globalization.CultureInfo culture);
        /*0xe24870*/ string ToUpperInvariant();
        /*0xe24df0*/ string Trim();
        /*0xe24e00*/ string Trim(char trimChar);
        /*0xe24d90*/ string Trim(char[] trimChars);
        /*0xe24bd0*/ string TrimStart(char trimChar);
        /*0xe249a0*/ string TrimEnd();
        /*0xe24a10*/ string TrimEnd(char trimChar);
        /*0xe249b0*/ string TrimEnd(char[] trimChars);
        /*0xe24c00*/ string TrimWhiteSpaceHelper(System.String.TrimType trimType);
        /*0xe24a40*/ string TrimHelper(char* trimChars, int trimCharsLength, System.String.TrimType trimType);
        /*0xe1d3f0*/ string CreateTrimmedString(int start, int end);
        /*0xe1c8b0*/ bool Contains(string value);
        /*0xe1ca80*/ bool Contains(char value);
        /*0xe20620*/ int IndexOf(char value);
        /*0xe20190*/ int IndexOf(char value, int startIndex);
        /*0xe20630*/ int IndexOf(char value, int startIndex, int count);
        /*0xe1fc90*/ int IndexOfAny(char[] anyOf);
        /*0xe1f8f0*/ int IndexOfAny(char[] anyOf, int startIndex);
        /*0xe1f910*/ int IndexOfAny(char[] anyOf, int startIndex, int count);
        /*0xe1fd00*/ int IndexOfAny(char value1, char value2, int startIndex, int count);
        /*0xe1fcb0*/ int IndexOfAny(char value1, char value2, char value3, int startIndex, int count);
        /*0xe1fd70*/ int IndexOfCharArray(char[] anyOf, int startIndex, int count);
        /*0xe20600*/ int IndexOf(string value);
        /*0xe201e0*/ int IndexOf(string value, System.StringComparison comparisonType);
        /*0xe201b0*/ int IndexOf(string value, int startIndex, System.StringComparison comparisonType);
        /*0xe20210*/ int IndexOf(string value, int startIndex, int count, System.StringComparison comparisonType);
        /*0xe21cd0*/ int LastIndexOf(char value);
        /*0xe21c80*/ int LastIndexOf(char value, int startIndex);
        /*0xe21d10*/ int LastIndexOf(char value, int startIndex, int count);
        /*0xe21180*/ int LastIndexOfAny(char[] anyOf);
        /*0xe21430*/ int LastIndexOfAny(char[] anyOf, int startIndex);
        /*0xe211b0*/ int LastIndexOfAny(char[] anyOf, int startIndex, int count);
        /*0xe21450*/ int LastIndexOfCharArray(char[] anyOf, int startIndex, int count);
        /*0xe21ce0*/ int LastIndexOf(string value);
        /*0xe21ca0*/ int LastIndexOf(string value, System.StringComparison comparisonType);
        /*0xe21850*/ int LastIndexOf(string value, int startIndex, int count, System.StringComparison comparisonType);
        /*0x621ca0*/ object Clone();
        /*0xe1caa0*/ void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count);
        /*0xe245b0*/ char[] ToCharArray();
        /*0xe1f8d0*/ ref char GetRawStringData();
        /*0x621ca0*/ string ToString();
        /*0x621ca0*/ string ToString(System.IFormatProvider provider);
        /*0xe23f20*/ System.Collections.Generic.IEnumerator<char> System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator();
        /*0xe23f80*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
        /*0xe1f8e0*/ System.TypeCode GetTypeCode();
        /*0xe23fe0*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xe240a0*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xe24360*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xe24040*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xe24240*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xe24490*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xe242a0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xe244f0*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xe24300*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xe24550*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xe243c0*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xe241e0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xe24160*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xe24100*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xe24420*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
        /*0xe22170*/ string Normalize(System.Text.NormalizationForm normalizationForm);
        /*0x417e30*/ int get_Length();
        /*0xe200a0*/ int IndexOfUnchecked(string value, int startIndex, int count);
        /*0xe1feb0*/ int IndexOfUncheckedIgnoreCase(string value, int startIndex, int count);
        /*0xe21770*/ int LastIndexOfUnchecked(string value, int startIndex, int count);
        /*0xe21590*/ int LastIndexOfUncheckedIgnoreCase(string value, int startIndex, int count);
        /*0xe23810*/ bool StartsWithOrdinalUnchecked(string value);
        /*0xe1d2f0*/ string CreateString(sbyte* value, int startIndex, int length);
        /*0xe1d010*/ string CreateString(char* value);
        /*0xe1d180*/ string CreateString(char* value, int startIndex, int length);
        /*0xe1d310*/ string CreateString(char[] val, int startIndex, int length);
        /*0xe1d330*/ string CreateString(char[] val);
        /*0xe1d1d0*/ string CreateString(char c, int count);
        /*0xe1d1a0*/ string CreateString(sbyte* value, int startIndex, int length, System.Text.Encoding enc);
        /*0xe1cf30*/ string CreateString(System.ReadOnlySpan<char> value);
        /*0xe24f90*/ char get_Chars(int index);

        enum TrimType
        {
            Head = 0,
            Tail = 1,
            Both = 2,
        }

        struct ProbabilisticMap
        {
        }
    }

    class TimeZoneInfo : System.IEquatable<System.TimeZoneInfo>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
    {
        static /*0x0*/ System.Lazy<bool> lazyHaveRegistry;
        static /*0x8*/ System.TimeZoneInfo s_utcTimeZone;
        static /*0x10*/ System.TimeZoneInfo.CachedData s_cachedData;
        static /*0x18*/ System.DateTime s_maxDateOnly;
        static /*0x20*/ System.DateTime s_minDateOnly;
        static /*0x28*/ System.TimeSpan MaxOffset;
        static /*0x30*/ System.TimeSpan MinOffset;
        /*0x10*/ string _id;
        /*0x18*/ string _displayName;
        /*0x20*/ string _standardDisplayName;
        /*0x28*/ string _daylightDisplayName;
        /*0x30*/ System.TimeSpan _baseUtcOffset;
        /*0x38*/ bool _supportsDaylightSavingTime;
        /*0x40*/ System.TimeZoneInfo.AdjustmentRule[] _adjustmentRules;

        static /*0xe46620*/ TimeZoneInfo();
        static /*0xe41a40*/ void PopulateAllSystemTimeZones(System.TimeZoneInfo.CachedData cachedData);
        static /*0xe41890*/ void PopulateAllSystemTimeZonesFromRegistry(System.TimeZoneInfo.CachedData cachedData);
        static /*0xe3a0f0*/ bool CheckDaylightSavingTimeNotSupported(ref Interop.Kernel32.TIME_ZONE_INFORMATION timeZone);
        static /*0xe3bcf0*/ System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRuleFromTimeZoneInformation(ref Interop.Kernel32.REG_TZI_FORMAT timeZoneInformation, System.DateTime startDate, System.DateTime endDate, int defaultBaseUtcOffset);
        static /*0xe3c390*/ string FindIdFromTimeZoneInformation(ref Interop.Kernel32.TIME_ZONE_INFORMATION timeZone, ref bool dstDisabled);
        static /*0xe3f360*/ System.TimeZoneInfo GetLocalTimeZone(System.TimeZoneInfo.CachedData cachedData);
        static /*0xe3ee90*/ System.TimeZoneInfo GetLocalTimeZoneFromWin32Data(ref Interop.Kernel32.TIME_ZONE_INFORMATION timeZoneInformation, bool dstDisabled);
        static /*0xe3ca90*/ System.TimeSpan GetDateTimeNowUtcOffsetFromUtc(System.DateTime time, ref bool isAmbiguousLocalDst);
        static /*0xe42d20*/ bool TransitionTimeFromTimeZoneInformation(ref Interop.Kernel32.REG_TZI_FORMAT timeZoneInformation, ref System.TimeZoneInfo.TransitionTime transitionTime, bool readStartDate);
        static /*0xe43cb0*/ bool TryCreateAdjustmentRules(string id, ref Interop.Kernel32.REG_TZI_FORMAT defaultTimeZoneInformation, ref System.TimeZoneInfo.AdjustmentRule[] rules, ref System.Exception e, int defaultBaseUtcOffset);
        static /*0xe45540*/ bool TryGetTimeZoneEntryFromRegistry(Microsoft.Win32.RegistryKey key, string name, ref Interop.Kernel32.REG_TZI_FORMAT dtzi);
        static /*0xe437e0*/ bool TryCompareStandardDate(ref Interop.Kernel32.TIME_ZONE_INFORMATION timeZone, ref Interop.Kernel32.REG_TZI_FORMAT registryTimeZoneInfo);
        static /*0xe43820*/ bool TryCompareTimeZoneInformationToRegistry(ref Interop.Kernel32.TIME_ZONE_INFORMATION timeZone, string id, ref bool dstDisabled);
        static /*0xe45170*/ string TryGetLocalizedNameByMuiNativeResource(string resource);
        static /*0xe453f0*/ string TryGetLocalizedNameByNativeResource(string filePath, int resource);
        static /*0xe3f750*/ void GetLocalizedNamesByRegistryKey(Microsoft.Win32.RegistryKey key, ref string displayName, ref string standardName, ref string daylightName);
        static /*0xe459a0*/ System.TimeZoneInfo.TimeZoneInfoResult TryGetTimeZoneFromLocalMachine(string id, ref System.TimeZoneInfo value, ref System.Exception e);
        static /*0xe45a80*/ System.TimeZoneInfo.TimeZoneInfoResult TryGetTimeZoneFromLocalRegistry(string id, ref System.TimeZoneInfo value, ref System.Exception e);
        static /*0xe47330*/ bool get_HaveRegistry();
        static /*0xe3c130*/ uint EnumDynamicTimeZoneInformation(uint dwIndex, ref System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation);
        static /*0xe3d2c0*/ uint GetDynamicTimeZoneInformation(ref System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation);
        static /*0xe3d140*/ uint GetDynamicTimeZoneInformationEffectiveYears(ref System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation, ref uint FirstYear, ref uint LastYear);
        static /*0xe40720*/ bool GetTimeZoneInformationForYear(ushort wYear, ref System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION pdtzi, ref Interop.Kernel32.TIME_ZONE_INFORMATION ptzi);
        static /*0xe3b700*/ System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRuleFromTimeZoneInformation(ref System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, System.DateTime startDate, System.DateTime endDate, int defaultBaseUtcOffset);
        static /*0xe41e80*/ bool TransitionTimeFromTimeZoneInformation(System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, ref System.TimeZoneInfo.TransitionTime transitionTime, bool readStartDate);
        static /*0xe44780*/ System.TimeZoneInfo TryCreateTimeZone(System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation);
        static /*0xe3efb0*/ System.TimeZoneInfo GetLocalTimeZoneInfoWinRTFallback();
        static /*0xe3c550*/ System.TimeZoneInfo FindSystemTimeZoneByIdWinRTFallback(string id);
        static /*0xe3fc30*/ void GetSystemTimeZonesWinRTFallback(System.TimeZoneInfo.CachedData cachedData);
        static /*0xe3f690*/ System.TimeSpan GetLocalUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags);
        static /*0xe3a8f0*/ System.DateTime ConvertTime(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfo destinationTimeZone, System.TimeZoneInfoOptions flags);
        static /*0xe3a990*/ System.DateTime ConvertTime(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfo destinationTimeZone, System.TimeZoneInfoOptions flags, System.TimeZoneInfo.CachedData cachedData);
        static /*0xe3a7a0*/ System.DateTime ConvertTimeToUtc(System.DateTime dateTime, System.TimeZoneInfoOptions flags);
        static /*0xe403b0*/ System.Collections.ObjectModel.ReadOnlyCollection<System.TimeZoneInfo> GetSystemTimeZones();
        static /*0xe473a0*/ System.TimeZoneInfo get_Local();
        static /*0xe47430*/ System.TimeZoneInfo get_Utc();
        static /*0xe3c090*/ System.TimeZoneInfo CreateCustomTimeZone(string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName);
        static /*0xe3b330*/ System.DateTime ConvertUtcToTimeZone(long ticks, System.TimeZoneInfo destinationTimeZone, ref bool isAmbiguousLocalDst);
        static /*0xe3e390*/ bool GetIsDaylightSavings(System.DateTime time, System.TimeZoneInfo.AdjustmentRule rule, System.Globalization.DaylightTimeStruct daylightTime, System.TimeZoneInfoOptions flags);
        static /*0xe3d8a0*/ bool GetIsDaylightSavingsFromUtc(System.DateTime time, int year, System.TimeSpan utc, System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex, ref bool isAmbiguousLocalDst, System.TimeZoneInfo zone);
        static /*0xe3a120*/ bool CheckIsDst(System.DateTime startTime, System.DateTime time, System.DateTime endTime, bool ignoreYearAdjustment, System.TimeZoneInfo.AdjustmentRule rule);
        static /*0xe3d4d0*/ bool GetIsAmbiguousTime(System.DateTime time, System.TimeZoneInfo.AdjustmentRule rule, System.Globalization.DaylightTimeStruct daylightTime);
        static /*0xe3eac0*/ bool GetIsInvalidTime(System.DateTime time, System.TimeZoneInfo.AdjustmentRule rule, System.Globalization.DaylightTimeStruct daylightTime);
        static /*0xe41180*/ System.TimeSpan GetUtcOffset(System.DateTime time, System.TimeZoneInfo zone, System.TimeZoneInfoOptions flags);
        static /*0xe40930*/ System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone);
        static /*0xe408b0*/ System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone, ref bool isDaylightSavings);
        static /*0xe409e0*/ System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone, ref bool isDaylightSavings, ref bool isAmbiguousLocalDst);
        static /*0xe42f00*/ System.DateTime TransitionTimeToDateTime(int year, System.TimeZoneInfo.TransitionTime transitionTime);
        static /*0xe45f20*/ System.TimeZoneInfo.TimeZoneInfoResult TryGetTimeZone(string id, bool dstDisabled, ref System.TimeZoneInfo value, ref System.Exception e, System.TimeZoneInfo.CachedData cachedData, bool alwaysFallbackToLocalMachine);
        static /*0xe45620*/ System.TimeZoneInfo.TimeZoneInfoResult TryGetTimeZoneFromLocalMachine(string id, bool dstDisabled, ref System.TimeZoneInfo value, ref System.Exception e, System.TimeZoneInfo.CachedData cachedData);
        static /*0xe46220*/ void ValidateTimeZoneInfo(string id, System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules, ref bool adjustmentRulesSupportDst);
        static /*0xe46130*/ bool UtcOffsetOutOfRange(System.TimeSpan offset);
        static /*0xe40e30*/ System.TimeSpan GetUtcOffset(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule adjustmentRule);
        static /*0xe41780*/ bool IsValidAdjustmentRuleOffest(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule adjustmentRule);
        /*0xe46f40*/ TimeZoneInfo(ref Interop.Kernel32.TIME_ZONE_INFORMATION zone, bool dstDisabled);
        /*0xe46e20*/ TimeZoneInfo(string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);
        /*0xe46900*/ TimeZoneInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xe46df0*/ TimeZoneInfo();
        /*0x73d3e0*/ string get_Id();
        /*0xe41e30*/ string get_DisplayName();
        /*0x997630*/ System.TimeSpan get_BaseUtcOffset();
        /*0xe3fb20*/ System.TimeZoneInfo.AdjustmentRule GetPreviousAdjustmentRule(System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex);
        /*0xe413b0*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime);
        /*0xe40da0*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags);
        /*0xe40f00*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags, System.TimeZoneInfo.CachedData cachedData);
        /*0xe3c290*/ bool Equals(System.TimeZoneInfo other);
        /*0xe3c2f0*/ bool Equals(object obj);
        /*0xe3d420*/ int GetHashCode();
        /*0xe41430*/ bool HasSameRules(System.TimeZoneInfo other);
        /*0xe41e30*/ string ToString();
        /*0xe41ad0*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        /*0xe41c90*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xe3ca70*/ System.TimeZoneInfo.AdjustmentRule GetAdjustmentRuleForTime(System.DateTime dateTime, ref System.Nullable<int> ruleIndex);
        /*0xe3c7e0*/ System.TimeZoneInfo.AdjustmentRule GetAdjustmentRuleForTime(System.DateTime dateTime, bool dateTimeisUtc, ref System.Nullable<int> ruleIndex);
        /*0xe3a4c0*/ int CompareAdjustmentRuleToDateTime(System.TimeZoneInfo.AdjustmentRule rule, System.TimeZoneInfo.AdjustmentRule previousRule, System.DateTime dateTime, System.DateTime dateOnly, bool dateTimeisUtc);
        /*0xe3b310*/ System.DateTime ConvertToUtc(System.DateTime dateTime, System.TimeSpan daylightDelta, System.TimeSpan baseUtcOffsetDelta);
        /*0xe3a780*/ System.DateTime ConvertFromUtc(System.DateTime dateTime, System.TimeSpan daylightDelta, System.TimeSpan baseUtcOffsetDelta);
        /*0xe3b070*/ System.DateTime ConvertToFromUtc(System.DateTime dateTime, System.TimeSpan daylightDelta, System.TimeSpan baseUtcOffsetDelta, bool convertToUtc);
        /*0xe3cfc0*/ System.Globalization.DaylightTimeStruct GetDaylightTime(int year, System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex);
        /*0xe3cee0*/ System.TimeSpan GetDaylightSavingsStartOffsetFromUtc(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule rule, System.Nullable<int> ruleIndex);
        /*0xe3ce50*/ System.TimeSpan GetDaylightSavingsEndOffsetFromUtc(System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule rule);

        class CachedData
        {
            /*0x10*/ System.TimeZoneInfo.OffsetAndRule _oneYearLocalFromUtc;
            /*0x18*/ System.TimeZoneInfo _localTimeZone;
            /*0x20*/ System.Collections.Generic.Dictionary<string, System.TimeZoneInfo> _systemTimeZones;
            /*0x28*/ System.Collections.ObjectModel.ReadOnlyCollection<System.TimeZoneInfo> _readOnlySystemTimeZones;
            /*0x30*/ bool _allSystemTimeZonesRead;

            static /*0xe2bf10*/ System.TimeZoneInfo GetCurrentOneYearLocal();
            /*0x32f970*/ CachedData();
            /*0xe2c010*/ System.TimeZoneInfo.OffsetAndRule GetOneYearLocalFromUtc(int year);
            /*0xe2bce0*/ System.TimeZoneInfo CreateLocal();
            /*0xe2c1e0*/ System.TimeZoneInfo get_Local();
            /*0xe2be80*/ System.DateTimeKind GetCorrespondingKind(System.TimeZoneInfo timeZone);
        }

        class OffsetAndRule
        {
            /*0x10*/ int Year;
            /*0x18*/ System.TimeSpan Offset;
            /*0x20*/ System.TimeZoneInfo.AdjustmentRule Rule;

            /*0xe3a090*/ OffsetAndRule(int year, System.TimeSpan offset, System.TimeZoneInfo.AdjustmentRule rule);
        }

        struct DYNAMIC_TIME_ZONE_INFORMATION
        {
            /*0x10*/ Interop.Kernel32.TIME_ZONE_INFORMATION TZI;
            /*0xc0*/ string TimeZoneKeyName;
            /*0xc8*/ byte DynamicDaylightTimeDisabled;
        }

        enum TimeZoneInfoResult
        {
            Success = 0,
            TimeZoneNotFoundException = 1,
            InvalidTimeZoneException = 2,
            SecurityException = 3,
        }

        class AdjustmentRule : System.IEquatable<System.TimeZoneInfo.AdjustmentRule>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
        {
            /*0x10*/ System.DateTime _dateStart;
            /*0x18*/ System.DateTime _dateEnd;
            /*0x20*/ System.TimeSpan _daylightDelta;
            /*0x28*/ System.TimeZoneInfo.TransitionTime _daylightTransitionStart;
            /*0x40*/ System.TimeZoneInfo.TransitionTime _daylightTransitionEnd;
            /*0x58*/ System.TimeSpan _baseUtcOffsetDelta;
            /*0x60*/ bool _noDaylightTransitions;

            static /*0xe25d00*/ System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd, System.TimeSpan baseUtcOffsetDelta, bool noDaylightTransitions);
            static /*0xe265e0*/ void ValidateAdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd, bool noDaylightTransitions);
            /*0xe271b0*/ AdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd, System.TimeSpan baseUtcOffsetDelta, bool noDaylightTransitions);
            /*0xe26d90*/ AdjustmentRule(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xe272c0*/ AdjustmentRule();
            /*0x73d3e0*/ System.DateTime get_DateStart();
            /*0x32f410*/ System.DateTime get_DateEnd();
            /*0x61a260*/ System.TimeSpan get_DaylightDelta();
            /*0xe27310*/ System.TimeZoneInfo.TransitionTime get_DaylightTransitionStart();
            /*0xe272f0*/ System.TimeZoneInfo.TransitionTime get_DaylightTransitionEnd();
            /*0xb61940*/ System.TimeSpan get_BaseUtcOffsetDelta();
            /*0xe27510*/ bool get_NoDaylightTransitions();
            /*0xe27330*/ bool get_HasDaylightSaving();
            /*0xe25e40*/ bool Equals(System.TimeZoneInfo.AdjustmentRule other);
            /*0xe25ff0*/ int GetHashCode();
            /*0xe261c0*/ bool IsStartDateMarkerForBeginningOfYear();
            /*0xe26080*/ bool IsEndDateMarkerForEndOfYear();
            /*0xe26300*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0xe263e0*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        struct TransitionTime : System.IEquatable<System.TimeZoneInfo.TransitionTime>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
        {
            /*0x10*/ System.DateTime _timeOfDay;
            /*0x18*/ byte _month;
            /*0x19*/ byte _week;
            /*0x1a*/ byte _day;
            /*0x1c*/ System.DayOfWeek _dayOfWeek;
            /*0x20*/ bool _isFixedDateRule;

            static /*0xe48190*/ bool op_Inequality(System.TimeZoneInfo.TransitionTime t1, System.TimeZoneInfo.TransitionTime t2);
            static /*0xe47480*/ System.TimeZoneInfo.TransitionTime CreateFixedDateRule(System.DateTime timeOfDay, int month, int day);
            static /*0xe47500*/ System.TimeZoneInfo.TransitionTime CreateFloatingDateRule(System.DateTime timeOfDay, int month, int week, System.DayOfWeek dayOfWeek);
            static /*0xe47980*/ void ValidateTransitionTime(System.DateTime timeOfDay, int month, int week, int day, System.DayOfWeek dayOfWeek);
            /*0xe47d60*/ TransitionTime(System.DateTime timeOfDay, int month, int week, int day, System.DayOfWeek dayOfWeek, bool isFixedDateRule);
            /*0xe47df0*/ TransitionTime(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x6937d0*/ System.DateTime get_TimeOfDay();
            /*0xa5a920*/ int get_Month();
            /*0xe48180*/ int get_Week();
            /*0xe48170*/ int get_Day();
            /*0x837600*/ System.DayOfWeek get_DayOfWeek();
            /*0x793eb0*/ bool get_IsFixedDateRule();
            /*0xe47590*/ bool Equals(object obj);
            /*0xe47630*/ bool Equals(System.TimeZoneInfo.TransitionTime other);
            /*0xe47760*/ int GetHashCode();
            /*0xe47770*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0xe47810*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class <>c
        {
            static /*0x0*/ System.TimeZoneInfo.<> <>9;
            static /*0x8*/ System.Comparison<System.TimeZoneInfo> <>9__49_0;
            static /*0x10*/ System.Comparison<System.TimeZoneInfo> <>9__110_0;

            static /*0xe486c0*/ <>c();
            /*0x32f970*/ <>c();
            /*0xe482d0*/ int <GetSystemTimeZonesWinRTFallback>b__49_0(System.TimeZoneInfo x, System.TimeZoneInfo y);
            /*0xe481c0*/ int <GetSystemTimeZones>b__110_0(System.TimeZoneInfo x, System.TimeZoneInfo y);
            /*0xe485f0*/ bool <.cctor>b__157_0();
        }
    }

    enum TimeZoneInfoOptions
    {
        None = 1,
        NoThrowOnInvalidTime = 2,
    }

    class Action : System.MulticastDelegate
    {
        /*0xe25c50*/ Action(object object, nint method);
        /*0x9dbe20*/ void Invoke();
    }

    class Action<T> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x2a5510*/ void Invoke(T obj);
    }

    class Action<T1, T2> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x2a5510*/ void Invoke(T1 arg1, T2 arg2);
    }

    class Action<T1, T2, T3> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x2a5510*/ void Invoke(T1 arg1, T2 arg2, T3 arg3);
    }

    class Action<T1, T2, T3, T4> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x2a5510*/ void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    }

    class Action<T1, T2, T3, T4, T5> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x2a5510*/ void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    }

    class Action<T1, T2, T3, T4, T5, T6> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x2a5510*/ void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    }

    class Action<T1, T2, T3, T4, T5, T6, T7> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x2a5510*/ void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    }

    class Action<T1, T2, T3, T4, T5, T6, T7, T8> : System.MulticastDelegate
    {
        Action(object object, nint method);
        /*0x2a5510*/ void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    }

    class Func<TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x2a5510*/ TResult Invoke();
    }

    class Func<T, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x2a5510*/ TResult Invoke(T arg);
    }

    class Func<T1, T2, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x2a5510*/ TResult Invoke(T1 arg1, T2 arg2);
    }

    class Func<T1, T2, T3, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x2a5510*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3);
    }

    class Func<T1, T2, T3, T4, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x2a5510*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    }

    class Func<T1, T2, T3, T4, T5, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x2a5510*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    }

    class Func<T1, T2, T3, T4, T5, T6, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x2a5510*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    }

    class Func<T1, T2, T3, T4, T5, T6, T7, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x2a5510*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
    }

    class Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        /*0x2a5510*/ TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    }

    class Comparison<T> : System.MulticastDelegate
    {
        Comparison(object object, nint method);
        /*0x2a5510*/ int Invoke(T x, T y);
    }

    class Converter<TInput, TOutput> : System.MulticastDelegate
    {
        Converter(object object, nint method);
        /*0x2a5510*/ TOutput Invoke(TInput input);
    }

    class Predicate<T> : System.MulticastDelegate
    {
        Predicate(object object, nint method);
        /*0x2a5510*/ bool Invoke(T obj);
    }

    class AggregateException : System.Exception
    {
        /*0x90*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Exception> m_innerExceptions;

        /*0xe28350*/ AggregateException();
        /*0xe27b30*/ AggregateException(System.Collections.Generic.IEnumerable<System.Exception> innerExceptions);
        /*0xe28300*/ AggregateException(System.Exception[] innerExceptions);
        /*0xe27ce0*/ AggregateException(string message, System.Collections.Generic.IEnumerable<System.Exception> innerExceptions);
        /*0xe27c10*/ AggregateException(string message, System.Exception[] innerExceptions);
        /*0xe27da0*/ AggregateException(string message, System.Collections.Generic.IList<System.Exception> innerExceptions);
        /*0xe28030*/ AggregateException(System.Collections.Generic.IEnumerable<System.Runtime.ExceptionServices.ExceptionDispatchInfo> innerExceptionInfos);
        /*0xe27c20*/ AggregateException(string message, System.Collections.Generic.IEnumerable<System.Runtime.ExceptionServices.ExceptionDispatchInfo> innerExceptionInfos);
        /*0xe27880*/ AggregateException(string message, System.Collections.Generic.IList<System.Runtime.ExceptionServices.ExceptionDispatchInfo> innerExceptionInfos);
        /*0xe28110*/ AggregateException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xe27520*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xe28480*/ string get_Message();
        /*0xe27660*/ string ToString();
    }

    class ApplicationException : System.Exception
    {
        /*0xe28630*/ ApplicationException();
        /*0xe28720*/ ApplicationException(string message);
        /*0xe286a0*/ ApplicationException(string message, System.Exception innerException);
        /*0xe28790*/ ApplicationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ArgumentException : System.SystemException
    {
        /*0x90*/ string _paramName;

        /*0xe28900*/ ArgumentException();
        /*0xe288e0*/ ArgumentException(string message);
        /*0xe28a30*/ ArgumentException(string message, System.Exception innerException);
        /*0xe28950*/ ArgumentException(string message, string paramName);
        /*0xe28990*/ ArgumentException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xe28810*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xe28a50*/ string get_Message();
        /*0x7378b0*/ string get_ParamName();
    }

    class ArgumentNullException : System.ArgumentException
    {
        /*0xe28b60*/ ArgumentNullException();
        /*0xe28af0*/ ArgumentNullException(string paramName);
        /*0xe28bb0*/ ArgumentNullException(string paramName, string message);
        /*0xe28990*/ ArgumentNullException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ArgumentOutOfRangeException : System.ArgumentException
    {
        /*0x98*/ object _actualValue;

        /*0xe28ef0*/ ArgumentOutOfRangeException();
        /*0xe28f40*/ ArgumentOutOfRangeException(string paramName);
        /*0xe28fb0*/ ArgumentOutOfRangeException(string paramName, string message);
        /*0xe28d60*/ ArgumentOutOfRangeException(string paramName, object actualValue, string message);
        /*0xe28dd0*/ ArgumentOutOfRangeException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xe28c00*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xe29000*/ string get_Message();
    }

    class ArithmeticException : System.SystemException
    {
        /*0xe29120*/ ArithmeticException();
        /*0xe29170*/ ArithmeticException(string message);
        /*0xe29190*/ ArithmeticException(string message, System.Exception innerException);
        /*0xe291b0*/ ArithmeticException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ArrayTypeMismatchException : System.SystemException
    {
        /*0xe291d0*/ ArrayTypeMismatchException();
        /*0xe291b0*/ ArrayTypeMismatchException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class AssemblyLoadEventArgs : System.EventArgs
    {
        /*0x10*/ System.Reflection.Assembly <LoadedAssembly>k__BackingField;

        /*0xe29220*/ AssemblyLoadEventArgs(System.Reflection.Assembly loadedAssembly);
    }

    class AssemblyLoadEventHandler : System.MulticastDelegate
    {
        /*0x722be0*/ AssemblyLoadEventHandler(object object, nint method);
        /*0x722200*/ void Invoke(object sender, System.AssemblyLoadEventArgs args);
    }

    class AsyncCallback : System.MulticastDelegate
    {
        /*0x7214c0*/ AsyncCallback(object object, nint method);
        /*0x720980*/ void Invoke(System.IAsyncResult ar);
        /*0xe29290*/ System.IAsyncResult BeginInvoke(System.IAsyncResult ar, System.AsyncCallback callback, object object);
        /*0x723cb0*/ void EndInvoke(System.IAsyncResult result);
    }

    enum AttributeTargets
    {
        Assembly = 1,
        Module = 2,
        Class = 4,
        Struct = 8,
        Enum = 16,
        Constructor = 32,
        Method = 64,
        Property = 128,
        Field = 256,
        Event = 512,
        Interface = 1024,
        Parameter = 2048,
        Delegate = 4096,
        ReturnValue = 8192,
        GenericParameter = 16384,
        All = 32767,
    }

    class AttributeUsageAttribute : System.Attribute
    {
        static /*0x0*/ System.AttributeUsageAttribute Default;
        /*0x10*/ System.AttributeTargets _attributeTarget;
        /*0x14*/ bool _allowMultiple;
        /*0x15*/ bool _inherited;

        static /*0xe292c0*/ AttributeUsageAttribute();
        /*0xe29340*/ AttributeUsageAttribute(System.AttributeTargets validOn);
        /*0x8b9820*/ bool get_AllowMultiple();
        /*0xe29380*/ void set_AllowMultiple(bool value);
        /*0xe29370*/ bool get_Inherited();
        /*0xe29390*/ void set_Inherited(bool value);
    }

    class BadImageFormatException : System.SystemException
    {
        /*0x90*/ string _fileName;
        /*0x98*/ string _fusionLog;

        /*0xe29890*/ BadImageFormatException();
        /*0xe29830*/ BadImageFormatException(string message);
        /*0xe29810*/ BadImageFormatException(string message, System.Exception inner);
        /*0xe29850*/ BadImageFormatException(string message, string fileName);
        /*0xe29740*/ BadImageFormatException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xe293a0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xe298e0*/ string get_Message();
        /*0xe294c0*/ void SetMessageField();
        /*0xe29550*/ string ToString();
    }

    class BitConverter
    {
        static /*0x0*/ bool IsLittleEndian;

        static /*0xe29d50*/ BitConverter();
        static /*0xe29cd0*/ bool TryWriteBytes(System.Span<byte> destination, uint value);
        static /*0xe299d0*/ string ToString(byte[] value, int startIndex, int length);
        static /*0xe299a0*/ string ToString(byte[] value);
        static /*0xe29970*/ long DoubleToInt64Bits(double value);
        static /*0xe29990*/ int SingleToInt32Bits(float value);
        static /*0xe29980*/ float Int32BitsToSingle(int value);

        class <>c
        {
            static /*0x0*/ System.BitConverter.<> <>9;
            static /*0x8*/ System.Buffers.SpanAction<char, System.ValueTuple<System.Byte[], int, int>> <>9__38_0;

            static /*0xe48730*/ <>c();
            /*0x32f970*/ <>c();
            /*0xe483e0*/ void <ToString>b__38_0(System.Span<char> dst, System.ValueTuple<System.Byte[], int, int> state);
        }
    }

    struct Boolean : System.IComparable, System.IConvertible, System.IComparable<bool>, System.IEquatable<bool>
    {
        static int True = 1;
        static int False = 0;
        static string TrueLiteral = "True";
        static string FalseLiteral = "False";
        static /*0x0*/ string TrueString;
        static /*0x8*/ string FalseString;
        /*0x10*/ bool m_value;

        static /*0xe2af20*/ Boolean();
        static /*0xe2a020*/ bool Parse(string value);
        static /*0xe29f60*/ bool Parse(System.ReadOnlySpan<char> value);
        static /*0xe2ae60*/ bool TryParse(string value, ref bool result);
        static /*0xe2a9c0*/ bool TryParse(System.ReadOnlySpan<char> value, ref bool result);
        static /*0xe2a830*/ System.ReadOnlySpan<char> TrimWhiteSpaceAndNull(System.ReadOnlySpan<char> value);
        /*0xe29f50*/ int GetHashCode();
        /*0xe2a760*/ string ToString();
        /*0xe2a7b0*/ string ToString(System.IFormatProvider provider);
        /*0xe29eb0*/ bool Equals(object obj);
        /*0xe29f40*/ bool Equals(bool obj);
        /*0xe29db0*/ int CompareTo(object obj);
        /*0xe29d90*/ int CompareTo(bool value);
        /*0x408450*/ System.TypeCode GetTypeCode();
        /*0xe2a1a0*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xe2a200*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xe2a520*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xe2a1b0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xe2a430*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xe2a670*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xe2a480*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xe2a6c0*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xe2a4d0*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xe2a710*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xe2a570*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xe2a3d0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xe2a320*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xe2a290*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xe2a5d0*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Byte : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<byte>, System.IEquatable<byte>, System.ISpanFormattable
    {
        static byte MaxValue = 255;
        static byte MinValue = 0;
        /*0x10*/ byte m_value;

        static /*0xe2b340*/ byte Parse(string s, System.IFormatProvider provider);
        static /*0xe2b280*/ byte Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0xe2b150*/ byte Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        /*0xe2afe0*/ int CompareTo(object value);
        /*0xe2afd0*/ int CompareTo(byte value);
        /*0xe2b0c0*/ bool Equals(object obj);
        /*0xe29f40*/ bool Equals(byte obj);
        /*0xbad660*/ int GetHashCode();
        /*0xe2bb80*/ string ToString();
        /*0xe2bac0*/ string ToString(string format);
        /*0xe2b960*/ string ToString(System.IFormatProvider provider);
        /*0xe2b9f0*/ string ToString(string format, System.IFormatProvider provider);
        /*0xe2bc00*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x448120*/ System.TypeCode GetTypeCode();
        /*0xe2b3f0*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xe2b440*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xe2b700*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xbad660*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xe2b610*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xe2b870*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xe2b660*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xe2b8c0*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xe2b6b0*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xe2b910*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xe2b780*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xe2b5c0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xe2b520*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xe2b490*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xe2b7d0*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class CLSCompliantAttribute : System.Attribute
    {
        /*0x10*/ bool _compliant;

        /*0xe2bcb0*/ CLSCompliantAttribute(bool isCompliant);
        /*0x793eb0*/ bool get_IsCompliant();
    }

    struct Char : System.IComparable, System.IComparable<char>, System.IEquatable<char>, System.IConvertible
    {
        static char MaxValue = 65535;
        static char MinValue = 0;
        static int UNICODE_PLANE00_END = 65535;
        static int UNICODE_PLANE01_START = 65536;
        static int UNICODE_PLANE16_END = 1114111;
        static int HIGH_SURROGATE_START = 55296;
        static int LOW_SURROGATE_END = 57343;
        static /*0x0*/ byte[] s_categoryForLatin1;
        /*0x10*/ char m_value;

        static /*0xe2e300*/ Char();
        static /*0xe2cd10*/ bool IsLatin1(char ch);
        static /*0xe2caa0*/ bool IsAscii(char ch);
        static /*0xe2c850*/ System.Globalization.UnicodeCategory GetLatin1UnicodeCategory(char ch);
        static /*0xe2e1d0*/ string ToString(char c);
        static /*0xe2d8d0*/ char Parse(string s);
        static /*0xe2cb40*/ bool IsDigit(char c);
        static /*0xe2c510*/ bool CheckLetter(System.Globalization.UnicodeCategory uc);
        static /*0xe2cdd0*/ bool IsLetter(char c);
        static /*0xe2d800*/ bool IsWhiteSpaceLatin1(char c);
        static /*0xe2d830*/ bool IsWhiteSpace(char c);
        static /*0xe2d740*/ bool IsUpper(char c);
        static /*0xe2d070*/ bool IsLower(char c);
        static /*0xe2c530*/ bool CheckPunctuation(System.Globalization.UnicodeCategory uc);
        static /*0xe2d210*/ bool IsPunctuation(char c);
        static /*0xe2c500*/ bool CheckLetterOrDigit(System.Globalization.UnicodeCategory uc);
        static /*0xe2cd20*/ bool IsLetterOrDigit(char c);
        static /*0xe2e270*/ char ToUpper(char c);
        static /*0xe2e1e0*/ char ToUpperInvariant(char c);
        static /*0xe2e0a0*/ char ToLower(char c);
        static /*0xe2e010*/ char ToLowerInvariant(char c);
        static /*0xe2cab0*/ bool IsControl(char c);
        static /*0xe2ced0*/ bool IsLower(string s, int index);
        static /*0xe2c520*/ bool CheckNumber(System.Globalization.UnicodeCategory uc);
        static /*0xe2d130*/ bool IsNumber(char c);
        static /*0xe2c540*/ bool CheckSeparator(System.Globalization.UnicodeCategory uc);
        static /*0xe2d2c0*/ bool IsSeparatorLatin1(char c);
        static /*0xe2d2e0*/ bool IsSeparator(char c);
        static /*0xe2d4e0*/ bool IsSurrogate(char c);
        static /*0xe2d3c0*/ bool IsSurrogate(string s, int index);
        static /*0xe2c550*/ bool CheckSymbol(System.Globalization.UnicodeCategory uc);
        static /*0xe2d500*/ bool IsSymbol(char c);
        static /*0xe2d5b0*/ bool IsUpper(string s, int index);
        static /*0xe2c8c0*/ System.Globalization.UnicodeCategory GetUnicodeCategory(char c);
        static /*0xe2c940*/ System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int index);
        static /*0xe2ccf0*/ bool IsHighSurrogate(char c);
        static /*0xe2cbc0*/ bool IsHighSurrogate(string s, int index);
        static /*0xe2ceb0*/ bool IsLowSurrogate(char c);
        static /*0xe2d390*/ bool IsSurrogatePair(char highSurrogate, char lowSurrogate);
        static /*0xe2c650*/ int ConvertToUtf32(char highSurrogate, char lowSurrogate);
        /*0xe2c840*/ int GetHashCode();
        /*0xe2c7a0*/ bool Equals(object obj);
        /*0xe2c830*/ bool Equals(char obj);
        /*0xe2c570*/ int CompareTo(object value);
        /*0xe2c560*/ int CompareTo(char value);
        /*0xe2e130*/ string ToString();
        /*0xe2e180*/ string ToString(System.IFormatProvider provider);
        /*0x6bbad0*/ System.TypeCode GetTypeCode();
        /*0xe2d990*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x6bba60*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xe2dd70*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xe2da20*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xe2dc50*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xe2df20*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xe2dcd0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xe2df70*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xe2dd20*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xe2dfc0*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xe2ddf0*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xe2dbc0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xe2db30*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xe2daa0*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xe2de80*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class CharEnumerator : System.Collections.IEnumerator, System.Collections.Generic.IEnumerator<char>, System.IDisposable, System.ICloneable
    {
        /*0x10*/ string _str;
        /*0x18*/ int _index;
        /*0x1c*/ char _currentElement;

        /*0xe2c3c0*/ CharEnumerator(string str);
        /*0xe2c400*/ CharEnumerator();
        /*0xe2c220*/ object Clone();
        /*0xe2c260*/ bool MoveNext();
        /*0xe2c230*/ void Dispose();
        /*0xe2c2c0*/ object System.Collections.IEnumerator.get_Current();
        /*0xe2c430*/ char get_Current();
        /*0xe2c2b0*/ void Reset();
    }

    class Convert
    {
        static /*0x0*/ sbyte[] s_decodingMap;
        static /*0x8*/ System.Type[] ConvertTypes;
        static /*0x10*/ System.Type EnumType;
        static /*0x18*/ char[] base64Table;
        static /*0x20*/ object DBNull;

        static /*0xe34e70*/ Convert();
        static /*0xe34490*/ bool TryDecodeFromUtf16(System.ReadOnlySpan<char> utf16, System.Span<byte> bytes, ref int consumed, ref int written);
        static /*0xe2f400*/ int Decode(ref char encodedChars, ref sbyte decodingMap);
        static /*0xe34e50*/ void WriteThreeLowOrderBytes(ref byte destination, int value);
        static /*0xe30270*/ System.TypeCode GetTypeCode(object value);
        static /*0xe2eda0*/ object ChangeType(object value, System.TypeCode typeCode, System.IFormatProvider provider);
        static /*0xe2f460*/ object DefaultToType(System.IConvertible value, System.Type targetType, System.IFormatProvider provider);
        static /*0xe2e390*/ object ChangeType(object value, System.Type conversionType);
        static /*0xe2e430*/ object ChangeType(object value, System.Type conversionType, System.IFormatProvider provider);
        static /*0xe30360*/ void ThrowCharOverflowException();
        static /*0xe30310*/ void ThrowByteOverflowException();
        static /*0xe304a0*/ void ThrowSByteOverflowException();
        static /*0xe303b0*/ void ThrowInt16OverflowException();
        static /*0xe304f0*/ void ThrowUInt16OverflowException();
        static /*0xe30400*/ void ThrowInt32OverflowException();
        static /*0xe30540*/ void ThrowUInt32OverflowException();
        static /*0xe30450*/ void ThrowInt64OverflowException();
        static /*0xe30590*/ void ThrowUInt64OverflowException();
        static /*0xe30600*/ bool ToBoolean(object value, System.IFormatProvider provider);
        static /*0xe305f0*/ bool ToBoolean(sbyte value);
        static /*0xe305f0*/ bool ToBoolean(byte value);
        static /*0xe306d0*/ bool ToBoolean(short value);
        static /*0xe306d0*/ bool ToBoolean(ushort value);
        static /*0xe306b0*/ bool ToBoolean(int value);
        static /*0xe306b0*/ bool ToBoolean(uint value);
        static /*0xe305e0*/ bool ToBoolean(long value);
        static /*0xe305e0*/ bool ToBoolean(ulong value);
        static /*0xe30780*/ bool ToBoolean(string value, System.IFormatProvider provider);
        static /*0xe306c0*/ bool ToBoolean(float value);
        static /*0xe306e0*/ bool ToBoolean(double value);
        static /*0xe30700*/ bool ToBoolean(decimal value);
        static /*0xe312d0*/ char ToChar(object value, System.IFormatProvider provider);
        static /*0xe31280*/ char ToChar(sbyte value);
        static /*0x621bd0*/ char ToChar(byte value);
        static /*0xe311e0*/ char ToChar(short value);
        static /*0xe31090*/ char ToChar(ushort value);
        static /*0xe31380*/ char ToChar(int value);
        static /*0xe31230*/ char ToChar(uint value);
        static /*0xe310a0*/ char ToChar(long value);
        static /*0xe30f80*/ char ToChar(ulong value);
        static /*0xe310f0*/ char ToChar(string value);
        static /*0xe30fd0*/ char ToChar(string value, System.IFormatProvider provider);
        static /*0xe32f70*/ sbyte ToSByte(object value, System.IFormatProvider provider);
        static /*0xe305f0*/ sbyte ToSByte(bool value);
        static /*0xe32e80*/ sbyte ToSByte(char value);
        static /*0xe32f20*/ sbyte ToSByte(byte value);
        static /*0xe32dd0*/ sbyte ToSByte(short value);
        static /*0xe32d00*/ sbyte ToSByte(ushort value);
        static /*0xe32e30*/ sbyte ToSByte(int value);
        static /*0xe32b70*/ sbyte ToSByte(uint value);
        static /*0xe32bc0*/ sbyte ToSByte(long value);
        static /*0xe32ed0*/ sbyte ToSByte(ulong value);
        static /*0xe32c20*/ sbyte ToSByte(float value);
        static /*0xe32ad0*/ sbyte ToSByte(double value);
        static /*0xe32d50*/ sbyte ToSByte(decimal value);
        static /*0xe32cf0*/ sbyte ToSByte(string value, System.IFormatProvider provider);
        static /*0xe30a60*/ byte ToByte(object value, System.IFormatProvider provider);
        static /*0xe305f0*/ byte ToByte(bool value);
        static /*0xe30c80*/ byte ToByte(char value);
        static /*0xe30e10*/ byte ToByte(sbyte value);
        static /*0xe30940*/ byte ToByte(short value);
        static /*0xe30e60*/ byte ToByte(ushort value);
        static /*0xe30cd0*/ byte ToByte(int value);
        static /*0xe30dc0*/ byte ToByte(uint value);
        static /*0xe30c30*/ byte ToByte(long value);
        static /*0xe308f0*/ byte ToByte(ulong value);
        static /*0xe30990*/ byte ToByte(float value);
        static /*0xe30b90*/ byte ToByte(double value);
        static /*0xe30b10*/ byte ToByte(decimal value);
        static /*0xe30eb0*/ byte ToByte(string value);
        static /*0xe30d20*/ byte ToByte(string value, System.IFormatProvider provider);
        static /*0xe31db0*/ short ToInt16(object value, System.IFormatProvider provider);
        static /*0xe31d50*/ short ToInt16(bool value);
        static /*0xe31f90*/ short ToInt16(char value);
        static /*0xe31fe0*/ short ToInt16(sbyte value);
        static /*0x621bd0*/ short ToInt16(byte value);
        static /*0xe31d60*/ short ToInt16(ushort value);
        static /*0xe320e0*/ short ToInt16(int value);
        static /*0xe32130*/ short ToInt16(uint value);
        static /*0xe31e60*/ short ToInt16(long value);
        static /*0xe31ec0*/ short ToInt16(ulong value);
        static /*0xe32010*/ short ToInt16(float value);
        static /*0xe32180*/ short ToInt16(double value);
        static /*0xe31f10*/ short ToInt16(decimal value);
        static /*0xe31ff0*/ short ToInt16(string value, System.IFormatProvider provider);
        static /*0xe33760*/ ushort ToUInt16(object value, System.IFormatProvider provider);
        static /*0xe31d50*/ ushort ToUInt16(bool value);
        static /*0xe31090*/ ushort ToUInt16(char value);
        static /*0xe335d0*/ ushort ToUInt16(sbyte value);
        static /*0x621bd0*/ ushort ToUInt16(byte value);
        static /*0xe33710*/ ushort ToUInt16(short value);
        static /*0xe33810*/ ushort ToUInt16(int value);
        static /*0xe338b0*/ ushort ToUInt16(uint value);
        static /*0xe336a0*/ ushort ToUInt16(long value);
        static /*0xe33860*/ ushort ToUInt16(ulong value);
        static /*0xe339a0*/ ushort ToUInt16(float value);
        static /*0xe33900*/ ushort ToUInt16(double value);
        static /*0xe33620*/ ushort ToUInt16(decimal value);
        static /*0xe336f0*/ ushort ToUInt16(string value, System.IFormatProvider provider);
        static /*0xe32500*/ int ToInt32(object value);
        static /*0xe32340*/ int ToInt32(object value, System.IFormatProvider provider);
        static /*0xe31d50*/ int ToInt32(bool value);
        static /*0xe31090*/ int ToInt32(char value);
        static /*0x621bd0*/ int ToInt32(byte value);
        static /*0xe324f0*/ int ToInt32(short value);
        static /*0xe31090*/ int ToInt32(ushort value);
        static /*0xe322f0*/ int ToInt32(uint value);
        static /*0xe325a0*/ int ToInt32(long value);
        static /*0xe32240*/ int ToInt32(ulong value);
        static /*0xe32290*/ int ToInt32(float value);
        static /*0xe323f0*/ int ToInt32(double value);
        static /*0xe32600*/ int ToInt32(decimal value);
        static /*0xe32220*/ int ToInt32(string value, System.IFormatProvider provider);
        static /*0xe33c60*/ uint ToUInt32(object value);
        static /*0xe33e80*/ uint ToUInt32(object value, System.IFormatProvider provider);
        static /*0xe31d50*/ uint ToUInt32(bool value);
        static /*0xe31090*/ uint ToUInt32(char value);
        static /*0xe33e10*/ uint ToUInt32(sbyte value);
        static /*0x621bd0*/ uint ToUInt32(byte value);
        static /*0xe33a70*/ uint ToUInt32(short value);
        static /*0xe31090*/ uint ToUInt32(ushort value);
        static /*0xe33c10*/ uint ToUInt32(int value);
        static /*0xe33d00*/ uint ToUInt32(long value);
        static /*0xe33bc0*/ uint ToUInt32(ulong value);
        static /*0xe33ac0*/ uint ToUInt32(float value);
        static /*0xe33d50*/ uint ToUInt32(double value);
        static /*0xe33f30*/ uint ToUInt32(decimal value);
        static /*0xe33e60*/ uint ToUInt32(string value, System.IFormatProvider provider);
        static /*0xe329b0*/ long ToInt64(object value);
        static /*0xe327d0*/ long ToInt64(object value, System.IFormatProvider provider);
        static /*0xe32ac0*/ long ToInt64(bool value);
        static /*0xe31090*/ long ToInt64(char value);
        static /*0xe328b0*/ long ToInt64(sbyte value);
        static /*0x621bd0*/ long ToInt64(byte value);
        static /*0xe327c0*/ long ToInt64(short value);
        static /*0xe31090*/ long ToInt64(ushort value);
        static /*0xe328a0*/ long ToInt64(int value);
        static /*0x621c90*/ long ToInt64(uint value);
        static /*0xe328c0*/ long ToInt64(ulong value);
        static /*0xe32680*/ long ToInt64(float value);
        static /*0xe32920*/ long ToInt64(double value);
        static /*0xe32740*/ long ToInt64(decimal value);
        static /*0xe32a50*/ long ToInt64(string value);
        static /*0xe32880*/ long ToInt64(string value, System.IFormatProvider provider);
        static /*0xe341e0*/ ulong ToUInt64(object value);
        static /*0xe34130*/ ulong ToUInt64(object value, System.IFormatProvider provider);
        static /*0xe31d50*/ ulong ToUInt64(bool value);
        static /*0xe31090*/ ulong ToUInt64(char value);
        static /*0xe33fb0*/ ulong ToUInt64(sbyte value);
        static /*0x621bd0*/ ulong ToUInt64(byte value);
        static /*0xe343f0*/ ulong ToUInt64(short value);
        static /*0xe31090*/ ulong ToUInt64(ushort value);
        static /*0xe34020*/ ulong ToUInt64(int value);
        static /*0x621c90*/ ulong ToUInt64(uint value);
        static /*0xe34440*/ ulong ToUInt64(long value);
        static /*0xe34280*/ ulong ToUInt64(float value);
        static /*0xe34070*/ ulong ToUInt64(double value);
        static /*0xe34370*/ ulong ToUInt64(decimal value);
        static /*0xe34000*/ ulong ToUInt64(string value, System.IFormatProvider provider);
        static /*0xe33150*/ float ToSingle(object value, System.IFormatProvider provider);
        static /*0xe33070*/ float ToSingle(sbyte value);
        static /*0xe33030*/ float ToSingle(byte value);
        static /*0xe33040*/ float ToSingle(short value);
        static /*0xe33020*/ float ToSingle(ushort value);
        static /*0xe33140*/ float ToSingle(int value);
        static /*0xe33050*/ float ToSingle(uint value);
        static /*0xe33060*/ float ToSingle(long value);
        static /*0xe330a0*/ float ToSingle(ulong value);
        static /*0xe33200*/ float ToSingle(double value);
        static /*0xe330d0*/ float ToSingle(decimal value);
        static /*0xe33080*/ float ToSingle(string value, System.IFormatProvider provider);
        static /*0xe33130*/ float ToSingle(bool value);
        static /*0xe31c50*/ double ToDouble(object value, System.IFormatProvider provider);
        static /*0xe31b60*/ double ToDouble(sbyte value);
        static /*0xe31c40*/ double ToDouble(byte value);
        static /*0xe31d40*/ double ToDouble(short value);
        static /*0xe31bd0*/ double ToDouble(ushort value);
        static /*0xe31b70*/ double ToDouble(int value);
        static /*0xe31d00*/ double ToDouble(uint value);
        static /*0xe31b80*/ double ToDouble(long value);
        static /*0xe31ba0*/ double ToDouble(ulong value);
        static /*0xe31d10*/ double ToDouble(float value);
        static /*0xe31be0*/ double ToDouble(decimal value);
        static /*0xe31d20*/ double ToDouble(string value, System.IFormatProvider provider);
        static /*0xe31b90*/ double ToDouble(bool value);
        static /*0xe31620*/ decimal ToDecimal(object value, System.IFormatProvider provider);
        static /*0xe31880*/ decimal ToDecimal(sbyte value);
        static /*0xe31540*/ decimal ToDecimal(byte value);
        static /*0xe31810*/ decimal ToDecimal(short value);
        static /*0xe318f0*/ decimal ToDecimal(ushort value);
        static /*0xe31730*/ decimal ToDecimal(int value);
        static /*0xe31a40*/ decimal ToDecimal(uint value);
        static /*0xe315b0*/ decimal ToDecimal(long value);
        static /*0xe31960*/ decimal ToDecimal(ulong value);
        static /*0xe314d0*/ decimal ToDecimal(float value);
        static /*0xe319d0*/ decimal ToDecimal(double value);
        static /*0xe31ab0*/ decimal ToDecimal(string value, System.IFormatProvider provider);
        static /*0xe317a0*/ decimal ToDecimal(bool value);
        static /*0xe31440*/ System.DateTime ToDateTime(string value);
        static /*0xe313d0*/ System.DateTime ToDateTime(string value, System.IFormatProvider provider);
        static /*0xe332a0*/ string ToString(object value, System.IFormatProvider provider);
        static /*0xe33550*/ string ToString(char value, System.IFormatProvider provider);
        static /*0xe334a0*/ string ToString(int value, System.IFormatProvider provider);
        static /*0xe33210*/ string ToString(byte value, int toBase);
        static /*0xe33410*/ string ToString(int value, int toBase);
        static /*0xe334c0*/ string ToString(long value, int toBase);
        static /*0xe300f0*/ byte[] FromBase64String(string s);
        static /*0xe34840*/ bool TryFromBase64Chars(System.ReadOnlySpan<char> chars, System.Span<byte> bytes, ref int bytesWritten);
        static /*0xe2f2e0*/ void CopyToTempBufferWithoutWhiteSpace(System.ReadOnlySpan<char> chars, System.Span<char> tempBuffer, ref int consumed, ref int charsWritten);
        static /*0xe302e0*/ bool IsSpace(char c);
        static /*0xe2fed0*/ byte[] FromBase64CharPtr(char* inputPtr, int inputLength);
        static /*0xe301b0*/ int FromBase64_ComputeResultLength(char* inputPtr, int inputLength);
    }

    class DBNull : System.Runtime.Serialization.ISerializable, System.IConvertible
    {
        static /*0x0*/ System.DBNull Value;

        static /*0xe35d90*/ DBNull();
        /*0x32f970*/ DBNull();
        /*0xe35e00*/ DBNull(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xe35830*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xe35d10*/ string ToString();
        /*0xe35d50*/ string ToString(System.IFormatProvider provider);
        /*0x6bba90*/ System.TypeCode GetTypeCode();
        /*0xe35840*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xe358e0*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xe35b10*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xe35890*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xe35a20*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xe35c20*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xe35a70*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xe35c70*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xe35ac0*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xe35cc0*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xe35b60*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xe359d0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xe35980*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xe35930*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xe35bb0*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct DateTime : System.IComparable, System.IFormattable, System.IConvertible, System.IComparable<System.DateTime>, System.IEquatable<System.DateTime>, System.Runtime.Serialization.ISerializable, System.ISpanFormattable
    {
        static long TicksPerMillisecond = 10000;
        static long TicksPerSecond = 10000000;
        static long TicksPerMinute = 600000000;
        static long TicksPerHour = 36000000000;
        static long TicksPerDay = 864000000000;
        static int MillisPerSecond = 1000;
        static int MillisPerMinute = 60000;
        static int MillisPerHour = 3600000;
        static int MillisPerDay = 86400000;
        static int DaysPerYear = 365;
        static int DaysPer4Years = 1461;
        static int DaysPer100Years = 36524;
        static int DaysPer400Years = 146097;
        static int DaysTo1601 = 584388;
        static int DaysTo1899 = 693593;
        static int DaysTo1970 = 719162;
        static int DaysTo10000 = 3652059;
        static long MinTicks = 0;
        static long MaxTicks = 3155378975999999999;
        static long MaxMillis = 315537897600000;
        static long UnixEpochTicks = 621355968000000000;
        static long FileTimeOffset = 504911232000000000;
        static long DoubleDateOffset = 599264352000000000;
        static long OADateMinAsTicks = 31241376000000000;
        static double OADateMinAsDouble = -657435;
        static double OADateMaxAsDouble = 2958466;
        static int DatePartYear = 0;
        static int DatePartDayOfYear = 1;
        static int DatePartMonth = 2;
        static int DatePartDay = 3;
        static ulong TicksMask = 4611686018427387903;
        static ulong FlagsMask = 13835058055282163712;
        static ulong LocalMask = 9223372036854775808;
        static long TicksCeiling = 4611686018427387904;
        static ulong KindUnspecified = 0;
        static ulong KindUtc = 4611686018427387904;
        static ulong KindLocal = 9223372036854775808;
        static ulong KindLocalAmbiguousDst = 13835058055282163712;
        static int KindShift = 62;
        static string TicksField = "ticks";
        static string DateDataField = "dateData";
        static /*0x0*/ int[] s_daysToMonth365;
        static /*0x8*/ int[] s_daysToMonth366;
        static /*0x10*/ System.DateTime MinValue;
        static /*0x18*/ System.DateTime MaxValue;
        static /*0x20*/ System.DateTime UnixEpoch;
        /*0x10*/ ulong _dateData;

        static /*0xe38ab0*/ DateTime();
        static /*0xe365c0*/ int Compare(System.DateTime t1, System.DateTime t2);
        static /*0xe36640*/ long DateToTicks(int year, int month, int day);
        static /*0xe38030*/ long TimeToTicks(int hour, int minute, int second);
        static /*0xe36810*/ int DaysInMonth(int year, int month);
        static /*0xe36b10*/ System.DateTime FromBinary(long dateData);
        static /*0xe36a70*/ System.DateTime FromBinaryRaw(long dateData);
        static /*0xe36ea0*/ System.DateTime FromFileTime(long fileTime);
        static /*0xe36de0*/ System.DateTime FromFileTimeUtc(long fileTime);
        static /*0xe37660*/ System.DateTime SpecifyKind(System.DateTime value, System.DateTimeKind kind);
        static /*0xe39810*/ System.DateTime get_Now();
        static /*0xe37480*/ bool IsLeapYear(int year);
        static /*0xe37560*/ System.DateTime Parse(string s, System.IFormatProvider provider);
        static /*0xe38970*/ bool TryParse(string s, System.IFormatProvider provider, System.Globalization.DateTimeStyles styles, ref System.DateTime result);
        static /*0xe39b90*/ System.DateTime op_Addition(System.DateTime d, System.TimeSpan t);
        static /*0xe39f20*/ System.DateTime op_Subtraction(System.DateTime d, System.TimeSpan t);
        static /*0xe3a020*/ System.TimeSpan op_Subtraction(System.DateTime d1, System.DateTime d2);
        static /*0xe39ca0*/ bool op_Equality(System.DateTime d1, System.DateTime d2);
        static /*0xe39de0*/ bool op_Inequality(System.DateTime d1, System.DateTime d2);
        static /*0xe39eb0*/ bool op_LessThan(System.DateTime t1, System.DateTime t2);
        static /*0xe39e40*/ bool op_LessThanOrEqual(System.DateTime t1, System.DateTime t2);
        static /*0xe39d70*/ bool op_GreaterThan(System.DateTime t1, System.DateTime t2);
        static /*0xe39d00*/ bool op_GreaterThanOrEqual(System.DateTime t1, System.DateTime t2);
        static /*0xe386c0*/ bool TryCreate(int year, int month, int day, int hour, int minute, int second, int millisecond, ref System.DateTime result);
        static /*0xe39ae0*/ System.DateTime get_UtcNow();
        static /*0xe37410*/ long GetSystemTimeAsFileTime();
        /*0xe38f90*/ DateTime(long ticks);
        /*0x9e29e0*/ DateTime(ulong dateData);
        /*0xe39310*/ DateTime(long ticks, System.DateTimeKind kind);
        /*0xe39020*/ DateTime(long ticks, System.DateTimeKind kind, bool isAmbiguousDst);
        /*0xe390c0*/ DateTime(int year, int month, int day);
        /*0xe38bf0*/ DateTime(int year, int month, int day, int hour, int minute, int second);
        /*0xe39140*/ DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);
        /*0xe38c90*/ DateTime(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xe39610*/ long get_InternalTicks();
        /*0xe395f0*/ ulong get_InternalKind();
        /*0xe36350*/ System.DateTime Add(double value, int scale);
        /*0xe35e60*/ System.DateTime AddDays(double value);
        /*0xe35ec0*/ System.DateTime AddMilliseconds(double value);
        /*0xe35f20*/ System.DateTime AddMonths(int months);
        /*0xe36170*/ System.DateTime AddTicks(long value);
        /*0xe36280*/ System.DateTime AddYears(int value);
        /*0xe36470*/ int CompareTo(object value);
        /*0xe36560*/ int CompareTo(System.DateTime value);
        /*0xe36950*/ bool Equals(object value);
        /*0xe36a10*/ bool Equals(System.DateTime value);
        /*0xe37f40*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xe39400*/ System.DateTime get_Date();
        /*0xe36fd0*/ int GetDatePart(int part);
        /*0xe371c0*/ void GetDatePart(ref int year, ref int month, ref int day);
        /*0xe39510*/ int get_Day();
        /*0xe39480*/ System.DayOfWeek get_DayOfWeek();
        /*0xe373b0*/ int GetHashCode();
        /*0xe39560*/ int get_Hour();
        /*0xe37420*/ bool IsAmbiguousDaylightSavingTime();
        /*0xe39630*/ System.DateTimeKind get_Kind();
        /*0xe396a0*/ int get_Millisecond();
        /*0xe39730*/ int get_Minute();
        /*0xe397c0*/ int get_Month();
        /*0xe39990*/ int get_Second();
        /*0xe39a20*/ long get_Ticks();
        /*0xe39a70*/ System.TimeSpan get_TimeOfDay();
        /*0xe39b40*/ int get_Year();
        /*0xe376e0*/ System.TimeSpan Subtract(System.DateTime value);
        /*0xe38370*/ System.DateTime ToLocalTime();
        /*0xe380f0*/ System.DateTime ToLocalTime(bool throwOnOverflow);
        /*0xe38430*/ string ToString();
        /*0xe384f0*/ string ToString(string format);
        /*0xe38490*/ string ToString(System.IFormatProvider provider);
        /*0xe383c0*/ string ToString(string format, System.IFormatProvider provider);
        /*0xe388c0*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0xe38550*/ System.DateTime ToUniversalTime();
        /*0x6bbaf0*/ System.TypeCode GetTypeCode();
        /*0xe37750*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xe37870*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xe37bd0*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xe377e0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xe37a20*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xe37d90*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xe37ab0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xe37e20*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xe37b40*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xe37eb0*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xe37c60*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xe37990*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xe37900*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x6937d0*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xe37cf0*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
        /*0x6937d0*/ long ToBinaryRaw();
    }

    enum DateTimeKind
    {
        Unspecified = 0,
        Utc = 1,
        Local = 2,
    }

    struct DateTimeOffset : System.IComparable, System.IFormattable, System.IComparable<System.DateTimeOffset>, System.IEquatable<System.DateTimeOffset>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.ISpanFormattable
    {
        static /*0x0*/ System.DateTimeOffset MinValue;
        static /*0x10*/ System.DateTimeOffset MaxValue;
        static /*0x20*/ System.DateTimeOffset UnixEpoch;
        /*0x10*/ System.DateTime _dateTime;
        /*0x18*/ short _offsetMinutes;

        static /*0xf404a0*/ DateTimeOffset();
        static /*0xf3fd30*/ bool TryParse(string input, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, ref System.DateTimeOffset result);
        static /*0xf40200*/ short ValidateOffset(System.TimeSpan offset);
        static /*0xf400f0*/ System.DateTime ValidateDate(System.DateTime dateTime, System.TimeSpan offset);
        static /*0xf40380*/ System.Globalization.DateTimeStyles ValidateStyles(System.Globalization.DateTimeStyles style, string parameterName);
        /*0xf408f0*/ DateTimeOffset(long ticks, System.TimeSpan offset);
        /*0xf40740*/ DateTimeOffset(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf40ac0*/ System.DateTime get_UtcDateTime();
        /*0xf409b0*/ System.DateTime get_ClockDateTime();
        /*0xf40a90*/ System.TimeSpan get_Offset();
        /*0xf3f5e0*/ int System.IComparable.CompareTo(object obj);
        /*0xf3f150*/ int CompareTo(System.DateTimeOffset other);
        /*0xf3f2a0*/ bool Equals(object obj);
        /*0xf3f410*/ bool Equals(System.DateTimeOffset other);
        /*0xf3f7d0*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        /*0xf3f8f0*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf3f520*/ int GetHashCode();
        /*0xf3fa90*/ string ToString();
        /*0xf3fb50*/ string ToString(string format);
        /*0xf3f9b0*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0xf3fc20*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
    }

    enum DayOfWeek
    {
        Sunday = 0,
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6,
    }

    class DivideByZeroException : System.ArithmeticException
    {
        /*0xf48360*/ DivideByZeroException();
        /*0xea43e0*/ DivideByZeroException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class DllNotFoundException : System.TypeLoadException
    {
        /*0xf483f0*/ DllNotFoundException();
        /*0xf483d0*/ DllNotFoundException(string message);
        /*0xf483b0*/ DllNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Double : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<double>, System.IEquatable<double>, System.ISpanFormattable
    {
        static double MinValue = -1.7976931348623157e+308;
        static double MaxValue = 1.7976931348623157e+308;
        static double Epsilon = 5e-324;
        static double NegativeInfinity = NaN;
        static double PositiveInfinity = NaN;
        static double NaN = NaN;
        static double NegativeZero = 0;
        /*0x10*/ double m_value;

        static /*0xf48710*/ bool IsFinite(double d);
        static /*0xf48740*/ bool IsInfinity(double d);
        static /*0xf48770*/ bool IsNaN(double d);
        static /*0xf487c0*/ bool IsNegative(double d);
        static /*0xf487a0*/ bool IsNegativeInfinity(double d);
        static /*0xf487d0*/ bool IsPositiveInfinity(double d);
        static /*0xf489c0*/ double Parse(string s);
        static /*0xf487f0*/ double Parse(string s, System.IFormatProvider provider);
        static /*0xf488d0*/ double Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0xf49420*/ bool TryParse(string s, ref double result);
        static /*0xf49360*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref double result);
        static /*0xf494c0*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref double result);
        /*0xf48440*/ int CompareTo(object value);
        /*0xf48570*/ int CompareTo(double value);
        /*0xf485d0*/ bool Equals(object obj);
        /*0xf48690*/ bool Equals(double obj);
        /*0xf486d0*/ int GetHashCode();
        /*0xf491a0*/ string ToString();
        /*0xf49120*/ string ToString(string format);
        /*0xf490a0*/ string ToString(System.IFormatProvider provider);
        /*0xf49210*/ string ToString(string format, System.IFormatProvider provider);
        /*0xf492a0*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0xf48700*/ System.TypeCode GetTypeCode();
        /*0xf48a90*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xf48b50*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xf48e20*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xf48af0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xf48d00*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xf48f80*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xf48d60*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xf48fe0*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xf48dc0*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xf49040*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xf48e80*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xf48cf0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xf48c70*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xf48be0*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xf48ee0*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class EntryPointNotFoundException : System.TypeLoadException
    {
        /*0xf49700*/ EntryPointNotFoundException();
        /*0xf49750*/ EntryPointNotFoundException(string message);
        /*0xf483b0*/ EntryPointNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class EventArgs
    {
        static /*0x0*/ System.EventArgs Empty;

        static /*0xf49770*/ EventArgs();
        /*0x32f970*/ EventArgs();
    }

    class EventHandler : System.MulticastDelegate
    {
        /*0x722be0*/ EventHandler(object object, nint method);
        /*0x722200*/ void Invoke(object sender, System.EventArgs e);
    }

    class EventHandler<TEventArgs> : System.MulticastDelegate
    {
        EventHandler(object object, nint method);
        /*0x2a5510*/ void Invoke(object sender, TEventArgs e);
    }

    class ExecutionEngineException : System.SystemException
    {
        /*0xf497e0*/ ExecutionEngineException();
        /*0xf49830*/ ExecutionEngineException(string message);
        /*0xe291b0*/ ExecutionEngineException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class FieldAccessException : System.MemberAccessException
    {
        /*0xf49870*/ FieldAccessException();
        /*0xf49850*/ FieldAccessException(string message);
        /*0xea43e0*/ FieldAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class FlagsAttribute : System.Attribute
    {
        /*0x534220*/ FlagsAttribute();
    }

    class FormatException : System.SystemException
    {
        /*0xf49900*/ FormatException();
        /*0xf498c0*/ FormatException(string message);
        /*0xf498e0*/ FormatException(string message, System.Exception innerException);
        /*0xe291b0*/ FormatException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Gen2GcCallback : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
    {
        /*0x10*/ System.Func<object, bool> _callback;
        /*0x18*/ System.Runtime.InteropServices.GCHandle _weakTargetObj;

        static /*0xf49a60*/ void Register(System.Func<object, bool> callback, object targetObj);
        /*0x534220*/ Gen2GcCallback();
        /*0xf49af0*/ void Setup(System.Func<object, bool> callback, object targetObj);
        /*0xf49950*/ void Finalize();
    }

    class DateTimeFormat
    {
        static /*0x0*/ System.TimeSpan NullOffset;
        static /*0x8*/ char[] allStandardFormats;
        static /*0x10*/ System.Globalization.DateTimeFormatInfo InvariantFormatInfo;
        static /*0x18*/ string[] InvariantAbbreviatedMonthNames;
        static /*0x20*/ string[] InvariantAbbreviatedDayNames;
        static /*0x28*/ string[] fixedNumberFormats;

        static /*0xf3ede0*/ DateTimeFormat();
        static /*0xf3cd40*/ void FormatDigits(System.Text.StringBuilder outputBuffer, int value, int len);
        static /*0xf3cdc0*/ void FormatDigits(System.Text.StringBuilder outputBuffer, int value, int len, bool overrideLengthLimit);
        static /*0xf3d9c0*/ void HebrewFormatDigits(System.Text.StringBuilder outputBuffer, int digits);
        static /*0xf3ddc0*/ int ParseRepeatPattern(System.ReadOnlySpan<char> format, int pos, char patternChar);
        static /*0xf3cd00*/ string FormatDayOfWeek(int dayOfWeek, int repeat, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0xf3cf90*/ string FormatMonth(int month, int repeatCount, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0xf3cec0*/ string FormatHebrewMonthName(System.DateTime time, int month, int repeatCount, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0xf3dbd0*/ int ParseQuoteString(System.ReadOnlySpan<char> format, int pos, System.Text.StringBuilder result);
        static /*0xf3db60*/ int ParseNextChar(System.ReadOnlySpan<char> format, int pos);
        static /*0xf3da30*/ bool IsUseGenitiveForm(System.ReadOnlySpan<char> format, int index, int tokenLen, char patternToMatch);
        static /*0xf3b9c0*/ System.Text.StringBuilder FormatCustomized(System.DateTime dateTime, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.TimeSpan offset, System.Text.StringBuilder result);
        static /*0xf3b600*/ void FormatCustomizedTimeZone(System.DateTime dateTime, System.TimeSpan offset, System.ReadOnlySpan<char> format, int tokenLen, bool timeOnly, System.Text.StringBuilder result);
        static /*0xf3b320*/ void FormatCustomizedRoundripTimeZone(System.DateTime dateTime, System.TimeSpan offset, System.Text.StringBuilder result);
        static /*0xf3abd0*/ void Append2DigitNumber(System.Text.StringBuilder result, int val);
        static /*0xf3d680*/ string GetRealFormat(System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0xf3ac50*/ string ExpandPredefinedFormat(System.ReadOnlySpan<char> format, ref System.DateTime dateTime, ref System.Globalization.DateTimeFormatInfo dtfi, ref System.TimeSpan offset);
        static /*0xf3d310*/ string Format(System.DateTime dateTime, string format, System.IFormatProvider provider);
        static /*0xf3d3a0*/ string Format(System.DateTime dateTime, string format, System.IFormatProvider provider, System.TimeSpan offset);
        static /*0xf3e9d0*/ bool TryFormat(System.DateTime dateTime, System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0xf3ea90*/ bool TryFormat(System.DateTime dateTime, System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.TimeSpan offset);
        static /*0xf3cfd0*/ System.Text.StringBuilder FormatStringBuilder(System.DateTime dateTime, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.TimeSpan offset);
        static /*0xf3de50*/ bool TryFormatO(System.DateTime dateTime, System.TimeSpan offset, System.Span<char> destination, ref int charsWritten);
        static /*0xf3e4e0*/ bool TryFormatR(System.DateTime dateTime, System.TimeSpan offset, System.Span<char> destination, ref int charsWritten);
        static /*0xf3ed80*/ void WriteTwoDecimalDigits(uint value, System.Span<char> destination, int offset);
        static /*0xf3aad0*/ void WriteFourDecimalDigits(uint value, System.Span<char> buffer, int startingIndex);
        static /*0xf3ecc0*/ void WriteDigits(ulong value, System.Span<char> buffer);
        static /*0x32d010*/ void InvalidFormatForLocal(System.ReadOnlySpan<char> format, System.DateTime dateTime);
    }

    class DateTimeParse
    {
        static /*0x0*/ System.DateTimeParse.DS[][] dateParsingStates;

        static /*0xf47bb0*/ DateTimeParse();
        static /*0xf43d60*/ bool IsDigit(char ch);
        static /*0xf45030*/ bool ParseFraction(ref System.__DTString str, ref double result);
        static /*0xf457b0*/ bool ParseTimeZone(ref System.__DTString str, ref System.TimeSpan result);
        static /*0xf43b80*/ bool HandleTimeZone(ref System.__DTString str, ref System.DateTimeResult result);
        static /*0xf43d70*/ bool Lex(System.DateTimeParse.DS dps, ref System.__DTString str, ref System.DateTimeToken dtok, ref System.DateTimeRawInfo raw, ref System.DateTimeResult result, ref System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles);
        static /*0xf43330*/ System.Globalization.Calendar GetJapaneseCalendarDefaultInstance();
        static /*0xf435b0*/ System.Globalization.Calendar GetTaiwanCalendarDefaultInstance();
        static /*0xf47960*/ bool VerifyValidPunctuation(ref System.__DTString str);
        static /*0xf43800*/ bool GetYearMonthDayOrder(string datePattern, System.Globalization.DateTimeFormatInfo dtfi, ref int order);
        static /*0xf43a30*/ bool GetYearMonthOrder(string pattern, System.Globalization.DateTimeFormatInfo dtfi, ref int order);
        static /*0xf43420*/ bool GetMonthDayOrder(string pattern, System.Globalization.DateTimeFormatInfo dtfi, ref int order);
        static /*0xf46b40*/ bool TryAdjustYear(ref System.DateTimeResult result, int year, ref int adjustedYear);
        static /*0xf46ac0*/ bool SetDateYMD(ref System.DateTimeResult result, int year, int month, int day);
        static /*0xf46960*/ bool SetDateMDY(ref System.DateTimeResult result, int month, int day, int year);
        static /*0xf468b0*/ bool SetDateDMY(ref System.DateTimeResult result, int day, int month, int year);
        static /*0xf46a10*/ bool SetDateYDM(ref System.DateTimeResult result, int year, int day, int month);
        static /*0xf43100*/ void GetDefaultYear(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles);
        static /*0xf42b20*/ bool GetDayOfNN(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0xf42570*/ bool GetDayOfNNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0xf42110*/ bool GetDayOfMN(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0xf431a0*/ bool GetHebrewDayOfNM(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0xf42340*/ bool GetDayOfNM(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0xf41d70*/ bool GetDayOfMNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0xf42e90*/ bool GetDayOfYNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0xf429a0*/ bool GetDayOfNNY(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0xf42ca0*/ bool GetDayOfYMN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0xf42ff0*/ bool GetDayOfYN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0xf42d80*/ bool GetDayOfYM(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0xf40b60*/ void AdjustTimeMark(System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeRawInfo raw);
        static /*0xf40b20*/ bool AdjustHour(ref int hour, System.DateTimeParse.TM timeMark);
        static /*0xf43790*/ bool GetTimeOfN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0xf43720*/ bool GetTimeOfNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0xf436a0*/ bool GetTimeOfNNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0xf416f0*/ bool GetDateOfDSN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0xf41760*/ bool GetDateOfNDS(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0xf41820*/ bool GetDateOfNNDS(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0xf45d00*/ bool ProcessDateTimeSuffix(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, ref System.DateTimeToken dtok);
        static /*0xf45dc0*/ bool ProcessHebrewTerminalState(System.DateTimeParse.DS dps, ref System.__DTString str, ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0xf46300*/ bool ProcessTerminalState(System.DateTimeParse.DS dps, ref System.__DTString str, ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0xf45bc0*/ System.DateTime Parse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles);
        static /*0xf46d50*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.DateTime result);
        static /*0xf46ba0*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.DateTime result, ref System.TimeSpan offset);
        static /*0xf46ea0*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.DateTimeResult result);
        static /*0xf41480*/ bool DetermineTimeZoneAdjustments(ref System.__DTString str, ref System.DateTimeResult result, System.Globalization.DateTimeStyles styles, bool bTimeOnly);
        static /*0xf41220*/ bool DateTimeOffsetTimeZonePostProcessing(ref System.__DTString str, ref System.DateTimeResult result, System.Globalization.DateTimeStyles styles);
        static /*0xf40ee0*/ bool AdjustTimeZoneToUniversal(ref System.DateTimeResult result);
        static /*0xf40c20*/ bool AdjustTimeZoneToLocal(ref System.DateTimeResult result, bool bTimeOnly);
        static /*0xf45120*/ bool ParseISO8601(ref System.DateTimeRawInfo raw, ref System.__DTString str, System.Globalization.DateTimeStyles styles, ref System.DateTimeResult result);
        static /*0xf44f90*/ bool ParseDigits(ref System.__DTString str, int digitLen, ref int result);
        static /*0xf44e00*/ bool ParseDigits(ref System.__DTString str, int minDigitLen, int maxDigitLen, ref int result);
        static /*0xf41a60*/ System.DateTime GetDateTimeNow(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles);
        static /*0xf40fe0*/ bool CheckDefaultDateTime(ref System.DateTimeResult result, ref System.Globalization.Calendar cal, System.Globalization.DateTimeStyles styles);
        static /*0xf41b80*/ System.Exception GetDateTimeParseException(ref System.DateTimeResult result);

        enum DTT
        {
            End = 0,
            NumEnd = 1,
            NumAmpm = 2,
            NumSpace = 3,
            NumDatesep = 4,
            NumTimesep = 5,
            MonthEnd = 6,
            MonthSpace = 7,
            MonthDatesep = 8,
            NumDatesuff = 9,
            NumTimesuff = 10,
            DayOfWeek = 11,
            YearSpace = 12,
            YearDateSep = 13,
            YearEnd = 14,
            TimeZone = 15,
            Era = 16,
            NumUTCTimeMark = 17,
            Unk = 18,
            NumLocalTimeMark = 19,
            Max = 20,
        }

        enum TM
        {
            NotSet = -1,
            AM = 0,
            PM = 1,
        }

        enum DS
        {
            BEGIN = 0,
            N = 1,
            NN = 2,
            D_Nd = 3,
            D_NN = 4,
            D_NNd = 5,
            D_M = 6,
            D_MN = 7,
            D_NM = 8,
            D_MNd = 9,
            D_NDS = 10,
            D_Y = 11,
            D_YN = 12,
            D_YNd = 13,
            D_YM = 14,
            D_YMd = 15,
            D_S = 16,
            T_S = 17,
            T_Nt = 18,
            T_NNt = 19,
            ERROR = 20,
            DX_NN = 21,
            DX_NNN = 22,
            DX_MN = 23,
            DX_NM = 24,
            DX_MNN = 25,
            DX_DS = 26,
            DX_DSN = 27,
            DX_NDS = 28,
            DX_NNDS = 29,
            DX_YNN = 30,
            DX_YMN = 31,
            DX_YN = 32,
            DX_YM = 33,
            TX_N = 34,
            TX_NN = 35,
            TX_NNN = 36,
            TX_TS = 37,
            DX_NNY = 38,
        }
    }

    struct __DTString
    {
        static /*0x0*/ char[] WhiteSpaceChecks;
        /*0x10*/ System.ReadOnlySpan<char> Value;
        /*0x20*/ int Index;
        /*0x24*/ char m_current;
        /*0x28*/ System.Globalization.CompareInfo m_info;
        /*0x30*/ bool m_checkDigitToken;

        static /*0xf4ded0*/ __DTString();
        /*0xf4df50*/ __DTString(System.ReadOnlySpan<char> str, System.Globalization.DateTimeFormatInfo dtfi);
        /*0xf4e030*/ int get_Length();
        /*0xf4d020*/ bool GetNext();
        /*0xf4ce00*/ bool AtEnd();
        /*0xf4cd60*/ bool Advance(int count);
        /*0xf4d0c0*/ void GetRegularToken(ref System.TokenType tokenType, ref int tokenValue, System.Globalization.DateTimeFormatInfo dtfi);
        /*0xf4d3c0*/ System.TokenType GetSeparatorToken(System.Globalization.DateTimeFormatInfo dtfi, ref int indexBeforeSeparator, ref char charBeforeSeparator);
        /*0xf4d740*/ bool MatchSpecifiedWords(string target, bool checkWordBoundary, ref int matchLength);
        /*0xf4dc10*/ bool Match(char ch);
        /*0xf4cf60*/ bool GetNextDigit();
        /*0xf4cf10*/ char GetChar();
        /*0xf4cf30*/ int GetDigit();
        /*0xf4de10*/ void SkipWhiteSpaces();
        /*0xf4dcd0*/ bool SkipWhiteSpaceCurrent();
        /*0xf4d5e0*/ System.DTSubString GetSubString();
        /*0xf4ce70*/ void ConsumeSubString(System.DTSubString sub);
    }

    enum DTSubStringType
    {
        Unknown = 0,
        Invalid = 1,
        Number = 2,
        End = 3,
        Other = 4,
    }

    struct DTSubString
    {
        /*0x10*/ System.ReadOnlySpan<char> s;
        /*0x20*/ int index;
        /*0x24*/ int length;
        /*0x28*/ System.DTSubStringType type;
        /*0x2c*/ int value;

        /*0xf3aba0*/ char get_Item(int relativeIndex);
    }

    struct DateTimeToken
    {
        /*0x10*/ System.DateTimeParse.DTT dtt;
        /*0x14*/ System.TokenType suffix;
        /*0x18*/ int num;
    }

    struct DateTimeRawInfo
    {
        /*0x10*/ int* num;
        /*0x18*/ int numCount;
        /*0x1c*/ int month;
        /*0x20*/ int year;
        /*0x24*/ int dayOfWeek;
        /*0x28*/ int era;
        /*0x2c*/ System.DateTimeParse.TM timeMark;
        /*0x30*/ double fraction;
        /*0x38*/ bool hasSameDateAndTimeSeparators;

        /*0xf48290*/ void Init(int* numberBuffer);
        /*0xf48270*/ void AddNumber(int value);
        /*0xbcf1b0*/ int GetNumber(int index);
    }

    enum ParseFailureKind
    {
        None = 0,
        ArgumentNull = 1,
        Format = 2,
        FormatWithParameter = 3,
        FormatWithOriginalDateTime = 4,
        FormatWithFormatSpecifier = 5,
        FormatWithOriginalDateTimeAndParameter = 6,
        FormatBadDateTimeCalendar = 7,
    }

    enum ParseFlags
    {
        HaveYear = 1,
        HaveMonth = 2,
        HaveDay = 4,
        HaveHour = 8,
        HaveMinute = 16,
        HaveSecond = 32,
        HaveTime = 64,
        HaveDate = 128,
        TimeZoneUsed = 256,
        TimeZoneUtc = 512,
        ParsedMonthName = 1024,
        CaptureOffset = 2048,
        YearDefault = 4096,
        Rfc1123Pattern = 8192,
        UtcSortPattern = 16384,
    }

    struct DateTimeResult
    {
        /*0x10*/ int Year;
        /*0x14*/ int Month;
        /*0x18*/ int Day;
        /*0x1c*/ int Hour;
        /*0x20*/ int Minute;
        /*0x24*/ int Second;
        /*0x28*/ double fraction;
        /*0x30*/ int era;
        /*0x34*/ System.ParseFlags flags;
        /*0x38*/ System.TimeSpan timeZoneOffset;
        /*0x40*/ System.Globalization.Calendar calendar;
        /*0x48*/ System.DateTime parsedDate;
        /*0x50*/ System.ParseFailureKind failure;
        /*0x58*/ string failureMessageID;
        /*0x60*/ object failureMessageFormatArgument;
        /*0x68*/ string failureArgumentName;
        /*0x70*/ System.ReadOnlySpan<char> originalDateTimeString;
        /*0x80*/ System.ReadOnlySpan<char> failedFormatSpecifier;

        /*0xf482c0*/ void Init(System.ReadOnlySpan<char> originalDateTimeString);
        /*0xd4ab30*/ void SetDate(int year, int month, int day);
        /*0xf482f0*/ void SetBadDateTimeFailure();
        /*0xf48350*/ void SetFailure(System.ParseFailureKind failure, string failureMessageID);
        /*0xf48340*/ void SetFailure(System.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
    }

    enum TokenType
    {
        NumberToken = 1,
        YearNumberToken = 2,
        Am = 3,
        Pm = 4,
        MonthToken = 5,
        EndOfString = 6,
        DayOfWeekToken = 7,
        TimeZoneToken = 8,
        EraToken = 9,
        DateWordToken = 10,
        UnknownToken = 11,
        HebrewNumber = 12,
        JapaneseEraToken = 13,
        TEraToken = 14,
        IgnorableSymbol = 15,
        SEP_Unk = 256,
        SEP_End = 512,
        SEP_Space = 768,
        SEP_Am = 1024,
        SEP_Pm = 1280,
        SEP_Date = 1536,
        SEP_Time = 1792,
        SEP_YearSuff = 2048,
        SEP_MonthSuff = 2304,
        SEP_DaySuff = 2560,
        SEP_HourSuff = 2816,
        SEP_MinuteSuff = 3072,
        SEP_SecondSuff = 3328,
        SEP_LocalTimeMark = 3584,
        SEP_DateOrOffset = 3840,
        RegularTokenMask = 255,
        SeparatorTokenMask = 65280,
    }

    struct Guid : System.IFormattable, System.IComparable, System.IComparable<System.Guid>, System.IEquatable<System.Guid>, System.ISpanFormattable
    {
        static /*0x0*/ System.Guid Empty;
        /*0x10*/ int _a;
        /*0x14*/ short _b;
        /*0x16*/ short _c;
        /*0x18*/ byte _d;
        /*0x19*/ byte _e;
        /*0x1a*/ byte _f;
        /*0x1b*/ byte _g;
        /*0x1c*/ byte _h;
        /*0x1d*/ byte _i;
        /*0x1e*/ byte _j;
        /*0x1f*/ byte _k;

        static /*0xf4a550*/ System.Guid NewGuid();
        static /*0xf4a630*/ System.Guid Parse(string input);
        static /*0xf4a5a0*/ System.Guid Parse(System.ReadOnlySpan<char> input);
        static /*0xf4c760*/ bool TryParseGuid(System.ReadOnlySpan<char> guidString, System.Guid.GuidStyles flags, ref System.Guid.GuidResult result);
        static /*0xf4bb90*/ bool TryParseGuidWithHexPrefix(System.ReadOnlySpan<char> guidString, ref System.Guid.GuidResult result);
        static /*0xf4c320*/ bool TryParseGuidWithNoStyle(System.ReadOnlySpan<char> guidString, ref System.Guid.GuidResult result);
        static /*0xf4b840*/ bool TryParseGuidWithDashes(System.ReadOnlySpan<char> guidString, ref System.Guid.GuidResult result);
        static /*0xf4aa80*/ bool StringToShort(System.ReadOnlySpan<char> str, int requiredLength, int flags, ref short result, ref System.Guid.GuidResult parseResult);
        static /*0xf4aa20*/ bool StringToShort(System.ReadOnlySpan<char> str, ref int parsePos, int requiredLength, int flags, ref short result, ref System.Guid.GuidResult parseResult);
        static /*0xf4a760*/ bool StringToInt(System.ReadOnlySpan<char> str, int requiredLength, int flags, ref int result, ref System.Guid.GuidResult parseResult);
        static /*0xf4a7b0*/ bool StringToInt(System.ReadOnlySpan<char> str, ref int parsePos, int requiredLength, int flags, ref int result, ref System.Guid.GuidResult parseResult);
        static /*0xf4a930*/ bool StringToLong(System.ReadOnlySpan<char> str, ref int parsePos, int flags, ref long result, ref System.Guid.GuidResult parseResult);
        static /*0xf49fa0*/ System.ReadOnlySpan<char> EatAllWhitespace(System.ReadOnlySpan<char> str);
        static /*0xf4a490*/ bool IsHexPrefix(System.ReadOnlySpan<char> str, int i);
        static /*0xf4cd30*/ bool op_Equality(System.Guid a, System.Guid b);
        static /*0xf4a350*/ char HexToChar(int a);
        static /*0xf4a410*/ int HexsToChars(char* guidChars, int a, int b);
        static /*0xf4a370*/ int HexsToCharsHexOutput(char* guidChars, int a, int b);
        /*0xf4cb00*/ Guid(byte[] b);
        /*0xf4c930*/ Guid(System.ReadOnlySpan<byte> b);
        /*0xf4cce0*/ Guid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);
        /*0xf4cbc0*/ Guid(string g);
        /*0xf4ab20*/ string ToString();
        /*0xf4a320*/ int GetHashCode();
        /*0xf4a270*/ bool Equals(object o);
        /*0xf4a240*/ bool Equals(System.Guid g);
        /*0xf4a330*/ int GetResult(uint me, uint them);
        /*0xf49b30*/ int CompareTo(object value);
        /*0xf49e00*/ int CompareTo(System.Guid value);
        /*0xf4add0*/ string ToString(string format);
        /*0xf4ab60*/ string ToString(string format, System.IFormatProvider provider);
        /*0xf4ade0*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format);
        /*0xf4aae0*/ bool System.ISpanFormattable.TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);

        enum GuidStyles
        {
            None = 0,
            AllowParenthesis = 1,
            AllowBraces = 2,
            AllowDashes = 4,
            AllowHexPrefix = 8,
            RequireParenthesis = 16,
            RequireBraces = 32,
            RequireDashes = 64,
            RequireHexPrefix = 128,
            HexFormat = 160,
            NumberFormat = 0,
            DigitFormat = 64,
            BraceFormat = 96,
            ParenthesisFormat = 80,
            Any = 15,
        }

        enum GuidParseThrowStyle
        {
            None = 0,
            All = 1,
            AllButOverflow = 2,
        }

        enum ParseFailureKind
        {
            None = 0,
            ArgumentNull = 1,
            Format = 2,
            FormatWithParameter = 3,
            NativeException = 4,
            FormatWithInnerException = 5,
        }

        struct GuidResult
        {
            /*0x10*/ System.Guid _parsedGuid;
            /*0x20*/ System.Guid.GuidParseThrowStyle _throwStyle;
            /*0x24*/ System.Guid.ParseFailureKind _failure;
            /*0x28*/ string _failureMessageID;
            /*0x30*/ object _failureMessageFormatArgument;
            /*0x38*/ string _failureArgumentName;
            /*0x40*/ System.Exception _innerException;

            /*0xdcd9c0*/ void Init(System.Guid.GuidParseThrowStyle canThrow);
            /*0xf4e5b0*/ void SetFailure(System.Exception nativeException);
            /*0xf4e5d0*/ void SetFailure(System.Guid.ParseFailureKind failure, string failureMessageID);
            /*0xf4e520*/ void SetFailure(System.Guid.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
            /*0xf4e490*/ void SetFailure(System.Guid.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName, System.Exception innerException);
            /*0xf4e2f0*/ System.Exception GetGuidParseException();
        }
    }

    struct HashCode
    {
        static /*0x0*/ uint s_seed;
        /*0x10*/ uint _v1;
        /*0x14*/ uint _v2;
        /*0x18*/ uint _v3;
        /*0x1c*/ uint _v4;
        /*0x20*/ uint _queue1;
        /*0x24*/ uint _queue2;
        /*0x28*/ uint _queue3;
        /*0x2c*/ uint _length;

        static /*0xf4ee20*/ HashCode();
        static /*0xf4e850*/ uint GenerateGlobalSeed();
        static /*0x2a5510*/ int Combine<T1, T2>(T1 value1, T2 value2);
        static /*0x2a5510*/ int Combine<T1, T2, T3, T4>(T1 value1, T2 value2, T3 value3, T4 value4);
        static /*0x2a5510*/ int Combine<T1, T2, T3, T4, T5, T6, T7, T8>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8);
        static /*0xf4eb40*/ uint Rol(uint value, int count);
        static /*0xf4e8d0*/ void Initialize(ref uint v1, ref uint v2, ref uint v3, ref uint v4);
        static /*0xf4eb60*/ uint Round(uint hash, uint input);
        static /*0xf4ead0*/ uint QueueRound(uint hash, uint queuedValue);
        static /*0xf4ea30*/ uint MixState(uint v1, uint v2, uint v3, uint v4);
        static /*0xf4e9a0*/ uint MixEmptyState();
        static /*0xf4ea00*/ uint MixFinal(uint hash);
        /*0x2a5510*/ void Add<T>(T value);
        /*0xf4e660*/ void Add(int value);
        /*0xf4ebd0*/ int ToHashCode();
        /*0xf4e880*/ int GetHashCode();
        /*0xf4e800*/ bool Equals(object obj);
    }

    interface IAsyncResult
    {
        /*0x17cb40*/ bool get_IsCompleted();
        /*0x1803b0*/ System.Threading.WaitHandle get_AsyncWaitHandle();
    }

    interface ICloneable
    {
        /*0x1803b0*/ object Clone();
    }

    interface IComparable
    {
        /*0x17b580*/ int CompareTo(object obj);
    }

    interface IComparable<T>
    {
        /*0x2a5510*/ int CompareTo(T other);
    }

    interface IConvertible
    {
        /*0x180980*/ System.TypeCode GetTypeCode();
        /*0x17e620*/ bool ToBoolean(System.IFormatProvider provider);
        char ToChar(System.IFormatProvider provider);
        sbyte ToSByte(System.IFormatProvider provider);
        /*0x17e620*/ byte ToByte(System.IFormatProvider provider);
        short ToInt16(System.IFormatProvider provider);
        ushort ToUInt16(System.IFormatProvider provider);
        /*0x17b580*/ int ToInt32(System.IFormatProvider provider);
        uint ToUInt32(System.IFormatProvider provider);
        long ToInt64(System.IFormatProvider provider);
        ulong ToUInt64(System.IFormatProvider provider);
        float ToSingle(System.IFormatProvider provider);
        double ToDouble(System.IFormatProvider provider);
        decimal ToDecimal(System.IFormatProvider provider);
        System.DateTime ToDateTime(System.IFormatProvider provider);
        /*0x1858d0*/ string ToString(System.IFormatProvider provider);
        /*0x177730*/ object ToType(System.Type conversionType, System.IFormatProvider provider);
    }

    interface ICustomFormatter
    {
        /*0x177dc0*/ string Format(string format, object arg, System.IFormatProvider formatProvider);
    }

    interface IDisposable
    {
        /*0x180fc0*/ void Dispose();
    }

    interface IEquatable<T>
    {
        /*0x2a5510*/ bool Equals(T other);
    }

    interface IFormatProvider
    {
        /*0x1858d0*/ object GetFormat(System.Type formatType);
    }

    interface IFormattable
    {
        /*0x177730*/ string ToString(string format, System.IFormatProvider formatProvider);
    }

    interface ISpanFormattable
    {
        bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
    }

    class IndexOutOfRangeException : System.SystemException
    {
        /*0xf4ee80*/ IndexOutOfRangeException();
        /*0xf4eed0*/ IndexOutOfRangeException(string message);
        /*0xe291b0*/ IndexOutOfRangeException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InsufficientExecutionStackException : System.SystemException
    {
        /*0xf4eef0*/ InsufficientExecutionStackException();
        /*0xe291b0*/ InsufficientExecutionStackException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Int16 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<short>, System.IEquatable<short>, System.ISpanFormattable
    {
        static short MaxValue = 32767;
        static short MinValue = -32768;
        /*0x10*/ short m_value;

        static /*0xf4f0d0*/ short Parse(string s, System.IFormatProvider provider);
        static /*0xf4f180*/ short Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0xf4f240*/ short Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        /*0xf4ef40*/ int CompareTo(object value);
        /*0xf4f020*/ int CompareTo(short value);
        /*0xf4f030*/ bool Equals(object obj);
        /*0xe2c830*/ bool Equals(short obj);
        /*0xf4f0c0*/ int GetHashCode();
        /*0xf4fb00*/ string ToString();
        /*0xf4fa70*/ string ToString(System.IFormatProvider provider);
        /*0xf4f8e0*/ string ToString(string format, System.IFormatProvider provider);
        /*0xf4fb80*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x3b8e20*/ System.TypeCode GetTypeCode();
        /*0xf4f3d0*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xf4f470*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xf4f6b0*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xf4f420*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x6bba60*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xf4f7f0*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xf4f610*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xf4f840*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xf4f660*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xf4f890*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xf4f700*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xf4f5c0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xf4f550*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xf4f4c0*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xf4f750*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Int32 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<int>, System.IEquatable<int>, System.ISpanFormattable
    {
        static int MaxValue = 2147483647;
        static int MinValue = -2147483648;
        /*0x10*/ int m_value;

        static /*0xf4fe60*/ int Parse(string s);
        static /*0xf50020*/ int Parse(string s, System.IFormatProvider provider);
        static /*0xf4ff30*/ int Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0xf50a30*/ bool TryParse(string s, ref int result);
        static /*0xf50940*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref int result);
        /*0xf4fcb0*/ int CompareTo(object value);
        /*0xf4fda0*/ int CompareTo(int value);
        /*0xf4fdc0*/ bool Equals(object obj);
        /*0xf4fe40*/ bool Equals(int obj);
        /*0x6bba50*/ int GetHashCode();
        /*0xf50600*/ string ToString();
        /*0xf50710*/ string ToString(string format);
        /*0xf50680*/ string ToString(System.IFormatProvider provider);
        /*0xf507d0*/ string ToString(string format, System.IFormatProvider provider);
        /*0xf508a0*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0xf4fe50*/ System.TypeCode GetTypeCode();
        /*0xf50100*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xf501a0*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xf503e0*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xf50150*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xf50340*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xf50510*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x6bba50*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xf50560*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xf50390*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xf505b0*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xf50430*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xf502f0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xf50280*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xf501f0*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xf50480*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Int64 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<long>, System.IEquatable<long>, System.ISpanFormattable
    {
        static long MaxValue = 9223372036854775807;
        static long MinValue = -9223372036854775808;
        /*0x10*/ long m_value;

        static /*0xf50dd0*/ long Parse(string s, System.IFormatProvider provider);
        static /*0xf50ce0*/ long Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0xf51710*/ bool TryParse(string s, ref long result);
        static /*0xf517f0*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref long result);
        /*0xf50b10*/ int CompareTo(object value);
        /*0xf50c00*/ int CompareTo(long value);
        /*0xf50c30*/ bool Equals(object obj);
        /*0xf50c20*/ bool Equals(long obj);
        /*0xf50cc0*/ int GetHashCode();
        /*0xf513c0*/ string ToString();
        /*0xf51440*/ string ToString(System.IFormatProvider provider);
        /*0xf515a0*/ string ToString(string format);
        /*0xf514d0*/ string ToString(string format, System.IFormatProvider provider);
        /*0xf51660*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0xf50cd0*/ System.TypeCode GetTypeCode();
        /*0xf50eb0*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xf50f50*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xf51190*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xf50f00*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xf510f0*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xf512d0*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xf51140*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xf51320*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x6937d0*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xf51370*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xf511e0*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xf510a0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xf51030*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xf50fa0*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xf51230*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class InvalidCastException : System.SystemException
    {
        /*0xf51910*/ InvalidCastException();
        /*0xf51960*/ InvalidCastException(string message);
        /*0xf518f0*/ InvalidCastException(string message, System.Exception innerException);
        /*0xe291b0*/ InvalidCastException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InvalidOperationException : System.SystemException
    {
        /*0xf51980*/ InvalidOperationException();
        /*0xf519f0*/ InvalidOperationException(string message);
        /*0xf519d0*/ InvalidOperationException(string message, System.Exception innerException);
        /*0xe291b0*/ InvalidOperationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InvalidProgramException : System.SystemException
    {
        /*0xf51a10*/ InvalidProgramException();
        /*0xf51a60*/ InvalidProgramException(string message);
        /*0xe291b0*/ InvalidProgramException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InvalidTimeZoneException : System.Exception
    {
        /*0xf51ae0*/ InvalidTimeZoneException();
        /*0xf51a80*/ InvalidTimeZoneException(string message);
        /*0xf51b30*/ InvalidTimeZoneException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum LazyState
    {
        NoneViaConstructor = 0,
        NoneViaFactory = 1,
        NoneException = 2,
        PublicationOnlyViaConstructor = 3,
        PublicationOnlyViaFactory = 4,
        PublicationOnlyWait = 5,
        PublicationOnlyException = 6,
        ExecutionAndPublicationViaConstructor = 7,
        ExecutionAndPublicationViaFactory = 8,
        ExecutionAndPublicationException = 9,
    }

    class LazyHelper
    {
        static /*0x0*/ System.LazyHelper NoneViaConstructor;
        static /*0x8*/ System.LazyHelper NoneViaFactory;
        static /*0x10*/ System.LazyHelper PublicationOnlyViaConstructor;
        static /*0x18*/ System.LazyHelper PublicationOnlyViaFactory;
        static /*0x20*/ System.LazyHelper PublicationOnlyWaitForOtherThreadToPublish;
        /*0x10*/ System.LazyState <State>k__BackingField;
        /*0x18*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo _exceptionDispatch;

        static /*0xf51df0*/ LazyHelper();
        static /*0xf51c20*/ System.LazyHelper Create(System.Threading.LazyThreadSafetyMode mode, bool useDefaultConstructor);
        static /*0xf51bb0*/ object CreateViaDefaultConstructor(System.Type type);
        static /*0xf51dc0*/ System.Threading.LazyThreadSafetyMode GetModeFromIsThreadSafe(bool isThreadSafe);
        /*0x32f460*/ LazyHelper(System.LazyState state);
        /*0xf51f90*/ LazyHelper(System.Threading.LazyThreadSafetyMode mode, System.Exception exception);
        /*0x417e30*/ System.LazyState get_State();
        /*0xf51dd0*/ void ThrowException();
    }

    class Lazy<T>
    {
        /*0x0*/ System.LazyHelper _state;
        /*0x0*/ System.Func<T> _factory;
        /*0x0*/ T _value;

        static /*0x2a5510*/ T CreateViaDefaultConstructor();
        /*0x180fc0*/ Lazy();
        /*0x17aec0*/ Lazy(System.Func<T> valueFactory);
        Lazy(System.Func<T> valueFactory, bool isThreadSafe);
        Lazy(System.Func<T> valueFactory, System.Threading.LazyThreadSafetyMode mode, bool useDefaultConstructor);
        /*0x180fc0*/ void ViaConstructor();
        /*0x17aa40*/ void ViaFactory(System.Threading.LazyThreadSafetyMode mode);
        void ExecutionAndPublication(System.LazyHelper executionAndPublication, bool useDefaultConstructor);
        /*0x2a5510*/ void PublicationOnly(System.LazyHelper publicationOnly, T possibleValue);
        /*0x17aec0*/ void PublicationOnlyViaConstructor(System.LazyHelper initializer);
        /*0x17aec0*/ void PublicationOnlyViaFactory(System.LazyHelper initializer);
        /*0x180fc0*/ void PublicationOnlyWaitForOtherThreadToPublish();
        /*0x2a5510*/ T CreateValue();
        /*0x1803b0*/ string ToString();
        /*0x17cb40*/ bool get_IsValueCreated();
        /*0x2a5510*/ T get_Value();
    }

    class LazyDebugView<T>
    {
    }

    class Marvin
    {
        static /*0x0*/ ulong <DefaultSeed>k__BackingField;

        static /*0xf52620*/ Marvin();
        static /*0xf520a0*/ int ComputeHash32(System.ReadOnlySpan<byte> data, ulong seed);
        static /*0xf52140*/ int ComputeHash32(ref byte data, int count, ulong seed);
        static /*0xf52000*/ void Block(ref uint rp0, ref uint rp1);
        static /*0xf4eb40*/ uint _rotl(uint value, int shift);
        static /*0xf52660*/ ulong get_DefaultSeed();
        static /*0xf52610*/ ulong GenerateSeed();
    }

    class Math
    {
        static /*0x0*/ double doubleRoundLimit;
        static /*0x8*/ double[] roundPower10Double;

        static /*0xf53270*/ Math();
        static /*0xf52810*/ int Abs(int value);
        static /*0xf527c0*/ long Abs(long value);
        static /*0xf531b0*/ void ThrowAbsOverflow();
        static /*0xf52990*/ int DivRem(int a, int b, ref int result);
        static /*0xf528d0*/ int Clamp(int value, int min, int max);
        static /*0xf529f0*/ double Log(double a, double newBase);
        static /*0xf52af0*/ byte Max(byte val1, byte val2);
        static /*0xf52b30*/ double Max(double val1, double val2);
        static /*0xf52b60*/ short Max(short val1, short val2);
        static /*0xf52b00*/ int Max(int val1, int val2);
        static /*0xf52ba0*/ long Max(long val1, long val2);
        static /*0xf52b70*/ sbyte Max(sbyte val1, sbyte val2);
        static /*0xf52b80*/ float Max(float val1, float val2);
        static /*0xf52b20*/ ushort Max(ushort val1, ushort val2);
        static /*0xf52b10*/ uint Max(uint val1, uint val2);
        static /*0xf52be0*/ byte Min(byte val1, byte val2);
        static /*0xf52c10*/ double Min(double val1, double val2);
        static /*0xf52bd0*/ short Min(short val1, short val2);
        static /*0xf52bf0*/ int Min(int val1, int val2);
        static /*0xf52c50*/ long Min(long val1, long val2);
        static /*0xf52bb0*/ sbyte Min(sbyte val1, sbyte val2);
        static /*0xf52c60*/ float Min(float val1, float val2);
        static /*0xf52c40*/ ushort Min(ushort val1, ushort val2);
        static /*0xf52c00*/ uint Min(uint val1, uint val2);
        static /*0xf52bc0*/ ulong Min(ulong val1, ulong val2);
        static /*0xf53090*/ double Round(double a);
        static /*0xf52ca0*/ double Round(double value, int digits);
        static /*0xf53030*/ double Round(double value, System.MidpointRounding mode);
        static /*0xf52d00*/ double Round(double value, int digits, System.MidpointRounding mode);
        static /*0xf530a0*/ int Sign(double value);
        static /*0xf53130*/ int Sign(long value);
        static /*0xf53200*/ double Truncate(double d);
        static /*0x2a5510*/ void ThrowMinMaxException<T>(T min, T max);
        static /*0xf52870*/ double Abs(double value);
        static /*0xf52860*/ float Abs(float value);
        static /*0xf52880*/ double Acos(double d);
        static /*0xf52890*/ double Asin(double d);
        static /*0xf528b0*/ double Atan(double d);
        static /*0xf528a0*/ double Atan2(double y, double x);
        static /*0xf528c0*/ double Ceiling(double a);
        static /*0xf52970*/ double Cos(double d);
        static /*0xf52980*/ double Cosh(double value);
        static /*0xf529b0*/ double Exp(double d);
        static /*0xf529c0*/ double Floor(double d);
        static /*0xf529e0*/ double Log(double d);
        static /*0xf529d0*/ double Log10(double d);
        static /*0xf52c90*/ double Pow(double x, double y);
        static /*0xf53150*/ double Sin(double a);
        static /*0xf53160*/ double Sinh(double value);
        static /*0xf53170*/ double Sqrt(double d);
        static /*0xf53190*/ double Tan(double a);
        static /*0xf531a0*/ double Tanh(double value);
        static /*0xf52c80*/ double ModF(double x, double* intptr);
    }

    class MathF
    {
        static /*0x0*/ float[] roundPower10Single;
        static /*0x8*/ float singleRoundLimit;

        static /*0xf52710*/ MathF();
        static /*0xf526b0*/ float Abs(float x);
    }

    class MemberAccessException : System.SystemException
    {
        /*0xf53320*/ MemberAccessException();
        /*0xf53370*/ MemberAccessException(string message);
        /*0xe291b0*/ MemberAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class MemoryExtensions
    {
        static /*0xf53a90*/ bool EqualsOrdinal(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value);
        static /*0xf539e0*/ bool EqualsOrdinalIgnoreCase(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value);
        static /*0xf53570*/ bool Contains(System.ReadOnlySpan<char> source, char value);
        static /*0xf53b20*/ int ToUpperInvariant(System.ReadOnlySpan<char> source, System.Span<char> destination);
        static /*0xf535f0*/ bool EndsWith(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value, System.StringComparison comparisonType);
        static /*0xf53390*/ System.ReadOnlySpan<char> AsSpan(string text);
        static /*0xf534d0*/ System.ReadOnlySpan<char> AsSpan(string text, int start);
        static /*0xf53410*/ System.ReadOnlySpan<char> AsSpan(string text, int start, int length);
        static /*0xf53f20*/ System.ReadOnlySpan<char> Trim(System.ReadOnlySpan<char> span);
        static /*0xf53df0*/ System.ReadOnlySpan<char> TrimStart(System.ReadOnlySpan<char> span);
        static /*0xf53ce0*/ System.ReadOnlySpan<char> TrimEnd(System.ReadOnlySpan<char> span);
        static /*0x2a5510*/ int IndexOf<T>(System.ReadOnlySpan<T> span, T value);
        static /*0x2a5510*/ int IndexOfAny<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> values);
        static /*0x2a5510*/ bool SequenceEqual<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> other);
        static /*0x2a5510*/ bool StartsWith<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> value);
        static /*0x2a5510*/ bool EndsWith<T>(System.ReadOnlySpan<T> span, System.ReadOnlySpan<T> value);
        static /*0x2a5510*/ System.Span<T> AsSpan<T>(T[] array, int start, int length);
        static /*0x177700*/ bool IsTypeComparableAsBytes<T>(ref ulong size);
    }

    class MethodAccessException : System.MemberAccessException
    {
        /*0xf540e0*/ MethodAccessException();
        /*0xf54130*/ MethodAccessException(string message);
        /*0xe291b0*/ MethodAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum MidpointRounding
    {
        ToEven = 0,
        AwayFromZero = 1,
    }

    class MissingMethodException : System.MissingMemberException
    {
        /*0xf541d0*/ MissingMethodException();
        /*0xf54220*/ MissingMethodException(string message);
        /*0xf54150*/ MissingMethodException(string className, string methodName);
        /*0xf541b0*/ MissingMethodException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf54240*/ string get_Message();
    }

    class MulticastNotSupportedException : System.SystemException
    {
        /*0xf54370*/ MulticastNotSupportedException();
        /*0xf543c0*/ MulticastNotSupportedException(string message);
        /*0xe291b0*/ MulticastNotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class NonSerializedAttribute : System.Attribute
    {
        /*0x534220*/ NonSerializedAttribute();
    }

    class NotImplementedException : System.SystemException
    {
        /*0xf54400*/ NotImplementedException();
        /*0xf543e0*/ NotImplementedException(string message);
        /*0xe291b0*/ NotImplementedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class NotSupportedException : System.SystemException
    {
        /*0xf54450*/ NotSupportedException();
        /*0xf544a0*/ NotSupportedException(string message);
        /*0xe291b0*/ NotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class NullReferenceException : System.SystemException
    {
        /*0xf544e0*/ NullReferenceException();
        /*0xf544c0*/ NullReferenceException(string message);
        /*0xe291b0*/ NullReferenceException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Nullable<T>
    {
        /*0x0*/ bool hasValue;
        /*0x0*/ T value;

        static /*0x2a5510*/ object Box(System.Nullable<T> o);
        static /*0x2a5510*/ System.Nullable<T> Unbox(object o);
        static /*0x2a5510*/ System.Nullable<T> UnboxExact(object o);
        /*0x2a5510*/ Nullable(T value);
        /*0x17cb40*/ bool get_HasValue();
        /*0x2a5510*/ T get_Value();
        /*0x2a5510*/ T GetValueOrDefault();
        /*0x17e620*/ bool Equals(object other);
        /*0x180980*/ int GetHashCode();
        /*0x1803b0*/ string ToString();
    }

    class Nullable
    {
        static /*0xf54530*/ System.Type GetUnderlyingType(System.Type nullableType);
    }

    class Number
    {
        static /*0x0*/ string[] s_posCurrencyFormats;
        static /*0x8*/ string[] s_negCurrencyFormats;
        static /*0x10*/ string[] s_posPercentFormats;
        static /*0x18*/ string[] s_negPercentFormats;
        static /*0x20*/ string[] s_negNumberFormats;
        static /*0x28*/ int[] s_charToHexLookup;
        static /*0x30*/ ulong[] s_rgval64Power10;
        static /*0x38*/ sbyte[] s_rgexp64Power10;
        static /*0x40*/ ulong[] s_rgval64Power10By16;
        static /*0x48*/ short[] s_rgexp64Power10By16;

        static /*0xf60f90*/ Number();
        static /*0xf54d40*/ string FormatDecimal(decimal value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0xf5c100*/ bool TryFormatDecimal(decimal value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info, System.Span<char> destination, ref int charsWritten);
        static /*0xf546c0*/ void DecimalToNumber(decimal value, ref System.Number.NumberBuffer number);
        static /*0xf54f10*/ string FormatDouble(double value, string format, System.Globalization.NumberFormatInfo info);
        static /*0xf5c2e0*/ bool TryFormatDouble(double value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info, System.Span<char> destination, ref int charsWritten);
        static /*0xf55050*/ string FormatDouble(ref System.Text.ValueStringBuilder sb, double value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0xf56820*/ string FormatSingle(float value, string format, System.Globalization.NumberFormatInfo info);
        static /*0xf5cb70*/ bool TryFormatSingle(float value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info, System.Span<char> destination, ref int charsWritten);
        static /*0xf56960*/ string FormatSingle(ref System.Text.ValueStringBuilder sb, float value, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0xf5c020*/ bool TryCopyTo(string source, System.Span<char> destination, ref int charsWritten);
        static /*0xf55cd0*/ string FormatInt32(int value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0xf5c4a0*/ bool TryFormatInt32(int value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0xf56c50*/ string FormatUInt32(uint value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0xf5cd30*/ bool TryFormatUInt32(uint value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0xf55fc0*/ string FormatInt64(long value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0xf5c800*/ bool TryFormatInt64(long value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0xf56ee0*/ string FormatUInt64(ulong value, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        static /*0xf5d010*/ bool TryFormatUInt64(ulong value, System.ReadOnlySpan<char> format, System.IFormatProvider provider, System.Span<char> destination, ref int charsWritten);
        static /*0xf57310*/ void Int32ToNumber(int value, ref System.Number.NumberBuffer number);
        static /*0xf57960*/ string NegativeInt32ToDecStr(int value, int digits, string sNegative);
        static /*0xf5d680*/ bool TryNegativeInt32ToDecStr(int value, int digits, string sNegative, System.Span<char> destination, ref int charsWritten);
        static /*0xf571e0*/ string Int32ToHexStr(int value, char hexBase, int digits);
        static /*0xf5d2f0*/ bool TryInt32ToHexStr(int value, char hexBase, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0xf57190*/ char* Int32ToHexChars(char* buffer, uint value, int hexBase, int digits);
        static /*0xf60b60*/ void UInt32ToNumber(uint value, ref System.Number.NumberBuffer number);
        static /*0xf609a0*/ char* UInt32ToDecChars(char* bufferEnd, uint value, int digits);
        static /*0xf609e0*/ string UInt32ToDecStr(uint value, int digits);
        static /*0xf60610*/ bool TryUInt32ToDecStr(uint value, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0xf57650*/ void Int64ToNumber(long input, ref System.Number.NumberBuffer number);
        static /*0xf57b00*/ string NegativeInt64ToDecStr(long input, int digits, string sNegative);
        static /*0xf5d830*/ bool TryNegativeInt64ToDecStr(long input, int digits, string sNegative, System.Span<char> destination, ref int charsWritten);
        static /*0xf57450*/ string Int64ToHexStr(long value, char hexBase, int digits);
        static /*0xf5d440*/ bool TryInt64ToHexStr(long value, char hexBase, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0xf60e00*/ void UInt64ToNumber(ulong value, ref System.Number.NumberBuffer number);
        static /*0xf60c40*/ string UInt64ToDecStr(ulong value, int digits);
        static /*0xf607b0*/ bool TryUInt64ToDecStr(ulong value, int digits, System.Span<char> destination, ref int charsWritten);
        static /*0xf5a210*/ char ParseFormatSpecifier(System.ReadOnlySpan<char> format, ref int digits);
        static /*0xf59540*/ void NumberToString(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, char format, int nMaxDigits, System.Globalization.NumberFormatInfo info, bool isDecimal);
        static /*0xf58760*/ void NumberToStringFormat(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, System.ReadOnlySpan<char> format, System.Globalization.NumberFormatInfo info);
        static /*0xf54b30*/ void FormatCurrency(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info);
        static /*0xf554a0*/ void FormatFixed(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info, int[] groupDigits, string sDecimal, string sGroup);
        static /*0xf562b0*/ void FormatNumber(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info);
        static /*0xf566a0*/ void FormatScientific(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info, char expChar);
        static /*0xf55330*/ void FormatExponent(ref System.Text.ValueStringBuilder sb, System.Globalization.NumberFormatInfo info, int value, char expChar, int minDigits, bool positiveSign);
        static /*0xf559b0*/ void FormatGeneral(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info, char expChar, bool bSuppressScientific);
        static /*0xf56480*/ void FormatPercent(ref System.Text.ValueStringBuilder sb, ref System.Number.NumberBuffer number, int nMinDigits, int nMaxDigits, System.Globalization.NumberFormatInfo info);
        static /*0xf5bc90*/ void RoundNumber(ref System.Number.NumberBuffer number, int pos);
        static /*0xf54a10*/ int FindSection(System.ReadOnlySpan<char> format, int section);
        static /*0x621c90*/ uint Low32(ulong value);
        static /*0xf57180*/ uint High32(ulong value);
        static /*0xf57400*/ uint Int64DivMod1E9(ref ulong value);
        static /*0xf58690*/ bool NumberToInt32(ref System.Number.NumberBuffer number, ref int value);
        static /*0xf586f0*/ bool NumberToInt64(ref System.Number.NumberBuffer number, ref long value);
        static /*0xf59bf0*/ bool NumberToUInt32(ref System.Number.NumberBuffer number, ref uint value);
        static /*0xf59c50*/ bool NumberToUInt64(ref System.Number.NumberBuffer number, ref ulong value);
        static /*0xf5a3b0*/ int ParseInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0xf5a5f0*/ long ParseInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0xf5b830*/ uint ParseUInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0xf5ba60*/ ulong ParseUInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0xf5a830*/ bool ParseNumber(ref char* str, char* strEnd, System.Globalization.NumberStyles styles, ref System.Number.NumberBuffer number, System.Globalization.NumberFormatInfo info, bool parseDecimal);
        static /*0xf5e210*/ bool TryParseInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref int result);
        static /*0xf5dbd0*/ bool TryParseInt32IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref int result, ref bool failureIsOverflow);
        static /*0xf5e3f0*/ bool TryParseInt64IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref long result, ref bool failureIsOverflow);
        static /*0xf5ea40*/ bool TryParseInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref long result);
        static /*0xf5f730*/ bool TryParseUInt32(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref uint result);
        static /*0xf5f140*/ bool TryParseUInt32IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref uint result, ref bool failureIsOverflow);
        static /*0xf5edc0*/ bool TryParseUInt32HexNumberStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref uint result, ref bool failureIsOverflow);
        static /*0xf602a0*/ bool TryParseUInt64(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref ulong result);
        static /*0xf5fca0*/ bool TryParseUInt64IntegerStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref ulong result, ref bool failureIsOverflow);
        static /*0xf5f920*/ bool TryParseUInt64HexNumberStyle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref ulong result, ref bool failureIsOverflow);
        static /*0xf59cc0*/ decimal ParseDecimal(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0xf57d00*/ bool NumberBufferToDecimal(ref System.Number.NumberBuffer number, ref decimal value);
        static /*0xf59de0*/ double ParseDouble(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0xf5b3d0*/ float ParseSingle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info);
        static /*0xf5da50*/ bool TryParseDouble(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref double result);
        static /*0xf5ec30*/ bool TryParseSingle(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, System.Globalization.NumberFormatInfo info, ref float result);
        static /*0xf5bd60*/ void StringToNumber(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, ref System.Number.NumberBuffer number, System.Globalization.NumberFormatInfo info, bool parseDecimal);
        static /*0xf60490*/ bool TryStringToNumber(System.ReadOnlySpan<char> value, System.Globalization.NumberStyles styles, ref System.Number.NumberBuffer number, System.Globalization.NumberFormatInfo info, bool parseDecimal);
        static /*0xf5bfa0*/ bool TrailingZeros(System.ReadOnlySpan<char> value, int index);
        static /*0xf57830*/ char* MatchChars(char* p, char* pEnd, string value);
        static /*0xf57810*/ bool IsWhite(int ch);
        static /*0xf57800*/ bool IsDigit(int ch);
        static /*0xf5bf00*/ void ThrowOverflowOrFormatException(bool overflow, string overflowResourceKey);
        static /*0xf57fa0*/ bool NumberBufferToDouble(ref System.Number.NumberBuffer number, ref double value);
        static /*0xf548a0*/ uint DigitsToInt(char* p, int count);
        static /*0xf578c0*/ ulong Mul32x32To64(uint a, uint b);
        static /*0xf578d0*/ ulong Mul64Lossy(ulong a, ulong b, ref int pexp);
        static /*0xf61a20*/ int abs(int value);
        static /*0xf58040*/ double NumberToDouble(ref System.Number.NumberBuffer number);
        static /*0xf548e0*/ void DoubleToNumber(double value, int precision, ref System.Number.NumberBuffer number);

        struct NumberBuffer
        {
            /*0x10*/ int precision;
            /*0x14*/ int scale;
            /*0x18*/ int _sign;
            /*0x1c*/ System.Number.NumberBuffer.DigitsAndNullTerminator _digits;
            /*0x82*/ char* _allDigits;

            /*0xf546a0*/ bool get_sign();
            /*0xf546b0*/ void set_sign(bool value);
            /*0xf54690*/ char* get_digits();

            struct DigitsAndNullTerminator
            {
            }
        }
    }

    class ObjectDisposedException : System.InvalidOperationException
    {
        /*0x90*/ string _objectName;

        /*0xf61be0*/ ObjectDisposedException();
        /*0xf61c90*/ ObjectDisposedException(string objectName);
        /*0xf61c40*/ ObjectDisposedException(string objectName, string message);
        /*0xf61b40*/ ObjectDisposedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf61a30*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf61d00*/ string get_Message();
        /*0xf61dd0*/ string get_ObjectName();
    }

    class ObsoleteAttribute : System.Attribute
    {
        /*0x10*/ string _message;
        /*0x18*/ bool _error;

        /*0xf61e30*/ ObsoleteAttribute();
        /*0xf61eb0*/ ObsoleteAttribute(string message);
        /*0xf61e60*/ ObsoleteAttribute(string message, bool error);
        /*0x73d3e0*/ string get_Message();
        /*0xdd36a0*/ bool get_IsError();
    }

    class OperationCanceledException : System.SystemException
    {
        /*0x90*/ System.Threading.CancellationToken _cancellationToken;

        /*0xf61ef0*/ OperationCanceledException();
        /*0xf61f40*/ OperationCanceledException(string message);
        /*0xf61f60*/ OperationCanceledException(string message, System.Threading.CancellationToken token);
        /*0xe291b0*/ OperationCanceledException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x7378b0*/ System.Threading.CancellationToken get_CancellationToken();
        /*0xf61fa0*/ void set_CancellationToken(System.Threading.CancellationToken value);
    }

    class OverflowException : System.ArithmeticException
    {
        /*0xf61fe0*/ OverflowException();
        /*0xf61fc0*/ OverflowException(string message);
        /*0xf62030*/ OverflowException(string message, System.Exception innerException);
        /*0xea43e0*/ OverflowException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ParamArrayAttribute : System.Attribute
    {
        /*0x534220*/ ParamArrayAttribute();
    }

    struct ParamsArray
    {
        static /*0x0*/ object[] s_oneArgArray;
        static /*0x8*/ object[] s_twoArgArray;
        static /*0x10*/ object[] s_threeArgArray;
        /*0x10*/ object _arg0;
        /*0x18*/ object _arg1;
        /*0x20*/ object _arg2;
        /*0x28*/ object[] _args;

        static /*0xf620a0*/ ParamsArray();
        /*0xf62260*/ ParamsArray(object arg0);
        /*0xf623c0*/ ParamsArray(object arg0, object arg1);
        /*0xf62300*/ ParamsArray(object arg0, object arg1, object arg2);
        /*0xf62190*/ ParamsArray(object[] args);
        /*0xe83fc0*/ int get_Length();
        /*0xf62470*/ object get_Item(int index);
        /*0xf62050*/ object GetAtSlow(int index);
    }

    class ParseNumbers
    {
        static /*0xf63790*/ long StringToLong(System.ReadOnlySpan<char> s, int radix, int flags, ref int currPos);
        static /*0xf631e0*/ int StringToInt(System.ReadOnlySpan<char> s, int radix, int flags, ref int currPos);
        static /*0xf629c0*/ string IntToString(int n, int radix, int width, char paddingChar, int flags);
        static /*0xf62da0*/ string LongToString(long n, int radix, int width, char paddingChar, int flags);
        static /*0xf62520*/ void EatWhiteSpace(System.ReadOnlySpan<char> s, ref int i);
        static /*0xf627e0*/ long GrabLongs(int radix, System.ReadOnlySpan<char> s, ref int i, bool isUnsigned);
        static /*0xf625f0*/ int GrabInts(int radix, System.ReadOnlySpan<char> s, ref int i, bool isUnsigned);
        static /*0xf63ca0*/ void ThrowOverflowInt32Exception();
        static /*0xf63cf0*/ void ThrowOverflowInt64Exception();
        static /*0xf63d40*/ void ThrowOverflowUInt32Exception();
        static /*0xf63d90*/ void ThrowOverflowUInt64Exception();
        static /*0xf62d40*/ bool IsDigit(char c, int radix, ref int result);
    }

    class PlatformNotSupportedException : System.NotSupportedException
    {
        /*0xf70110*/ PlatformNotSupportedException();
        /*0xf700f0*/ PlatformNotSupportedException(string message);
        /*0xea43e0*/ PlatformNotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Random
    {
        static /*0x0*/ System.Random s_globalRandom;
        [ThreadStatic] static System.Random t_threadRandom;
        /*0x10*/ int _inext;
        /*0x14*/ int _inextp;
        /*0x18*/ int[] _seedArray;

        static /*0xf70640*/ Random();
        static /*0xf70160*/ int GenerateSeed();
        static /*0xf4e850*/ int GenerateGlobalSeed();
        /*0xf706d0*/ Random();
        /*0xf70730*/ Random(int Seed);
        /*0xf70620*/ double Sample();
        /*0xf70380*/ int InternalSample();
        /*0xf70610*/ int Next();
        /*0xf70330*/ double GetSampleForLargeRange();
        /*0xf70410*/ int Next(int minValue, int maxValue);
        /*0xf70550*/ int Next(int maxValue);
    }

    class RankException : System.SystemException
    {
        /*0xf70970*/ RankException();
        /*0xf70a00*/ RankException(string message);
        /*0xf64550*/ RankException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct ReadOnlySpan<T>
    {
        /*0x0*/ System.ByReference<T> _pointer;
        /*0x0*/ int _length;

        static /*0x2a5510*/ bool op_Equality(System.ReadOnlySpan<T> left, System.ReadOnlySpan<T> right);
        static /*0x2a5510*/ System.ReadOnlySpan<T> op_Implicit(T[] array);
        /*0x17aec0*/ ReadOnlySpan(T[] array);
        ReadOnlySpan(T[] array, int start, int length);
        /*0x2a5510*/ ReadOnlySpan(void* pointer, int length);
        /*0x182a70*/ ReadOnlySpan(ref T ptr, int length);
        /*0x184ab0*/ ref T get_Item(int index);
        /*0x2a5510*/ void CopyTo(System.Span<T> destination);
        /*0x2a5510*/ bool TryCopyTo(System.Span<T> destination);
        /*0x1803b0*/ string ToString();
        /*0x2a5510*/ System.ReadOnlySpan<T> Slice(int start);
        /*0x2a5510*/ System.ReadOnlySpan<T> Slice(int start, int length);
        /*0x1803b0*/ T[] ToArray();
        /*0x180980*/ int get_Length();
        /*0x17cb40*/ bool get_IsEmpty();
        /*0x17e620*/ bool Equals(object obj);
        /*0x180980*/ int GetHashCode();
    }

    class ResolveEventArgs : System.EventArgs
    {
        /*0x10*/ string <Name>k__BackingField;
        /*0x18*/ System.Reflection.Assembly <RequestingAssembly>k__BackingField;

        /*0xf70b00*/ ResolveEventArgs(string name);
        /*0xf70a70*/ ResolveEventArgs(string name, System.Reflection.Assembly requestingAssembly);
        /*0x73d3e0*/ string get_Name();
    }

    class ResolveEventHandler : System.MulticastDelegate
    {
        /*0x9e0c90*/ ResolveEventHandler(object object, nint method);
        /*0x722200*/ System.Reflection.Assembly Invoke(object sender, System.ResolveEventArgs args);
    }

    struct SByte : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<sbyte>, System.IEquatable<sbyte>, System.ISpanFormattable
    {
        static sbyte MaxValue = 127;
        static sbyte MinValue = -128;
        /*0x10*/ sbyte m_value;

        static /*0xf70d00*/ sbyte Parse(string s, System.IFormatProvider provider);
        static /*0xf70f30*/ sbyte Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0xf70da0*/ sbyte Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        /*0xf70b80*/ int CompareTo(object obj);
        /*0xf70b70*/ int CompareTo(sbyte value);
        /*0xf70c60*/ bool Equals(object obj);
        /*0xe29f40*/ bool Equals(sbyte obj);
        /*0xf70cf0*/ int GetHashCode();
        /*0xf716d0*/ string ToString();
        /*0xf71640*/ string ToString(System.IFormatProvider provider);
        /*0xf714b0*/ string ToString(string format, System.IFormatProvider provider);
        /*0xf71750*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0xd56570*/ System.TypeCode GetTypeCode();
        /*0xf70fe0*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xf71080*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xbad660*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xf71030*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xf71220*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xf713c0*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xf71270*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xf71410*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xf71280*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xf71460*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xf712d0*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xf711d0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xf71160*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xf710d0*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xf71320*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class SerializableAttribute : System.Attribute
    {
        /*0x32f970*/ SerializableAttribute();
    }

    struct Single : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<float>, System.IEquatable<float>, System.ISpanFormattable
    {
        static float MinValue = -3.4028234663852886e+38;
        static float Epsilon = 1.401298464324817e-45;
        static float MaxValue = 3.4028234663852886e+38;
        static float PositiveInfinity = NaN;
        static float NegativeInfinity = NaN;
        static float NaN = NaN;
        static float NegativeZero = 0;
        /*0x10*/ float m_value;

        static /*0xf71af0*/ bool IsInfinity(float f);
        static /*0xf71b10*/ bool IsNaN(float f);
        static /*0xf71b30*/ bool IsNegativeInfinity(float f);
        static /*0xf71c30*/ float Parse(string s);
        static /*0xf71cf0*/ float Parse(string s, System.IFormatProvider provider);
        static /*0xf71b50*/ float Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0xf728c0*/ bool TryParse(string s, ref float result);
        static /*0xf72960*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref float result);
        static /*0xf72690*/ bool TryParse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref float result);
        /*0xf718c0*/ int CompareTo(object value);
        /*0xf71880*/ int CompareTo(float value);
        /*0xf71a10*/ bool Equals(object obj);
        /*0xf719e0*/ bool Equals(float obj);
        /*0xf71ac0*/ int GetHashCode();
        /*0xf724d0*/ string ToString();
        /*0xf72450*/ string ToString(System.IFormatProvider provider);
        /*0xf723d0*/ string ToString(string format);
        /*0xf72540*/ string ToString(string format, System.IFormatProvider provider);
        /*0xf725d0*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0xf71ae0*/ System.TypeCode GetTypeCode();
        /*0xf71dc0*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xf71e80*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xf721a0*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xf71e20*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xf72080*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xf722b0*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xf720e0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xf72310*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xf72140*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xf72370*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xf72200*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xf72020*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xf71fa0*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xf71f10*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xf72210*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Span<T>
    {
        /*0x0*/ System.ByReference<T> _pointer;
        /*0x0*/ int _length;

        static /*0x2a5510*/ System.ReadOnlySpan<T> op_Implicit(System.Span<T> span);
        static /*0x2a5510*/ System.Span<T> op_Implicit(T[] array);
        /*0x17aec0*/ Span(T[] array);
        Span(T[] array, int start, int length);
        /*0x2a5510*/ Span(void* pointer, int length);
        /*0x182a70*/ Span(ref T ptr, int length);
        /*0x184ab0*/ ref T get_Item(int index);
        /*0x1803b0*/ ref T GetPinnableReference();
        /*0x2a5510*/ void CopyTo(System.Span<T> destination);
        /*0x2a5510*/ bool TryCopyTo(System.Span<T> destination);
        /*0x1803b0*/ string ToString();
        /*0x2a5510*/ System.Span<T> Slice(int start);
        /*0x2a5510*/ System.Span<T> Slice(int start, int length);
        /*0x180980*/ int get_Length();
        /*0x17e620*/ bool Equals(object obj);
        /*0x180980*/ int GetHashCode();
    }

    class SpanDebugView<T>
    {
    }

    class SpanHelpers
    {
        static /*0xf74b00*/ int IndexOfAny(ref byte searchSpace, int searchSpaceLength, ref byte value, int valueLength);
        static /*0xf74f60*/ int IndexOf(ref byte searchSpace, byte value, int length);
        static /*0xf75cd0*/ bool SequenceEqual(ref byte first, ref byte second, ulong length);
        static /*0xf758b0*/ int SequenceCompareTo(ref char first, int firstLength, ref char second, int secondLength);
        static /*0xf74b80*/ int IndexOf(ref char searchSpace, char value, int length);
        static /*0xf75200*/ int LastIndexOf(ref char searchSpace, char value, int length);
        static /*0xf75600*/ int LocateFirstFoundChar(System.Numerics.Vector<ushort> match);
        static /*0xf755e0*/ int LocateFirstFoundChar(ulong match);
        static /*0xf75750*/ int LocateLastFoundChar(System.Numerics.Vector<ushort> match);
        static /*0xf75890*/ int LocateLastFoundChar(ulong match);
        static /*0x2a5510*/ int IndexOf<T>(ref T searchSpace, T value, int length);
        static int IndexOfAny<T>(ref T searchSpace, int searchSpaceLength, ref T value, int valueLength);
        static /*0x17f6c0*/ bool SequenceEqual<T>(ref T first, ref T second, int length);
        static /*0xf745b0*/ bool EndsWithCultureHelper(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value, System.Globalization.CompareInfo compareInfo);
        static /*0xf747e0*/ bool EndsWithCultureIgnoreCaseHelper(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value, System.Globalization.CompareInfo compareInfo);
        static /*0xf74a00*/ bool EndsWithOrdinalIgnoreCaseHelper(System.ReadOnlySpan<char> span, System.ReadOnlySpan<char> value);
    }

    class StackOverflowException : System.SystemException
    {
        /*0xf75e30*/ StackOverflowException();
        /*0xf75ec0*/ StackOverflowException(string message);
        /*0xf64550*/ StackOverflowException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class StringComparer : System.Collections.IComparer, System.Collections.IEqualityComparer, System.Collections.Generic.IComparer<string>, System.Collections.Generic.IEqualityComparer<string>
    {
        static /*0x0*/ System.CultureAwareComparer s_invariantCulture;
        static /*0x8*/ System.CultureAwareComparer s_invariantCultureIgnoreCase;
        static /*0x10*/ System.OrdinalCaseSensitiveComparer s_ordinal;
        static /*0x18*/ System.OrdinalIgnoreCaseComparer s_ordinalIgnoreCase;

        static /*0xf76260*/ StringComparer();
        static /*0xf76480*/ System.StringComparer get_InvariantCultureIgnoreCase();
        static /*0xf76520*/ System.StringComparer get_Ordinal();
        static /*0xf764d0*/ System.StringComparer get_OrdinalIgnoreCase();
        /*0x32f970*/ StringComparer();
        /*0xf75f30*/ int Compare(object x, object y);
        /*0xf760a0*/ bool Equals(object x, object y);
        /*0xf76180*/ int GetHashCode(object obj);
        int Compare(string x, string y);
        bool Equals(string x, string y);
        /*0x17b580*/ int GetHashCode(string obj);
    }

    class CultureAwareComparer : System.StringComparer, System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ System.Globalization.CompareInfo _compareInfo;
        /*0x18*/ System.Globalization.CompareOptions _options;

        /*0xf6d270*/ CultureAwareComparer(System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);
        /*0xf6d630*/ CultureAwareComparer(System.Globalization.CompareInfo compareInfo, System.Globalization.CompareOptions options);
        /*0xf6d380*/ CultureAwareComparer(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf6cf80*/ int Compare(string x, string y);
        /*0xf6cff0*/ bool Equals(string x, string y);
        /*0xf6d120*/ int GetHashCode(string obj);
        /*0xf6d050*/ bool Equals(object obj);
        /*0xf6d0e0*/ int GetHashCode();
        /*0xf6d1a0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class OrdinalComparer : System.StringComparer
    {
        /*0x10*/ bool _ignoreCase;

        /*0xf6fdb0*/ OrdinalComparer(bool ignoreCase);
        /*0xf6fb80*/ int Compare(string x, string y);
        /*0xf6fbd0*/ bool Equals(string x, string y);
        /*0xf6fcc0*/ int GetHashCode(string obj);
        /*0xf6fc40*/ bool Equals(object obj);
        /*0xf6fd50*/ int GetHashCode();
    }

    class OrdinalCaseSensitiveComparer : System.OrdinalComparer, System.Runtime.Serialization.ISerializable
    {
        /*0xf6fb30*/ OrdinalCaseSensitiveComparer();
        /*0xea53c0*/ int Compare(string x, string y);
        /*0xea5520*/ bool Equals(string x, string y);
        /*0xf6fa10*/ int GetHashCode(string obj);
        /*0xf6fa40*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class OrdinalIgnoreCaseComparer : System.OrdinalComparer, System.Runtime.Serialization.ISerializable
    {
        /*0xf6ffa0*/ OrdinalIgnoreCaseComparer();
        /*0xf6fe10*/ int Compare(string x, string y);
        /*0xf6fe30*/ bool Equals(string x, string y);
        /*0xf6fe50*/ int GetHashCode(string obj);
        /*0xf6feb0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum StringComparison
    {
        CurrentCulture = 0,
        CurrentCultureIgnoreCase = 1,
        InvariantCulture = 2,
        InvariantCultureIgnoreCase = 3,
        Ordinal = 4,
        OrdinalIgnoreCase = 5,
    }

    enum StringSplitOptions
    {
        None = 0,
        RemoveEmptyEntries = 1,
    }

    class SystemException : System.Exception
    {
        /*0xf765f0*/ SystemException();
        /*0xf76660*/ SystemException(string message);
        /*0xf76570*/ SystemException(string message, System.Exception innerException);
        /*0xf64550*/ SystemException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class STAThreadAttribute : System.Attribute
    {
        /*0x32f970*/ STAThreadAttribute();
    }

    class ThreadStaticAttribute : System.Attribute
    {
        /*0x32f970*/ ThreadStaticAttribute();
    }

    struct TimeSpan : System.IComparable, System.IComparable<System.TimeSpan>, System.IEquatable<System.TimeSpan>, System.IFormattable, System.ISpanFormattable
    {
        static long TicksPerMillisecond = 10000;
        static double MillisecondsPerTick = 0.0001;
        static long TicksPerSecond = 10000000;
        static double SecondsPerTick = 1e-7;
        static long TicksPerMinute = 600000000;
        static double MinutesPerTick = 1.6666666666666667e-9;
        static long TicksPerHour = 36000000000;
        static double HoursPerTick = 2.7777777777777777e-11;
        static long TicksPerDay = 864000000000;
        static double DaysPerTick = 1.1574074074074074e-12;
        static int MillisPerSecond = 1000;
        static int MillisPerMinute = 60000;
        static int MillisPerHour = 3600000;
        static int MillisPerDay = 86400000;
        static long MaxSeconds = 922337203685;
        static long MinSeconds = -922337203685;
        static long MaxMilliSeconds = 922337203685477;
        static long MinMilliSeconds = -922337203685477;
        static long TicksPerTenthSecond = 1000000;
        static /*0x0*/ System.TimeSpan Zero;
        static /*0x8*/ System.TimeSpan MaxValue;
        static /*0x10*/ System.TimeSpan MinValue;
        /*0x10*/ long _ticks;

        static /*0xf78590*/ TimeSpan();
        static /*0xf77f40*/ System.TimeSpan FromDays(double value);
        static /*0xf77fa0*/ System.TimeSpan FromHours(double value);
        static /*0xf78120*/ System.TimeSpan Interval(double value, int scale);
        static /*0xf78000*/ System.TimeSpan FromMilliseconds(double value);
        static /*0xf78060*/ System.TimeSpan FromMinutes(double value);
        static /*0xf780c0*/ System.TimeSpan FromSeconds(double value);
        static /*0x621ca0*/ System.TimeSpan FromTicks(long value);
        static /*0xf782e0*/ long TimeToTicks(int hour, int minute, int second);
        static /*0xf78500*/ bool TryParse(string s, ref System.TimeSpan result);
        static /*0xf789f0*/ System.TimeSpan op_UnaryNegation(System.TimeSpan t);
        static /*0xf788e0*/ System.TimeSpan op_Addition(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x6bb8b0*/ bool op_Equality(System.TimeSpan t1, System.TimeSpan t2);
        static /*0xf789c0*/ bool op_Inequality(System.TimeSpan t1, System.TimeSpan t2);
        static /*0xf789e0*/ bool op_LessThan(System.TimeSpan t1, System.TimeSpan t2);
        static /*0xf789d0*/ bool op_LessThanOrEqual(System.TimeSpan t1, System.TimeSpan t2);
        static /*0xf789b0*/ bool op_GreaterThan(System.TimeSpan t1, System.TimeSpan t2);
        static /*0xf789a0*/ bool op_GreaterThanOrEqual(System.TimeSpan t1, System.TimeSpan t2);
        /*0x9e29e0*/ TimeSpan(long ticks);
        /*0xf786d0*/ TimeSpan(int hours, int minutes, int seconds);
        /*0xf78610*/ TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds);
        /*0x6937d0*/ long get_Ticks();
        /*0xf787c0*/ int get_Hours();
        /*0xf78800*/ int get_Minutes();
        /*0xf78850*/ double get_TotalDays();
        /*0xf78870*/ double get_TotalHours();
        /*0xf78890*/ double get_TotalMilliseconds();
        /*0xf788c0*/ double get_TotalSeconds();
        /*0xf77d20*/ System.TimeSpan Add(System.TimeSpan ts);
        /*0xf77dc0*/ int CompareTo(object value);
        /*0xf77da0*/ int CompareTo(System.TimeSpan value);
        /*0xf77eb0*/ bool Equals(object value);
        /*0xf50c20*/ bool Equals(System.TimeSpan obj);
        /*0xf50cc0*/ int GetHashCode();
        /*0xf78230*/ System.TimeSpan Negate();
        /*0xf78380*/ string ToString();
        /*0xf783e0*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0xf78450*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
    }

    class TimeZoneNotFoundException : System.Exception
    {
        /*0xf78b20*/ TimeZoneNotFoundException();
        /*0xf78aa0*/ TimeZoneNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class TimeoutException : System.SystemException
    {
        /*0xf78b70*/ TimeoutException();
        /*0xf78c00*/ TimeoutException(string message);
        /*0xf64550*/ TimeoutException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    interface ITupleInternal : System.Runtime.CompilerServices.ITuple
    {
        /*0x1858d0*/ string ToString(System.Text.StringBuilder sb);
    }

    class Tuple
    {
        static /*0x2a5510*/ System.Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2);
        static /*0x2a5510*/ System.Tuple<T1, T2, T3> Create<T1, T2, T3>(T1 item1, T2 item2, T3 item3);
        static /*0xf65110*/ int CombineHashCodes(int h1, int h2);
        static /*0xf78c70*/ int CombineHashCodes(int h1, int h2, int h3);
    }

    class Tuple<T1, T2> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;

        /*0x2a5510*/ Tuple(T1 item1, T2 item2);
        /*0x2a5510*/ T1 get_Item1();
        /*0x2a5510*/ T2 get_Item2();
        /*0x17e620*/ bool Equals(object obj);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x180980*/ int GetHashCode();
        /*0x17b580*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x1803b0*/ string ToString();
        /*0x1858d0*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x180980*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;

        /*0x2a5510*/ Tuple(T1 item1, T2 item2, T3 item3);
        /*0x2a5510*/ T1 get_Item1();
        /*0x2a5510*/ T2 get_Item2();
        /*0x2a5510*/ T3 get_Item3();
        /*0x17e620*/ bool Equals(object obj);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x180980*/ int GetHashCode();
        /*0x17b580*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x1803b0*/ string ToString();
        /*0x1858d0*/ string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        /*0x180980*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Type : System.Reflection.MemberInfo
    {
        static System.Reflection.BindingFlags DefaultLookup = 28;
        static string DefaultTypeNameWhenMissingMetadata = "UnknownType";
        static /*0x0*/ System.Reflection.Binder s_defaultBinder;
        static /*0x8*/ char Delimiter;
        static /*0x10*/ System.Type[] EmptyTypes;
        static /*0x18*/ object Missing;
        static /*0x20*/ System.Reflection.MemberFilter FilterAttribute;
        static /*0x28*/ System.Reflection.MemberFilter FilterName;
        static /*0x30*/ System.Reflection.MemberFilter FilterNameIgnoreCase;
        /*0x10*/ System.RuntimeTypeHandle _impl;

        static /*0xf7d240*/ Type();
        static /*0xf79150*/ int BinarySearch(System.Array array, object value);
        static /*0xf7ca10*/ bool IsIntegerType(System.Type t);
        static /*0xf79440*/ bool FilterAttributeImpl(System.Reflection.MemberInfo m, object filterCriteria);
        static /*0xf799a0*/ bool FilterNameImpl(System.Reflection.MemberInfo m, object filterCriteria);
        static /*0xf797d0*/ bool FilterNameIgnoreCaseImpl(System.Reflection.MemberInfo m, object filterCriteria);
        static /*0xf7bdb0*/ System.RuntimeTypeHandle GetTypeHandle(object o);
        static /*0xf7bce0*/ System.TypeCode GetTypeCode(System.Type type);
        static /*0xf7d0e0*/ System.Type MakeGenericSignatureType(System.Type genericTypeDefinition, System.Type[] typeArguments);
        static /*0xf7d5d0*/ System.Reflection.Binder get_DefaultBinder();
        static /*0xf7bd50*/ System.Type GetTypeFromHandle(System.RuntimeTypeHandle handle);
        static /*0xf7e320*/ System.Type internal_from_handle(nint handle);
        static /*0xf7bf30*/ System.Type GetType(string typeName, bool throwOnError, bool ignoreCase);
        static /*0xf7be40*/ System.Type GetType(string typeName, bool throwOnError);
        static /*0xf7bec0*/ System.Type GetType(string typeName);
        static /*0xf7bfd0*/ System.Type GetType(string typeName, System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> assemblyResolver, System.Func<System.Reflection.Assembly, string, bool, System.Type> typeResolver, bool throwOnError);
        static /*0x6bb8b0*/ bool op_Equality(System.Type left, System.Type right);
        static /*0xf789c0*/ bool op_Inequality(System.Type left, System.Type right);
        /*0x534220*/ Type();
        /*0xf7c3c0*/ bool IsEnumDefined(object value);
        /*0xf7a4e0*/ string GetEnumName(object value);
        /*0xf7a8c0*/ string[] GetEnumNames();
        /*0xf7a970*/ System.Array GetEnumRawConstantValues();
        /*0xf7a090*/ void GetEnumData(ref string[] enumNames, ref System.Array enumValues);
        /*0xf7de10*/ bool get_IsSerializable();
        /*0xf7d460*/ bool get_ContainsGenericParameters();
        /*0xf7bb40*/ System.Type GetRootElementType();
        /*0xf7e090*/ bool get_IsVisible();
        /*0xf7ce90*/ bool IsSubclassOf(System.Type c);
        /*0xf7c140*/ bool IsAssignableFrom(System.Type c);
        /*0xf7c000*/ bool ImplementInterface(System.Type ifaceType);
        /*0x6d5de0*/ System.Reflection.MemberTypes get_MemberType();
        /*0xf7bfc0*/ System.Type GetType();
        /*0x1803b0*/ string get_Namespace();
        /*0x1803b0*/ string get_AssemblyQualifiedName();
        /*0x1803b0*/ string get_FullName();
        /*0x1803b0*/ System.Reflection.Assembly get_Assembly();
        /*0x1803b0*/ System.Reflection.Module get_Module();
        /*0xf7dcb0*/ bool get_IsNested();
        /*0x388e90*/ System.Type get_DeclaringType();
        /*0x388e90*/ System.Reflection.MethodBase get_DeclaringMethod();
        /*0x388e90*/ System.Type get_ReflectedType();
        /*0x1803b0*/ System.Type get_UnderlyingSystemType();
        /*0xf7d8c0*/ bool get_IsArray();
        /*0x17cb40*/ bool IsArrayImpl();
        /*0xf7d930*/ bool get_IsByRef();
        /*0x17cb40*/ bool IsByRefImpl();
        /*0xf7dd40*/ bool get_IsPointer();
        /*0x17cb40*/ bool IsPointerImpl();
        /*0xf7d9c0*/ bool get_IsConstructedGenericType();
        /*0x348b00*/ bool get_IsGenericParameter();
        /*0xf7db10*/ bool get_IsGenericMethodParameter();
        /*0x348b00*/ bool get_IsGenericType();
        /*0x348b00*/ bool get_IsGenericTypeDefinition();
        /*0xf7ddb0*/ bool get_IsSZArray();
        /*0xf7e040*/ bool get_IsVariableBoundArray();
        /*0xf7d8e0*/ bool get_IsByRefLike();
        /*0x388e70*/ bool get_HasElementType();
        /*0x17cb40*/ bool HasElementTypeImpl();
        /*0x1803b0*/ System.Type GetElementType();
        /*0xf79bc0*/ int GetArrayRank();
        /*0xf7acb0*/ System.Type GetGenericTypeDefinition();
        /*0xf7d7d0*/ System.Type[] get_GenericTypeArguments();
        /*0xf7abc0*/ System.Type[] GetGenericArguments();
        /*0xf7d780*/ int get_GenericParameterPosition();
        /*0xf7d740*/ System.Reflection.GenericParameterAttributes get_GenericParameterAttributes();
        /*0xf7ac10*/ System.Type[] GetGenericParameterConstraints();
        /*0xf7d440*/ System.Reflection.TypeAttributes get_Attributes();
        /*0x180980*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
        /*0xf7d890*/ bool get_IsAbstract();
        /*0xf7dde0*/ bool get_IsSealed();
        /*0xf7dff0*/ bool get_IsSpecialName();
        /*0xf7d970*/ bool get_IsClass();
        /*0xf7dc50*/ bool get_IsNestedAssembly();
        /*0xf7dc80*/ bool get_IsNestedPublic();
        /*0xf7dd10*/ bool get_IsNotPublic();
        /*0xf7dd80*/ bool get_IsPublic();
        /*0xf7dae0*/ bool get_IsExplicitLayout();
        /*0xf7d950*/ bool get_IsCOMObject();
        /*0x17cb40*/ bool IsCOMObjectImpl();
        /*0xf7d9f0*/ bool get_IsContextful();
        /*0xf7c2f0*/ bool IsContextfulImpl();
        /*0x3ce290*/ bool get_IsCollectible();
        /*0xf7da10*/ bool get_IsEnum();
        /*0xf7dc30*/ bool get_IsMarshalByRef();
        /*0xf7cd30*/ bool IsMarshalByRefImpl();
        /*0xf7dd60*/ bool get_IsPrimitive();
        /*0x17cb40*/ bool IsPrimitiveImpl();
        /*0xf7e020*/ bool get_IsValueType();
        /*0xf7cf50*/ bool IsValueTypeImpl();
        /*0x348b00*/ bool get_IsSignatureType();
        /*0xf79f10*/ System.Reflection.ConstructorInfo GetConstructor(System.Type[] types);
        /*0xf79c10*/ System.Reflection.ConstructorInfo GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0xf79d90*/ System.Reflection.ConstructorInfo GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x184ab0*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
        System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
        /*0xf7aba0*/ System.Reflection.FieldInfo GetField(string name);
        System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x184ab0*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
        /*0xf7ad90*/ System.Reflection.MemberInfo[] GetMember(string name);
        /*0xf7ad60*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.BindingFlags bindingAttr);
        /*0xf7adb0*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
        /*0x184ab0*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
        /*0xf7afd0*/ System.Reflection.MethodInfo GetMethod(string name);
        /*0xf7b070*/ System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr);
        /*0xf7b100*/ System.Reflection.MethodInfo GetMethod(string name, System.Type[] types);
        /*0xf7ae00*/ System.Reflection.MethodInfo GetMethod(string name, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0xf7b4b0*/ System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0xf7b2c0*/ System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0xf7b690*/ System.Reflection.MethodInfo[] GetMethods();
        /*0x184ab0*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
        System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
        /*0xf7b970*/ System.Reflection.PropertyInfo GetProperty(string name, System.Reflection.BindingFlags bindingAttr);
        /*0xf7ba00*/ System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType);
        /*0xf7b7a0*/ System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType, System.Type[] types);
        /*0xf7b6b0*/ System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0xf7b880*/ System.Reflection.PropertyInfo GetProperty(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x184ab0*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
        /*0xf7e2e0*/ System.RuntimeTypeHandle get_TypeHandle();
        /*0xf7bba0*/ System.TypeCode GetTypeCodeImpl();
        /*0x1803b0*/ System.Type get_BaseType();
        object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
        /*0x1803b0*/ System.Type[] GetInterfaces();
        /*0xf7c9d0*/ bool IsInstanceOfType(object o);
        /*0xf7c970*/ bool IsEquivalentTo(System.Type other);
        /*0xf7a9a0*/ System.Type GetEnumUnderlyingType();
        /*0xf7aaf0*/ System.Array GetEnumValues();
        /*0xf7d020*/ System.Type MakeArrayType();
        /*0xf7d060*/ System.Type MakeArrayType(int rank);
        /*0xf7d0a0*/ System.Type MakeByRefType();
        /*0xf7d150*/ System.Type MakeGenericType(System.Type[] typeArguments);
        /*0xf7d1a0*/ System.Type MakePointerType();
        /*0xf7d1e0*/ string ToString();
        /*0xf793a0*/ bool Equals(object o);
        /*0xf7ad00*/ int GetHashCode();
        /*0xf79300*/ bool Equals(System.Type o);
        /*0x348b00*/ bool get_IsSzArray();
        /*0xf79ba0*/ string FormatTypeName();
        /*0xf79b60*/ string FormatTypeName(bool serialization);
        /*0xf7db60*/ bool get_IsInterface();
        /*0xf7d6b0*/ string get_FullNameOrDefault();
        /*0xf7ce00*/ bool IsRuntimeImplemented();
        /*0xedfd70*/ string InternalGetNameIfAvailable(ref System.Type rootCauseForFailure);
        /*0xf7d860*/ string get_InternalNameIfAvailable();
        /*0xf7e280*/ string get_NameOrDefault();
    }

    class TypeAccessException : System.TypeLoadException
    {
        /*0xf78c80*/ TypeAccessException();
        /*0xf483b0*/ TypeAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum TypeCode
    {
        Empty = 0,
        Object = 1,
        DBNull = 2,
        Boolean = 3,
        Char = 4,
        SByte = 5,
        Byte = 6,
        Int16 = 7,
        UInt16 = 8,
        Int32 = 9,
        UInt32 = 10,
        Int64 = 11,
        UInt64 = 12,
        Single = 13,
        Double = 14,
        Decimal = 15,
        DateTime = 16,
        String = 18,
    }

    class TypeInitializationException : System.SystemException
    {
        /*0x90*/ string _typeName;

        /*0xf78e20*/ TypeInitializationException();
        /*0xf78eb0*/ TypeInitializationException(string fullTypeName, System.Exception innerException);
        /*0xf79050*/ TypeInitializationException(string fullTypeName, string message, System.Exception innerException);
        /*0xf78f80*/ TypeInitializationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf78cd0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf790f0*/ string get_TypeName();
    }

    struct UInt16 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<ushort>, System.IEquatable<ushort>, System.ISpanFormattable
    {
        static ushort MaxValue = 65535;
        static ushort MinValue = 0;
        /*0x10*/ ushort m_value;

        static /*0xf7e4a0*/ ushort Parse(string s, System.IFormatProvider provider);
        static /*0xf7e540*/ ushort Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0xf7e5f0*/ ushort Parse(System.ReadOnlySpan<char> s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        /*0xf7e330*/ int CompareTo(object value);
        /*0xe2c560*/ int CompareTo(ushort value);
        /*0xf7e410*/ bool Equals(object obj);
        /*0xe2c830*/ bool Equals(ushort obj);
        /*0x6bba60*/ int GetHashCode();
        /*0xf7ec30*/ string ToString();
        /*0xf7ed80*/ string ToString(System.IFormatProvider provider);
        /*0xf7ecb0*/ string ToString(string format, System.IFormatProvider provider);
        /*0xf7ee10*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x6bbae0*/ System.TypeCode GetTypeCode();
        /*0xf7e720*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xf7e7c0*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xf7ea50*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xf7e770*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xf7e960*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x6bba60*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xf7e9b0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xf7eb90*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xf7ea00*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xf7ebe0*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xf7eaa0*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xf7e910*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xf7e8a0*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xf7e810*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xf7eaf0*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct UInt32 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<uint>, System.IEquatable<uint>, System.ISpanFormattable
    {
        static uint MaxValue = 4294967295;
        static uint MinValue = 0;
        /*0x10*/ uint m_value;

        static /*0xf7f060*/ uint Parse(string s, System.IFormatProvider provider);
        static /*0xf7f130*/ uint Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0xf7fa50*/ bool TryParse(string s, ref uint result);
        /*0xf7eec0*/ int CompareTo(object value);
        /*0xf7efb0*/ int CompareTo(uint value);
        /*0xf7efd0*/ bool Equals(object obj);
        /*0xf4fe40*/ bool Equals(uint obj);
        /*0x6bba50*/ int GetHashCode();
        /*0xf7f930*/ string ToString();
        /*0xf7f7e0*/ string ToString(System.IFormatProvider provider);
        /*0xf7f870*/ string ToString(string format);
        /*0xf7f710*/ string ToString(string format, System.IFormatProvider provider);
        /*0xf7f9b0*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0xf7f050*/ System.TypeCode GetTypeCode();
        /*0xf7f210*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xf7f2b0*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xf7f540*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xf7f260*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xf7f450*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xf7f670*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xf7f4a0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x6bba50*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xf7f4f0*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xf7f6c0*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xf7f590*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xf7f400*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xf7f390*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xf7f300*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xf7f5e0*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct UInt64 : System.IComparable, System.IConvertible, System.IFormattable, System.IComparable<ulong>, System.IEquatable<ulong>, System.ISpanFormattable
    {
        static ulong MaxValue = 18446744073709551615;
        static ulong MinValue = 0;
        /*0x10*/ ulong m_value;

        static /*0xf7fce0*/ ulong Parse(string s, System.IFormatProvider provider);
        static /*0xf7fdb0*/ ulong Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0xf807f0*/ bool TryParse(string s, ref ulong result);
        static /*0xf806f0*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref ulong result);
        /*0xf7fb50*/ int CompareTo(object value);
        /*0xf7fb30*/ int CompareTo(ulong value);
        /*0xf7fc40*/ bool Equals(object obj);
        /*0xf50c20*/ bool Equals(ulong obj);
        /*0xf7fcd0*/ int GetHashCode();
        /*0xf805c0*/ string ToString();
        /*0xf80530*/ string ToString(System.IFormatProvider provider);
        /*0xf803a0*/ string ToString(string format);
        /*0xf80460*/ string ToString(string format, System.IFormatProvider provider);
        /*0xf80640*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0x6d5db0*/ System.TypeCode GetTypeCode();
        /*0xf7fe90*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xf7ff30*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xf801c0*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xf7fee0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xf800d0*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xf80300*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xf80120*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xf80350*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xf80170*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x6937d0*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xf80210*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xf80080*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xf80010*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xf7ff80*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xf80260*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class UnauthorizedAccessException : System.SystemException
    {
        /*0xf808d0*/ UnauthorizedAccessException();
        /*0xf80960*/ UnauthorizedAccessException(string message);
        /*0xf64550*/ UnauthorizedAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class UnhandledExceptionEventArgs : System.EventArgs
    {
        /*0x10*/ object _exception;
        /*0x18*/ bool _isTerminating;

        /*0xf809d0*/ UnhandledExceptionEventArgs(object exception, bool isTerminating);
        /*0x73d3e0*/ object get_ExceptionObject();
        /*0xdd36a0*/ bool get_IsTerminating();
    }

    class UnhandledExceptionEventHandler : System.MulticastDelegate
    {
        /*0x722be0*/ UnhandledExceptionEventHandler(object object, nint method);
        /*0x722200*/ void Invoke(object sender, System.UnhandledExceptionEventArgs e);
    }

    interface IValueTupleInternal : System.Runtime.CompilerServices.ITuple
    {
        /*0x17b580*/ int GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x1803b0*/ string ToStringEnd();
    }

    struct ValueTuple : System.IEquatable<System.ValueTuple>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        static /*0xf80a50*/ int CombineHashCodes(int h1, int h2);
        static /*0xf81080*/ int CombineHashCodes(int h1, int h2, int h3);
        static /*0xf80f70*/ int CombineHashCodes(int h1, int h2, int h3, int h4);
        static /*0xf80ac0*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5);
        static /*0xf80c10*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6);
        static /*0xf80da0*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7);
        static /*0xf81140*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8);
        /*0xf81350*/ bool Equals(object obj);
        /*0x3ce290*/ bool Equals(System.ValueTuple other);
        /*0xf814c0*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0xf81510*/ int System.IComparable.CompareTo(object other);
        /*0x388e90*/ int CompareTo(System.ValueTuple other);
        /*0xf813a0*/ int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x388e90*/ int GetHashCode();
        /*0x388e90*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x388e90*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0xf81660*/ string ToString();
        /*0xf81630*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x388e90*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1> : System.IEquatable<System.ValueTuple<T1>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;

        /*0x2a5510*/ ValueTuple(T1 item1);
        /*0x17e620*/ bool Equals(object obj);
        /*0x2a5510*/ bool Equals(System.ValueTuple<T1> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int System.IComparable.CompareTo(object other);
        /*0x2a5510*/ int CompareTo(System.ValueTuple<T1> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x180980*/ int GetHashCode();
        /*0x17b580*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x1803b0*/ string ToString();
        /*0x1803b0*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x180980*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2> : System.IEquatable<System.ValueTuple<T1, T2>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;

        /*0x2a5510*/ ValueTuple(T1 item1, T2 item2);
        /*0x17e620*/ bool Equals(object obj);
        /*0x2a5510*/ bool Equals(System.ValueTuple<T1, T2> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int System.IComparable.CompareTo(object other);
        /*0x2a5510*/ int CompareTo(System.ValueTuple<T1, T2> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x180980*/ int GetHashCode();
        /*0x17b580*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x1803b0*/ string ToString();
        /*0x1803b0*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x180980*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3> : System.IEquatable<System.ValueTuple<T1, T2, T3>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;

        /*0x2a5510*/ ValueTuple(T1 item1, T2 item2, T3 item3);
        /*0x17e620*/ bool Equals(object obj);
        /*0x2a5510*/ bool Equals(System.ValueTuple<T1, T2, T3> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int System.IComparable.CompareTo(object other);
        /*0x2a5510*/ int CompareTo(System.ValueTuple<T1, T2, T3> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x180980*/ int GetHashCode();
        /*0x17b580*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x1803b0*/ string ToString();
        /*0x1803b0*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x180980*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;

        /*0x2a5510*/ ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
        /*0x17e620*/ bool Equals(object obj);
        /*0x2a5510*/ bool Equals(System.ValueTuple<T1, T2, T3, T4, T5> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int System.IComparable.CompareTo(object other);
        /*0x2a5510*/ int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x180980*/ int GetHashCode();
        /*0x17b580*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x1803b0*/ string ToString();
        /*0x1803b0*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x180980*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;
        /*0x0*/ T6 Item6;
        /*0x0*/ T7 Item7;
        /*0x0*/ TRest Rest;

        /*0x2a5510*/ ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);
        /*0x17e620*/ bool Equals(object obj);
        /*0x2a5510*/ bool Equals(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int System.IComparable.CompareTo(object other);
        /*0x2a5510*/ int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x180980*/ int GetHashCode();
        /*0x17b580*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        /*0x17b580*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x1803b0*/ string ToString();
        /*0x1803b0*/ string System.IValueTupleInternal.ToStringEnd();
        /*0x180980*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Version : System.ICloneable, System.IComparable, System.IComparable<System.Version>, System.IEquatable<System.Version>, System.ISpanFormattable
    {
        /*0x10*/ int _Major;
        /*0x14*/ int _Minor;
        /*0x18*/ int _Build;
        /*0x1c*/ int _Revision;

        static /*0xf821e0*/ bool op_Equality(System.Version v1, System.Version v2);
        static /*0xf82220*/ bool op_Inequality(System.Version v1, System.Version v2);
        /*0xf81f60*/ Version(int major, int minor, int build, int revision);
        /*0xf82190*/ Version();
        /*0xf82140*/ Version(System.Version version);
        /*0xf81690*/ object Clone();
        /*0x417e30*/ int get_Major();
        /*0x70a440*/ int get_Minor();
        /*0x8a5c20*/ int get_Build();
        /*0xc70b00*/ int get_Revision();
        /*0xf81710*/ int CompareTo(object version);
        /*0xf81800*/ int CompareTo(System.Version value);
        /*0xf818a0*/ bool Equals(object obj);
        /*0xf81860*/ bool Equals(System.Version obj);
        /*0xf81940*/ int GetHashCode();
        /*0xf81e10*/ string ToString();
        /*0xf81d80*/ string ToString(int fieldCount);
        /*0xf81970*/ bool TryFormat(System.Span<char> destination, ref int charsWritten);
        /*0xf81e40*/ bool TryFormat(System.Span<char> destination, int fieldCount, ref int charsWritten);
        /*0xf81970*/ bool System.ISpanFormattable.TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0xf821c0*/ int get_DefaultFormatFieldCount();
        /*0xf81a70*/ System.Text.StringBuilder ToCachedStringBuilder(int fieldCount);
    }

    struct Void
    {
    }

    class NotImplemented
    {
        static /*0xf6f550*/ System.Exception get_ByDesign();
    }

    interface IServiceProvider
    {
        /*0x1858d0*/ object GetService(System.Type serviceType);
    }

    class ConsoleCancelEventHandler : System.MulticastDelegate
    {
        /*0x722be0*/ ConsoleCancelEventHandler(object object, nint method);
        /*0x722200*/ void Invoke(object sender, System.ConsoleCancelEventArgs e);
    }

    class ConsoleCancelEventArgs : System.EventArgs
    {
        /*0x10*/ System.ConsoleSpecialKey _type;
        /*0x14*/ bool <Cancel>k__BackingField;

        /*0xf6cd50*/ ConsoleCancelEventArgs(System.ConsoleSpecialKey type);
        /*0xf6cdb0*/ ConsoleCancelEventArgs();
        /*0x8b9820*/ bool get_Cancel();
    }

    enum ConsoleColor
    {
        Black = 0,
        DarkBlue = 1,
        DarkGreen = 2,
        DarkCyan = 3,
        DarkRed = 4,
        DarkMagenta = 5,
        DarkYellow = 6,
        Gray = 7,
        DarkGray = 8,
        Blue = 9,
        Green = 10,
        Cyan = 11,
        Red = 12,
        Magenta = 13,
        Yellow = 14,
        White = 15,
    }

    enum ConsoleKey
    {
        Backspace = 8,
        Tab = 9,
        Clear = 12,
        Enter = 13,
        Pause = 19,
        Escape = 27,
        Spacebar = 32,
        PageUp = 33,
        PageDown = 34,
        End = 35,
        Home = 36,
        LeftArrow = 37,
        UpArrow = 38,
        RightArrow = 39,
        DownArrow = 40,
        Select = 41,
        Print = 42,
        Execute = 43,
        PrintScreen = 44,
        Insert = 45,
        Delete = 46,
        Help = 47,
        D0 = 48,
        D1 = 49,
        D2 = 50,
        D3 = 51,
        D4 = 52,
        D5 = 53,
        D6 = 54,
        D7 = 55,
        D8 = 56,
        D9 = 57,
        A = 65,
        B = 66,
        C = 67,
        D = 68,
        E = 69,
        F = 70,
        G = 71,
        H = 72,
        I = 73,
        J = 74,
        K = 75,
        L = 76,
        M = 77,
        N = 78,
        O = 79,
        P = 80,
        Q = 81,
        R = 82,
        S = 83,
        T = 84,
        U = 85,
        V = 86,
        W = 87,
        X = 88,
        Y = 89,
        Z = 90,
        LeftWindows = 91,
        RightWindows = 92,
        Applications = 93,
        Sleep = 95,
        NumPad0 = 96,
        NumPad1 = 97,
        NumPad2 = 98,
        NumPad3 = 99,
        NumPad4 = 100,
        NumPad5 = 101,
        NumPad6 = 102,
        NumPad7 = 103,
        NumPad8 = 104,
        NumPad9 = 105,
        Multiply = 106,
        Add = 107,
        Separator = 108,
        Subtract = 109,
        Decimal = 110,
        Divide = 111,
        F1 = 112,
        F2 = 113,
        F3 = 114,
        F4 = 115,
        F5 = 116,
        F6 = 117,
        F7 = 118,
        F8 = 119,
        F9 = 120,
        F10 = 121,
        F11 = 122,
        F12 = 123,
        F13 = 124,
        F14 = 125,
        F15 = 126,
        F16 = 127,
        F17 = 128,
        F18 = 129,
        F19 = 130,
        F20 = 131,
        F21 = 132,
        F22 = 133,
        F23 = 134,
        F24 = 135,
        BrowserBack = 166,
        BrowserForward = 167,
        BrowserRefresh = 168,
        BrowserStop = 169,
        BrowserSearch = 170,
        BrowserFavorites = 171,
        BrowserHome = 172,
        VolumeMute = 173,
        VolumeDown = 174,
        VolumeUp = 175,
        MediaNext = 176,
        MediaPrevious = 177,
        MediaStop = 178,
        MediaPlay = 179,
        LaunchMail = 180,
        LaunchMediaSelect = 181,
        LaunchApp1 = 182,
        LaunchApp2 = 183,
        Oem1 = 186,
        OemPlus = 187,
        OemComma = 188,
        OemMinus = 189,
        OemPeriod = 190,
        Oem2 = 191,
        Oem3 = 192,
        Oem4 = 219,
        Oem5 = 220,
        Oem6 = 221,
        Oem7 = 222,
        Oem8 = 223,
        Oem102 = 226,
        Process = 229,
        Packet = 231,
        Attention = 246,
        CrSel = 247,
        ExSel = 248,
        EraseEndOfFile = 249,
        Play = 250,
        Zoom = 251,
        NoName = 252,
        Pa1 = 253,
        OemClear = 254,
    }

    struct ConsoleKeyInfo
    {
        /*0x10*/ char _keyChar;
        /*0x14*/ System.ConsoleKey _key;
        /*0x18*/ System.ConsoleModifiers _mods;

        /*0xf6ced0*/ ConsoleKeyInfo(char keyChar, System.ConsoleKey key, bool shift, bool alt, bool control);
        /*0x6bba60*/ char get_KeyChar();
        /*0xa5a7c0*/ System.ConsoleKey get_Key();
        /*0xf6ce00*/ bool Equals(object value);
        /*0xf6cde0*/ bool Equals(System.ConsoleKeyInfo obj);
        /*0xf6ceb0*/ int GetHashCode();
    }

    enum ConsoleModifiers
    {
        Alt = 1,
        Shift = 2,
        Control = 4,
    }

    enum ConsoleSpecialKey
    {
        ControlC = 0,
        ControlBreak = 1,
    }

    class ThrowHelper
    {
        static /*0xf77610*/ void ThrowArgumentNullException(System.ExceptionArgument argument);
        static /*0xf76730*/ System.Exception CreateArgumentNullException(System.ExceptionArgument argument);
        static /*0xf777d0*/ void ThrowArrayTypeMismatchException();
        static /*0xf768a0*/ System.Exception CreateArrayTypeMismatchException();
        static /*0xf77500*/ void ThrowArgumentException_DestinationTooShort();
        static /*0xf766d0*/ System.Exception CreateArgumentException_DestinationTooShort();
        static /*0xf77880*/ void ThrowIndexOutOfRangeException();
        static /*0xf768f0*/ System.Exception CreateIndexOutOfRangeException();
        static /*0xf77760*/ void ThrowArgumentOutOfRangeException();
        static /*0xf767c0*/ System.Exception CreateArgumentOutOfRangeException();
        static /*0xf77730*/ void ThrowArgumentOutOfRangeException(System.ExceptionArgument argument);
        static /*0xf76810*/ System.Exception CreateArgumentOutOfRangeException(System.ExceptionArgument argument);
        static /*0xf77b60*/ void ThrowWrongKeyTypeArgumentException(object key, System.Type targetType);
        static /*0xf77c40*/ void ThrowWrongValueTypeArgumentException(object value, System.Type targetType);
        static /*0xf775b0*/ void ThrowArgumentException(System.ExceptionResource resource);
        static /*0xf77530*/ void ThrowArgumentException(System.ExceptionResource resource, System.ExceptionArgument argument);
        static /*0xf77640*/ void ThrowArgumentOutOfRangeException(System.ExceptionArgument argument, System.ExceptionResource resource);
        static /*0xf77ac0*/ void ThrowSerializationException(System.ExceptionResource resource);
        static /*0xf77a60*/ void ThrowNotSupportedException(System.ExceptionResource resource);
        static /*0xf778f0*/ void ThrowInvalidOperationException_InvalidOperation_EnumFailedVersion();
        static /*0xf77940*/ void ThrowInvalidOperationException_InvalidOperation_EnumOpCantHappen();
        static /*0xf77990*/ void ThrowInvalidOperationException_InvalidOperation_NoValue();
        static /*0xf76ce0*/ System.ArgumentOutOfRangeException GetArgumentOutOfRangeException(System.ExceptionArgument argument, string resource);
        static /*0xf77790*/ void ThrowArgumentOutOfRange_IndexException();
        static /*0xf77840*/ void ThrowIndexArgumentOutOfRange_NeedNonNegNumException();
        static /*0xf774b0*/ void ThrowArgumentException_Argument_InvalidArrayType();
        static /*0xf76940*/ System.ArgumentException GetAddingDuplicateWithKeyArgumentException(object key);
        static /*0xf77480*/ void ThrowAddingDuplicateWithKeyArgumentException(object key);
        static /*0xf76e60*/ System.Collections.Generic.KeyNotFoundException GetKeyNotFoundException(object key);
        static /*0xf77a50*/ void ThrowKeyNotFoundException(object key);
        static /*0xf779e0*/ void ThrowInvalidTypeWithPointersNotSupported(System.Type targetType);
        static /*0xf778b0*/ void ThrowInvalidOperationException_ConcurrentOperationsNotSupported();
        static /*0xf76e00*/ System.InvalidOperationException GetInvalidOperationException(string str);
        static /*0x1827f0*/ void IfNullAndNullsAreIllegalThenThrow<T>(object value, System.ExceptionArgument argName);
        static /*0xf769c0*/ string GetArgumentName(System.ExceptionArgument argument);
        static /*0xf76d50*/ System.ArgumentOutOfRangeException GetArgumentOutOfRangeException(System.ExceptionArgument argument, System.ExceptionResource resource);
        static /*0xf77b20*/ void ThrowStartIndexArgumentOutOfRange_ArgumentOutOfRange_Index();
        static /*0xf77800*/ void ThrowCountArgumentOutOfRange_ArgumentOutOfRange_Count();
        static /*0xf76ee0*/ string GetResourceName(System.ExceptionResource resource);
    }

    class AppDomainUnloadedException : System.SystemException
    {
        /*0xf645d0*/ AppDomainUnloadedException();
        /*0xf64550*/ AppDomainUnloadedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class CannotUnloadAppDomainException : System.SystemException
    {
        /*0xf6ccc0*/ CannotUnloadAppDomainException();
        /*0xf6cc50*/ CannotUnloadAppDomainException(string message);
        /*0xf64550*/ CannotUnloadAppDomainException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class OperatingSystem : System.Runtime.Serialization.ISerializable, System.ICloneable
    {
        /*0x10*/ System.Version _version;
        /*0x18*/ System.PlatformID _platform;
        /*0x20*/ string _servicePack;
        /*0x28*/ string _versionString;

        /*0xf6f670*/ OperatingSystem(System.PlatformID platform, System.Version version);
        /*0xf6f690*/ OperatingSystem(System.PlatformID platform, System.Version version, string servicePack);
        /*0xf6f620*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x8a5c20*/ System.PlatformID get_Platform();
        /*0xf6f5a0*/ object Clone();
        /*0xf6f660*/ string ToString();
        /*0xf6f800*/ string get_VersionString();
    }

    class MissingFieldException : System.MissingMemberException, System.Runtime.Serialization.ISerializable
    {
        /*0xf6ebc0*/ MissingFieldException();
        /*0xf6eca0*/ MissingFieldException(string message);
        /*0xf6ec10*/ MissingFieldException(string className, string fieldName);
        /*0xf541b0*/ MissingFieldException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf6ecc0*/ string get_Message();
    }

    class MissingMemberException : System.MemberAccessException
    {
        /*0x90*/ string ClassName;
        /*0x98*/ string MemberName;
        /*0xa0*/ byte[] Signature;

        static /*0xf6eed0*/ string FormatSignature(byte[] signature);
        /*0xf6f150*/ MissingMemberException();
        /*0xf6f1a0*/ MissingMemberException(string message);
        /*0xf6f3c0*/ MissingMemberException(string className, string memberName);
        /*0xf6f1c0*/ MissingMemberException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf6ef10*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf6f420*/ string get_Message();
    }

    class OutOfMemoryException : System.SystemException
    {
        /*0xf6fff0*/ OutOfMemoryException();
        /*0xf70080*/ OutOfMemoryException(string message);
        /*0xf64550*/ OutOfMemoryException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Array : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.ICloneable
    {
        static /*0xf66840*/ System.Array CreateInstance(System.Type elementType, long[] lengths);
        static /*0x17e030*/ System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly<T>(T[] array);
        static /*0x1827f0*/ void Resize<T>(ref T[] array, int newSize);
        static /*0xf65110*/ int CombineHashCodes(int h1, int h2);
        static /*0xf648b0*/ int BinarySearch(System.Array array, object value);
        static /*0x177800*/ TOutput[] ConvertAll<TInput, TOutput>(TInput[] array, System.Converter<TInput, TOutput> converter);
        static /*0xf653a0*/ void Copy(System.Array sourceArray, System.Array destinationArray, long length);
        static /*0xf65630*/ void Copy(System.Array sourceArray, long sourceIndex, System.Array destinationArray, long destinationIndex, long length);
        static /*0x177670*/ void ForEach<T>(T[] array, System.Action<T> action);
        static /*0xf64e50*/ int BinarySearch(System.Array array, int index, int length, object value);
        static /*0xf649a0*/ int BinarySearch(System.Array array, object value, System.Collections.IComparer comparer);
        static /*0xf64a90*/ int BinarySearch(System.Array array, int index, int length, object value, System.Collections.IComparer comparer);
        static /*0xf66b20*/ int GetMedian(int low, int hi);
        static /*0x2a5510*/ int BinarySearch<T>(T[] array, T value);
        static /*0x2a5510*/ int BinarySearch<T>(T[] array, T value, System.Collections.Generic.IComparer<T> comparer);
        static /*0x2a5510*/ int BinarySearch<T>(T[] array, int index, int length, T value);
        static /*0x2a5510*/ int BinarySearch<T>(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
        static /*0xf67550*/ int IndexOf(System.Array array, object value);
        static /*0xf67460*/ int IndexOf(System.Array array, object value, int startIndex);
        static /*0xf67640*/ int IndexOf(System.Array array, object value, int startIndex, int count);
        static /*0x2a5510*/ int IndexOf<T>(T[] array, T value);
        static /*0x2a5510*/ int IndexOf<T>(T[] array, T value, int startIndex);
        static /*0x2a5510*/ int IndexOf<T>(T[] array, T value, int startIndex, int count);
        static /*0xf67a60*/ int LastIndexOf(System.Array array, object value);
        static /*0xf67b80*/ int LastIndexOf(System.Array array, object value, int startIndex);
        static /*0xf67c00*/ int LastIndexOf(System.Array array, object value, int startIndex, int count);
        static /*0x2a5510*/ int LastIndexOf<T>(T[] array, T value);
        static /*0x2a5510*/ int LastIndexOf<T>(T[] array, T value, int startIndex);
        static /*0x2a5510*/ int LastIndexOf<T>(T[] array, T value, int startIndex, int count);
        static /*0xf67fa0*/ void Reverse(System.Array array);
        static /*0xf68070*/ void Reverse(System.Array array, int index, int length);
        static /*0x177be0*/ void Reverse<T>(T[] array);
        static /*0x182b00*/ void Reverse<T>(T[] array, int index, int length);
        static /*0xf69350*/ void Sort(System.Array array);
        static /*0xf69320*/ void Sort(System.Array array, int index, int length);
        static /*0xf69430*/ void Sort(System.Array array, System.Collections.IComparer comparer);
        static /*0xf69520*/ void Sort(System.Array array, int index, int length, System.Collections.IComparer comparer);
        static /*0xf69550*/ void Sort(System.Array keys, System.Array items);
        static /*0xf69230*/ void Sort(System.Array keys, System.Array items, System.Collections.IComparer comparer);
        static /*0xf69210*/ void Sort(System.Array keys, System.Array items, int index, int length);
        static /*0xf68e00*/ void Sort(System.Array keys, System.Array items, int index, int length, System.Collections.IComparer comparer);
        static /*0x177be0*/ void Sort<T>(T[] array);
        static /*0x182b00*/ void Sort<T>(T[] array, int index, int length);
        static /*0x177670*/ void Sort<T>(T[] array, System.Collections.Generic.IComparer<T> comparer);
        static /*0x2a5510*/ void Sort<T>(T[] array, int index, int length, System.Collections.Generic.IComparer<T> comparer);
        static /*0x177670*/ void Sort<T>(T[] array, System.Comparison<T> comparison);
        static /*0x177670*/ void Sort<TKey, TValue>(TKey[] keys, TValue[] items);
        static /*0x1832b0*/ void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length);
        static /*0x1824a0*/ void Sort<TKey, TValue>(TKey[] keys, TValue[] items, System.Collections.Generic.IComparer<TKey> comparer);
        static /*0x2a5510*/ void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, System.Collections.Generic.IComparer<TKey> comparer);
        static /*0x1794f0*/ bool Exists<T>(T[] array, System.Predicate<T> match);
        static /*0x2a5510*/ void Fill<T>(T[] array, T value);
        static /*0x2a5510*/ void Fill<T>(T[] array, T value, int startIndex, int count);
        static /*0x2a5510*/ T Find<T>(T[] array, System.Predicate<T> match);
        static /*0x177800*/ T[] FindAll<T>(T[] array, System.Predicate<T> match);
        static /*0x1779a0*/ int FindIndex<T>(T[] array, System.Predicate<T> match);
        static int FindIndex<T>(T[] array, int startIndex, System.Predicate<T> match);
        static /*0x2a5510*/ int FindIndex<T>(T[] array, int startIndex, int count, System.Predicate<T> match);
        static /*0x2a5510*/ T FindLast<T>(T[] array, System.Predicate<T> match);
        static /*0x1779a0*/ int FindLastIndex<T>(T[] array, System.Predicate<T> match);
        static int FindLastIndex<T>(T[] array, int startIndex, System.Predicate<T> match);
        static /*0x2a5510*/ int FindLastIndex<T>(T[] array, int startIndex, int count, System.Predicate<T> match);
        static /*0x1794f0*/ bool TrueForAll<T>(T[] array, System.Predicate<T> match);
        static /*0xf66a10*/ bool FastCopy(System.Array source, int source_idx, System.Array dest, int dest_idx, int length);
        static /*0xf65e00*/ System.Array CreateInstanceImpl(System.Type elementType, int[] lengths, int[] bounds);
        static /*0xf6a0a0*/ System.Array UnsafeCreateInstance(System.Type elementType, int[] lengths, int[] lowerBounds);
        static /*0xf65e80*/ System.Array UnsafeCreateInstance(System.Type elementType, int length1, int length2);
        static /*0xf6a0b0*/ System.Array UnsafeCreateInstance(System.Type elementType, int[] lengths);
        static /*0xf65e10*/ System.Array CreateInstance(System.Type elementType, int length);
        static /*0xf65e80*/ System.Array CreateInstance(System.Type elementType, int length1, int length2);
        static /*0xf667a0*/ System.Array CreateInstance(System.Type elementType, int length1, int length2, int length3);
        static /*0xf65f10*/ System.Array CreateInstance(System.Type elementType, int[] lengths);
        static /*0xf66240*/ System.Array CreateInstance(System.Type elementType, int[] lengths, int[] lowerBounds);
        static /*0xf64f80*/ void Clear(System.Array array, int index, int length);
        static /*0xf64f70*/ void ClearInternal(System.Array a, int index, int count);
        static /*0xf65520*/ void Copy(System.Array sourceArray, System.Array destinationArray, int length);
        static /*0xf657a0*/ void Copy(System.Array sourceArray, int sourceIndex, System.Array destinationArray, int destinationIndex, int length);
        static /*0xf65db0*/ System.ArrayTypeMismatchException CreateArrayTypeMismatchException();
        static /*0xf64e70*/ bool CanAssignArrayElement(System.Type source, System.Type target);
        static /*0xf65120*/ void ConstrainedCopy(System.Array sourceArray, int sourceIndex, System.Array destinationArray, int destinationIndex, int length);
        static /*0x180cf0*/ T[] Empty<T>();
        static /*0x2a5510*/ int IndexOfImpl<T>(T[] array, T value, int startIndex, int count);
        static /*0x2a5510*/ int LastIndexOfImpl<T>(T[] array, T value, int startIndex, int count);
        static /*0xf68c10*/ void SortImpl(System.Array keys, System.Array items, int index, int length, System.Collections.IComparer comparer);
        static /*0x2a5510*/ T UnsafeLoad<T>(T[] array, int index);
        static /*0x2a5510*/ void UnsafeStore<T>(T[] array, int index, T value);
        static /*0x2a5510*/ R UnsafeMov<S, R>(S instance);
        /*0x32f970*/ Array();
        /*0xf679b0*/ int System.Collections.ICollection.get_Count();
        /*0x348b00*/ bool System.Collections.IList.get_IsReadOnly();
        /*0xf69a50*/ object System.Collections.IList.get_Item(int index);
        /*0xf69a60*/ void System.Collections.IList.set_Item(int index, object value);
        /*0xf69640*/ int System.Collections.IList.Add(object value);
        /*0xf69870*/ bool System.Collections.IList.Contains(object value);
        /*0xf69690*/ void System.Collections.IList.Clear();
        /*0xf67550*/ int System.Collections.IList.IndexOf(object value);
        /*0xf69960*/ void System.Collections.IList.Insert(int index, object value);
        /*0xf69a00*/ void System.Collections.IList.Remove(object value);
        /*0xf699b0*/ void System.Collections.IList.RemoveAt(int index);
        /*0xf652a0*/ void CopyTo(System.Array array, int index);
        /*0xe2c220*/ object Clone();
        /*0xf69a80*/ int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0xf69cd0*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0xf69eb0*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0xf65130*/ void CopyTo(System.Array array, long index);
        /*0xf6a0c0*/ long get_LongLength();
        /*0xf66b00*/ long GetLongLength(int dimension);
        /*0xf66ed0*/ object GetValue(long index);
        /*0xf66d60*/ object GetValue(long index1, long index2);
        /*0xf67270*/ object GetValue(long index1, long index2, long index3);
        /*0xf66f70*/ object GetValue(long[] indices);
        /*0x3ce290*/ bool get_IsFixedSize();
        /*0x348b00*/ bool get_IsReadOnly();
        /*0x348b00*/ bool get_IsSynchronized();
        /*0x621ca0*/ object get_SyncRoot();
        /*0xf68620*/ void SetValue(object value, long index);
        /*0xf68a90*/ void SetValue(object value, long index1, long index2);
        /*0xf686c0*/ void SetValue(object value, long index1, long index2, long index3);
        /*0xf68390*/ void SetValue(object value, long[] indices);
        /*0xf66a20*/ System.Collections.IEnumerator GetEnumerator();
        /*0xf679b0*/ int InternalArray__ICollection_get_Count();
        /*0x3ce290*/ bool InternalArray__ICollection_get_IsReadOnly();
        /*0xf66b40*/ ref byte GetRawSzArrayData();
        /*0x1803b0*/ System.Collections.Generic.IEnumerator<T> InternalArray__IEnumerable_GetEnumerator<T>();
        /*0xf67960*/ void InternalArray__ICollection_Clear();
        /*0x2a5510*/ void InternalArray__ICollection_Add<T>(T item);
        /*0x2a5510*/ bool InternalArray__ICollection_Remove<T>(T item);
        /*0x2a5510*/ bool InternalArray__ICollection_Contains<T>(T item);
        /*0x182a70*/ void InternalArray__ICollection_CopyTo<T>(T[] array, int arrayIndex);
        /*0x2a5510*/ T InternalArray__IReadOnlyList_get_Item<T>(int index);
        /*0xf679b0*/ int InternalArray__IReadOnlyCollection_get_Count();
        /*0x2a5510*/ void InternalArray__Insert<T>(int index, T item);
        /*0xf67a10*/ void InternalArray__RemoveAt(int index);
        /*0x2a5510*/ int InternalArray__IndexOf<T>(T item);
        /*0x2a5510*/ T InternalArray__get_Item<T>(int index);
        /*0x2a5510*/ void InternalArray__set_Item<T>(int index, T item);
        void GetGenericValueImpl<T>(int pos, ref T value);
        void SetGenericValueImpl<T>(int pos, ref T value);
        /*0xf679b0*/ int get_Length();
        /*0xf66b30*/ int get_Rank();
        /*0xf66b30*/ int GetRank();
        /*0xf66af0*/ int GetLength(int dimension);
        /*0xf66b10*/ int GetLowerBound(int dimension);
        /*0xf66ec0*/ object GetValue(int[] indices);
        /*0xf68610*/ void SetValue(object value, int[] indices);
        /*0xf66ba0*/ object GetValueImpl(int pos);
        /*0xf682e0*/ void SetValueImpl(object value, int pos);
        /*0xf66b60*/ int GetUpperBound(int dimension);
        /*0xf66bb0*/ object GetValue(int index);
        /*0xf67140*/ object GetValue(int index1, int index2);
        /*0xf671d0*/ object GetValue(int index1, int index2, int index3);
        /*0xf688c0*/ void SetValue(object value, int index);
        /*0xf68570*/ void SetValue(object value, int index1, int index2);
        /*0xf682f0*/ void SetValue(object value, int index1, int index2, int index3);
        /*0x32d010*/ void Initialize();

        class ArrayEnumerator : System.Collections.IEnumerator, System.ICloneable
        {
            /*0x10*/ System.Array _array;
            /*0x18*/ int _index;
            /*0x1c*/ int _endIndex;

            /*0xf64690*/ ArrayEnumerator(System.Array array);
            /*0xf64660*/ bool MoveNext();
            /*0xf64680*/ void Reset();
            /*0xe2c220*/ object Clone();
            /*0xf64730*/ object get_Current();
        }

        class RawData
        {
            /*0x10*/ nint Bounds;
            /*0x18*/ nint Count;
            /*0x20*/ byte Data;
        }

        struct InternalEnumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
        {
            /*0x0*/ System.Array array;
            /*0x0*/ int idx;

            /*0x17aec0*/ InternalEnumerator(System.Array array);
            /*0x180fc0*/ void Dispose();
            /*0x17cb40*/ bool MoveNext();
            /*0x2a5510*/ T get_Current();
            /*0x180fc0*/ void System.Collections.IEnumerator.Reset();
            /*0x1803b0*/ object System.Collections.IEnumerator.get_Current();
        }

        class EmptyInternalEnumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
        {
            static /*0x0*/ System.Array.EmptyInternalEnumerator<T> Value;

            static /*0x180ff0*/ EmptyInternalEnumerator();
            /*0x180fc0*/ EmptyInternalEnumerator();
            /*0x180fc0*/ void Dispose();
            /*0x17cb40*/ bool MoveNext();
            /*0x2a5510*/ T get_Current();
            /*0x1803b0*/ object System.Collections.IEnumerator.get_Current();
            /*0x180fc0*/ void System.Collections.IEnumerator.Reset();
        }

        struct SorterObjectArray
        {
            /*0x10*/ object[] keys;
            /*0x18*/ object[] items;
            /*0x20*/ System.Collections.IComparer comparer;

            /*0xf74500*/ SorterObjectArray(object[] keys, object[] items, System.Collections.IComparer comparer);
            /*0xf740c0*/ void SwapIfGreaterWithItems(int a, int b);
            /*0xf74320*/ void Swap(int i, int j);
            /*0xf740b0*/ void Sort(int left, int length);
            /*0xf73e20*/ void IntrospectiveSort(int left, int length);
            /*0xf73d40*/ void IntroSort(int lo, int hi, int depthLimit);
            /*0xf73f10*/ int PickPivotAndPartition(int lo, int hi);
            /*0xf73970*/ void Heapsort(int lo, int hi);
            /*0xf73590*/ void DownHeap(int i, int n, int lo);
            /*0xf73a30*/ void InsertionSort(int lo, int hi);
        }

        struct SorterGenericArray
        {
            /*0x10*/ System.Array keys;
            /*0x18*/ System.Array items;
            /*0x20*/ System.Collections.IComparer comparer;

            /*0xf734e0*/ SorterGenericArray(System.Array keys, System.Array items, System.Collections.IComparer comparer);
            /*0xf73270*/ void SwapIfGreaterWithItems(int a, int b);
            /*0xf733f0*/ void Swap(int i, int j);
            /*0xf73260*/ void Sort(int left, int length);
            /*0xf72fb0*/ void IntrospectiveSort(int left, int length);
            /*0xf72ed0*/ void IntroSort(int lo, int hi, int depthLimit);
            /*0xf730e0*/ int PickPivotAndPartition(int lo, int hi);
            /*0xf72c60*/ void Heapsort(int lo, int hi);
            /*0xf72a20*/ void DownHeap(int i, int n, int lo);
            /*0xf72d20*/ void InsertionSort(int lo, int hi);
        }
    }

    struct ByReference<T>
    {
        /*0x0*/ nint _value;

        /*0x17aec0*/ ByReference(ref T value);
        /*0x1803b0*/ ref T get_Value();
    }

    class MonoTODOAttribute : System.Attribute
    {
        /*0x10*/ string comment;

        /*0x32f970*/ MonoTODOAttribute();
        /*0x49b490*/ MonoTODOAttribute(string comment);
    }

    class AppContextSwitches
    {
        static /*0x0*/ bool NoAsyncCurrentCulture;
        static /*0x1*/ bool EnforceJapaneseEraYearRanges;
        static /*0x2*/ bool FormatJapaneseFirstYearAsANumber;
        static /*0x3*/ bool EnforceLegacyJapaneseDateParsing;
    }

    class LocalDataStoreHolder
    {
        /*0x10*/ System.LocalDataStore m_Store;

        /*0x49b490*/ LocalDataStoreHolder(System.LocalDataStore store);
        /*0xf6d740*/ void Finalize();
        /*0x73d3e0*/ System.LocalDataStore get_Store();
    }

    class LocalDataStoreElement
    {
        /*0x10*/ object m_value;
        /*0x18*/ long m_cookie;

        /*0xf6d710*/ LocalDataStoreElement(long cookie);
        /*0x73d3e0*/ object get_Value();
        /*0x9f12f0*/ void set_Value(object value);
        /*0x32f410*/ long get_Cookie();
    }

    class LocalDataStore
    {
        /*0x10*/ System.LocalDataStoreElement[] m_DataTable;
        /*0x18*/ System.LocalDataStoreMgr m_Manager;

        /*0xf6eb40*/ LocalDataStore(System.LocalDataStoreMgr mgr, int InitialCapacity);
        /*0xf6e4f0*/ void Dispose();
        /*0xf6e580*/ object GetData(System.LocalDataStoreSlot slot);
        /*0xf6ea00*/ void SetData(System.LocalDataStoreSlot slot, object data);
        /*0xf6e520*/ void FreeData(int slot, long cookie);
        /*0xf6e6b0*/ System.LocalDataStoreElement PopulateElement(System.LocalDataStoreSlot slot);
    }

    class LocalDataStoreSlot
    {
        /*0x10*/ System.LocalDataStoreMgr m_mgr;
        /*0x18*/ int m_slot;
        /*0x20*/ long m_cookie;

        /*0xf6e490*/ LocalDataStoreSlot(System.LocalDataStoreMgr mgr, int slot, long cookie);
        /*0x73d3e0*/ System.LocalDataStoreMgr get_Manager();
        /*0x8a5c20*/ int get_Slot();
        /*0x61a260*/ long get_Cookie();
        /*0xf6e400*/ void Finalize();
    }

    class LocalDataStoreMgr
    {
        /*0x10*/ bool[] m_SlotInfoTable;
        /*0x18*/ int m_FirstAvailableSlot;
        /*0x20*/ System.Collections.Generic.List<System.LocalDataStore> m_ManagedLocalDataStores;
        /*0x28*/ System.Collections.Generic.Dictionary<string, System.LocalDataStoreSlot> m_KeyToSlotMap;
        /*0x30*/ long m_CookieGenerator;

        /*0xf6e310*/ LocalDataStoreMgr();
        /*0xf6dc20*/ System.LocalDataStoreHolder CreateLocalDataStore();
        /*0xf6de20*/ void DeleteLocalDataStore(System.LocalDataStore store);
        /*0xf6d7c0*/ System.LocalDataStoreSlot AllocateDataSlot();
        /*0xf6db30*/ System.LocalDataStoreSlot AllocateNamedDataSlot(string name);
        /*0xf6e180*/ System.LocalDataStoreSlot GetNamedDataSlot(string name);
        /*0xf6e0b0*/ void FreeNamedDataSlot(string name);
        /*0xf6def0*/ void FreeDataSlot(int slot, long cookie);
        /*0xf6e290*/ void ValidateSlot(System.LocalDataStoreSlot slot);
        /*0x8a5c00*/ int GetSlotTableLength();
    }

    class Activator
    {
        static /*0xf64240*/ object CreateInstance(System.Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture);
        static /*0xf642b0*/ object CreateInstance(System.Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
        static /*0xf64510*/ object CreateInstance(System.Type type, object[] args);
        static /*0xf64270*/ object CreateInstance(System.Type type, object[] args, object[] activationAttributes);
        static /*0xf64540*/ object CreateInstance(System.Type type);
        static /*0xf642a0*/ object CreateInstance(System.Type type, bool nonPublic);
        static /*0xf64070*/ object CreateInstance(System.Type type, bool nonPublic, bool wrapExceptions);
        static /*0x2a5510*/ T CreateInstance<T>();
    }

    class Attribute
    {
        static /*0xf6b7e0*/ System.Attribute[] InternalGetCustomAttributes(System.Reflection.PropertyInfo element, System.Type type, bool inherit);
        static /*0xf6b730*/ System.Attribute[] InternalGetCustomAttributes(System.Reflection.EventInfo element, System.Type type, bool inherit);
        static /*0xf6b970*/ System.Attribute[] InternalParamGetCustomAttributes(System.Reflection.ParameterInfo parameter, System.Type attributeType, bool inherit);
        static /*0xf6b900*/ bool InternalIsDefined(System.Reflection.PropertyInfo element, System.Type attributeType, bool inherit);
        static /*0xf6b890*/ bool InternalIsDefined(System.Reflection.EventInfo element, System.Type attributeType, bool inherit);
        static /*0xf6aad0*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element, System.Type type);
        static /*0xf6ad40*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element, System.Type type, bool inherit);
        static /*0xf6aac0*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element);
        static /*0xf6b360*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element, bool inherit);
        static /*0xf6bea0*/ bool IsDefined(System.Reflection.MemberInfo element, System.Type attributeType);
        static /*0xf6beb0*/ bool IsDefined(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
        static /*0xf6a800*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType);
        static /*0xf6a750*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
        static /*0xf6a8b0*/ System.Attribute[] GetCustomAttributes(System.Reflection.ParameterInfo element, bool inherit);
        static /*0xf6aab0*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element, System.Type attributeType);
        static /*0xf6aae0*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element, System.Type attributeType, bool inherit);
        static /*0xf6b1e0*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element);
        static /*0xf6b050*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element, bool inherit);
        static /*0xf6a6a0*/ System.Attribute GetCustomAttribute(System.Reflection.Assembly element, System.Type attributeType);
        static /*0xf6a5f0*/ System.Attribute GetCustomAttribute(System.Reflection.Assembly element, System.Type attributeType, bool inherit);
        static /*0xf6a130*/ bool AreFieldValuesEqual(object thisValue, object thatValue);
        /*0x32f970*/ Attribute();
        /*0xf6a360*/ bool Equals(object obj);
        /*0xf6b5a0*/ int GetHashCode();
    }

    class Buffer
    {
        static /*0xf6c5e0*/ bool InternalBlockCopy(System.Array src, int srcOffsetBytes, System.Array dst, int dstOffsetBytes, int byteCount);
        static /*0xf6c530*/ int IndexOfByte(byte* src, byte value, int index, int count);
        static /*0xf6ca70*/ int _ByteLength(System.Array array);
        static /*0xf6ca50*/ void ZeroMemory(byte* src, long len);
        static /*0xf6c5f0*/ void InternalMemcpy(byte* dest, byte* src, int count);
        static /*0xf6c480*/ int ByteLength(System.Array array);
        static /*0xf6c1f0*/ void BlockCopy(System.Array src, int srcOffset, System.Array dst, int dstOffset, int count);
        static /*0xf6c920*/ void MemoryCopy(void* source, void* destination, long destinationSizeInBytes, long sourceBytesToCopy);
        static /*0xf6cbb0*/ void memcpy4(byte* dest, byte* src, int size);
        static /*0xf6cb30*/ void memcpy2(byte* dest, byte* src, int size);
        static /*0xf6ca80*/ void memcpy1(byte* dest, byte* src, int size);
        static /*0xf6c600*/ void Memcpy(byte* dest, byte* src, int len);
        static /*0xf6c8f0*/ void Memmove(byte* dest, byte* src, uint len);
        static /*0x2a5510*/ void Memmove<T>(ref T destination, ref T source, ulong elementCount);
    }

    class ContextBoundObject : System.MarshalByRefObject
    {
        /*0x32f970*/ ContextBoundObject();
    }

    class ContextStaticAttribute : System.Attribute
    {
        /*0x534220*/ ContextStaticAttribute();
    }

    class DefaultBinder : System.Reflection.Binder
    {
        static /*0x0*/ System.DefaultBinder.Primitives[] _primitiveConversions;

        static /*0xf89f40*/ DefaultBinder();
        static /*0xf87020*/ System.Reflection.MethodBase ExactBinding(System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        static /*0xf872f0*/ System.Reflection.PropertyInfo ExactPropertyBinding(System.Reflection.PropertyInfo[] match, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        static /*0xf880b0*/ int FindMostSpecific(System.Reflection.ParameterInfo[] p1, int[] paramOrder1, System.Type paramArrayType1, System.Reflection.ParameterInfo[] p2, int[] paramOrder2, System.Type paramArrayType2, System.Type[] types, object[] args);
        static /*0xf87ca0*/ int FindMostSpecificType(System.Type c1, System.Type c2, System.Type t);
        static /*0xf87890*/ int FindMostSpecificMethod(System.Reflection.MethodBase m1, int[] paramOrder1, System.Type paramArrayType1, System.Reflection.MethodBase m2, int[] paramOrder2, System.Type paramArrayType2, System.Type[] types, object[] args);
        static /*0xf87770*/ int FindMostSpecificField(System.Reflection.FieldInfo cur1, System.Reflection.FieldInfo cur2);
        static /*0xf87b80*/ int FindMostSpecificProperty(System.Reflection.PropertyInfo cur1, System.Reflection.PropertyInfo cur2);
        static /*0xf86aa0*/ bool CompareMethodSigAndName(System.Reflection.MethodBase m1, System.Reflection.MethodBase m2);
        static /*0xf884f0*/ int GetHierarchyDepth(System.Type t);
        static /*0xf87620*/ System.Reflection.MethodBase FindMostDerivedNewSlotMeth(System.Reflection.MethodBase[] match, int cMatches);
        static /*0xf88910*/ void ReorderParams(int[] paramOrder, object[] vars);
        static /*0xf86de0*/ bool CreateParamOrder(int[] paramOrder, System.Reflection.ParameterInfo[] pars, string[] names);
        static /*0xf86700*/ bool CanConvertPrimitive(System.RuntimeType source, System.RuntimeType target);
        static /*0xf865f0*/ bool CanConvertPrimitiveObjectToType(object source, System.RuntimeType type);
        static /*0xf86c40*/ bool CompareMethodSig(System.Reflection.MethodBase m1, System.Reflection.MethodBase m2);
        static /*0xf864f0*/ bool CanChangePrimitive(System.Type source, System.Type target);
        static /*0xf86970*/ bool CanPrimitiveWiden(System.Type source, System.Type target);
        /*0x534220*/ DefaultBinder();
        /*0xf83df0*/ System.Reflection.MethodBase BindToMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo cultureInfo, string[] names, ref object state);
        /*0xf836d0*/ System.Reflection.FieldInfo BindToField(System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo cultureInfo);
        /*0xf89380*/ System.Reflection.PropertyInfo SelectProperty(System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, System.Type returnType, System.Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
        /*0xf86a40*/ object ChangeType(object value, System.Type type, System.Globalization.CultureInfo cultureInfo);
        /*0xf88580*/ void ReorderArgumentArray(ref object[] args, object state);
        /*0xf88ac0*/ System.Reflection.MethodBase SelectMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);

        class BinderState
        {
            /*0x10*/ int[] m_argsMap;
            /*0x18*/ int m_originalSize;
            /*0x1c*/ bool m_isParamArray;

            /*0xf83670*/ BinderState(int[] argsMap, int originalSize, bool isParamArray);
        }

        enum Primitives
        {
            Boolean = 8,
            Char = 16,
            SByte = 32,
            Byte = 64,
            Int16 = 128,
            UInt16 = 256,
            Int32 = 512,
            UInt32 = 1024,
            Int64 = 2048,
            UInt64 = 4096,
            Single = 8192,
            Double = 16384,
            Decimal = 32768,
            DateTime = 65536,
            String = 262144,
        }

        class <>c
        {
            static /*0x0*/ System.DefaultBinder.<> <>9;
            static /*0x8*/ System.Predicate<System.Type> <>9__2_0;

            static /*0xf9f8e0*/ <>c();
            /*0x32f970*/ <>c();
            /*0xf9f890*/ bool <SelectProperty>b__2_0(System.Type t);
        }
    }

    class Empty : System.Runtime.Serialization.ISerializable
    {
        static /*0x0*/ System.Empty Value;

        static /*0xf8a090*/ Empty();
        /*0x32f970*/ Empty();
        /*0xf8a050*/ string ToString();
        /*0xf89fd0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Enum : System.IComparable, System.IFormattable, System.IConvertible
    {
        static string enumSeperator = ", ";
        static /*0x0*/ char[] enumSeperatorCharArray;

        static /*0xf8ef40*/ Enum();
        static /*0xf8a620*/ System.Enum.ValuesAndNames GetCachedValuesAndNames(System.RuntimeType enumType, bool getNames);
        static /*0xf8b4a0*/ string InternalFormattedHexString(object value);
        static /*0xf8b2e0*/ string InternalFormat(System.RuntimeType eT, object value);
        static /*0xf8b0d0*/ string InternalFlagsFormat(System.RuntimeType eT, object value);
        static /*0xf8e560*/ ulong ToUInt64(object value);
        static /*0xf8b0c0*/ int InternalCompareTo(object o1, object o2);
        static /*0xf8ba00*/ System.RuntimeType InternalGetUnderlyingType(System.RuntimeType enumType);
        static /*0xf8a7a0*/ bool GetEnumValuesAndNames(System.RuntimeType enumType, ref ulong[] values, ref string[] names);
        static /*0xf8b0b0*/ object InternalBoxEnum(System.RuntimeType enumType, long value);
        static /*0xf8bc70*/ object Parse(System.Type enumType, string value);
        static /*0xf8bb50*/ object Parse(System.Type enumType, string value, bool ignoreCase);
        static /*0xf8e6f0*/ bool TryParseEnum(System.Type enumType, string value, bool ignoreCase, ref System.Enum.EnumResult parseResult);
        static /*0xf8ad80*/ System.Type GetUnderlyingType(System.Type enumType);
        static /*0xf8ae50*/ System.Array GetValues(System.Type enumType);
        static /*0xf8ba10*/ ulong[] InternalGetValues(System.RuntimeType enumType);
        static /*0xf8a7c0*/ string GetName(System.Type enumType, object value);
        static /*0xf8a890*/ string[] GetNames(System.Type enumType);
        static /*0xf8b9a0*/ string[] InternalGetNames(System.RuntimeType enumType);
        static /*0xf8d880*/ object ToObject(System.Type enumType, object value);
        static /*0xf8ba80*/ bool IsDefined(System.Type enumType, object value);
        static /*0xf8dfd0*/ object ToObject(System.Type enumType, sbyte value);
        static /*0xf8c680*/ object ToObject(System.Type enumType, short value);
        static /*0xf8cb00*/ object ToObject(System.Type enumType, int value);
        static /*0xf8d1c0*/ object ToObject(System.Type enumType, byte value);
        static /*0xf8d400*/ object ToObject(System.Type enumType, ushort value);
        static /*0xf8d640*/ object ToObject(System.Type enumType, uint value);
        static /*0xf8cd40*/ object ToObject(System.Type enumType, long value);
        static /*0xf8dd90*/ object ToObject(System.Type enumType, ulong value);
        static /*0xf8cf80*/ object ToObject(System.Type enumType, char value);
        static /*0xf8c8c0*/ object ToObject(System.Type enumType, bool value);
        static /*0xf8ee70*/ bool TryParse(System.Type enumType, string value, bool ignoreCase, ref object result);
        static /*0xf8ed70*/ bool TryParse(System.Type enumType, string value, ref object result);
        /*0x32f970*/ Enum();
        /*0xf8ae40*/ object get_value();
        /*0xf8ae40*/ object GetValue();
        /*0xf8ba70*/ bool InternalHasFlag(System.Enum flags);
        /*0xf8a7b0*/ int get_hashcode();
        /*0xf8a610*/ bool Equals(object obj);
        /*0xf8a7b0*/ int GetHashCode();
        /*0xf8e220*/ string ToString();
        /*0xf8e210*/ string ToString(string format, System.IFormatProvider provider);
        /*0xf8a400*/ int CompareTo(object target);
        /*0xf8e2e0*/ string ToString(string format);
        /*0xf1d620*/ string ToString(System.IFormatProvider provider);
        /*0xf8af10*/ bool HasFlag(System.Enum flag);
        /*0xf8a950*/ System.TypeCode GetTypeCode();
        /*0xf8bda0*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xf8bec0*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xf8c340*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xf8be30*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xf8c190*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xf8c4d0*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xf8c220*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xf8c560*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xf8c2b0*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xf8c5f0*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xf8c3d0*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xf8c100*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xf8c050*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xf8bf50*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xf8c460*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);

        enum ParseFailureKind
        {
            None = 0,
            Argument = 1,
            ArgumentNull = 2,
            ArgumentWithParameter = 3,
            UnhandledException = 4,
        }

        struct EnumResult
        {
            /*0x10*/ object parsedEnum;
            /*0x18*/ bool canThrow;
            /*0x1c*/ System.Enum.ParseFailureKind m_failure;
            /*0x20*/ string m_failureMessageID;
            /*0x28*/ string m_failureParameter;
            /*0x30*/ object m_failureMessageFormatArgument;
            /*0x38*/ System.Exception m_innerException;

            /*0xf8a2b0*/ void Init(bool canMethodThrow);
            /*0xf8a320*/ void SetFailure(System.Exception unhandledException);
            /*0xf8a340*/ void SetFailure(System.Enum.ParseFailureKind failure, string failureParameter);
            /*0xf8a390*/ void SetFailure(System.Enum.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
            /*0xf8a100*/ System.Exception GetEnumParseException();
        }

        class ValuesAndNames
        {
            /*0x10*/ ulong[] Values;
            /*0x18*/ string[] Names;

            /*0xce3b90*/ ValuesAndNames(ulong[] values, string[] names);
        }
    }

    class Exception : System.Runtime.Serialization.ISerializable
    {
        static int _COMPlusExceptionCode = -532462766;
        static /*0x0*/ object s_EDILock;
        /*0x10*/ string _className;
        /*0x18*/ string _message;
        /*0x20*/ System.Collections.IDictionary _data;
        /*0x28*/ System.Exception _innerException;
        /*0x30*/ string _helpURL;
        /*0x38*/ object _stackTrace;
        /*0x40*/ string _stackTraceString;
        /*0x48*/ string _remoteStackTraceString;
        /*0x50*/ int _remoteStackIndex;
        /*0x58*/ object _dynamicMethods;
        /*0x60*/ int _HResult;
        /*0x68*/ string _source;
        /*0x70*/ System.Runtime.Serialization.SafeSerializationManager _safeSerializationManager;
        /*0x78*/ System.Diagnostics.StackTrace[] captured_traces;
        /*0x80*/ nint[] native_trace_ips;
        /*0x88*/ int caught_in_unmanaged;

        static /*0xf91740*/ Exception();
        static /*0xf90c10*/ string GetMessageFromNativeResources(System.Exception.ExceptionMessageKind kind);
        static /*0xf91390*/ void ReportUnhandledException(System.Exception exception);
        /*0xf917c0*/ Exception();
        /*0xf91cc0*/ Exception(string message);
        /*0xf91d00*/ Exception(string message, System.Exception innerException);
        /*0xf917e0*/ Exception(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf91260*/ void Init();
        /*0xf91de0*/ string get_Message();
        /*0xf91d60*/ System.Collections.IDictionary get_Data();
        /*0xf90bb0*/ string GetClassName();
        /*0x79a150*/ System.Exception get_InnerException();
        /*0xf92090*/ string get_StackTrace();
        /*0xf91180*/ string GetStackTrace(bool needFileInfo);
        /*0xf91480*/ void SetErrorCode(int hr);
        /*0xf91f40*/ string get_Source();
        /*0xf91730*/ string ToString();
        /*0xf91490*/ string ToString(bool needFileLineInfo, bool needMessage);
        /*0xf90ca0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf91300*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext context);
        /*0x718e40*/ string StripFileInfo(string stackTrace, bool isRemoteStackTrace);
        /*0xf913a0*/ void RestoreExceptionDispatchInfo(System.Runtime.ExceptionServices.ExceptionDispatchInfo exceptionDispatchInfo);
        /*0xf91dd0*/ int get_HResult();
        /*0xf91480*/ void set_HResult(int value);
        /*0xf7bfc0*/ System.Type GetType();
        /*0xf90ab0*/ System.Exception FixRemotingException();

        enum ExceptionMessageKind
        {
            ThreadAbort = 1,
            ThreadInterrupted = 2,
            OutOfMemory = 3,
        }
    }

    class GC
    {
        static /*0x0*/ object EPHEMERON_TOMBSTONE;

        static /*0xf924b0*/ GC();
        static /*0xf922a0*/ void RecordPressure(long bytesAllocated);
        static /*0xf92510*/ void register_ephemeron_array(System.Runtime.CompilerServices.Ephemeron[] array);
        static /*0xf92500*/ object get_ephemeron_tombstone();
        static /*0xf921e0*/ void GetMemoryInfo(ref uint highMemLoadThreshold, ref ulong totalPhysicalMem, ref uint lastRecordedMemLoad, ref nuint lastRecordedHeapSize, ref nuint lastRecordedFragmentation);
        static /*0xf920a0*/ void AddMemoryPressure(long bytesAllocated);
        static /*0xf922b0*/ void RemoveMemoryPressure(long bytesAllocated);
        static /*0x32d010*/ void KeepAlive(object obj);
        static /*0xf924a0*/ void _SuppressFinalize(object o);
        static /*0xf923f0*/ void SuppressFinalize(object obj);
        static /*0xf92490*/ void _ReRegisterForFinalize(object o);
        static /*0xf92200*/ void ReRegisterForFinalize(object obj);
    }

    enum TypeNameFormatFlags
    {
        FormatBasic = 0,
        FormatNamespace = 1,
        FormatFullInst = 2,
        FormatAssembly = 4,
        FormatSignature = 8,
        FormatNoVersion = 16,
        FormatAngleBrackets = 64,
        FormatStubInfo = 128,
        FormatGenericParam = 256,
        FormatSerialization = 259,
    }

    enum TypeNameKind
    {
        Name = 0,
        ToString = 1,
        SerializationName = 2,
        FullName = 3,
    }

    class RuntimeType : System.Reflection.TypeInfo, System.Runtime.Serialization.ISerializable, System.ICloneable
    {
        static System.Reflection.BindingFlags MemberBindingMask = 255;
        static System.Reflection.BindingFlags InvocationMask = 65280;
        static System.Reflection.BindingFlags BinderNonCreateInstance = 15616;
        static System.Reflection.BindingFlags BinderGetSetProperty = 12288;
        static System.Reflection.BindingFlags BinderSetInvokeProperty = 8448;
        static System.Reflection.BindingFlags BinderGetSetField = 3072;
        static System.Reflection.BindingFlags BinderSetInvokeField = 2304;
        static System.Reflection.BindingFlags BinderNonFieldGetSet = 16773888;
        static System.Reflection.BindingFlags ClassicBindingMask = 61696;
        static int GenericParameterCountAny = -1;
        static /*0x0*/ System.RuntimeType ValueType;
        static /*0x8*/ System.RuntimeType EnumType;
        static /*0x10*/ System.RuntimeType ObjectType;
        static /*0x18*/ System.RuntimeType StringType;
        static /*0x20*/ System.RuntimeType DelegateType;
        static /*0x28*/ System.Type[] s_SICtorParamTypes;
        static /*0x30*/ System.Func<System.Type, System.Type[], System.Type> MakeTypeBuilderInstantiation;
        static /*0x38*/ System.RuntimeType s_typedRef;
        /*0x18*/ System.MonoTypeInfo type_info;
        /*0x20*/ object GenericCache;
        /*0x28*/ System.Reflection.RuntimeConstructorInfo m_serializationCtor;

        static /*0xf9dfb0*/ RuntimeType();
        static /*0xf9a0f0*/ System.RuntimeType GetType(string typeName, bool throwOnError, bool ignoreCase, bool reflectionOnly, ref System.Threading.StackCrawlMark stackMark);
        static /*0xf9dba0*/ void ThrowIfTypeNeverValidGenericArgument(System.RuntimeType type);
        static /*0xf9d820*/ void SanityCheckGenericArguments(System.RuntimeType[] genericArguments, System.RuntimeType[] genericParamters);
        static /*0xf9da90*/ void SplitName(string fullname, ref string name, ref string ns);
        static /*0xf94380*/ System.Reflection.BindingFlags FilterPreCalculate(bool isPublic, bool isInherited, bool isStatic);
        static /*0xf94230*/ void FilterHelper(System.Reflection.BindingFlags bindingFlags, ref string name, bool allowPrefixLookup, ref bool prefixLookup, ref bool ignoreCase, ref System.RuntimeType.MemberListType listType);
        static /*0xf94120*/ void FilterHelper(System.Reflection.BindingFlags bindingFlags, ref string name, ref bool ignoreCase, ref System.RuntimeType.MemberListType listType);
        static /*0xf93f80*/ bool FilterApplyPrefixLookup(System.Reflection.MemberInfo memberInfo, string name, bool ignoreCase);
        static /*0xf93990*/ bool FilterApplyBase(System.Reflection.MemberInfo memberInfo, System.Reflection.BindingFlags bindingFlags, bool isPublic, bool isNonProtectedInternal, bool isStatic, string name, bool prefixLookup);
        static /*0xf94000*/ bool FilterApplyType(System.Type type, System.Reflection.BindingFlags bindingFlags, string name, bool prefixLookup, string ns);
        static /*0xf93ed0*/ bool FilterApplyMethodInfo(System.Reflection.RuntimeMethodInfo method, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes);
        static /*0xf93ba0*/ bool FilterApplyConstructorInfo(System.Reflection.RuntimeConstructorInfo constructor, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes);
        static /*0xf93c50*/ bool FilterApplyMethodBase(System.Reflection.MethodBase methodBase, System.Reflection.BindingFlags methodFlags, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes);
        static /*0x6bb8b0*/ bool op_Equality(System.RuntimeType left, System.RuntimeType right);
        static /*0xf789c0*/ bool op_Inequality(System.RuntimeType left, System.RuntimeType right);
        static /*0xf9b950*/ object IsConvertibleToPrimitiveType(object value, System.Type targetType);
        static /*0xf9d730*/ System.Type MakePointerType(System.Type type);
        static /*0xf92bc0*/ object CreateInstanceForAnotherGenericParameter(System.Type genericType, System.RuntimeType genericArgument);
        static /*0xf9d720*/ System.Type MakeGenericType(System.Type gt, System.Type[] types);
        static /*0xf9a090*/ System.TypeCode GetTypeCodeImplInternal(System.Type type);
        static /*0xf93630*/ object CreateInstanceInternal(System.Type type);
        /*0xf9e4d0*/ RuntimeType();
        /*0xf97d20*/ System.RuntimeType.ListBuilder<System.Reflection.MethodInfo> GetMethodCandidates(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, int genericParamCount, bool allowPrefixLookup);
        /*0xf94880*/ System.RuntimeType.ListBuilder<System.Reflection.ConstructorInfo> GetConstructorCandidates(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, bool allowPrefixLookup);
        /*0xf99840*/ System.RuntimeType.ListBuilder<System.Reflection.PropertyInfo> GetPropertyCandidates(string name, System.Reflection.BindingFlags bindingAttr, System.Type[] types, bool allowPrefixLookup);
        /*0xf95d10*/ System.RuntimeType.ListBuilder<System.Reflection.EventInfo> GetEventCandidates(string name, System.Reflection.BindingFlags bindingAttr, bool allowPrefixLookup);
        /*0xf96460*/ System.RuntimeType.ListBuilder<System.Reflection.FieldInfo> GetFieldCandidates(string name, System.Reflection.BindingFlags bindingAttr, bool allowPrefixLookup);
        /*0xf988c0*/ System.RuntimeType.ListBuilder<System.Type> GetNestedTypeCandidates(string fullname, System.Reflection.BindingFlags bindingAttr, bool allowPrefixLookup);
        /*0xf98810*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
        /*0xf95130*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
        /*0xf997b0*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
        /*0xf96e30*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
        /*0xf97710*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
        /*0xf94c50*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0xf99b30*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0xf95fc0*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
        /*0xf96710*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
        /*0xf98cd0*/ System.Type GetNestedType(string fullname, System.Reflection.BindingFlags bindingAttr);
        /*0xf97270*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
        /*0xf99e20*/ System.Reflection.Module get_Module();
        /*0xf99e20*/ System.Reflection.RuntimeModule GetRuntimeModule();
        /*0xf99e10*/ System.Reflection.Assembly get_Assembly();
        /*0xf99e10*/ System.Reflection.RuntimeAssembly GetRuntimeAssembly();
        /*0xf9ead0*/ System.RuntimeTypeHandle get_TypeHandle();
        /*0xf9ce00*/ bool IsInstanceOfType(object o);
        /*0xf9b840*/ bool IsAssignableFrom(System.Type c);
        /*0xf9cd50*/ bool IsEquivalentTo(System.Type other);
        /*0xf9e540*/ System.Type get_BaseType();
        /*0xf94600*/ System.RuntimeType GetBaseType();
        /*0x621ca0*/ System.Type get_UnderlyingSystemType();
        /*0xf945f0*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
        /*0xf9b940*/ bool IsContextfulImpl();
        /*0xf9b920*/ bool IsByRefImpl();
        /*0xf9ce20*/ bool IsPrimitiveImpl();
        /*0xf9ce10*/ bool IsPointerImpl();
        /*0xf9b930*/ bool IsCOMObjectImpl();
        /*0xf9cf30*/ bool IsValueTypeImpl();
        /*0xf9e950*/ bool get_IsEnum();
        /*0xf9a170*/ bool HasElementTypeImpl();
        /*0xf9e7a0*/ System.Reflection.GenericParameterAttributes get_GenericParameterAttributes();
        /*0xf9ea50*/ bool get_IsSzArray();
        /*0xf9b830*/ bool IsArrayImpl();
        /*0xf94560*/ int GetArrayRank();
        /*0xf956c0*/ System.Type GetElementType();
        /*0xf95910*/ string[] GetEnumNames();
        /*0xf95b40*/ System.Array GetEnumValues();
        /*0xf95a70*/ System.Type GetEnumUnderlyingType();
        /*0xf9c750*/ bool IsEnumDefined(object value);
        /*0xf956d0*/ string GetEnumName(object value);
        /*0xf96ed0*/ System.RuntimeType[] GetGenericArgumentsInternal();
        /*0xf96f50*/ System.Type[] GetGenericArguments();
        /*0xf9d120*/ System.Type MakeGenericType(System.Type[] instantiation);
        /*0xf9e9d0*/ bool get_IsGenericTypeDefinition();
        /*0xf9e9c0*/ bool get_IsGenericParameter();
        /*0xf9e860*/ int get_GenericParameterPosition();
        /*0xf97100*/ System.Type GetGenericTypeDefinition();
        /*0xf9e9e0*/ bool get_IsGenericType();
        /*0xf9e900*/ bool get_IsConstructedGenericType();
        /*0xf9a180*/ object InvokeMember(string name, System.Reflection.BindingFlags bindingFlags, System.Reflection.Binder binder, object target, object[] providedArgs, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParams);
        /*0xf93980*/ bool Equals(object obj);
        /*0x621ca0*/ object Clone();
        /*0xf99490*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf951e0*/ object[] GetCustomAttributes(bool inherit);
        /*0xf95280*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
        /*0xf9c5b0*/ bool IsDefined(System.Type attributeType, bool inherit);
        /*0xf943c0*/ string FormatTypeName(bool serialization);
        /*0xf9ea60*/ System.Reflection.MemberTypes get_MemberType();
        /*0xbf9a60*/ System.Type get_ReflectedType();
        /*0xf9eaa0*/ int get_MetadataToken();
        /*0xf927e0*/ void CreateInstanceCheckThis();
        /*0xf92d00*/ object CreateInstanceImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, ref System.Threading.StackCrawlMark stackMark);
        /*0xf92a90*/ object CreateInstanceDefaultCtor(bool publicOnly, bool skipCheckThis, bool fillCache, bool wrapExceptions, ref System.Threading.StackCrawlMark stackMark);
        /*0xf95420*/ System.Reflection.RuntimeConstructorInfo GetDefaultConstructor();
        /*0xf955d0*/ string GetDefaultMemberName();
        /*0xf99e30*/ System.Reflection.RuntimeConstructorInfo GetSerializationCtor();
        /*0xf93930*/ object CreateInstanceSlow(bool publicOnly, bool wrapExceptions, bool skipCheckThis, bool fillCache);
        /*0xf93640*/ object CreateInstanceMono(bool nonPublic, bool wrapExceptions);
        /*0xf925c0*/ object CheckValue(object value, System.Reflection.Binder binder, System.Globalization.CultureInfo culture, System.Reflection.BindingFlags invokeAttr);
        /*0xf9dd10*/ object TryConvertToType(object value, ref bool failed);
        /*0xf94810*/ string GetCachedName(System.TypeNameKind kind);
        /*0xf9eb00*/ System.Type make_array_type(int rank);
        /*0xf9d040*/ System.Type MakeArrayType();
        /*0xf9d050*/ System.Type MakeArrayType(int rank);
        /*0xf9eb10*/ System.Type make_byref_type();
        /*0xf9d0b0*/ System.Type MakeByRefType();
        /*0xf9d740*/ System.Type MakePointerType();
        /*0xf9e550*/ bool get_ContainsGenericParameters();
        /*0xf96fe0*/ System.Type[] GetGenericParameterConstraints();
        /*0xf98800*/ nint GetMethodsByName_native(nint namePtr, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0xf98560*/ System.Reflection.RuntimeMethodInfo[] GetMethodsByName(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0xf997a0*/ nint GetPropertiesByName_native(nint name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0xf951d0*/ nint GetConstructors_native(System.Reflection.BindingFlags bindingAttr);
        /*0xf94f00*/ System.Reflection.RuntimeConstructorInfo[] GetConstructors_internal(System.Reflection.BindingFlags bindingAttr, System.RuntimeType reflectedType);
        /*0xf99500*/ System.Reflection.RuntimePropertyInfo[] GetPropertiesByName(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0xf9a0a0*/ System.TypeCode GetTypeCodeImpl();
        /*0xf9dd00*/ string ToString();
        /*0x348b00*/ bool IsGenericCOMObjectImpl();
        /*0xf9e670*/ System.Reflection.MethodBase get_DeclaringMethod();
        /*0xf9e520*/ string getFullName(bool full_name, bool assembly_qualified);
        /*0xf96f40*/ System.Type[] GetGenericArgumentsInternal(bool runtimeArray);
        /*0xf96fa0*/ System.Reflection.GenericParameterAttributes GetGenericParameterAttributes();
        /*0xf970f0*/ int GetGenericParameterPosition();
        /*0xf96450*/ nint GetEvents_native(nint name, System.RuntimeType.MemberListType listType);
        /*0xf96ec0*/ nint GetFields_native(nint name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0xf96b90*/ System.Reflection.RuntimeFieldInfo[] GetFields_internal(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0xf96240*/ System.Reflection.RuntimeEventInfo[] GetEvents_internal(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType, System.RuntimeType reflectedType);
        /*0xf97260*/ System.Type[] GetInterfaces();
        /*0xf99480*/ nint GetNestedTypes_native(nint name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0xf99130*/ System.RuntimeType[] GetNestedTypes_internal(string displayName, System.Reflection.BindingFlags bindingAttr, System.RuntimeType.MemberListType listType);
        /*0xf9e530*/ string get_AssemblyQualifiedName();
        /*0xf9e680*/ System.Type get_DeclaringType();
        /*0xf9eab0*/ string get_Name();
        /*0xf9eac0*/ string get_Namespace();
        /*0xf97190*/ int GetHashCode();
        /*0xf9e690*/ string get_FullName();
        /*0xf9e9f0*/ bool get_IsSZArray();
        /*0xf9ce30*/ bool IsSubclassOf(System.Type type);
        /*0xf9e8f0*/ bool get_IsByRefLike();
        /*0xf98510*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConv, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0xf98060*/ System.Reflection.MethodInfo GetMethodImplCommon(string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConv, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0xf97a20*/ System.RuntimeType.ListBuilder<System.Reflection.MethodInfo> GetMethodCandidates(string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, bool allowPrefixLookup);

        enum MemberListType
        {
            All = 0,
            CaseSensitive = 1,
            CaseInsensitive = 2,
            HandleToInfo = 3,
        }

        struct ListBuilder<T>
        {
            /*0x0*/ T[] _items;
            /*0x0*/ T _item;
            /*0x0*/ int _count;
            /*0x0*/ int _capacity;

            /*0x17aa40*/ ListBuilder(int capacity);
            /*0x2a5510*/ T get_Item(int index);
            /*0x1803b0*/ T[] ToArray();
            /*0x182a70*/ void CopyTo(object[] array, int index);
            /*0x180980*/ int get_Count();
            /*0x2a5510*/ void Add(T item);
        }
    }

    class ReflectionOnlyType : System.RuntimeType
    {
        /*0xf92520*/ ReflectionOnlyType();
        /*0xf92560*/ System.RuntimeTypeHandle get_TypeHandle();
    }

    enum ExceptionArgument
    {
        obj = 0,
        dictionary = 1,
        dictionaryCreationThreshold = 2,
        array = 3,
        info = 4,
        key = 5,
        collection = 6,
        list = 7,
        match = 8,
        converter = 9,
        queue = 10,
        stack = 11,
        capacity = 12,
        index = 13,
        startIndex = 14,
        value = 15,
        count = 16,
        arrayIndex = 17,
        name = 18,
        mode = 19,
        item = 20,
        options = 21,
        view = 22,
        sourceBytesToCopy = 23,
        start = 24,
        pointer = 25,
        ownedMemory = 26,
        text = 27,
        length = 28,
        comparer = 29,
        comparable = 30,
        exceptions = 31,
        exception = 32,
        action = 33,
        comparison = 34,
        startSegment = 35,
        endSegment = 36,
        endIndex = 37,
        task = 38,
        source = 39,
        state = 40,
        culture = 41,
        destination = 42,
        byteOffset = 43,
        minimumBufferSize = 44,
        offset = 45,
        values = 46,
        comparisonType = 47,
        s = 48,
        input = 49,
        format = 50,
    }

    enum ExceptionResource
    {
        Argument_ImplementIComparable = 0,
        Argument_InvalidType = 1,
        Argument_InvalidArgumentForComparison = 2,
        Argument_InvalidRegistryKeyPermissionCheck = 3,
        ArgumentOutOfRange_NeedNonNegNum = 4,
        Arg_ArrayPlusOffTooSmall = 5,
        Arg_NonZeroLowerBound = 6,
        Arg_RankMultiDimNotSupported = 7,
        Arg_RegKeyDelHive = 8,
        Arg_RegKeyStrLenBug = 9,
        Arg_RegSetStrArrNull = 10,
        Arg_RegSetMismatchedKind = 11,
        Arg_RegSubKeyAbsent = 12,
        Arg_RegSubKeyValueAbsent = 13,
        Argument_AddingDuplicate = 14,
        Serialization_InvalidOnDeser = 15,
        Serialization_MissingKeys = 16,
        Serialization_NullKey = 17,
        Argument_InvalidArrayType = 18,
        NotSupported_KeyCollectionSet = 19,
        NotSupported_ValueCollectionSet = 20,
        ArgumentOutOfRange_SmallCapacity = 21,
        ArgumentOutOfRange_Index = 22,
        Argument_InvalidOffLen = 23,
        Argument_ItemNotExist = 24,
        ArgumentOutOfRange_Count = 25,
        ArgumentOutOfRange_InvalidThreshold = 26,
        ArgumentOutOfRange_ListInsert = 27,
        NotSupported_ReadOnlyCollection = 28,
        InvalidOperation_CannotRemoveFromStackOrQueue = 29,
        InvalidOperation_EmptyQueue = 30,
        InvalidOperation_EnumOpCantHappen = 31,
        InvalidOperation_EnumFailedVersion = 32,
        InvalidOperation_EmptyStack = 33,
        ArgumentOutOfRange_BiggerThanCollection = 34,
        InvalidOperation_EnumNotStarted = 35,
        InvalidOperation_EnumEnded = 36,
        NotSupported_SortedListNestedWrite = 37,
        InvalidOperation_NoValue = 38,
        InvalidOperation_RegRemoveSubKey = 39,
        Security_RegistryPermission = 40,
        UnauthorizedAccess_RegistryNoWrite = 41,
        ObjectDisposed_RegKeyClosed = 42,
        NotSupported_InComparableType = 43,
        Argument_InvalidRegistryOptionsCheck = 44,
        Argument_InvalidRegistryViewCheck = 45,
        TaskT_TransitionToFinal_AlreadyCompleted = 46,
        TaskCompletionSourceT_TrySetException_NullException = 47,
        TaskCompletionSourceT_TrySetException_NoExceptions = 48,
        NotSupported_StringComparison = 49,
        InvalidOperation_NullArray = 50,
    }

    struct TypedReference
    {
        /*0x10*/ System.RuntimeTypeHandle type;
        /*0x18*/ nint Value;
        /*0x20*/ nint Type;

        static /*0xf9f250*/ System.TypedReference MakeTypedReference(object target, System.Reflection.FieldInfo[] flds);
        static /*0xf9f240*/ void InternalMakeTypedReference(void* result, object target, nint[] flds, System.RuntimeType lastFieldType);
        static /*0xf9f800*/ void SetTypedReference(System.TypedReference target, object value);
        /*0xf9f1b0*/ int GetHashCode();
        /*0xf9f150*/ bool Equals(object o);
        /*0xf9f850*/ bool get_IsNull();
    }

    class TypeLoadException : System.SystemException, System.Runtime.Serialization.ISerializable
    {
        /*0x90*/ string ClassName;
        /*0x98*/ string AssemblyName;
        /*0xa0*/ string MessageArg;
        /*0xa8*/ int ResourceId;

        /*0xf9f050*/ TypeLoadException();
        /*0xf9f030*/ TypeLoadException(string message);
        /*0xf9f0a0*/ TypeLoadException(string className, string assemblyName);
        /*0xf9ee20*/ TypeLoadException(string className, string assemblyName, string messageArg, int resourceId);
        /*0xf9eec0*/ TypeLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf9f130*/ string get_Message();
        /*0xf9ece0*/ void SetMessageField();
        /*0xf9eb20*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class UnitySerializationHolder : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
    {
        /*0x10*/ System.Type[] m_instantiation;
        /*0x18*/ int[] m_elementTypes;
        /*0x20*/ int m_genericParameterPosition;
        /*0x28*/ System.Type m_declaringType;
        /*0x30*/ System.Reflection.MethodBase m_declaringMethod;
        /*0x38*/ string m_data;
        /*0x40*/ string m_assemblyName;
        /*0x48*/ int m_unityType;

        static /*0xf9f950*/ System.RuntimeType AddElementTypes(System.Runtime.Serialization.SerializationInfo info, System.RuntimeType type);
        static /*0xfa07e0*/ void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, int unityType);
        static /*0xfa02c0*/ void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, System.RuntimeType type);
        static /*0xfa0660*/ void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, int unityType, string data, System.Reflection.RuntimeAssembly assembly);
        /*0xfa0af0*/ UnitySerializationHolder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xfa0910*/ System.Type MakeElementTypes(System.Type type);
        /*0xfa0a40*/ void ThrowInsufficientInformation(string field);
        /*0xf9fbc0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf9fc20*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
    }

    class AppDomain : System.MarshalByRefObject
    {
        static /*0x0*/ string _process_guid;
        [ThreadStatic] static System.Collections.Generic.Dictionary<string, object> type_resolve_in_progress;
        [ThreadStatic] static System.Collections.Generic.Dictionary<string, object> assembly_resolve_in_progress;
        [ThreadStatic] static System.Collections.Generic.Dictionary<string, object> assembly_resolve_in_progress_refonly;
        /*0x18*/ nint _mono_app_domain;
        /*0x20*/ object _evidence;
        /*0x28*/ object _granted;
        /*0x30*/ int _principalPolicy;
        /*0x38*/ System.AssemblyLoadEventHandler AssemblyLoad;
        /*0x40*/ System.ResolveEventHandler AssemblyResolve;
        /*0x48*/ System.EventHandler DomainUnload;
        /*0x50*/ System.EventHandler ProcessExit;
        /*0x58*/ System.ResolveEventHandler ResourceResolve;
        /*0x60*/ System.ResolveEventHandler TypeResolve;
        /*0x68*/ System.UnhandledExceptionEventHandler UnhandledException;
        /*0x70*/ System.EventHandler<System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs> FirstChanceException;
        /*0x78*/ object _domain_manager;
        /*0x80*/ System.ResolveEventHandler ReflectionOnlyAssemblyResolve;
        /*0x88*/ object _activation;
        /*0x90*/ object _applicationIdentity;
        /*0x98*/ System.Collections.Generic.List<string> compatibility_switch;

        static /*0x348b00*/ bool IsAppXModel();
        static /*0xf833d0*/ System.AppDomain getCurDomain();
        static /*0xf833d0*/ System.AppDomain get_CurrentDomain();
        static /*0xf82be0*/ System.AppDomain InternalSetDomainByID(int domain_id);
        static /*0xf82bf0*/ System.AppDomain InternalSetDomain(System.AppDomain context);
        static /*0xf82bc0*/ void InternalPushDomainRefByID(int domain_id);
        static /*0xf82bb0*/ void InternalPopDomainRef();
        static /*0xf82bd0*/ System.Runtime.Remoting.Contexts.Context InternalSetContext(System.Runtime.Remoting.Contexts.Context context);
        static /*0xf82b90*/ System.Runtime.Remoting.Contexts.Context InternalGetContext();
        static /*0xf82b90*/ System.Runtime.Remoting.Contexts.Context InternalGetDefaultContext();
        static /*0xf82ba0*/ string InternalGetProcessGuid(string newguid);
        static /*0xf82c00*/ object InvokeInDomainByID(int domain_id, System.Reflection.MethodInfo method, object obj, object[] args);
        static /*0xf82ae0*/ string GetProcessGuid();
        static /*0xed1490*/ bool InternalIsFinalizingForUnload(int domain_id);
        /*0x32f970*/ AppDomain();
        /*0xf83140*/ string getFriendlyName();
        /*0xf829f0*/ System.Reflection.Assembly[] GetAssemblies(bool refOnly);
        /*0xf829e0*/ System.Reflection.Assembly[] GetAssemblies();
        /*0xf82a00*/ object GetData(string name);
        /*0x388e90*/ object InitializeLifetimeService();
        /*0xf82da0*/ System.Reflection.Assembly LoadAssembly(string assemblyRef, System.Security.Policy.Evidence securityEvidence, bool refOnly, ref System.Threading.StackCrawlMark stackMark);
        /*0xf82ed0*/ System.Reflection.Assembly Load(string assemblyString);
        /*0xf82db0*/ System.Reflection.Assembly Load(string assemblyString, System.Security.Policy.Evidence assemblySecurity, bool refonly, ref System.Threading.StackCrawlMark stackMark);
        /*0xf82d80*/ bool IsFinalizingForUnload();
        /*0xf833e0*/ int getDomainID();
        /*0xf83140*/ string ToString();
        /*0xf82270*/ void DoAssemblyLoad(System.Reflection.Assembly assembly);
        /*0xf82300*/ System.Reflection.Assembly DoAssemblyResolve(string name, System.Reflection.Assembly requestingAssembly, bool refonly);
        /*0xf826c0*/ System.Reflection.Assembly DoTypeResolve(string name);
        /*0xf82690*/ void DoDomainUnload();
        /*0xf82a10*/ byte[] GetMarshalledDomainObjRef();
        /*0xf83000*/ void ProcessMessageInDomain(byte[] arrRequest, System.Runtime.Remoting.Messaging.CADMethodCallMessage cadMsg, ref byte[] arrResponse, ref System.Runtime.Remoting.Messaging.CADMethodReturnMessage cadMrm);
        /*0xf83150*/ void add_AssemblyResolve(System.ResolveEventHandler value);
        /*0xf833f0*/ void remove_AssemblyResolve(System.ResolveEventHandler value);
        /*0xf831f0*/ void add_DomainUnload(System.EventHandler value);
        /*0xf83490*/ void remove_DomainUnload(System.EventHandler value);
        /*0xf83290*/ void add_ProcessExit(System.EventHandler value);
        /*0xf83530*/ void remove_ProcessExit(System.EventHandler value);
        /*0xf83330*/ void add_UnhandledException(System.UnhandledExceptionEventHandler value);
        /*0xf835d0*/ void remove_UnhandledException(System.UnhandledExceptionEventHandler value);
    }

    class CompatibilitySwitches
    {
        static /*0x0*/ bool IsAppEarlierThanWindowsPhone8;
    }

    class Environment
    {
        static string mono_corlib_version = "1A5E0066-58DC-428A-B21C-0AD6CDAE2789";
        static /*0x0*/ string nl;
        static /*0x8*/ System.OperatingSystem os;

        static /*0x621ca0*/ string GetResourceString(string key);
        static /*0xf8f9d0*/ string GetResourceString(string key, object[] values);
        static /*0xf8f880*/ string GetResourceStringEncodingName(int codePage);
        static /*0xf90350*/ string get_CurrentDirectory();
        static /*0xf90360*/ int get_CurrentManagedThreadId();
        static /*0xf90390*/ bool get_HasShutdownStarted();
        static /*0xf8f850*/ string GetNewLine();
        static /*0xf903c0*/ string get_NewLine();
        static /*0xf906f0*/ System.PlatformID get_Platform();
        static /*0xf8f860*/ string GetOSVersionString();
        static /*0xf90440*/ System.OperatingSystem get_OSVersion();
        static /*0xf8efd0*/ System.Version CreateVersionFromString(string info);
        static /*0xf90710*/ string get_StackTrace();
        static /*0xf90780*/ string get_SystemDirectory();
        static /*0xf909e0*/ int get_TickCount();
        static /*0xf8f190*/ void Exit(int exitCode);
        static /*0xf8f1a0*/ string ExpandEnvironmentVariables(string name);
        static /*0xf8f5c0*/ string[] GetCommandLineArgs();
        static /*0xf90a90*/ string internalGetEnvironmentVariable_native(nint variable);
        static /*0xf909f0*/ string internalGetEnvironmentVariable(string variable);
        static /*0xf8f5e0*/ string GetEnvironmentVariable(string variable);
        static /*0xf8f5f0*/ System.Collections.Hashtable GetEnvironmentVariablesNoCase();
        static /*0xf8f6e0*/ System.Collections.IDictionary GetEnvironmentVariables();
        static /*0xf8f7b0*/ string GetFolderPath(System.Environment.SpecialFolder folder);
        static /*0xf8fad0*/ string GetWindowsFolderPath(int folder);
        static /*0xf8f7f0*/ string GetFolderPath(System.Environment.SpecialFolder folder, System.Environment.SpecialFolderOption option);
        static /*0xf8fae0*/ string ReadXdgUserDir(string config_dir, string home_dir, string key, string fallback);
        static /*0xf8fde0*/ string UnixGetFolderPath(System.Environment.SpecialFolder folder, System.Environment.SpecialFolderOption option);
        static /*0xf8f5a0*/ void FailFast(string message, System.Exception exception);
        static /*0xf8f5b0*/ void FailFast(string message, System.Exception exception, string errorSource);
        static /*0xf90700*/ int get_ProcessorCount();
        static /*0xf903a0*/ bool get_IsRunningOnWindows();
        static /*0xf8f5d0*/ string[] GetEnvironmentVariableNames();
        static /*0xf8f840*/ string GetMachineConfigPath();
        static /*0xf90aa0*/ string internalGetHome();
        static /*0xf8f870*/ int GetPageSize();
        static /*0xf8fa40*/ string GetStackTrace(System.Exception e, bool needFileInfo);

        enum SpecialFolder
        {
            MyDocuments = 5,
            Desktop = 0,
            MyComputer = 17,
            Programs = 2,
            Personal = 5,
            Favorites = 6,
            Startup = 7,
            Recent = 8,
            SendTo = 9,
            StartMenu = 11,
            MyMusic = 13,
            DesktopDirectory = 16,
            Templates = 21,
            ApplicationData = 26,
            LocalApplicationData = 28,
            InternetCache = 32,
            Cookies = 33,
            History = 34,
            CommonApplicationData = 35,
            System = 37,
            ProgramFiles = 38,
            MyPictures = 39,
            CommonProgramFiles = 43,
            MyVideos = 14,
            NetworkShortcuts = 19,
            Fonts = 20,
            CommonStartMenu = 22,
            CommonPrograms = 23,
            CommonStartup = 24,
            CommonDesktopDirectory = 25,
            PrinterShortcuts = 27,
            Windows = 36,
            UserProfile = 40,
            SystemX86 = 41,
            ProgramFilesX86 = 42,
            CommonProgramFilesX86 = 44,
            CommonTemplates = 45,
            CommonDocuments = 46,
            CommonAdminTools = 47,
            AdminTools = 48,
            CommonMusic = 53,
            CommonPictures = 54,
            CommonVideos = 55,
            Resources = 56,
            LocalizedResources = 57,
            CommonOemLinks = 58,
            CDBurning = 59,
        }

        enum SpecialFolderOption
        {
            None = 0,
            DoNotVerify = 16384,
            Create = 32768,
        }
    }

    class MonoTypeInfo
    {
        /*0x10*/ string full_name;
        /*0x18*/ System.Reflection.RuntimeConstructorInfo default_ctor;

        /*0x32d010*/ MonoTypeInfo();
    }

    class TypeNameParser
    {
        static /*0xfb7a60*/ System.Type GetType(string typeName, System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> assemblyResolver, System.Func<System.Reflection.Assembly, string, bool, System.Type> typeResolver, bool throwOnError, bool ignoreCase, ref System.Threading.StackCrawlMark stackMark);
    }

    class AppDomainSetup
    {
        /*0x10*/ string application_base;
        /*0x18*/ string application_name;
        /*0x20*/ string cache_path;
        /*0x28*/ string configuration_file;
        /*0x30*/ string dynamic_base;
        /*0x38*/ string license_file;
        /*0x40*/ string private_bin_path;
        /*0x48*/ string private_bin_path_probe;
        /*0x50*/ string shadow_copy_directories;
        /*0x58*/ string shadow_copy_files;
        /*0x60*/ bool publisher_policy;
        /*0x61*/ bool path_changed;
        /*0x64*/ int loader_optimization;
        /*0x68*/ bool disallow_binding_redirects;
        /*0x69*/ bool disallow_code_downloads;
        /*0x70*/ object _activationArguments;
        /*0x78*/ object domain_initializer;
        /*0x80*/ object application_trust;
        /*0x88*/ string[] domain_initializer_args;
        /*0x90*/ bool disallow_appbase_probe;
        /*0x98*/ byte[] configuration_bytes;
        /*0xa0*/ byte[] serialized_non_primitives;
        /*0xa8*/ string manager_assembly;
        /*0xb0*/ string manager_type;
        /*0xb8*/ string[] partial_visible_assemblies;
        /*0xc0*/ string <TargetFrameworkName>k__BackingField;

        /*0x32d010*/ AppDomainSetup();
    }

    struct ArgIterator
    {
        /*0x10*/ nint sig;
        /*0x18*/ nint args;
        /*0x20*/ int next_arg;
        /*0x24*/ int num_args;

        /*0xfa1190*/ bool Equals(object o);
        /*0x6bba50*/ int GetHashCode();
    }

    class Console
    {
        static /*0x0*/ System.IO.TextWriter stdout;
        static /*0x8*/ System.IO.TextWriter stderr;
        static /*0x10*/ System.IO.TextReader stdin;
        static /*0x18*/ bool IsRunningOnAndroid;
        static /*0x20*/ System.Text.Encoding inputEncoding;
        static /*0x28*/ System.Text.Encoding outputEncoding;
        static /*0x30*/ System.ConsoleCancelEventHandler cancel_event;

        static /*0xfa2ca0*/ Console();
        static /*0xfa2720*/ void SetupStreams(System.Text.Encoding inputEncoding, System.Text.Encoding outputEncoding);
        static /*0xfa21a0*/ System.IO.Stream Open(nint handle, System.IO.FileAccess access, int bufferSize);
        static /*0xfa1ff0*/ System.IO.Stream OpenStandardError(int bufferSize);
        static /*0xfa2080*/ System.IO.Stream OpenStandardInput(int bufferSize);
        static /*0xfa2110*/ System.IO.Stream OpenStandardOutput(int bufferSize);
        static /*0xfa2540*/ void SetError(System.IO.TextWriter newError);
        static /*0xfa2630*/ void SetOut(System.IO.TextWriter newOut);
        static /*0xfa2c10*/ void WriteLine(string format, object arg0);
        static /*0xfa2b60*/ void WriteLine(string format, object arg0, object arg1, object arg2);
        static /*0xfa2f30*/ System.Text.Encoding get_InputEncoding();
        static /*0xfa2f80*/ System.Text.Encoding get_OutputEncoding();
        static /*0xfa23d0*/ System.ConsoleKeyInfo ReadKey();
        static /*0xfa2290*/ System.ConsoleKeyInfo ReadKey(bool intercept);
        static /*0xfa1e70*/ void DoConsoleCancelEvent();

        class WindowsConsole
        {
            static /*0x0*/ bool ctrlHandlerAdded;
            static /*0x8*/ System.Console.WindowsConsole.WindowsCancelHandler cancelHandler;

            static /*0xfbb120*/ WindowsConsole();
            static /*0xfbaf00*/ int GetConsoleCP();
            static /*0xfbaf70*/ int GetConsoleOutputCP();
            static /*0xfbaeb0*/ bool DoWindowsConsoleCancelEvent(int keyCode);
            static /*0xfbafe0*/ int GetInputCodePage();
            static /*0xfbb080*/ int GetOutputCodePage();

            class WindowsCancelHandler : System.MulticastDelegate
            {
                /*0x9de9c0*/ WindowsCancelHandler(object object, nint method);
                /*0x720980*/ bool Invoke(int keyCode);
            }
        }
    }

    class ConsoleDriver
    {
        static /*0x0*/ System.IConsoleDriver driver;
        static /*0x8*/ bool is_console;
        static /*0x9*/ bool called_isatty;

        static /*0xfa1c30*/ ConsoleDriver();
        static /*0xfa1960*/ System.IConsoleDriver CreateNullConsoleDriver();
        static /*0xfa19f0*/ System.IConsoleDriver CreateWindowsConsoleDriver();
        static /*0xfa1990*/ System.IConsoleDriver CreateTermInfoDriver(string term);
        static /*0xfa1b10*/ System.ConsoleKeyInfo ReadKey(bool intercept);
        static /*0xfa1d10*/ bool get_IsConsole();
        static /*0xfa1b00*/ bool Isatty(nint handle);
        static /*0xfa1af0*/ int InternalKeyAvailable(int ms_timeout);
        static /*0xfa1c20*/ bool TtySetup(string keypadXmit, string teardown, ref byte[] control_characters, ref int* address);
        static /*0xe58a90*/ bool SetEcho(bool wantEcho);
    }

    class DelegateData
    {
        /*0x10*/ System.Type target_type;
        /*0x18*/ string method_name;
        /*0x20*/ bool curried_first_arg;

        /*0x32d010*/ DelegateData();
    }

    class Delegate : System.ICloneable, System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint method_ptr;
        /*0x18*/ nint invoke_impl;
        /*0x20*/ object m_target;
        /*0x28*/ nint method;
        /*0x30*/ nint delegate_trampoline;
        /*0x38*/ nint extra_arg;
        /*0x40*/ nint method_code;
        /*0x48*/ nint interp_method;
        /*0x50*/ nint interp_invoke_impl;
        /*0x58*/ System.Reflection.MethodInfo method_info;
        /*0x60*/ System.Reflection.MethodInfo original_method_info;
        /*0x68*/ System.DelegateData data;
        /*0x70*/ bool method_is_virtual;

        static /*0xfa6ba0*/ System.Delegate CreateDelegate_internal(System.Type type, object target, System.Reflection.MethodInfo info, bool throwOnBindFailure);
        static /*0xfa8880*/ bool arg_type_match(System.Type delArgType, System.Type argType);
        static /*0xfa8a20*/ bool arg_type_match_this(System.Type delArgType, System.Type argType, bool boxedThis);
        static /*0xfa8c10*/ bool return_type_match(System.Type delReturnType, System.Type returnType);
        static /*0xfa6ca0*/ System.Delegate CreateDelegate(System.Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure, bool allowClosed);
        static /*0xfa79c0*/ System.Delegate CreateDelegate(System.Type type, object firstArgument, System.Reflection.MethodInfo method);
        static /*0xfa7990*/ System.Delegate CreateDelegate(System.Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);
        static /*0xfa7680*/ System.Delegate CreateDelegate(System.Type type, System.Reflection.MethodInfo method);
        static /*0xfa77a0*/ System.Delegate CreateDelegate(System.Type type, object target, string method);
        static /*0xfa7d00*/ System.Reflection.MethodInfo GetCandidateMethod(System.Type type, System.Type target, string method, System.Reflection.BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure);
        static /*0xfa79e0*/ System.Delegate CreateDelegate(System.Type type, System.Type target, string method, bool ignoreCase, bool throwOnBindFailure);
        static /*0xfa7880*/ System.Delegate CreateDelegate(System.Type type, System.Type target, string method);
        static /*0xfa76b0*/ System.Delegate CreateDelegate(System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);
        static /*0xfa6bb0*/ System.Delegate CreateDelegate(System.Type type, object target, string method, bool ignoreCase);
        static /*0xfa6840*/ System.Delegate Combine(System.Delegate a, System.Delegate b);
        static /*0xfa69c0*/ System.Delegate Combine(System.Delegate[] delegates);
        static /*0xfa8700*/ System.Delegate Remove(System.Delegate source, System.Delegate value);
        static /*0xfa8b90*/ bool op_Equality(System.Delegate d1, System.Delegate d2);
        static /*0xfa8bc0*/ bool op_Inequality(System.Delegate d1, System.Delegate d2);
        static /*0xfa67c0*/ System.MulticastDelegate AllocDelegateLike_internal(System.Delegate d);
        /*0xedfd70*/ System.Reflection.MethodInfo get_Method();
        /*0xfa86c0*/ System.Reflection.MethodInfo GetVirtualMethod_internal();
        /*0x61a260*/ object get_Target();
        /*0xfa67d0*/ object Clone();
        /*0xfa7b10*/ bool Equals(object obj);
        /*0xfa8220*/ int GetHashCode();
        /*0xfa8360*/ System.Reflection.MethodInfo GetMethodImpl();
        /*0xfa8480*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xfa82c0*/ System.Delegate[] GetInvocationList();
        /*0xfa67e0*/ System.Delegate CombineImpl(System.Delegate d);
        /*0xfa86d0*/ System.Delegate RemoveImpl(System.Delegate d);
    }

    class DelegateSerializationHolder : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
    {
        /*0x10*/ System.Delegate _delegate;

        static /*0xfa62f0*/ void GetDelegateData(System.Delegate instance, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext ctx);
        /*0xfa6570*/ DelegateSerializationHolder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext ctx);
        /*0xfa6530*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x73d3e0*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);

        class DelegateEntry
        {
            /*0x10*/ string type;
            /*0x18*/ string assembly;
            /*0x20*/ object target;
            /*0x28*/ string targetTypeAssembly;
            /*0x30*/ string targetTypeName;
            /*0x38*/ string methodName;
            /*0x40*/ System.DelegateSerializationHolder.DelegateEntry delegateEntry;

            /*0xfa60f0*/ DelegateEntry(System.Delegate del, string targetLabel);
            /*0xfa5d50*/ System.Delegate DeserializeDelegate(System.Runtime.Serialization.SerializationInfo info, int index);
        }
    }

    class EmptyArray<T>
    {
        static /*0x0*/ T[] Value;

        static /*0x180ff0*/ EmptyArray();
    }

    enum SByteEnum
    {
    }

    enum Int16Enum
    {
    }

    enum Int32Enum
    {
    }

    enum Int64Enum
    {
    }

    enum ByteEnum
    {
    }

    enum UInt16Enum
    {
    }

    enum UInt32Enum
    {
    }

    enum UInt64Enum
    {
    }

    interface IConsoleDriver
    {
        System.ConsoleKeyInfo ReadKey(bool intercept);
    }

    struct IntPtr : System.Runtime.Serialization.ISerializable, System.IEquatable<nint>
    {
        static /*0x0*/ nint Zero;
        /*0x10*/ void* m_value;

        static /*0x6bbae0*/ int get_Size();
        static /*0x6bb8b0*/ bool op_Equality(nint value1, nint value2);
        static /*0xf789c0*/ bool op_Inequality(nint value1, nint value2);
        static /*0xe328a0*/ nint op_Explicit(int value);
        static /*0x621ca0*/ nint op_Explicit(long value);
        static /*0x621ca0*/ nint op_Explicit(void* value);
        static /*0x621c90*/ int op_Explicit(nint value);
        static /*0xfa9340*/ long op_Explicit(nint value);
        static /*0x621ca0*/ void* op_Explicit(nint value);
        static /*0x6bb6e0*/ nint Add(nint pointer, int offset);
        static /*0x6bb6e0*/ nint op_Addition(nint pointer, int offset);
        static /*0xfa9350*/ nint op_Subtraction(nint pointer, int offset);
        /*0xfa92d0*/ IntPtr(int value);
        /*0x9e29e0*/ IntPtr(long value);
        /*0x9e29e0*/ IntPtr(void* value);
        /*0xfa92e0*/ IntPtr(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xfa91d0*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xfa9140*/ bool Equals(object obj);
        /*0x6bba50*/ int GetHashCode();
        /*0x69af20*/ long ToInt64();
        /*0x6937d0*/ void* ToPointer();
        /*0xfa92a0*/ string ToString();
        /*0xfa9270*/ string ToString(string format);
        /*0xe832e0*/ bool IsNull();
        /*0xf50c20*/ bool System.IEquatable<System.IntPtr>.Equals(nint other);
    }

    class KnownTerminals
    {
        static /*0xfa93c0*/ byte[] get_linux();
        static /*0xfa9420*/ byte[] get_xterm();
        static /*0xfa9360*/ byte[] get_ansi();
    }

    class MarshalByRefObject
    {
        /*0x10*/ object _identity;

        /*0x32d010*/ MarshalByRefObject();
        /*0xfa9740*/ System.Runtime.Remoting.ServerIdentity get_ObjectIdentity();
        /*0xfa9780*/ void set_ObjectIdentity(System.Runtime.Remoting.ServerIdentity value);
        /*0xfa96c0*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
        /*0xfa9700*/ object InitializeLifetimeService();
    }

    class MonoAsyncCall
    {
        /*0x10*/ object msg;
        /*0x18*/ nint cb_method;
        /*0x20*/ object cb_target;
        /*0x28*/ object state;
        /*0x30*/ object res;
        /*0x38*/ object out_args;

        /*0x32d010*/ MonoAsyncCall();
    }

    class MonoCustomAttrs
    {
        static /*0x0*/ System.Reflection.Assembly corlib;
        static /*0x8*/ System.AttributeUsageAttribute DefaultAttributeUsage;
        [ThreadStatic] static System.Collections.Generic.Dictionary<System.Type, System.AttributeUsageAttribute> usage_cache;

        static /*0xfad330*/ MonoCustomAttrs();
        static /*0xfacd20*/ bool IsUserCattrProvider(object obj);
        static /*0xfab400*/ System.Attribute[] GetCustomAttributesInternal(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool pseudoAttrs);
        static /*0xfac790*/ object[] GetPseudoCustomAttributes(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType);
        static /*0xfac600*/ object[] GetPseudoCustomAttributes(System.Type type);
        static /*0xfaa200*/ object[] GetCustomAttributesBase(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inheritedOnly);
        static /*0xfab410*/ object[] GetCustomAttributes(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inherit);
        static /*0xfabf60*/ object[] GetCustomAttributes(System.Reflection.ICustomAttributeProvider obj, bool inherit);
        static /*0xfaa550*/ System.Reflection.CustomAttributeData[] GetCustomAttributesDataInternal(System.Reflection.ICustomAttributeProvider obj);
        static /*0xfab2c0*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData(System.Reflection.ICustomAttributeProvider obj, bool inherit);
        static /*0xfaa560*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inherit);
        static /*0xfaa3e0*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesDataBase(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inheritedOnly);
        static /*0xfac0f0*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType);
        static /*0xfac3a0*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData(System.Type type);
        static /*0xfaca50*/ bool IsDefined(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inherit);
        static /*0xfaca40*/ bool IsDefinedInternal(System.Reflection.ICustomAttributeProvider obj, System.Type AttributeType);
        static /*0xfa9a00*/ System.Reflection.PropertyInfo GetBasePropertyDefinition(System.Reflection.RuntimePropertyInfo property);
        static /*0xfa97c0*/ System.Reflection.EventInfo GetBaseEventDefinition(System.Reflection.RuntimeEventInfo evt);
        static /*0xfa9d70*/ System.Reflection.ICustomAttributeProvider GetBase(System.Reflection.ICustomAttributeProvider obj);
        static /*0xfacf30*/ System.AttributeUsageAttribute RetrieveAttributeUsageNoCache(System.Type attributeType);
        static /*0xfad1a0*/ System.AttributeUsageAttribute RetrieveAttributeUsage(System.Type attributeType);

        class AttributeInfo
        {
            /*0x10*/ System.AttributeUsageAttribute _usage;
            /*0x18*/ int _inheritanceLevel;

            /*0xfa1410*/ AttributeInfo(System.AttributeUsageAttribute usage, int inheritanceLevel);
            /*0x73d3e0*/ System.AttributeUsageAttribute get_Usage();
            /*0x8a5c20*/ int get_InheritanceLevel();
        }
    }

    class MonoListItem
    {
        /*0x10*/ System.MonoListItem next;
        /*0x18*/ object data;

        /*0x32d010*/ MonoListItem();
    }

    class MonoType : System.RuntimeType
    {
    }

    class MulticastDelegate : System.Delegate
    {
        /*0x78*/ System.Delegate[] delegates;

        /*0xfa8480*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xfad760*/ bool Equals(object obj);
        /*0xfa8220*/ int GetHashCode();
        /*0xfad9c0*/ System.Reflection.MethodInfo GetMethodImpl();
        /*0xfad8d0*/ System.Delegate[] GetInvocationList();
        /*0xfad3b0*/ System.Delegate CombineImpl(System.Delegate follow);
        /*0xfadb30*/ int LastIndexOf(System.Delegate[] haystack, System.Delegate[] needle);
        /*0xfadcc0*/ System.Delegate RemoveImpl(System.Delegate value);
    }

    class NullConsoleDriver : System.IConsoleDriver
    {
        static /*0x0*/ System.ConsoleKeyInfo EmptyConsoleKeyInfo;

        static /*0xfae0b0*/ NullConsoleDriver();
        /*0x32d010*/ NullConsoleDriver();
        /*0xfae040*/ System.ConsoleKeyInfo ReadKey(bool intercept);
    }

    class Object
    {
        static /*0xea41d0*/ bool Equals(object objA, object objB);
        static /*0x6bb8b0*/ bool ReferenceEquals(object objA, object objB);
        static /*0xfae120*/ int InternalGetHashCode(object o);
        /*0x32d010*/ Object();
        /*0x6bb8b0*/ bool Equals(object obj);
        /*0x32d010*/ void Finalize();
        /*0xfae120*/ int GetHashCode();
        /*0xfae130*/ System.Type GetType();
        /*0xfa67d0*/ object MemberwiseClone();
        /*0xfae140*/ string ToString();
        /*0x32d010*/ void FieldGetter(string typeName, string fieldName, ref object val);
        /*0x32d010*/ void FieldSetter(string typeName, string fieldName, object val);
    }

    enum PlatformID
    {
        Win32S = 0,
        Win32Windows = 1,
        Win32NT = 2,
        WinCE = 3,
        Unix = 4,
        Xbox = 5,
        MacOSX = 6,
    }

    struct RuntimeArgumentHandle
    {
        /*0x10*/ nint args;
    }

    struct RuntimeFieldHandle : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint value;

        static /*0xfafa60*/ void SetValueInternal(System.Reflection.FieldInfo fi, object obj, object value);
        static /*0xfafa60*/ void SetValue(System.Reflection.RuntimeFieldInfo field, object obj, object value, System.RuntimeType fieldType, System.Reflection.FieldAttributes fieldAttr, System.RuntimeType declaringType, ref bool domainInitialized);
        static /*0xfafa50*/ void SetValueDirect(System.Reflection.RuntimeFieldInfo field, System.RuntimeType fieldType, void* pTypedRef, object value, System.RuntimeType contextType);
        /*0x9e29e0*/ RuntimeFieldHandle(nint v);
        /*0xfafa70*/ RuntimeFieldHandle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x6937d0*/ nint get_Value();
        /*0xfaf8b0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xfaf7c0*/ bool Equals(object obj);
        /*0x6bba50*/ int GetHashCode();
    }

    struct RuntimeMethodHandle : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint value;

        static /*0xfafc10*/ string ConstructInstantiation(System.Reflection.RuntimeMethodInfo method, System.TypeNameFormatFlags format);
        /*0x9e29e0*/ RuntimeMethodHandle(nint v);
        /*0xfb0000*/ RuntimeMethodHandle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x6937d0*/ nint get_Value();
        /*0xfafe60*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xfafd70*/ bool Equals(object obj);
        /*0x6bba50*/ int GetHashCode();
        /*0xe832e0*/ bool IsNullHandle();
    }

    struct RuntimeTypeHandle : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint value;

        static /*0xfb02c0*/ System.Reflection.TypeAttributes GetAttributes(System.RuntimeType type);
        static /*0xfb0320*/ int GetMetadataToken(System.RuntimeType type);
        static /*0xfb0320*/ int GetToken(System.RuntimeType type);
        static /*0xfb0310*/ System.Type GetGenericTypeDefinition_impl(System.RuntimeType type);
        static /*0xfb0310*/ System.Type GetGenericTypeDefinition(System.RuntimeType type);
        static /*0xfb09c0*/ bool IsPrimitive(System.RuntimeType type);
        static /*0xfb0890*/ bool IsByRef(System.RuntimeType type);
        static /*0xfb09a0*/ bool IsPointer(System.RuntimeType type);
        static /*0xfb0860*/ bool IsArray(System.RuntimeType type);
        static /*0xfb0a20*/ bool IsSzArray(System.RuntimeType type);
        static /*0xfb0810*/ bool HasElementType(System.RuntimeType type);
        static /*0xfb02e0*/ System.Reflection.CorElementType GetCorElementType(System.RuntimeType type);
        static /*0xfb0840*/ bool HasInstantiation(System.RuntimeType type);
        static /*0xed1490*/ bool IsComObject(System.RuntimeType type);
        static /*0xfb0970*/ bool IsInstanceOfType(System.RuntimeType type, object o);
        static /*0xfb0850*/ bool HasReferences(System.RuntimeType type);
        static /*0xfb08b0*/ bool IsComObject(System.RuntimeType type, bool isGenericCOM);
        static /*0xfb08c0*/ bool IsContextful(System.RuntimeType type);
        static /*0x348b00*/ bool IsEquivalentTo(System.RuntimeType rtType1, System.RuntimeType rtType2);
        static /*0xfb0980*/ bool IsInterface(System.RuntimeType type);
        static /*0xfb02a0*/ int GetArrayRank(System.RuntimeType type);
        static /*0xfb02b0*/ System.Reflection.RuntimeAssembly GetAssembly(System.RuntimeType type);
        static /*0xfb02f0*/ System.RuntimeType GetElementType(System.RuntimeType type);
        static /*0xfb0330*/ System.Reflection.RuntimeModule GetModule(System.RuntimeType type);
        static /*0xfb0960*/ bool IsGenericVariable(System.RuntimeType type);
        static /*0xfb02d0*/ System.RuntimeType GetBaseType(System.RuntimeType type);
        static /*0xfb01a0*/ bool CanCastTo(System.RuntimeType type, System.RuntimeType target);
        static /*0xfb0c30*/ bool type_is_assignable_from(System.Type a, System.Type b);
        static /*0xfb0950*/ bool IsGenericTypeDefinition(System.RuntimeType type);
        static /*0xfb0300*/ nint GetGenericParameterInfo(System.RuntimeType type);
        static /*0xfb09f0*/ bool IsSubclassOf(System.RuntimeType childType, System.RuntimeType baseType);
        static /*0xfb0c20*/ bool is_subclass_of(nint childType, nint baseType);
        static /*0xfb0880*/ bool IsByRefLike(System.RuntimeType type);
        static /*0xfb0c00*/ System.RuntimeType internal_from_name(string name, ref System.Threading.StackCrawlMark stackMark, System.Reflection.Assembly callerAssembly, bool throwOnError, bool ignoreCase, bool reflectionOnly);
        static /*0xfb04c0*/ System.RuntimeType GetTypeByName(string typeName, bool throwOnError, bool ignoreCase, bool reflectionOnly, ref System.Threading.StackCrawlMark stackMark, bool loadTypeFromPartialName);
        /*0x9e29e0*/ RuntimeTypeHandle(nint val);
        /*0xfb0be0*/ RuntimeTypeHandle(System.RuntimeType type);
        /*0xfb0a40*/ RuntimeTypeHandle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x6937d0*/ nint get_Value();
        /*0xfb0340*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xfb01b0*/ bool Equals(object obj);
        /*0x6bba50*/ int GetHashCode();
    }

    class TermInfoDriver : System.IConsoleDriver
    {
        static /*0x0*/ int* native_terminal_size;
        static /*0x8*/ int terminal_size;
        static /*0x10*/ string[] locations;
        static /*0x18*/ int[] _consoleColorToAnsiCode;
        /*0x10*/ System.TermInfoReader reader;
        /*0x18*/ int cursorLeft;
        /*0x1c*/ int cursorTop;
        /*0x20*/ string title;
        /*0x28*/ string titleFormat;
        /*0x30*/ bool cursorVisible;
        /*0x38*/ string csrVisible;
        /*0x40*/ string csrInvisible;
        /*0x48*/ string clear;
        /*0x50*/ string bell;
        /*0x58*/ string term;
        /*0x60*/ System.IO.StreamReader stdin;
        /*0x68*/ System.IO.CStreamWriter stdout;
        /*0x70*/ int windowWidth;
        /*0x74*/ int windowHeight;
        /*0x78*/ int bufferHeight;
        /*0x7c*/ int bufferWidth;
        /*0x80*/ char[] buffer;
        /*0x88*/ int readpos;
        /*0x8c*/ int writepos;
        /*0x90*/ string keypadXmit;
        /*0x98*/ string keypadLocal;
        /*0xa0*/ bool inited;
        /*0xa8*/ object initLock;
        /*0xb0*/ bool initKeys;
        /*0xb8*/ string origPair;
        /*0xc0*/ string origColors;
        /*0xc8*/ string cursorAddress;
        /*0xd0*/ System.ConsoleColor fgcolor;
        /*0xd8*/ string setfgcolor;
        /*0xe0*/ string setbgcolor;
        /*0xe8*/ int maxColors;
        /*0xec*/ bool noGetPosition;
        /*0xf0*/ System.Collections.Hashtable keymap;
        /*0xf8*/ System.ByteMatcher rootmap;
        /*0x100*/ int rl_startx;
        /*0x104*/ int rl_starty;
        /*0x108*/ byte[] control_characters;
        /*0x110*/ char[] echobuf;
        /*0x118*/ int echon;

        static /*0xfb6470*/ TermInfoDriver();
        static /*0xfb60d0*/ string TryTermInfoDir(string dir, string term);
        static /*0xfb5bc0*/ string SearchTerminfo(string term);
        /*0xfb6610*/ TermInfoDriver(string term);
        /*0xfb61f0*/ void WriteConsole(string str);
        /*0x9c7a40*/ bool get_Initialized();
        /*0xfb4550*/ void Init();
        /*0xfb42d0*/ void IncrementX();
        /*0xfb6270*/ void WriteSpecialKey(System.ConsoleKeyInfo key);
        /*0xfb6220*/ void WriteSpecialKey(char c);
        /*0xfb50f0*/ bool IsSpecialKey(System.ConsoleKeyInfo key);
        /*0xfb50a0*/ bool IsSpecialKey(char c);
        /*0xfb3bd0*/ void GetCursorPosition();
        /*0xfb0f10*/ void CheckWindowDimensions();
        /*0xfb6d90*/ int get_WindowHeight();
        /*0xfb6dc0*/ int get_WindowWidth();
        /*0xfb0de0*/ void AddToBuffer(int b);
        /*0xfb0ef0*/ void AdjustBuffer();
        /*0xfb1070*/ System.ConsoleKeyInfo CreateKeyInfoFromInt(int n, bool alt);
        /*0xfb3eb0*/ object GetKeyFromBuffer(bool cooked);
        /*0xfb5310*/ System.ConsoleKeyInfo ReadKeyInternal(ref bool fresh);
        /*0xfb5060*/ bool InputPending();
        /*0xfb5210*/ void QueueEcho(char c);
        /*0xfb3a30*/ void Echo(System.ConsoleKeyInfo key);
        /*0xfb39e0*/ void EchoFlush();
        /*0xfb5860*/ int Read(char[] dest, int index, int count);
        /*0xfb5530*/ System.ConsoleKeyInfo ReadKey(bool intercept);
        /*0xfb55f0*/ string ReadLine();
        /*0xfb5600*/ string ReadToEnd();
        /*0xfb5610*/ string ReadUntilConditionInternal(bool haltOnNewLine);
        /*0xfb5d40*/ void SetCursorPosition(int left, int top);
        /*0xfb11c0*/ void CreateKeyMap();
        /*0xfb4360*/ void InitKeys();
        /*0xfb0c40*/ void AddStringMapping(System.TermInfoStrings s);
    }

    class ParameterizedStrings
    {
        [ThreadStatic] static System.ParameterizedStrings.LowLevelStack _cachedStack;

        static /*0xfaee70*/ string Evaluate(string format, System.ParameterizedStrings.FormatParam[] args);
        static /*0xfae170*/ string EvaluateInternal(string format, ref int pos, System.ParameterizedStrings.FormatParam[] args, System.ParameterizedStrings.LowLevelStack stack, ref System.ParameterizedStrings.FormatParam[] dynamicVars, ref System.ParameterizedStrings.FormatParam[] staticVars);
        static /*0xe306b0*/ bool AsBool(int i);
        static /*0xe31d50*/ int AsInt(bool b);
        static /*0xfaf430*/ string StringFromAsciiBytes(byte[] buffer, int offset, int length);
        static /*0xfaf510*/ int snprintf(byte* str, nint size, string format, string arg1);
        static /*0xfaf5f0*/ int snprintf(byte* str, nint size, string format, int arg1);
        static /*0xfaf050*/ string FormatPrintF(string format, object arg);
        static /*0xfaf320*/ System.ParameterizedStrings.FormatParam[] GetDynamicOrStaticVariables(char c, ref System.ParameterizedStrings.FormatParam[] dynamicVars, ref System.ParameterizedStrings.FormatParam[] staticVars, ref int index);

        struct FormatParam
        {
            /*0x10*/ int _int32;
            /*0x18*/ string _string;

            static /*0xfa9110*/ System.ParameterizedStrings.FormatParam op_Implicit(int value);
            /*0xfa9050*/ FormatParam(int value);
            /*0xa59e80*/ FormatParam(int intValue, string stringValue);
            /*0x6bba50*/ int get_Int32();
            /*0xfa90c0*/ string get_String();
            /*0xfa9070*/ object get_Object();
        }

        class LowLevelStack
        {
            /*0x10*/ System.ParameterizedStrings.FormatParam[] _arr;
            /*0x18*/ int _count;

            /*0xfa9670*/ LowLevelStack();
            /*0xfa94b0*/ System.ParameterizedStrings.FormatParam Pop();
            /*0xfa9580*/ void Push(System.ParameterizedStrings.FormatParam item);
            /*0xfa9480*/ void Clear();
        }
    }

    class ByteMatcher
    {
        /*0x10*/ System.Collections.Hashtable map;
        /*0x18*/ System.Collections.Hashtable starts;

        /*0xfa18d0*/ ByteMatcher();
        /*0xfa1440*/ void AddMapping(System.TermInfoStrings key, byte[] val);
        /*0x32d010*/ void Sort();
        /*0xfa1850*/ bool StartsWith(int c);
        /*0xfa1570*/ System.TermInfoStrings Match(char[] buffer, int offset, int length, ref int used);
    }

    enum TermInfoNumbers
    {
        Columns = 0,
        InitTabs = 1,
        Lines = 2,
        LinesOfMemory = 3,
        MagicCookieGlitch = 4,
        PaddingBaudRate = 5,
        VirtualTerminal = 6,
        WidthStatusLine = 7,
        NumLabels = 8,
        LabelHeight = 9,
        LabelWidth = 10,
        MaxAttributes = 11,
        MaximumWindows = 12,
        MaxColors = 13,
        MaxPairs = 14,
        NoColorVideo = 15,
        BufferCapacity = 16,
        DotVertSpacing = 17,
        DotHorzSpacing = 18,
        MaxMicroAddress = 19,
        MaxMicroJump = 20,
        MicroColSize = 21,
        MicroLineSize = 22,
        NumberOfPins = 23,
        OutputResChar = 24,
        OutputResLine = 25,
        OutputResHorzInch = 26,
        OutputResVertInch = 27,
        PrintRate = 28,
        WideCharSize = 29,
        Buttons = 30,
        BitImageEntwining = 31,
        BitImageType = 32,
        Last = 33,
    }

    class TermInfoReader
    {
        /*0x10*/ int boolSize;
        /*0x14*/ int numSize;
        /*0x18*/ int strOffsets;
        /*0x20*/ byte[] buffer;
        /*0x28*/ int booleansOffset;
        /*0x2c*/ int intOffset;

        /*0xfb77d0*/ TermInfoReader(string term, string filename);
        /*0xfb7730*/ TermInfoReader(string term, byte[] buffer);
        /*0xfb6df0*/ void DetermineVersion(short magic);
        /*0xfb7400*/ void ReadHeader(byte[] buffer, ref int position);
        /*0xfb7680*/ void ReadNames(byte[] buffer, ref int position);
        /*0xfb7340*/ int Get(System.TermInfoNumbers number);
        /*0xfb71e0*/ string Get(System.TermInfoStrings tstr);
        /*0xfb6fd0*/ byte[] GetStringBytes(System.TermInfoStrings tstr);
        /*0xfb6eb0*/ short GetInt16(byte[] buffer, int offset);
        /*0xfb7140*/ string GetString(byte[] buffer, int offset);
        /*0xfb6f10*/ byte[] GetStringBytes(byte[] buffer, int offset);
    }

    enum TermInfoStrings
    {
        BackTab = 0,
        Bell = 1,
        CarriageReturn = 2,
        ChangeScrollRegion = 3,
        ClearAllTabs = 4,
        ClearScreen = 5,
        ClrEol = 6,
        ClrEos = 7,
        ColumnAddress = 8,
        CommandCharacter = 9,
        CursorAddress = 10,
        CursorDown = 11,
        CursorHome = 12,
        CursorInvisible = 13,
        CursorLeft = 14,
        CursorMemAddress = 15,
        CursorNormal = 16,
        CursorRight = 17,
        CursorToLl = 18,
        CursorUp = 19,
        CursorVisible = 20,
        DeleteCharacter = 21,
        DeleteLine = 22,
        DisStatusLine = 23,
        DownHalfLine = 24,
        EnterAltCharsetMode = 25,
        EnterBlinkMode = 26,
        EnterBoldMode = 27,
        EnterCaMode = 28,
        EnterDeleteMode = 29,
        EnterDimMode = 30,
        EnterInsertMode = 31,
        EnterSecureMode = 32,
        EnterProtectedMode = 33,
        EnterReverseMode = 34,
        EnterStandoutMode = 35,
        EnterUnderlineMode = 36,
        EraseChars = 37,
        ExitAltCharsetMode = 38,
        ExitAttributeMode = 39,
        ExitCaMode = 40,
        ExitDeleteMode = 41,
        ExitInsertMode = 42,
        ExitStandoutMode = 43,
        ExitUnderlineMode = 44,
        FlashScreen = 45,
        FormFeed = 46,
        FromStatusLine = 47,
        Init1string = 48,
        Init2string = 49,
        Init3string = 50,
        InitFile = 51,
        InsertCharacter = 52,
        InsertLine = 53,
        InsertPadding = 54,
        KeyBackspace = 55,
        KeyCatab = 56,
        KeyClear = 57,
        KeyCtab = 58,
        KeyDc = 59,
        KeyDl = 60,
        KeyDown = 61,
        KeyEic = 62,
        KeyEol = 63,
        KeyEos = 64,
        KeyF0 = 65,
        KeyF1 = 66,
        KeyF10 = 67,
        KeyF2 = 68,
        KeyF3 = 69,
        KeyF4 = 70,
        KeyF5 = 71,
        KeyF6 = 72,
        KeyF7 = 73,
        KeyF8 = 74,
        KeyF9 = 75,
        KeyHome = 76,
        KeyIc = 77,
        KeyIl = 78,
        KeyLeft = 79,
        KeyLl = 80,
        KeyNpage = 81,
        KeyPpage = 82,
        KeyRight = 83,
        KeySf = 84,
        KeySr = 85,
        KeyStab = 86,
        KeyUp = 87,
        KeypadLocal = 88,
        KeypadXmit = 89,
        LabF0 = 90,
        LabF1 = 91,
        LabF10 = 92,
        LabF2 = 93,
        LabF3 = 94,
        LabF4 = 95,
        LabF5 = 96,
        LabF6 = 97,
        LabF7 = 98,
        LabF8 = 99,
        LabF9 = 100,
        MetaOff = 101,
        MetaOn = 102,
        Newline = 103,
        PadChar = 104,
        ParmDch = 105,
        ParmDeleteLine = 106,
        ParmDownCursor = 107,
        ParmIch = 108,
        ParmIndex = 109,
        ParmInsertLine = 110,
        ParmLeftCursor = 111,
        ParmRightCursor = 112,
        ParmRindex = 113,
        ParmUpCursor = 114,
        PkeyKey = 115,
        PkeyLocal = 116,
        PkeyXmit = 117,
        PrintScreen = 118,
        PrtrOff = 119,
        PrtrOn = 120,
        RepeatChar = 121,
        Reset1string = 122,
        Reset2string = 123,
        Reset3string = 124,
        ResetFile = 125,
        RestoreCursor = 126,
        RowAddress = 127,
        SaveCursor = 128,
        ScrollForward = 129,
        ScrollReverse = 130,
        SetAttributes = 131,
        SetTab = 132,
        SetWindow = 133,
        Tab = 134,
        ToStatusLine = 135,
        UnderlineChar = 136,
        UpHalfLine = 137,
        InitProg = 138,
        KeyA1 = 139,
        KeyA3 = 140,
        KeyB2 = 141,
        KeyC1 = 142,
        KeyC3 = 143,
        PrtrNon = 144,
        CharPadding = 145,
        AcsChars = 146,
        PlabNorm = 147,
        KeyBtab = 148,
        EnterXonMode = 149,
        ExitXonMode = 150,
        EnterAmMode = 151,
        ExitAmMode = 152,
        XonCharacter = 153,
        XoffCharacter = 154,
        EnaAcs = 155,
        LabelOn = 156,
        LabelOff = 157,
        KeyBeg = 158,
        KeyCancel = 159,
        KeyClose = 160,
        KeyCommand = 161,
        KeyCopy = 162,
        KeyCreate = 163,
        KeyEnd = 164,
        KeyEnter = 165,
        KeyExit = 166,
        KeyFind = 167,
        KeyHelp = 168,
        KeyMark = 169,
        KeyMessage = 170,
        KeyMove = 171,
        KeyNext = 172,
        KeyOpen = 173,
        KeyOptions = 174,
        KeyPrevious = 175,
        KeyPrint = 176,
        KeyRedo = 177,
        KeyReference = 178,
        KeyRefresh = 179,
        KeyReplace = 180,
        KeyRestart = 181,
        KeyResume = 182,
        KeySave = 183,
        KeySuspend = 184,
        KeyUndo = 185,
        KeySbeg = 186,
        KeyScancel = 187,
        KeyScommand = 188,
        KeyScopy = 189,
        KeyScreate = 190,
        KeySdc = 191,
        KeySdl = 192,
        KeySelect = 193,
        KeySend = 194,
        KeySeol = 195,
        KeySexit = 196,
        KeySfind = 197,
        KeyShelp = 198,
        KeyShome = 199,
        KeySic = 200,
        KeySleft = 201,
        KeySmessage = 202,
        KeySmove = 203,
        KeySnext = 204,
        KeySoptions = 205,
        KeySprevious = 206,
        KeySprint = 207,
        KeySredo = 208,
        KeySreplace = 209,
        KeySright = 210,
        KeySrsume = 211,
        KeySsave = 212,
        KeySsuspend = 213,
        KeySundo = 214,
        ReqForInput = 215,
        KeyF11 = 216,
        KeyF12 = 217,
        KeyF13 = 218,
        KeyF14 = 219,
        KeyF15 = 220,
        KeyF16 = 221,
        KeyF17 = 222,
        KeyF18 = 223,
        KeyF19 = 224,
        KeyF20 = 225,
        KeyF21 = 226,
        KeyF22 = 227,
        KeyF23 = 228,
        KeyF24 = 229,
        KeyF25 = 230,
        KeyF26 = 231,
        KeyF27 = 232,
        KeyF28 = 233,
        KeyF29 = 234,
        KeyF30 = 235,
        KeyF31 = 236,
        KeyF32 = 237,
        KeyF33 = 238,
        KeyF34 = 239,
        KeyF35 = 240,
        KeyF36 = 241,
        KeyF37 = 242,
        KeyF38 = 243,
        KeyF39 = 244,
        KeyF40 = 245,
        KeyF41 = 246,
        KeyF42 = 247,
        KeyF43 = 248,
        KeyF44 = 249,
        KeyF45 = 250,
        KeyF46 = 251,
        KeyF47 = 252,
        KeyF48 = 253,
        KeyF49 = 254,
        KeyF50 = 255,
        KeyF51 = 256,
        KeyF52 = 257,
        KeyF53 = 258,
        KeyF54 = 259,
        KeyF55 = 260,
        KeyF56 = 261,
        KeyF57 = 262,
        KeyF58 = 263,
        KeyF59 = 264,
        KeyF60 = 265,
        KeyF61 = 266,
        KeyF62 = 267,
        KeyF63 = 268,
        ClrBol = 269,
        ClearMargins = 270,
        SetLeftMargin = 271,
        SetRightMargin = 272,
        LabelFormat = 273,
        SetClock = 274,
        DisplayClock = 275,
        RemoveClock = 276,
        CreateWindow = 277,
        GotoWindow = 278,
        Hangup = 279,
        DialPhone = 280,
        QuickDial = 281,
        Tone = 282,
        Pulse = 283,
        FlashHook = 284,
        FixedPause = 285,
        WaitTone = 286,
        User0 = 287,
        User1 = 288,
        User2 = 289,
        User3 = 290,
        User4 = 291,
        User5 = 292,
        User6 = 293,
        User7 = 294,
        User8 = 295,
        User9 = 296,
        OrigPair = 297,
        OrigColors = 298,
        InitializeColor = 299,
        InitializePair = 300,
        SetColorPair = 301,
        SetForeground = 302,
        SetBackground = 303,
        ChangeCharPitch = 304,
        ChangeLinePitch = 305,
        ChangeResHorz = 306,
        ChangeResVert = 307,
        DefineChar = 308,
        EnterDoublewideMode = 309,
        EnterDraftQuality = 310,
        EnterItalicsMode = 311,
        EnterLeftwardMode = 312,
        EnterMicroMode = 313,
        EnterNearLetterQuality = 314,
        EnterNormalQuality = 315,
        EnterShadowMode = 316,
        EnterSubscriptMode = 317,
        EnterSuperscriptMode = 318,
        EnterUpwardMode = 319,
        ExitDoublewideMode = 320,
        ExitItalicsMode = 321,
        ExitLeftwardMode = 322,
        ExitMicroMode = 323,
        ExitShadowMode = 324,
        ExitSubscriptMode = 325,
        ExitSuperscriptMode = 326,
        ExitUpwardMode = 327,
        MicroColumnAddress = 328,
        MicroDown = 329,
        MicroLeft = 330,
        MicroRight = 331,
        MicroRowAddress = 332,
        MicroUp = 333,
        OrderOfPins = 334,
        ParmDownMicro = 335,
        ParmLeftMicro = 336,
        ParmRightMicro = 337,
        ParmUpMicro = 338,
        SelectCharSet = 339,
        SetBottomMargin = 340,
        SetBottomMarginParm = 341,
        SetLeftMarginParm = 342,
        SetRightMarginParm = 343,
        SetTopMargin = 344,
        SetTopMarginParm = 345,
        StartBitImage = 346,
        StartCharSetDef = 347,
        StopBitImage = 348,
        StopCharSetDef = 349,
        SubscriptCharacters = 350,
        SuperscriptCharacters = 351,
        TheseCauseCr = 352,
        ZeroMotion = 353,
        CharSetNames = 354,
        KeyMouse = 355,
        MouseInfo = 356,
        ReqMousePos = 357,
        GetMouse = 358,
        SetAForeground = 359,
        SetABackground = 360,
        PkeyPlab = 361,
        DeviceType = 362,
        CodeSetInit = 363,
        Set0DesSeq = 364,
        Set1DesSeq = 365,
        Set2DesSeq = 366,
        Set3DesSeq = 367,
        SetLrMargin = 368,
        SetTbMargin = 369,
        BitImageRepeat = 370,
        BitImageNewline = 371,
        BitImageCarriageReturn = 372,
        ColorNames = 373,
        DefineBitImageRegion = 374,
        EndBitImageRegion = 375,
        SetColorBand = 376,
        SetPageLength = 377,
        DisplayPcChar = 378,
        EnterPcCharsetMode = 379,
        ExitPcCharsetMode = 380,
        EnterScancodeMode = 381,
        ExitScancodeMode = 382,
        PcTermOptions = 383,
        ScancodeEscape = 384,
        AltScancodeEsc = 385,
        EnterHorizontalHlMode = 386,
        EnterLeftHlMode = 387,
        EnterLowHlMode = 388,
        EnterRightHlMode = 389,
        EnterTopHlMode = 390,
        EnterVerticalHlMode = 391,
        SetAAttributes = 392,
        SetPglenInch = 393,
        Last = 394,
    }

    interface TypeName : System.IEquatable<System.TypeName>
    {
        /*0x1803b0*/ string get_DisplayName();
    }

    interface TypeIdentifier : System.TypeName, System.IEquatable<System.TypeName>
    {
        /*0x1803b0*/ string get_InternalName();
    }

    class TypeNames
    {
        class ATypeName : System.TypeName, System.IEquatable<System.TypeName>
        {
            /*0x32d010*/ ATypeName();
            /*0x1803b0*/ string get_DisplayName();
            /*0xfa1010*/ bool Equals(System.TypeName other);
            /*0xfa1150*/ int GetHashCode();
            /*0xfa1090*/ bool Equals(object other);
        }
    }

    class TypeIdentifiers
    {
        static /*0xfb79f0*/ System.TypeIdentifier FromDisplay(string displayName);

        class Display : System.TypeNames.ATypeName, System.TypeIdentifier, System.TypeName, System.IEquatable<System.TypeName>
        {
            /*0x10*/ string displayName;
            /*0x18*/ string internal_name;

            /*0xfa8f20*/ Display(string displayName);
            /*0x73d3e0*/ string get_DisplayName();
            /*0xfa8f50*/ string get_InternalName();
            /*0xfa8e40*/ string GetInternalName();
        }
    }

    interface ModifierSpec
    {
        /*0x1858d0*/ System.Type Resolve(System.Type type);
        /*0x1858d0*/ System.Text.StringBuilder Append(System.Text.StringBuilder sb);
    }

    class ArraySpec : System.ModifierSpec
    {
        /*0x10*/ int dimensions;
        /*0x14*/ bool bound;

        /*0xfa1400*/ ArraySpec(int dimensions, bool bound);
        /*0xfa1280*/ System.Type Resolve(System.Type type);
        /*0xfa11e0*/ System.Text.StringBuilder Append(System.Text.StringBuilder sb);
        /*0xfa1310*/ string ToString();
    }

    class PointerSpec : System.ModifierSpec
    {
        /*0x10*/ int pointer_level;

        /*0xdcd9c0*/ PointerSpec(int pointer_level);
        /*0xfaf6e0*/ System.Type Resolve(System.Type type);
        /*0xfaf6b0*/ System.Text.StringBuilder Append(System.Text.StringBuilder sb);
        /*0xfaf730*/ string ToString();
    }

    class TypeSpec
    {
        /*0x10*/ System.TypeIdentifier name;
        /*0x18*/ string assembly_name;
        /*0x20*/ System.Collections.Generic.List<System.TypeIdentifier> nested;
        /*0x28*/ System.Collections.Generic.List<System.TypeSpec> generic_params;
        /*0x30*/ System.Collections.Generic.List<System.ModifierSpec> modifier_spec;
        /*0x38*/ bool is_byref;
        /*0x40*/ string display_fullname;

        static /*0xfb9470*/ System.TypeSpec Parse(string typeName);
        static /*0xfb9f40*/ string UnescapeInternalName(string displayName);
        static /*0xfb9ea0*/ void SkipSpace(string name, ref int pos);
        static /*0xfb7e00*/ void BoundCheck(int idx, string s);
        static /*0xfb79f0*/ System.TypeIdentifier ParsedTypeIdentifier(string displayName);
        static /*0xfb8510*/ System.TypeSpec Parse(string name, ref int p, bool is_recurse, bool allow_aqn);
        /*0x32d010*/ TypeSpec();
        /*0xe9a800*/ bool get_HasModifiers();
        /*0xfb7e90*/ string GetDisplayFullName(System.TypeSpec.DisplayNameFormat flags);
        /*0xfb8310*/ System.Text.StringBuilder GetModifierString(System.Text.StringBuilder sb);
        /*0xfba020*/ string get_DisplayFullName();
        /*0xfb9560*/ System.Type Resolve(System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> assemblyResolver, System.Func<System.Reflection.Assembly, string, bool, System.Type> typeResolver, bool throwOnError, bool ignoreCase, ref System.Threading.StackCrawlMark stackMark);
        /*0xfb7cb0*/ void AddName(string type_name);
        /*0xfb7bb0*/ void AddModifier(System.ModifierSpec md);

        enum DisplayNameFormat
        {
            Default = 0,
            WANT_ASSEMBLY = 1,
            NO_MODIFIERS = 2,
        }
    }

    struct UIntPtr : System.Runtime.Serialization.ISerializable, System.IEquatable<nuint>
    {
        static /*0x0*/ nuint Zero;
        /*0x10*/ void* _pointer;

        static /*0xfba1b0*/ UIntPtr();
        static /*0x6bb8b0*/ bool op_Equality(nuint value1, nuint value2);
        static /*0xf789c0*/ bool op_Inequality(nuint value1, nuint value2);
        static /*0xfa9340*/ nuint op_Explicit(ulong value);
        static /*0x621c90*/ nuint op_Explicit(uint value);
        static /*0x6bbae0*/ int get_Size();
        /*0xfba200*/ UIntPtr(ulong value);
        /*0xfba1f0*/ UIntPtr(uint value);
        /*0x9e29e0*/ UIntPtr(void* value);
        /*0xfba060*/ bool Equals(object obj);
        /*0x6bba50*/ int GetHashCode();
        /*0xfba190*/ string ToString();
        /*0xfba0f0*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xf50c20*/ bool System.IEquatable<System.UIntPtr>.Equals(nuint other);
    }

    class ValueType
    {
        static /*0xfba470*/ bool InternalEquals(object o1, object o2, ref object[] fields);
        static /*0xfba210*/ bool DefaultEquals(object o1, object o2);
        static /*0xfba480*/ int InternalGetHashCode(object o, ref object[] fields);
        /*0x32d010*/ ValueType();
        /*0xf8a610*/ bool Equals(object obj);
        /*0xfba3e0*/ int GetHashCode();
        /*0xfba490*/ string ToString();
    }

    struct Variant
    {
        /*0x10*/ short vt;
        /*0x12*/ ushort wReserved1;
        /*0x14*/ ushort wReserved2;
        /*0x16*/ ushort wReserved3;
        /*0x18*/ long llVal;
        /*0x18*/ int lVal;
        /*0x18*/ byte bVal;
        /*0x18*/ short iVal;
        /*0x18*/ float fltVal;
        /*0x18*/ double dblVal;
        /*0x18*/ short boolVal;
        /*0x18*/ nint bstrVal;
        /*0x18*/ sbyte cVal;
        /*0x18*/ ushort uiVal;
        /*0x18*/ uint ulVal;
        /*0x18*/ ulong ullVal;
        /*0x18*/ int intVal;
        /*0x18*/ uint uintVal;
        /*0x18*/ nint pdispVal;
        /*0x18*/ System.BRECORD bRecord;

        /*0xfba4c0*/ void Clear();
    }

    struct BRECORD
    {
        /*0x10*/ nint pvRecord;
        /*0x18*/ nint pRecInfo;
    }

    class WeakReference : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ bool isLongReference;
        /*0x18*/ System.Runtime.InteropServices.GCHandle gcHandle;

        /*0x32d010*/ WeakReference();
        /*0xfba700*/ WeakReference(object target);
        /*0xfba730*/ WeakReference(object target, bool trackResurrection);
        /*0xfba760*/ WeakReference(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xfba560*/ void AllocateHandle(object target);
        /*0xfba890*/ bool get_IsAlive();
        /*0xfba8c0*/ object get_Target();
        /*0xfba8f0*/ void set_Target(object value);
        /*0x793eb0*/ bool get_TrackResurrection();
        /*0xfba590*/ void Finalize();
        /*0xfba5e0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class WeakReference<T> : System.Runtime.Serialization.ISerializable
    {
        /*0x0*/ System.Runtime.InteropServices.GCHandle handle;
        /*0x0*/ bool trackResurrection;

        /*0x2a5510*/ WeakReference(T target);
        /*0x2a5510*/ WeakReference(T target, bool trackResurrection);
        WeakReference(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x2a5510*/ void SetTarget(T target);
        /*0x17e620*/ bool TryGetTarget(ref T target);
        /*0x180fc0*/ void Finalize();
    }

    struct InputRecord
    {
        /*0x10*/ short EventType;
        /*0x12*/ bool KeyDown;
        /*0x14*/ short RepeatCount;
        /*0x16*/ short VirtualKeyCode;
        /*0x18*/ short VirtualScanCode;
        /*0x1a*/ char Character;
        /*0x1c*/ int ControlKeyState;
        /*0x20*/ int pad1;
        /*0x24*/ bool pad2;
    }

    struct Coord
    {
        /*0x10*/ short X;
        /*0x12*/ short Y;
    }

    struct SmallRect
    {
        /*0x10*/ short Left;
        /*0x12*/ short Top;
        /*0x14*/ short Right;
        /*0x16*/ short Bottom;
    }

    struct ConsoleScreenBufferInfo
    {
        /*0x10*/ System.Coord Size;
        /*0x14*/ System.Coord CursorPosition;
        /*0x18*/ short Attribute;
        /*0x1a*/ System.SmallRect Window;
        /*0x22*/ System.Coord MaxWindowSize;
    }

    enum Handles
    {
        STD_INPUT = -10,
        STD_OUTPUT = -11,
        STD_ERROR = -12,
    }

    class WindowsConsoleDriver : System.IConsoleDriver
    {
        /*0x10*/ nint inputHandle;
        /*0x18*/ nint outputHandle;
        /*0x20*/ short defaultAttribute;

        static /*0xfbaa30*/ bool IsModifierKey(short virtualKeyCode);
        static /*0xfba9a0*/ nint GetStdHandle(System.Handles handle);
        static /*0xfba900*/ bool GetConsoleScreenBufferInfo(nint handle, ref System.ConsoleScreenBufferInfo info);
        static /*0xfbaa60*/ bool ReadConsoleInput(nint handle, ref System.InputRecord record, int length, ref int nread);
        /*0xfbade0*/ WindowsConsoleDriver();
        /*0xfbab90*/ System.ConsoleKeyInfo ReadKey(bool intercept);
    }

    class __ComObject
    {
        /*0xfbb240*/ __ComObject();
    }

    struct Decimal : System.IFormattable, System.IComparable, System.IConvertible, System.IComparable<decimal>, System.IEquatable<decimal>, System.Runtime.Serialization.IDeserializationCallback, System.ISpanFormattable
    {
        static int SignMask = -2147483648;
        static int ScaleMask = 16711680;
        static int ScaleShift = 16;
        static /*0x0*/ decimal Zero;
        static /*0x10*/ decimal One;
        static /*0x20*/ decimal MinusOne;
        static /*0x30*/ decimal MaxValue;
        static /*0x40*/ decimal MinValue;
        /*0x10*/ int flags;
        /*0x14*/ int hi;
        /*0x18*/ int lo;
        /*0x1c*/ int mid;
        /*0x18*/ ulong ulomidLE;

        static /*0xfa4d00*/ Decimal();
        static /*0x621ca0*/ ref System.Decimal.DecCalc AsMutable(ref decimal d);
        static /*0xfa31e0*/ uint DecDivMod1E9(ref decimal value);
        static /*0xfa33d0*/ bool IsValid(int flags);
        static /*0xfa2fd0*/ decimal Add(decimal d1, decimal d2);
        static /*0xfa3510*/ decimal Parse(string s, System.IFormatProvider provider);
        static /*0xfa33f0*/ decimal Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0xfa3610*/ decimal Round(decimal d, int decimals);
        static /*0xfa3760*/ decimal Round(ref decimal d, int decimals, System.MidpointRounding mode);
        static /*0xfa3920*/ decimal Subtract(decimal d1, decimal d2);
        static /*0xfa4050*/ byte ToByte(decimal value);
        static /*0xfa4470*/ sbyte ToSByte(decimal value);
        static /*0xfa41b0*/ short ToInt16(decimal value);
        static /*0xfa4160*/ double ToDouble(decimal d);
        static /*0xfa42c0*/ int ToInt32(decimal d);
        static /*0xfa4390*/ long ToInt64(decimal d);
        static /*0xfa48f0*/ ushort ToUInt16(decimal value);
        static /*0xfa4a00*/ uint ToUInt32(decimal d);
        static /*0xfa4ac0*/ ulong ToUInt64(decimal d);
        static /*0xfa4580*/ float ToSingle(decimal d);
        static /*0xfa4ba0*/ void Truncate(ref decimal d);
        static /*0xfa5930*/ decimal op_Implicit(byte value);
        static /*0xfa58a0*/ decimal op_Implicit(sbyte value);
        static /*0xfa5900*/ decimal op_Implicit(short value);
        static /*0xfa5880*/ decimal op_Implicit(ushort value);
        static /*0xfa58d0*/ decimal op_Implicit(int value);
        static /*0xfa5870*/ decimal op_Implicit(uint value);
        static /*0xfa5810*/ decimal op_Implicit(long value);
        static /*0xfa5850*/ decimal op_Implicit(ulong value);
        static /*0xfa55f0*/ decimal op_Explicit(float value);
        static /*0xfa56a0*/ decimal op_Explicit(double value);
        static /*0xfa5450*/ long op_Explicit(decimal value);
        static /*0xfa56c0*/ float op_Explicit(decimal value);
        static /*0xfa5610*/ double op_Explicit(decimal value);
        static /*0xfa5d30*/ decimal op_UnaryNegation(decimal d);
        static /*0xfa5950*/ decimal op_Increment(decimal d);
        static /*0xfa5270*/ decimal op_Decrement(decimal d);
        static /*0xfa51d0*/ decimal op_Addition(decimal d1, decimal d2);
        static /*0xfa5c90*/ decimal op_Subtraction(decimal d1, decimal d2);
        static /*0xfa5bf0*/ decimal op_Multiply(decimal d1, decimal d2);
        static /*0xfa5350*/ decimal op_Division(decimal d1, decimal d2);
        static /*0xfa5b50*/ decimal op_Modulus(decimal d1, decimal d2);
        static /*0xfa53f0*/ bool op_Equality(decimal d1, decimal d2);
        static /*0xfa5a30*/ bool op_Inequality(decimal d1, decimal d2);
        static /*0xfa5af0*/ bool op_LessThan(decimal d1, decimal d2);
        static /*0xfa5a90*/ bool op_LessThanOrEqual(decimal d1, decimal d2);
        static /*0xfa57b0*/ bool op_GreaterThan(decimal d1, decimal d2);
        static /*0xfa5750*/ bool op_GreaterThanOrEqual(decimal d1, decimal d2);
        /*0xfa4e80*/ Decimal(int value);
        /*0xfa4df0*/ Decimal(uint value);
        /*0xfa4f70*/ Decimal(long value);
        /*0xfa4eb0*/ Decimal(ulong value);
        /*0xfa50f0*/ Decimal(float value);
        /*0xfa4e00*/ Decimal(double value);
        /*0xfa4fa0*/ Decimal(int[] bits);
        /*0xfa4ed0*/ Decimal(int lo, int mid, int hi, bool isNegative, byte scale);
        /*0xfa4ec0*/ Decimal(ref decimal d, int flags);
        /*0xa5a7c0*/ uint get_High();
        /*0x834a60*/ uint get_Low();
        /*0x837600*/ uint get_Mid();
        /*0xfa5170*/ bool get_IsNegative();
        /*0xfa51c0*/ int get_Scale();
        /*0xfa5180*/ ulong get_Low64();
        /*0xfa3fa0*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        /*0xfa3070*/ int CompareTo(object value);
        /*0xfa3180*/ int CompareTo(decimal value);
        /*0xfa32b0*/ bool Equals(object value);
        /*0xfa3250*/ bool Equals(decimal value);
        /*0xfa3370*/ int GetHashCode();
        /*0xfa4850*/ string ToString();
        /*0xfa4680*/ string ToString(string format);
        /*0xfa45d0*/ string ToString(System.IFormatProvider provider);
        /*0xfa4760*/ string ToString(string format, System.IFormatProvider provider);
        /*0xfa4c30*/ bool TryFormat(System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider);
        /*0xfa33c0*/ System.TypeCode GetTypeCode();
        /*0xfa39c0*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xfa3a80*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xfa3d20*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xfa3a20*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xfa3c00*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xfa3e80*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xfa3c60*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xfa3ee0*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xfa3cc0*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xfa3f40*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xfa3d80*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xfa3ba0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x6bba70*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xfa3b10*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xfa3de0*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);

        struct DecCalc
        {
            static /*0x0*/ uint[] s_powers10;
            static /*0x8*/ ulong[] s_ulongPowers10;
            static /*0x10*/ double[] s_doublePowers10;
            static /*0x18*/ System.Decimal.DecCalc.PowerOvfl[] PowerOvflValues;
            /*0x10*/ uint uflags;
            /*0x14*/ uint uhi;
            /*0x18*/ uint ulo;
            /*0x1c*/ uint umid;
            /*0x18*/ ulong ulomidLE;

            static /*0xfc2900*/ DecCalc();
            static /*0xfbee20*/ uint GetExponent(float f);
            static /*0xfbee10*/ uint GetExponent(double d);
            static /*0xf578c0*/ ulong UInt32x32To64(uint a, uint b);
            static /*0xfbfee0*/ void UInt64x64To128(ulong a, ulong b, ref System.Decimal.DecCalc result);
            static /*0xfbeb70*/ uint Div96By32(ref System.Decimal.DecCalc.Buf12 bufNum, uint den);
            static /*0xfbed30*/ bool Div96ByConst(ref ulong high64, ref uint low, uint pow);
            static /*0xfc0050*/ void Unscale(ref uint low, ref ulong high64, ref int scale);
            static /*0xfbebe0*/ uint Div96By64(ref System.Decimal.DecCalc.Buf12 bufNum, ulong den);
            static /*0xfbea50*/ uint Div128By96(ref System.Decimal.DecCalc.Buf16 bufNum, ref System.Decimal.DecCalc.Buf12 bufDen);
            static /*0xfbf000*/ uint IncreaseScale(ref System.Decimal.DecCalc.Buf12 bufNum, uint power);
            static /*0xfbef80*/ void IncreaseScale64(ref System.Decimal.DecCalc.Buf12 bufNum, uint power);
            static /*0xfbf520*/ int ScaleResult(System.Decimal.DecCalc.Buf24* bufRes, uint hiRes, int scale);
            static /*0xfbed90*/ uint DivByConst(uint* result, uint hiRes, ref uint quotient, ref uint remainder, uint power);
            static /*0xfbf3a0*/ int LeadingZeroCount(uint value);
            static /*0xfbf400*/ int OverflowUnscale(ref System.Decimal.DecCalc.Buf12 bufQuo, int scale, bool sticky);
            static /*0xfbfd00*/ int SearchScale(ref System.Decimal.DecCalc.Buf12 bufQuo, int scale);
            static /*0xfbe280*/ bool Add32To96(ref System.Decimal.DecCalc.Buf12 bufNum, uint value);
            static /*0xfbe2a0*/ void DecAddSub(ref System.Decimal.DecCalc d1, ref System.Decimal.DecCalc d2, bool sign);
            static /*0xfc0420*/ int VarDecCmp(ref decimal d1, ref decimal d2);
            static /*0xfc0250*/ int VarDecCmpSub(ref decimal d1, ref decimal d2);
            static /*0xfc2140*/ void VarDecMul(ref System.Decimal.DecCalc d1, ref System.Decimal.DecCalc d2);
            static /*0xfc10c0*/ void VarDecFromR4(float input, ref System.Decimal.DecCalc result);
            static /*0xfc14c0*/ void VarDecFromR8(double input, ref System.Decimal.DecCalc result);
            static /*0xfc2670*/ float VarR4FromDec(ref decimal value);
            static /*0xfc27d0*/ double VarR8FromDec(ref decimal value);
            static /*0xfbee30*/ int GetHashCode(ref decimal d);
            static /*0xfc0530*/ void VarDecDiv(ref System.Decimal.DecCalc d1, ref System.Decimal.DecCalc d2);
            static /*0xfc1d40*/ void VarDecMod(ref System.Decimal.DecCalc d1, ref System.Decimal.DecCalc d2);
            static /*0xfc18b0*/ void VarDecModFull(ref System.Decimal.DecCalc d1, ref System.Decimal.DecCalc d2, int scale);
            static /*0xfbf090*/ void InternalRound(ref System.Decimal.DecCalc d, uint scale, System.Decimal.DecCalc.RoundingMode mode);
            static /*0xfbe9d0*/ uint DecDivMod1E9(ref System.Decimal.DecCalc value);
            /*0xa5a7c0*/ uint get_High();
            /*0xfc2c10*/ void set_High(uint value);
            /*0x834a60*/ uint get_Low();
            /*0xf0fbd0*/ void set_Low(uint value);
            /*0x837600*/ uint get_Mid();
            /*0xf0fbc0*/ void set_Mid(uint value);
            /*0xfa5170*/ bool get_IsNegative();
            /*0xfbbe70*/ ulong get_Low64();
            /*0xfbbe80*/ void set_Low64(ulong value);

            enum RoundingMode
            {
                ToEven = 0,
                AwayFromZero = 1,
                Truncate = 2,
                Floor = 3,
                Ceiling = 4,
            }

            struct PowerOvfl
            {
                /*0x10*/ uint Hi;
                /*0x18*/ ulong MidLo;

                /*0xfc7af0*/ PowerOvfl(uint hi, uint mid, uint lo);
            }

            struct Buf12
            {
                /*0x10*/ uint U0;
                /*0x14*/ uint U1;
                /*0x18*/ uint U2;
                /*0x10*/ ulong ulo64LE;
                /*0x14*/ ulong uhigh64LE;

                /*0x69af20*/ ulong get_Low64();
                /*0x9e29e0*/ void set_Low64(ulong value);
                /*0xfbbe50*/ ulong get_High64();
                /*0xfbbe60*/ void set_High64(ulong value);
            }

            struct Buf16
            {
                /*0x10*/ uint U0;
                /*0x14*/ uint U1;
                /*0x18*/ uint U2;
                /*0x1c*/ uint U3;
                /*0x10*/ ulong ulo64LE;
                /*0x18*/ ulong uhigh64LE;

                /*0x69af20*/ ulong get_Low64();
                /*0x9e29e0*/ void set_Low64(ulong value);
                /*0xfbbe70*/ ulong get_High64();
                /*0xfbbe80*/ void set_High64(ulong value);
            }

            struct Buf24
            {
                /*0x10*/ uint U0;
                /*0x14*/ uint U1;
                /*0x18*/ uint U2;
                /*0x1c*/ uint U3;
                /*0x20*/ uint U4;
                /*0x24*/ uint U5;
                /*0x10*/ ulong ulo64LE;
                /*0x18*/ ulong umid64LE;
                /*0x20*/ ulong uhigh64LE;

                /*0x69af20*/ ulong get_Low64();
                /*0x9e29e0*/ void set_Low64(ulong value);
                /*0xfbbe80*/ void set_Mid64(ulong value);
                /*0xeb40e0*/ void set_High64(ulong value);
            }

            struct Buf28
            {
                /*0x10*/ System.Decimal.DecCalc.Buf24 Buf24;
                /*0x28*/ uint U6;
            }
        }
    }

    namespace Threading
    {
        class AbandonedMutexException : System.SystemException
        {
            /*0x90*/ int _mutexIndex;
            /*0x98*/ System.Threading.Mutex _mutex;

            /*0xfbbd10*/ AbandonedMutexException();
            /*0xfbbd60*/ AbandonedMutexException(int location, System.Threading.WaitHandle handle);
            /*0xfbbe20*/ AbandonedMutexException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xfbbc80*/ void SetupException(int location, System.Threading.WaitHandle handle);
        }

        class AsyncLocal<T> : System.Threading.IAsyncLocal
        {
            /*0x0*/ System.Action<System.Threading.AsyncLocalValueChangedArgs<T>> m_valueChangedHandler;

            /*0x17aec0*/ AsyncLocal(System.Action<System.Threading.AsyncLocalValueChangedArgs<T>> valueChangedHandler);
            /*0x2a5510*/ void set_Value(T value);
            void System.Threading.IAsyncLocal.OnValueChanged(object previousValueObj, object currentValueObj, bool contextChanged);
        }

        interface IAsyncLocal
        {
            void OnValueChanged(object previousValue, object currentValue, bool contextChanged);
        }

        struct AsyncLocalValueChangedArgs<T>
        {
            /*0x0*/ T <PreviousValue>k__BackingField;
            /*0x0*/ T <CurrentValue>k__BackingField;
            /*0x0*/ bool <ThreadContextChanged>k__BackingField;

            /*0x2a5510*/ AsyncLocalValueChangedArgs(T previousValue, T currentValue, bool contextChanged);
            /*0x2a5510*/ T get_CurrentValue();
        }

        enum EventResetMode
        {
            AutoReset = 0,
            ManualReset = 1,
        }

        class LazyInitializer
        {
            static /*0x2a5510*/ T EnsureInitialized<T>(ref T target);
            static /*0x2a5510*/ T EnsureInitializedCore<T>(ref T target);
            static /*0x2a5510*/ T EnsureInitialized<T>(ref T target, System.Func<T> valueFactory);
            static /*0x2a5510*/ T EnsureInitializedCore<T>(ref T target, System.Func<T> valueFactory);
        }

        enum LazyThreadSafetyMode
        {
            None = 0,
            PublicationOnly = 1,
            ExecutionAndPublication = 2,
        }

        class LockRecursionException : System.Exception
        {
            /*0xfc5120*/ LockRecursionException();
            /*0xfc5170*/ LockRecursionException(string message);
            /*0xfc50a0*/ LockRecursionException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ManualResetEvent : System.Threading.EventWaitHandle
        {
            /*0xfc6d00*/ ManualResetEvent(bool initialState);
        }

        class ParameterizedThreadStart : System.MulticastDelegate
        {
            /*0xfbe150*/ ParameterizedThreadStart(object object, nint method);
            /*0x720980*/ void Invoke(object obj);
        }

        class SemaphoreFullException : System.SystemException
        {
            /*0xfc8370*/ SemaphoreFullException();
            /*0xe291b0*/ SemaphoreFullException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class SendOrPostCallback : System.MulticastDelegate
        {
            /*0xfbe150*/ SendOrPostCallback(object object, nint method);
            /*0x720980*/ void Invoke(object state);
        }

        class SynchronizationLockException : System.SystemException
        {
            /*0xfcb7e0*/ SynchronizationLockException();
            /*0xfcb7c0*/ SynchronizationLockException(string message);
            /*0xe291b0*/ SynchronizationLockException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ThreadStart : System.MulticastDelegate
        {
            /*0xe25c50*/ ThreadStart(object object, nint method);
            /*0x9dbe20*/ void Invoke();
        }

        enum ThreadState
        {
            Running = 0,
            StopRequested = 1,
            SuspendRequested = 2,
            Background = 4,
            Unstarted = 8,
            Stopped = 16,
            WaitSleepJoin = 32,
            Suspended = 64,
            AbortRequested = 128,
            Aborted = 256,
        }

        class ThreadStateException : System.SystemException
        {
            /*0xfcdc90*/ ThreadStateException();
            /*0xfcdc70*/ ThreadStateException(string message);
            /*0xe291b0*/ ThreadStateException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Timeout
        {
            static /*0x0*/ System.TimeSpan InfiniteTimeSpan;

            static /*0xfcf400*/ Timeout();
        }

        class WaitHandleCannotBeOpenedException : System.ApplicationException
        {
            /*0xfd00e0*/ WaitHandleCannotBeOpenedException();
            /*0xfd0130*/ WaitHandleCannotBeOpenedException(string message);
            /*0xea7150*/ WaitHandleCannotBeOpenedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        struct CancellationToken
        {
            static /*0x0*/ System.Action<object> s_actionToActionObjShunt;
            /*0x10*/ System.Threading.CancellationTokenSource _source;

            static /*0xfbdf70*/ CancellationToken();
            static /*0x388e90*/ System.Threading.CancellationToken get_None();
            static /*0xfbe090*/ bool op_Equality(System.Threading.CancellationToken left, System.Threading.CancellationToken right);
            static /*0xfbe0f0*/ bool op_Inequality(System.Threading.CancellationToken left, System.Threading.CancellationToken right);
            /*0x792990*/ CancellationToken(System.Threading.CancellationTokenSource source);
            /*0xfbe050*/ bool get_IsCancellationRequested();
            /*0xfbe040*/ bool get_CanBeCanceled();
            /*0xfbdc80*/ System.Threading.CancellationTokenRegistration InternalRegisterWithoutEC(System.Action<object> callback, object state);
            /*0xfbdd30*/ System.Threading.CancellationTokenRegistration Register(System.Action<object> callback, object state, bool useSynchronizationContext, bool useExecutionContext);
            /*0xf50c20*/ bool Equals(System.Threading.CancellationToken other);
            /*0xfbdb60*/ bool Equals(object other);
            /*0xfbdc00*/ int GetHashCode();
            /*0xfbde90*/ void ThrowIfCancellationRequested();
            /*0xfbdf10*/ void ThrowOperationCanceledException();

            class <>c
            {
                static /*0x0*/ System.Threading.CancellationToken.<> <>9;

                static /*0xfcf630*/ <>c();
                /*0x32f970*/ <>c();
                /*0xfcf4d0*/ void <.cctor>b__26_0(object obj);
            }
        }

        class ManualResetEventSlim : System.IDisposable
        {
            static /*0x0*/ System.Action<object> s_cancellationTokenCallback;
            /*0x10*/ object m_lock;
            /*0x18*/ System.Threading.ManualResetEvent m_eventObj;
            /*0x20*/ int m_combinedState;

            static /*0xfc6770*/ ManualResetEventSlim();
            static /*0xfc5260*/ void CancellationTokenCallback(object obj);
            static /*0xfc56d0*/ int ExtractStatePortionAndShiftRight(int state, int mask, int rightBitShiftCount);
            static /*0xfc56e0*/ int ExtractStatePortion(int state, int mask);
            /*0xfc6800*/ ManualResetEventSlim(bool initialState);
            /*0xfc6900*/ ManualResetEventSlim(bool initialState, int spinCount);
            /*0xfc6af0*/ System.Threading.WaitHandle get_WaitHandle();
            /*0xfc6a30*/ bool get_IsSet();
            /*0xfc6be0*/ void set_IsSet(bool value);
            /*0xfc6a90*/ int get_SpinCount();
            /*0xfc6c10*/ void set_SpinCount(int value);
            /*0xfc6b90*/ int get_Waiters();
            /*0xfc6c50*/ void set_Waiters(int value);
            /*0xfc56f0*/ void Initialize(bool initialState, int spinCount);
            /*0xfc5640*/ void EnsureLockObjectCreated();
            /*0xfc57b0*/ bool LazyInitializeEvent();
            /*0xfc5a40*/ void Set();
            /*0xfc5a50*/ void Set(bool duringCancellation);
            /*0xfc5f40*/ bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0xfc5470*/ void Dispose();
            /*0xfc54e0*/ void Dispose(bool disposing);
            /*0xfc5dd0*/ void ThrowIfDisposed();
            /*0xfc5e40*/ void UpdateStateAtomically(int newBits, int updateBitsMask);
        }

        struct NativeOverlapped
        {
            /*0x10*/ nint InternalLow;
            /*0x18*/ nint InternalHigh;
            /*0x20*/ int OffsetLow;
            /*0x24*/ int OffsetHigh;
            /*0x28*/ nint EventHandle;
        }

        struct SpinWait
        {
            static /*0x0*/ int SpinCountforSpinBeforeWait;
            /*0x10*/ int _count;

            static /*0xfcaf80*/ SpinWait();
            /*0x6bba50*/ int get_Count();
            /*0xfcb000*/ bool get_NextSpinWillYield();
            /*0xfcae30*/ void SpinOnce();
            /*0xfcae80*/ void SpinOnce(int sleep1Threshold);
            /*0xfcaca0*/ void SpinOnceCore(int sleep1Threshold);
        }

        class PlatformHelper
        {
            static /*0x0*/ int s_processorCount;
            static /*0x4*/ int s_lastProcessorCountRefreshTicks;
            static /*0x8*/ bool IsSingleProcessor;

            static /*0xfc7990*/ PlatformHelper();
            static /*0xfc79e0*/ int get_ProcessorCount();
        }

        class TimeoutHelper
        {
            static /*0xfcf3b0*/ uint GetTime();
            static /*0xfcf3c0*/ int UpdateTimeOut(uint startTime, int originalWaitMillisecondsTimeout);
        }

        struct CancellationTokenRegistration : System.IEquatable<System.Threading.CancellationTokenRegistration>, System.IDisposable
        {
            /*0x10*/ System.Threading.CancellationCallbackInfo m_callbackInfo;
            /*0x18*/ System.Threading.SparselyPopulatedArrayAddInfo<System.Threading.CancellationCallbackInfo> m_registrationInfo;

            /*0xa59d50*/ CancellationTokenRegistration(System.Threading.CancellationCallbackInfo callbackInfo, System.Threading.SparselyPopulatedArrayAddInfo<System.Threading.CancellationCallbackInfo> registrationInfo);
            /*0xfbc480*/ bool Unregister();
            /*0xfbc100*/ void Dispose();
            /*0xfbc2e0*/ bool Equals(object obj);
            /*0xfbc250*/ bool Equals(System.Threading.CancellationTokenRegistration other);
            /*0xfbc3d0*/ int GetHashCode();
        }

        class CancellationTokenSource : System.IDisposable
        {
            static int CannotBeCanceled = 0;
            static int NotCanceledState = 1;
            static int NotifyingState = 2;
            static int NotifyingCompleteState = 3;
            static /*0x0*/ System.Threading.CancellationTokenSource s_canceledSource;
            static /*0x8*/ System.Threading.CancellationTokenSource s_neverCanceledSource;
            static /*0x10*/ int s_nLists;
            static /*0x18*/ System.Threading.TimerCallback s_timerCallback;
            /*0x10*/ System.Threading.ManualResetEvent _kernelEvent;
            /*0x18*/ System.Threading.SparselyPopulatedArray<System.Threading.CancellationCallbackInfo> _registeredCallbacksLists;
            /*0x20*/ int _state;
            /*0x24*/ int _threadIDExecutingCallbacks;
            /*0x28*/ bool _disposed;
            /*0x30*/ System.Threading.CancellationCallbackInfo _executingCallback;
            /*0x38*/ System.Threading.Timer _timer;

            static /*0xfbd870*/ CancellationTokenSource();
            static /*0xfbd6b0*/ void TimerCallbackLogic(object obj);
            static /*0xfbd650*/ void ThrowObjectDisposedException();
            static /*0xfbc850*/ System.Threading.CancellationTokenSource CreateLinkedTokenSource(System.Threading.CancellationToken token1, System.Threading.CancellationToken token2);
            static /*0xfbcbc0*/ System.Threading.CancellationTokenSource CreateLinkedTokenSource(System.Threading.CancellationToken token);
            /*0xfbda30*/ CancellationTokenSource();
            /*0xfbda90*/ bool get_IsCancellationRequested();
            /*0xfbda70*/ bool get_IsCancellationCompleted();
            /*0x4ba480*/ bool get_IsDisposed();
            /*0xfbdab0*/ int get_ThreadIDExecutingCallbacks();
            /*0xfbdb30*/ void set_ThreadIDExecutingCallbacks(int value);
            /*0xfbdad0*/ System.Threading.CancellationToken get_Token();
            /*0xee1ad0*/ System.Threading.CancellationCallbackInfo get_ExecutingCallback();
            /*0xfbc570*/ void Cancel();
            /*0xfbc510*/ void Cancel(bool throwOnFirstException);
            /*0xfbcc90*/ void Dispose();
            /*0xfbcd00*/ void Dispose(bool disposing);
            /*0xfbd600*/ void ThrowIfDisposed();
            /*0xfbd210*/ System.Threading.CancellationTokenRegistration InternalRegister(System.Action<object> callback, object stateForCallback, System.Threading.SynchronizationContext targetSyncContext, System.Threading.ExecutionContext executionContext);
            /*0xfbd560*/ void NotifyCancellation(bool throwOnFirstException);
            /*0xfbcdb0*/ void ExecuteCallbackHandlers(bool throwOnFirstException);
            /*0xfbc5d0*/ void CancellationCallbackCoreWork_OnSyncContext(object obj);
            /*0xfbc650*/ void CancellationCallbackCoreWork(System.Threading.CancellationCallbackCoreWorkArguments args);
            /*0xfbd7a0*/ void WaitForCallbackToComplete(System.Threading.CancellationCallbackInfo callbackInfo);

            class Linked1CancellationTokenSource : System.Threading.CancellationTokenSource
            {
                /*0x40*/ System.Threading.CancellationTokenRegistration _reg1;

                /*0xfc4c10*/ Linked1CancellationTokenSource(System.Threading.CancellationToken token1);
                /*0xfc4bd0*/ void Dispose(bool disposing);
            }

            class Linked2CancellationTokenSource : System.Threading.CancellationTokenSource
            {
                /*0x40*/ System.Threading.CancellationTokenRegistration _reg1;
                /*0x58*/ System.Threading.CancellationTokenRegistration _reg2;

                /*0xfc4da0*/ Linked2CancellationTokenSource(System.Threading.CancellationToken token1, System.Threading.CancellationToken token2);
                /*0xfc4d50*/ void Dispose(bool disposing);
            }

            class LinkedNCancellationTokenSource : System.Threading.CancellationTokenSource
            {
                static /*0x0*/ System.Action<object> s_linkedTokenCancelDelegate;

                static /*0xfc4f70*/ LinkedNCancellationTokenSource();

                class <>c
                {
                    static /*0x0*/ System.Threading.CancellationTokenSource.LinkedNCancellationTokenSource.<> <>9;

                    static /*0xfcf5c0*/ <>c();
                    /*0x32f970*/ <>c();
                    /*0xfcf540*/ void <.cctor>b__4_0(object s);
                }
            }
        }

        struct CancellationCallbackCoreWorkArguments
        {
            /*0x10*/ System.Threading.SparselyPopulatedArrayFragment<System.Threading.CancellationCallbackInfo> _currArrayFragment;
            /*0x18*/ int _currArrayIndex;

            /*0xa59f80*/ CancellationCallbackCoreWorkArguments(System.Threading.SparselyPopulatedArrayFragment<System.Threading.CancellationCallbackInfo> currArrayFragment, int currArrayIndex);
        }

        class CancellationCallbackInfo
        {
            static /*0x0*/ System.Threading.ContextCallback s_executionContextCallback;
            /*0x10*/ System.Action<object> Callback;
            /*0x18*/ object StateForCallback;
            /*0x20*/ System.Threading.ExecutionContext TargetExecutionContext;
            /*0x28*/ System.Threading.CancellationTokenSource CancellationTokenSource;

            static /*0xfbc000*/ void ExecutionContextCallback(object obj);
            /*0xfbc080*/ CancellationCallbackInfo(System.Action<object> callback, object stateForCallback, System.Threading.ExecutionContext targetExecutionContext, System.Threading.CancellationTokenSource cancellationTokenSource);
            /*0xfbbe90*/ void ExecuteCallback();

            class WithSyncContext : System.Threading.CancellationCallbackInfo
            {
                /*0x30*/ System.Threading.SynchronizationContext TargetSyncContext;

                /*0xfd1580*/ WithSyncContext(System.Action<object> callback, object stateForCallback, System.Threading.ExecutionContext targetExecutionContext, System.Threading.CancellationTokenSource cancellationTokenSource, System.Threading.SynchronizationContext targetSyncContext);
            }
        }

        class SparselyPopulatedArray<T>
        {
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _head;
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _tail;

            /*0x17aa40*/ SparselyPopulatedArray(int initialSize);
            /*0x1803b0*/ System.Threading.SparselyPopulatedArrayFragment<T> get_Tail();
            /*0x2a5510*/ System.Threading.SparselyPopulatedArrayAddInfo<T> Add(T element);
        }

        struct SparselyPopulatedArrayAddInfo<T>
        {
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _source;
            /*0x0*/ int _index;

            /*0x182a70*/ SparselyPopulatedArrayAddInfo(System.Threading.SparselyPopulatedArrayFragment<T> source, int index);
            /*0x1803b0*/ System.Threading.SparselyPopulatedArrayFragment<T> get_Source();
            /*0x180980*/ int get_Index();
        }

        class SparselyPopulatedArrayFragment<T>
        {
            /*0x0*/ T[] _elements;
            /*0x0*/ int _freeCount;
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _next;
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> _prev;

            /*0x17aa40*/ SparselyPopulatedArrayFragment(int size);
            SparselyPopulatedArrayFragment(int size, System.Threading.SparselyPopulatedArrayFragment<T> prev);
            /*0x2a5510*/ T get_Item(int index);
            /*0x180980*/ int get_Length();
            /*0x1803b0*/ System.Threading.SparselyPopulatedArrayFragment<T> get_Prev();
            /*0x2a5510*/ T SafeAtomicRemove(int index, T expectedElement);
        }

        struct LockHolder : System.IDisposable
        {
            /*0x10*/ System.Threading.Lock _lock;

            static /*0xfc5060*/ System.Threading.LockHolder Hold(System.Threading.Lock l);
            /*0xfc5040*/ void Dispose();
        }

        class Lock
        {
            /*0x10*/ object _lock;

            /*0xfc51f0*/ Lock();
            /*0xfc51d0*/ void Acquire();
            /*0xfc51e0*/ void Release();
        }

        class SemaphoreSlim : System.IDisposable
        {
            static /*0x0*/ System.Threading.Tasks.Task<bool> s_trueTask;
            static /*0x8*/ System.Threading.Tasks.Task<bool> s_falseTask;
            static /*0x10*/ System.Action<object> s_cancellationTokenCanceledEventHandler;
            /*0x10*/ int m_currentCount;
            /*0x14*/ int m_maxCount;
            /*0x18*/ int m_waitCount;
            /*0x20*/ object m_lockObj;
            /*0x28*/ System.Threading.ManualResetEvent m_waitHandle;
            /*0x30*/ System.Threading.SemaphoreSlim.TaskNode m_asyncHead;
            /*0x38*/ System.Threading.SemaphoreSlim.TaskNode m_asyncTail;

            static /*0xfc9c50*/ SemaphoreSlim();
            static /*0xfc8840*/ void QueueWaiterTask(System.Threading.SemaphoreSlim.TaskNode waiterTask);
            static /*0xfc83b0*/ void CancellationTokenCanceledEventHandler(object obj);
            static /*0xfc8830*/ string GetResourceString(string str);
            /*0xfc9dc0*/ SemaphoreSlim(int initialCount, int maxCount);
            /*0xfc9c40*/ void Wait();
            /*0xfc9560*/ bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0xfc9440*/ bool WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, System.Threading.CancellationToken cancellationToken);
            /*0xfc8d20*/ System.Threading.Tasks.Task WaitAsync();
            /*0xfc8d30*/ System.Threading.Tasks.Task<bool> WaitAsync(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0xfc8640*/ System.Threading.SemaphoreSlim.TaskNode CreateAndAddAsyncWaiter();
            /*0xfc8c30*/ bool RemoveAsyncWaiter(System.Threading.SemaphoreSlim.TaskNode task);
            /*0xfc92f0*/ System.Threading.Tasks.Task<bool> WaitUntilCountOrTimeoutAsync(System.Threading.SemaphoreSlim.TaskNode asyncWaiter, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0xfc8c20*/ int Release();
            /*0xfc8850*/ int Release(int releaseCount);
            /*0xfc8710*/ void Dispose();
            /*0xfc8780*/ void Dispose(bool disposing);
            /*0xfc85b0*/ void CheckDispose();

            class TaskNode : System.Threading.Tasks.Task<bool>, System.Threading.IThreadPoolWorkItem
            {
                /*0x58*/ System.Threading.SemaphoreSlim.TaskNode Prev;
                /*0x60*/ System.Threading.SemaphoreSlim.TaskNode Next;

                /*0xfcb870*/ TaskNode();
                /*0xfcb830*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x32d010*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
            }

            struct <WaitUntilCountOrTimeoutAsync>d__32 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<bool> <>t__builder;
                /*0x30*/ System.Threading.CancellationToken cancellationToken;
                /*0x38*/ System.Threading.SemaphoreSlim.TaskNode asyncWaiter;
                /*0x40*/ int millisecondsTimeout;
                /*0x48*/ System.Threading.SemaphoreSlim <>4__this;
                /*0x50*/ System.Threading.CancellationTokenSource <cts>5__2;
                /*0x58*/ object <>7__wrap2;
                /*0x60*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<System.Threading.Tasks.Task> <>u__1;
                /*0x70*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<bool> <>u__2;

                /*0xfcf710*/ void MoveNext();
                /*0xfd0070*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }
        }

        struct SpinLock
        {
            static /*0x0*/ int MAXIMUM_WAITERS;
            /*0x10*/ int m_owner;

            static /*0xfcaad0*/ SpinLock();
            /*0xfcab10*/ SpinLock(bool enableThreadOwnerTracking);
            /*0xfca790*/ void Enter(ref bool lockTaken);
            /*0xfcaa10*/ void TryEnter(int millisecondsTimeout, ref bool lockTaken);
            /*0xfca210*/ void ContinueTryEnter(int millisecondsTimeout, ref bool lockTaken);
            /*0xfca6c0*/ void DecrementWaiters();
            /*0xfc9fa0*/ void ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, ref bool lockTaken);
            /*0xfca980*/ void Exit(bool useMemoryBarrier);
            /*0xfca840*/ void ExitSlowPath(bool useMemoryBarrier);
            /*0xfcab50*/ bool get_IsHeldByCurrentThread();
            /*0xfcac80*/ bool get_IsThreadOwnerTrackingEnabled();

            class SystemThreading_SpinLockDebugView
            {
            }
        }

        class EventWaitHandle : System.Threading.WaitHandle
        {
            /*0xfc2ce0*/ EventWaitHandle(bool initialState, System.Threading.EventResetMode mode);
            /*0xfc2d00*/ EventWaitHandle(bool initialState, System.Threading.EventResetMode mode, string name);
            /*0xfc2c20*/ bool Reset();
            /*0xfc2c80*/ bool Set();
        }

        class ContextCallback : System.MulticastDelegate
        {
            /*0xfbe150*/ ContextCallback(object object, nint method);
            /*0x720980*/ void Invoke(object state);
        }

        struct ExecutionContextSwitcher
        {
            /*0x10*/ System.Threading.ExecutionContext.Reader outerEC;
            /*0x18*/ bool outerECBelongsToScope;
            /*0x20*/ object hecsw;
            /*0x28*/ System.Threading.Thread thread;

            /*0xfc3090*/ bool UndoNoThrow();
            /*0xfc30b0*/ void Undo();
        }

        class ExecutionContext : System.IDisposable, System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Threading.ExecutionContext s_dummyDefaultEC;
            static /*0x8*/ System.Threading.ExecutionContext Default;
            /*0x10*/ System.Threading.SynchronizationContext _syncContext;
            /*0x18*/ System.Threading.SynchronizationContext _syncContextNoFlow;
            /*0x20*/ System.Runtime.Remoting.Messaging.LogicalCallContext _logicalCallContext;
            /*0x28*/ System.Runtime.Remoting.Messaging.IllogicalCallContext _illogicalCallContext;
            /*0x30*/ System.Threading.ExecutionContext.Flags _flags;
            /*0x38*/ System.Collections.Generic.Dictionary<System.Threading.IAsyncLocal, object> _localValues;
            /*0x40*/ System.Collections.Generic.List<System.Threading.IAsyncLocal> _localChangeNotifications;

            static /*0xfc4680*/ ExecutionContext();
            static /*0xfc4390*/ void SetLocalValue(System.Threading.IAsyncLocal local, object newValue, bool needChangeNotifications);
            static /*0xfc3940*/ void OnAsyncLocalContextChanged(System.Threading.ExecutionContext previous, System.Threading.ExecutionContext current);
            static /*0xfc40b0*/ void Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state);
            static /*0xfc4020*/ void Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx);
            static /*0xfc3fa0*/ void RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state);
            static /*0xfc3d00*/ void RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx);
            static /*0xfc35c0*/ void EstablishCopyOnWriteScope(ref System.Threading.ExecutionContextSwitcher ecsw);
            static /*0xfc36a0*/ void EstablishCopyOnWriteScope(System.Threading.Thread currentThread, bool knownNullWindowsIdentity, ref System.Threading.ExecutionContextSwitcher ecsw);
            static /*0xfc41e0*/ System.Threading.ExecutionContextSwitcher SetExecutionContext(System.Threading.ExecutionContext executionContext, bool preserveSyncCtx);
            static /*0xfc38b0*/ bool IsFlowSuppressed();
            static /*0xfc33c0*/ System.Threading.ExecutionContext Capture();
            static /*0xfc3710*/ System.Threading.ExecutionContext FastCapture();
            static /*0xfc3170*/ System.Threading.ExecutionContext Capture(ref System.Threading.StackCrawlMark stackMark, System.Threading.ExecutionContext.CaptureOptions options);
            /*0x32f970*/ ExecutionContext();
            /*0xfc4740*/ ExecutionContext(bool isPreAllocatedDefault);
            /*0xfc4770*/ ExecutionContext(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xfc49b0*/ bool get_isNewCapture();
            /*0xfc49e0*/ void set_isNewCapture(bool value);
            /*0xfc49a0*/ bool get_isFlowSuppressed();
            /*0xfc49c0*/ void set_isFlowSuppressed(bool value);
            /*0xfc4920*/ bool get_IsPreAllocatedDefault();
            /*0xfc4930*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
            /*0x7965a0*/ void set_LogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext value);
            /*0xfc48b0*/ System.Runtime.Remoting.Messaging.IllogicalCallContext get_IllogicalCallContext();
            /*0x98b030*/ void set_IllogicalCallContext(System.Runtime.Remoting.Messaging.IllogicalCallContext value);
            /*0x73d3e0*/ System.Threading.SynchronizationContext get_SynchronizationContext();
            /*0x9f12f0*/ void set_SynchronizationContext(System.Threading.SynchronizationContext value);
            /*0x32f410*/ System.Threading.SynchronizationContext get_SynchronizationContextNoFlow();
            /*0x7963c0*/ void set_SynchronizationContextNoFlow(System.Threading.SynchronizationContext value);
            /*0x6b4390*/ void Dispose();
            /*0xfc3410*/ System.Threading.ExecutionContext CreateMutableCopy();
            /*0xfc3760*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xfc3860*/ bool IsDefaultFTContext(bool ignoreSyncCtx);

            enum Flags
            {
                None = 0,
                IsNewCapture = 1,
                IsFlowSuppressed = 2,
                IsPreAllocatedDefault = 4,
            }

            struct Reader
            {
                /*0x10*/ System.Threading.ExecutionContext m_ec;

                /*0x792990*/ Reader(System.Threading.ExecutionContext ec);
                /*0x6937d0*/ System.Threading.ExecutionContext DangerousGetRawExecutionContext();
                /*0xe832e0*/ bool get_IsNull();
                /*0xfc8270*/ bool IsDefaultFTContext(bool ignoreSyncCtx);
                /*0xfc82d0*/ bool get_IsFlowSuppressed();
                /*0xfc8350*/ System.Threading.SynchronizationContext get_SynchronizationContext();
                /*0xfc8330*/ System.Threading.SynchronizationContext get_SynchronizationContextNoFlow();
                /*0xfc82f0*/ System.Runtime.Remoting.Messaging.LogicalCallContext.Reader get_LogicalCallContext();
                /*0xfc8240*/ bool HasSameLocalValues(System.Threading.ExecutionContext other);
            }

            enum CaptureOptions
            {
                None = 0,
                IgnoreSyncCtx = 1,
                OptimizeDefaultCase = 2,
            }
        }

        class Monitor
        {
            static /*0xfc6da0*/ void Enter(object obj);
            static /*0xfc6d20*/ void Enter(object obj, ref bool lockTaken);
            static /*0xfc7250*/ void ThrowLockTakenException();
            static /*0xfc6db0*/ void Exit(object obj);
            static /*0xfc72c0*/ bool Wait(object obj, int millisecondsTimeout, bool exitContext);
            static /*0xfc72c0*/ bool Wait(object obj, int millisecondsTimeout);
            static /*0xfc7070*/ void Pulse(object obj);
            static /*0xfc6fb0*/ void PulseAll(object obj);
            static /*0xfc6de0*/ bool Monitor_test_synchronised(object obj);
            static /*0xfc6dd0*/ void Monitor_pulse(object obj);
            static /*0xfc6e70*/ void ObjPulse(object obj);
            static /*0xfc6dc0*/ void Monitor_pulse_all(object obj);
            static /*0xfc6e00*/ void ObjPulseAll(object obj);
            static /*0xfc6df0*/ bool Monitor_wait(object obj, int ms);
            static /*0xfc6ee0*/ bool ObjWait(bool exitContext, int millisecondsTimeout, object obj);
            static /*0xfc73e0*/ void try_enter_with_atomic_var(object obj, int millisecondsTimeout, ref bool lockTaken);
            static /*0xfc7130*/ void ReliableEnterTimeout(object obj, int timeout, ref bool lockTaken);
            static /*0xfc71e0*/ void ReliableEnter(object obj, ref bool lockTaken);
        }

        enum SynchronizationContextProperties
        {
            None = 0,
            RequireWaitNotification = 1,
        }

        class SynchronizationContext
        {
            static /*0x0*/ System.Type s_cachedPreparedType1;
            static /*0x8*/ System.Type s_cachedPreparedType2;
            static /*0x10*/ System.Type s_cachedPreparedType3;
            static /*0x18*/ System.Type s_cachedPreparedType4;
            static /*0x20*/ System.Type s_cachedPreparedType5;
            /*0x10*/ System.Threading.SynchronizationContextProperties _props;

            static /*0xfcb3e0*/ int WaitHelper(nint[] waitHandles, bool waitAll, int millisecondsTimeout);
            static /*0xfcb340*/ void SetSynchronizationContext(System.Threading.SynchronizationContext syncContext);
            static /*0xfcb570*/ System.Threading.SynchronizationContext get_Current();
            static /*0xfcb0c0*/ System.Threading.SynchronizationContext GetThreadLocalContext();
            static /*0xfcb560*/ System.Threading.SynchronizationContext get_CurrentExplicit();
            /*0x32f970*/ SynchronizationContext();
            /*0xfcb280*/ bool IsWaitNotificationRequired();
            /*0xfcb310*/ void Send(System.Threading.SendOrPostCallback d, object state);
            /*0xfcb290*/ void Post(System.Threading.SendOrPostCallback d, object state);
            /*0xfcb480*/ int Wait(nint[] waitHandles, bool waitAll, int millisecondsTimeout);
            /*0xfcb070*/ System.Threading.SynchronizationContext CreateCopy();
        }

        class OSSpecificSynchronizationContext : System.Threading.SynchronizationContext
        {
            static /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Threading.OSSpecificSynchronizationContext> s_ContextCache;
            /*0x18*/ object m_OSSynchronizationContext;

            static /*0xfc7900*/ OSSpecificSynchronizationContext();
            static /*0xfc7470*/ System.Threading.OSSpecificSynchronizationContext Get();
            static /*0xfc7600*/ void InvocationEntry(nint arg);
            static /*0xfc7460*/ object GetOSContext();
            static /*0xfc76f0*/ void PostInternal(object osSynchronizationContext, nint callback, nint arg);
            /*0xe78ae0*/ OSSpecificSynchronizationContext(object osContext);
            /*0xfc73f0*/ System.Threading.SynchronizationContext CreateCopy();
            /*0xfc78c0*/ void Send(System.Threading.SendOrPostCallback d, object state);
            /*0xfc7700*/ void Post(System.Threading.SendOrPostCallback d, object state);

            class InvocationEntryDelegate : System.MulticastDelegate
            {
                /*0x721750*/ InvocationEntryDelegate(object object, nint method);
                /*0x720980*/ void Invoke(nint arg);
            }

            class InvocationContext
            {
                /*0x10*/ System.Threading.SendOrPostCallback m_Delegate;
                /*0x18*/ object m_State;

                /*0xce3b90*/ InvocationContext(System.Threading.SendOrPostCallback d, object state);
                /*0xfc4ba0*/ void Invoke();
            }

            class <>c
            {
                static /*0x0*/ System.Threading.OSSpecificSynchronizationContext.<> <>9;
                static /*0x8*/ System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback<object, System.Threading.OSSpecificSynchronizationContext> <>9__3_0;

                static /*0xfcf6a0*/ <>c();
                /*0x32f970*/ <>c();
                /*0xfcf470*/ System.Threading.OSSpecificSynchronizationContext <Get>b__3_0(object _osContext);
            }
        }

        class ThreadHelper
        {
            static /*0x0*/ System.Threading.ContextCallback _ccb;
            /*0x10*/ System.Delegate _start;
            /*0x18*/ object _startArg;
            /*0x20*/ System.Threading.ExecutionContext _executionContext;

            static /*0xfcbc70*/ ThreadHelper();
            static /*0xfcb920*/ void ThreadStart_Context(object state);
            /*0x49b490*/ ThreadHelper(System.Delegate start);
            /*0x7965a0*/ void SetExecutionContextHelper(System.Threading.ExecutionContext ec);
            /*0xfcba40*/ void ThreadStart(object obj);
            /*0xfcbb60*/ void ThreadStart();
        }

        class Thread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
        {
            static /*0x0*/ System.LocalDataStoreMgr s_LocalDataStoreMgr;
            static /*0x8*/ System.Threading.AsyncLocal<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture;
            static /*0x10*/ System.Threading.AsyncLocal<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture;
            [ThreadStatic] static System.LocalDataStoreHolder s_LocalDataStore;
            [ThreadStatic] static System.Globalization.CultureInfo m_CurrentCulture;
            [ThreadStatic] static System.Globalization.CultureInfo m_CurrentUICulture;
            [ThreadStatic] static System.Threading.Thread current_thread;
            /*0x10*/ System.Threading.InternalThread internal_thread;
            /*0x18*/ object m_ThreadStartArg;
            /*0x20*/ object pending_exception;
            /*0x28*/ System.MulticastDelegate m_Delegate;
            /*0x30*/ System.Threading.ExecutionContext m_ExecutionContext;
            /*0x38*/ bool m_ExecutionContextBelongsToOuterScope;
            /*0x40*/ System.Security.Principal.IPrincipal principal;
            /*0x48*/ int principal_version;

            static /*0xfcdce0*/ void AsyncLocalSetCurrentCulture(System.Threading.AsyncLocalValueChangedArgs<System.Globalization.CultureInfo> args);
            static /*0xfcdd50*/ void AsyncLocalSetCurrentUICulture(System.Threading.AsyncLocalValueChangedArgs<System.Globalization.CultureInfo> args);
            static /*0xfce680*/ void SleepInternal(int millisecondsTimeout);
            static /*0xfce690*/ void Sleep(int millisecondsTimeout);
            static /*0xfceac0*/ bool YieldInternal();
            static /*0xfceac0*/ bool Yield();
            static /*0xfceda0*/ void nativeInitCultureAccessors();
            static /*0xfc4b80*/ void MemoryBarrier();
            static /*0xe4f720*/ System.Runtime.Remoting.Contexts.Context get_CurrentContext();
            static /*0xfce000*/ void GetCurrentThread_icall(ref System.Threading.Thread thread);
            static /*0xfce010*/ System.Threading.Thread GetCurrentThread();
            static /*0xfcec90*/ System.Threading.Thread get_CurrentThread();
            static /*0xfce0e0*/ int GetDomainID();
            static /*0xfce2e0*/ void SetName_icall(System.Threading.InternalThread thread, char* name, int nameLength);
            static /*0xfce2f0*/ void SetName_internal(System.Threading.InternalThread thread, string name);
            static /*0xed66b0*/ void SpinWait_nop();
            static /*0xfce720*/ void SpinWait(int iterations);
            static /*0xfce670*/ void SetState(System.Threading.InternalThread thread, System.Threading.ThreadState set);
            static /*0xfcde60*/ void ClrState(System.Threading.InternalThread thread, System.Threading.ThreadState clr);
            static /*0xfce290*/ System.Threading.ThreadState GetState(System.Threading.InternalThread thread);
            static /*0xfcea20*/ int SystemMaxStackStize();
            static /*0xfce1f0*/ int GetProcessDefaultStackSize(int maxStackSize);
            static /*0xfcddc0*/ void BeginCriticalRegion();
            static /*0xfcde80*/ void EndCriticalRegion();
            /*0xfcebd0*/ Thread(System.Threading.ThreadStart start);
            /*0xfcead0*/ Thread(System.Threading.ParameterizedThreadStart start, int maxStackSize);
            /*0xfce7d0*/ void Start();
            /*0xfce940*/ void Start(object parameter);
            /*0xfce7f0*/ void Start(ref System.Threading.StackCrawlMark stackMark);
            /*0xfce0f0*/ System.Threading.ExecutionContext.Reader GetExecutionContextReader();
            /*0xfced20*/ bool get_ExecutionContextBelongsToCurrentScope();
            /*0xfcf270*/ void set_ExecutionContextBelongsToCurrentScope(bool value);
            /*0xfce150*/ System.Threading.ExecutionContext GetMutableExecutionContext();
            /*0xfce2a0*/ void SetExecutionContext(System.Threading.ExecutionContext value, bool belongsToCurrentScope);
            /*0xfce2a0*/ void SetExecutionContext(System.Threading.ExecutionContext.Reader value, bool belongsToCurrentScope);
            /*0xfce340*/ void SetStartHelper(System.Delegate start, int maxStackSize);
            /*0xfcece0*/ System.Globalization.CultureInfo get_CurrentUICulture();
            /*0xfcf050*/ void set_CurrentUICulture(System.Globalization.CultureInfo value);
            /*0xfce040*/ System.Globalization.CultureInfo GetCurrentUICultureNoAppX();
            /*0xfcec50*/ System.Globalization.CultureInfo get_CurrentCulture();
            /*0xfcee50*/ void set_CurrentCulture(System.Globalization.CultureInfo value);
            /*0xfcdf60*/ System.Globalization.CultureInfo GetCurrentCultureNoAppX();
            /*0xfcde70*/ void ConstructInternalThread();
            /*0xfced30*/ System.Threading.InternalThread get_Internal();
            /*0xfcea30*/ bool Thread_internal(System.MulticastDelegate start);
            /*0xfcdf20*/ void Finalize();
            /*0xfced60*/ bool get_IsThreadPoolThread();
            /*0xfced60*/ bool get_IsThreadPoolThreadInternal();
            /*0xfcf280*/ void set_IsBackground(bool value);
            /*0xfcf350*/ void set_Name(string value);
            /*0xfce750*/ void StartInternal(object principal, ref System.Threading.StackCrawlMark stackMark);
            /*0xfce620*/ void SetStart(System.MulticastDelegate start, int maxStackSize);
            /*0xfce120*/ int get_ManagedThreadId();
            /*0xfce120*/ int GetHashCode();
            /*0xfcea40*/ System.Threading.ThreadState ValidateThreadState();
        }

        enum StackCrawlMark
        {
            LookForMe = 0,
            LookForMyCaller = 1,
            LookForMyCallersCaller = 2,
            LookForThread = 3,
        }

        class ThreadAbortException : System.SystemException
        {
            /*0xfcb8b0*/ ThreadAbortException();
            /*0xe291b0*/ ThreadAbortException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ThreadInterruptedException : System.SystemException
        {
            /*0xfcbd00*/ ThreadInterruptedException();
            /*0xe291b0*/ ThreadInterruptedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        interface IThreadPoolWorkItem
        {
            /*0x180fc0*/ void ExecuteWorkItem();
            /*0x17aec0*/ void MarkAborted(System.Threading.ThreadAbortException tae);
        }

        class WaitCallback : System.MulticastDelegate
        {
            /*0xfbe150*/ WaitCallback(object object, nint method);
            /*0x720980*/ void Invoke(object state);
        }

        class WaitOrTimerCallback : System.MulticastDelegate
        {
            /*0x7226f0*/ WaitOrTimerCallback(object object, nint method);
            /*0x722200*/ void Invoke(object state, bool timedOut);
        }

        class ThreadPoolGlobals
        {
            static /*0x0*/ int processorCount;
            static /*0x4*/ bool vmTpInitialized;
            static /*0x5*/ bool enableWorkerTracking;
            static /*0x8*/ System.Threading.ThreadPoolWorkQueue workQueue;

            static /*0xfcbd70*/ ThreadPoolGlobals();
        }

        class ThreadPoolWorkQueue
        {
            static /*0x0*/ System.Threading.ThreadPoolWorkQueue.SparseArray<System.Threading.ThreadPoolWorkQueue.WorkStealingQueue> allThreadQueues;
            /*0x10*/ System.Threading.ThreadPoolWorkQueue.QueueSegment queueHead;
            /*0x18*/ System.Threading.ThreadPoolWorkQueue.QueueSegment queueTail;
            /*0x20*/ int numOutstandingThreadRequests;

            static /*0xfccea0*/ ThreadPoolWorkQueue();
            static /*0xfcc5e0*/ bool Dispatch();
            /*0xfccf30*/ ThreadPoolWorkQueue();
            /*0xfcccb0*/ System.Threading.ThreadPoolWorkQueueThreadLocals EnsureCurrentThreadHasQueue();
            /*0xfccd50*/ void EnsureThreadRequested();
            /*0xfcce50*/ void MarkThreadRequestSatisfied();
            /*0xfcca90*/ void Enqueue(System.Threading.IThreadPoolWorkItem callback, bool forceGlobal);
            /*0xfccdf0*/ bool LocalFindAndPop(System.Threading.IThreadPoolWorkItem callback);
            /*0xfcc240*/ void Dequeue(System.Threading.ThreadPoolWorkQueueThreadLocals tl, ref System.Threading.IThreadPoolWorkItem callback, ref bool missedSteal);

            class SparseArray<T>
            {
                /*0x0*/ T[] m_array;

                /*0x17aa40*/ SparseArray(int initialSize);
                /*0x1803b0*/ T[] get_Current();
                /*0x2a5510*/ int Add(T e);
                /*0x2a5510*/ void Remove(T e);
            }

            class WorkStealingQueue
            {
                /*0x10*/ System.Threading.IThreadPoolWorkItem[] m_array;
                /*0x18*/ int m_mask;
                /*0x1c*/ int m_headIndex;
                /*0x20*/ int m_tailIndex;
                /*0x24*/ System.Threading.SpinLock m_foreignLock;

                /*0xfd2570*/ WorkStealingQueue();
                /*0xfd1cc0*/ void LocalPush(System.Threading.IThreadPoolWorkItem obj);
                /*0xfd1610*/ bool LocalFindAndPop(System.Threading.IThreadPoolWorkItem obj);
                /*0xfd1930*/ bool LocalPop(ref System.Threading.IThreadPoolWorkItem obj);
                /*0xfd2550*/ bool TrySteal(ref System.Threading.IThreadPoolWorkItem obj, ref bool missedSteal);
                /*0xfd22b0*/ bool TrySteal(ref System.Threading.IThreadPoolWorkItem obj, ref bool missedSteal, int millisecondsTimeout);
            }

            class QueueSegment
            {
                /*0x10*/ System.Threading.IThreadPoolWorkItem[] nodes;
                /*0x18*/ int indexes;
                /*0x20*/ System.Threading.ThreadPoolWorkQueue.QueueSegment Next;

                /*0xfc7e90*/ QueueSegment();
                /*0xfc7b90*/ void GetIndexes(ref int upper, ref int lower);
                /*0xfc7b10*/ bool CompareExchangeIndexes(ref int prevUpper, int newUpper, ref int prevLower, int newLower);
                /*0xfc7bd0*/ bool IsUsedUp();
                /*0xfc7dc0*/ bool TryEnqueue(System.Threading.IThreadPoolWorkItem node);
                /*0xfc7c30*/ bool TryDequeue(ref System.Threading.IThreadPoolWorkItem node);
            }
        }

        class ThreadPoolWorkQueueThreadLocals
        {
            [ThreadStatic] static System.Threading.ThreadPoolWorkQueueThreadLocals threadLocals;
            /*0x10*/ System.Threading.ThreadPoolWorkQueue workQueue;
            /*0x18*/ System.Threading.ThreadPoolWorkQueue.WorkStealingQueue workStealingQueue;
            /*0x20*/ System.Random random;

            /*0xfcc040*/ ThreadPoolWorkQueueThreadLocals(System.Threading.ThreadPoolWorkQueue tpq);
            /*0xfcbeb0*/ void CleanUp();
            /*0xfcbfb0*/ void Finalize();
        }

        class _ThreadPoolWaitCallback
        {
            static /*0xfd2600*/ bool PerformWaitCallback();
        }

        class QueueUserWorkItemCallback : System.Threading.IThreadPoolWorkItem
        {
            static /*0x0*/ System.Threading.ContextCallback ccb;
            /*0x10*/ System.Threading.WaitCallback callback;
            /*0x18*/ System.Threading.ExecutionContext context;
            /*0x20*/ object state;

            static /*0xfc8060*/ QueueUserWorkItemCallback();
            static /*0xfc7fe0*/ void WaitCallback_Context(object state);
            /*0xfc80f0*/ QueueUserWorkItemCallback(System.Threading.WaitCallback waitCallback, object stateObj, bool compressStack, ref System.Threading.StackCrawlMark stackMark);
            /*0xfc7ef0*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
            /*0x32d010*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
        }

        class ThreadPool
        {
            static /*0xfcd820*/ System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, ref System.Threading.StackCrawlMark stackMark, bool compressStack);
            static /*0xfcd5a0*/ System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);
            static /*0xfcd270*/ System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, System.TimeSpan timeout, bool executeOnlyOnce);
            static /*0xfcd240*/ bool QueueUserWorkItem(System.Threading.WaitCallback callBack, object state);
            static /*0xfcdbc0*/ bool UnsafeQueueUserWorkItem(System.Threading.WaitCallback callBack, object state);
            static /*0xfcd0e0*/ bool QueueUserWorkItemHelper(System.Threading.WaitCallback callBack, object state, ref System.Threading.StackCrawlMark stackMark, bool compressStack, bool forceGlobal);
            static /*0xfcdb40*/ void UnsafeQueueCustomWorkItem(System.Threading.IThreadPoolWorkItem workItem, bool forceGlobal);
            static /*0xfcda50*/ bool TryPopCustomWorkItem(System.Threading.IThreadPoolWorkItem workItem);
            static /*0xfcda40*/ bool RequestWorkerThread();
            static /*0xfccff0*/ void EnsureVMInitialized();
            static /*0xfcd0a0*/ bool NotifyWorkItemComplete();
            static /*0xed3a00*/ void ReportThreadStatus(bool isWorking);
            static /*0xfcd0c0*/ void NotifyWorkItemProgress();
            static /*0xfcd0b0*/ void NotifyWorkItemProgressNative();
            static /*0xed66b0*/ void NotifyWorkItemQueued();
            static /*0xfcd090*/ void InitializeVMTp(ref bool enableWorkerTracking);
            static /*0xfcdbf0*/ bool get_IsThreadPoolThread();
        }

        class WaitHandle : System.MarshalByRefObject, System.IDisposable
        {
            static int WaitTimeout = 258;
            static int MAX_WAITHANDLES = 64;
            static int WAIT_OBJECT_0 = 0;
            static int WAIT_ABANDONED = 128;
            static int WAIT_FAILED = 2147483647;
            static int ERROR_TOO_MANY_POSTS = 298;
            static int ERROR_NOT_OWNED_BY_CALLER = 299;
            static int MaxWaitHandles = 64;
            static /*0x0*/ nint InvalidHandle;
            /*0x18*/ nint waitHandle;
            /*0x20*/ Microsoft.Win32.SafeHandles.SafeWaitHandle safeWaitHandle;
            /*0x28*/ bool hasThreadAffinity;

            static /*0xfd12e0*/ WaitHandle();
            static /*0xfd0300*/ bool InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, long millisecondsTimeout, bool hasThreadAffinity, bool exitContext);
            static /*0xfd0630*/ int WaitAny(System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);
            static /*0xfd0510*/ int WaitAny(System.Threading.WaitHandle[] waitHandles, System.TimeSpan timeout, bool exitContext);
            static /*0xfd04d0*/ void ThrowAbandonedMutexException();
            static /*0xfd0470*/ void ThrowAbandonedMutexException(int location, System.Threading.WaitHandle handle);
            static /*0xfd0d80*/ int WaitOneNative(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext);
            static /*0xfd0a10*/ int WaitMultiple(System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext, bool WaitAll);
            static /*0xfd12d0*/ int Wait_internal(nint* handles, int numHandles, bool waitAll, int ms);
            /*0xfd1330*/ WaitHandle();
            /*0xfd0280*/ void Init();
            /*0xfd1480*/ void set_Handle(nint value);
            /*0xfd13b0*/ Microsoft.Win32.SafeHandles.SafeWaitHandle get_SafeWaitHandle();
            /*0xfd0420*/ void SetHandleInternal(Microsoft.Win32.SafeHandles.SafeWaitHandle handle);
            /*0xfd0fc0*/ bool WaitOne(int millisecondsTimeout, bool exitContext);
            /*0xfd0fa0*/ bool WaitOne();
            /*0xfd0f80*/ bool WaitOne(int millisecondsTimeout);
            /*0xfd1180*/ bool WaitOne(long timeout, bool exitContext);
            /*0xfd0150*/ void Close();
            /*0xfd0230*/ void Dispose(bool explicitDisposing);
            /*0xfd01c0*/ void Dispose();
        }

        class Interlocked
        {
            static /*0xfc4a50*/ int CompareExchange(ref int location1, int value, int comparand);
            static /*0xfc4a30*/ int CompareExchange(ref int location1, int value, int comparand, ref bool succeeded);
            static /*0xfc4a20*/ void CompareExchange(ref object location1, ref object value, ref object comparand, ref object result);
            static /*0xfc4a60*/ object CompareExchange(ref object location1, object value, object comparand);
            static /*0xfc4aa0*/ float CompareExchange(ref float location1, float value, float comparand);
            static /*0xfc4ac0*/ int Decrement(ref int location);
            static /*0xfc4ad0*/ long Decrement(ref long location);
            static /*0xfc4b70*/ int Increment(ref int location);
            static /*0xfc4b60*/ long Increment(ref long location);
            static /*0xfc4b00*/ int Exchange(ref int location1, int value);
            static /*0xfc4ae0*/ void Exchange(ref object location1, ref object value, ref object result);
            static /*0xfc4b10*/ object Exchange(ref object location1, object value);
            static /*0xfc4b40*/ float Exchange(ref float location1, float value);
            static /*0xfc4a40*/ long CompareExchange(ref long location1, long value, long comparand);
            static /*0xfc4a40*/ nint CompareExchange(ref nint location1, nint value, nint comparand);
            static /*0xfc4ab0*/ double CompareExchange(ref double location1, double value, double comparand);
            static /*0x2a5510*/ T CompareExchange<T>(ref T location1, T value, T comparand);
            static /*0xfc4af0*/ long Exchange(ref long location1, long value);
            static /*0xfc4af0*/ nint Exchange(ref nint location1, nint value);
            static /*0xfc4b50*/ double Exchange(ref double location1, double value);
            static /*0x2a5510*/ T Exchange<T>(ref T location1, T value);
            static /*0xfc4b90*/ long Read(ref long location);
            static /*0xfc4a00*/ int Add(ref int location1, int value);
            static /*0xfc4a10*/ long Add(ref long location1, long value);
            static /*0xfc4b80*/ void MemoryBarrier();
        }

        class Mutex : System.Threading.WaitHandle
        {
        }

        class NativeEventCalls
        {
            static /*0xfddc50*/ nint CreateEvent_internal(bool manual, bool initial, string name, ref int errorCode);
            static /*0xfddc40*/ nint CreateEvent_icall(bool manual, bool initial, char* name, int name_length, ref int errorCode);
            static /*0xfdddb0*/ bool SetEvent(Microsoft.Win32.SafeHandles.SafeWaitHandle handle);
            static /*0xfddda0*/ bool SetEvent_internal(nint handle);
            static /*0xfddcd0*/ bool ResetEvent(Microsoft.Win32.SafeHandles.SafeWaitHandle handle);
            static /*0xfddcc0*/ bool ResetEvent_internal(nint handle);
            static /*0xfddc30*/ void CloseEvent_internal(nint handle);
        }

        class RegisteredWaitHandle : System.MarshalByRefObject
        {
            /*0x18*/ System.Threading.WaitHandle _waitObject;
            /*0x20*/ System.Threading.WaitOrTimerCallback _callback;
            /*0x28*/ object _state;
            /*0x30*/ System.Threading.WaitHandle _finalEvent;
            /*0x38*/ System.Threading.ManualResetEvent _cancelEvent;
            /*0x40*/ System.TimeSpan _timeout;
            /*0x48*/ int _callsInProcess;
            /*0x4c*/ bool _executeOnlyOnce;
            /*0x4d*/ bool _unregistered;

            /*0xfde4f0*/ RegisteredWaitHandle(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callback, object state, System.TimeSpan timeout, bool executeOnlyOnce);
            /*0xfde060*/ void Wait(object state);
            /*0xfdde80*/ void DoCallBack(object timedOut);
            /*0xfddf70*/ bool Unregister(System.Threading.WaitHandle waitObject);
        }

        class InternalThread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
        {
            /*0x10*/ int lock_thread_id;
            /*0x18*/ nint handle;
            /*0x20*/ nint native_handle;
            /*0x28*/ nint name_chars;
            /*0x30*/ int name_free;
            /*0x34*/ int name_length;
            /*0x38*/ System.Threading.ThreadState state;
            /*0x40*/ object abort_exc;
            /*0x48*/ int abort_state_handle;
            /*0x50*/ long thread_id;
            /*0x58*/ nint debugger_thread;
            /*0x60*/ nuint static_data;
            /*0x68*/ nint runtime_thread_info;
            /*0x70*/ object current_appcontext;
            /*0x78*/ object root_domain_thread;
            /*0x80*/ byte[] _serialized_principal;
            /*0x88*/ int _serialized_principal_version;
            /*0x90*/ nint appdomain_refs;
            /*0x98*/ int interruption_requested;
            /*0xa0*/ nint longlived;
            /*0xa8*/ bool threadpool_thread;
            /*0xa9*/ bool thread_interrupt_requested;
            /*0xac*/ int stack_size;
            /*0xb0*/ byte apartment_state;
            /*0xb4*/ int critical_region_level;
            /*0xb8*/ int managed_id;
            /*0xbc*/ int small_id;
            /*0xc0*/ nint manage_callback;
            /*0xc8*/ nint flags;
            /*0xd0*/ nint thread_pinning_ref;
            /*0xd8*/ nint abort_protected_block_count;
            /*0xe0*/ int priority;
            /*0xe8*/ nint owned_mutex;
            /*0xf0*/ nint suspended_event;
            /*0xf8*/ int self_suspended;
            /*0x100*/ nint thread_state;
            /*0x108*/ nint netcore0;
            /*0x110*/ nint netcore1;
            /*0x118*/ nint netcore2;
            /*0x120*/ nint last;

            /*0xfdcf90*/ InternalThread();
            /*0xfdcf80*/ void Thread_free_internal();
            /*0xfdcf20*/ void Finalize();
        }

        class Timer : System.MarshalByRefObject, System.IDisposable
        {
            static long MaxValue = 4294967294;
            /*0x18*/ System.Threading.TimerCallback callback;
            /*0x20*/ object state;
            /*0x28*/ long due_time_ms;
            /*0x30*/ long period_ms;
            /*0x38*/ long next_run;
            /*0x40*/ bool disposed;
            /*0x41*/ bool is_dead;
            /*0x42*/ bool is_added;

            static /*0xfedd10*/ System.Threading.Timer.Scheduler get_scheduler();
            static /*0xfeda40*/ long GetTimeMonotonic();
            /*0xfedb10*/ Timer(System.Threading.TimerCallback callback, object state, int dueTime, int period);
            /*0xfedbe0*/ Timer(System.Threading.TimerCallback callback, object state, System.TimeSpan dueTime, System.TimeSpan period);
            /*0xfeda50*/ void Init(System.Threading.TimerCallback callback, object state, long dueTime, long period);
            /*0xfed970*/ bool Change(System.TimeSpan dueTime, System.TimeSpan period);
            /*0xfeda00*/ void Dispose();
            /*0xfed700*/ bool Change(long dueTime, long period, bool first);
            /*0x32d010*/ void KeepRootedWhileScheduled();

            struct TimerComparer : System.Collections.IComparer, System.Collections.Generic.IComparer<System.Threading.Timer>
            {
                /*0xfed610*/ int System.Collections.IComparer.Compare(object x, object y);
                /*0xfed5a0*/ int Compare(System.Threading.Timer tx, System.Threading.Timer ty);
            }

            class Scheduler
            {
                static /*0x0*/ System.Threading.Timer.Scheduler instance;
                /*0x10*/ bool needReSort;
                /*0x18*/ System.Collections.Generic.List<System.Threading.Timer> list;
                /*0x20*/ long current_next_run;
                /*0x28*/ System.Threading.ManualResetEvent changed;

                static /*0xfdf130*/ Scheduler();
                static /*0xfdf460*/ System.Threading.Timer.Scheduler get_Instance();
                static /*0xfdf090*/ void TimerCB(object o);
                /*0xfdf2f0*/ Scheduler();
                /*0xfde9e0*/ void InitScheduler();
                /*0xfdf110*/ void WakeupScheduler();
                /*0xfdef60*/ void SchedulerThread();
                /*0xfdeb00*/ void Remove(System.Threading.Timer timer);
                /*0xfde6c0*/ void Change(System.Threading.Timer timer, long new_next_run);
                /*0xfde5d0*/ void Add(System.Threading.Timer timer);
                /*0xfdead0*/ void InternalRemove(System.Threading.Timer timer);
                /*0xfde910*/ void FireTimer(System.Threading.Timer timer);
                /*0xfdeba0*/ int RunSchedulerLoop();
            }
        }

        class TimerCallback : System.MulticastDelegate
        {
            /*0x7214c0*/ TimerCallback(object object, nint method);
            /*0x720980*/ void Invoke(object state);
        }

        class Volatile
        {
            static /*0xfee2b0*/ int Read(ref int location);
            static /*0xfee2d0*/ void Write(ref int location, int value);
            static /*0x2a5510*/ T Read<T>(ref T location);
            static /*0x2a5510*/ void Write<T>(ref T location, T value);

            struct VolatileInt32
            {
                /*0x10*/ int Value;
            }

            struct VolatileObject
            {
                /*0x10*/ object Value;
            }
        }

        namespace Tasks
        {
            class TaskCanceledException : System.OperationCanceledException
            {
                /*0x98*/ System.Threading.Tasks.Task _canceledTask;

                /*0xfe4440*/ TaskCanceledException();
                /*0xfe43a0*/ TaskCanceledException(System.Threading.Tasks.Task task);
                /*0xea43e0*/ TaskCanceledException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class TaskSchedulerException : System.Exception
            {
                /*0xfe5bd0*/ TaskSchedulerException();
                /*0xfe5c30*/ TaskSchedulerException(System.Exception innerException);
                /*0xfe5b50*/ TaskSchedulerException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class DebuggerSupport
            {
                static /*0x0*/ System.Collections.Generic.LowLevelDictionary<int, System.Threading.Tasks.Task> s_activeTasks;
                static /*0x8*/ object s_activeTasksLock;

                static /*0xfd6250*/ DebuggerSupport();
                static /*0x348b00*/ bool get_LoggingOn();
                static /*0x32d010*/ void TraceOperationCreation(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, string operationName, ulong relatedContext);
                static /*0x32d010*/ void TraceOperationCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, Internal.Runtime.Augments.AsyncStatus status);
                static /*0x32d010*/ void TraceOperationRelation(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, System.Threading.Tasks.CausalityRelation relation);
                static /*0x32d010*/ void TraceSynchronousWorkStart(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.Task task, System.Threading.Tasks.CausalitySynchronousWork work);
                static /*0x32d010*/ void TraceSynchronousWorkCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.CausalitySynchronousWork work);
                static /*0xfd6000*/ void AddToActiveTasks(System.Threading.Tasks.Task task);
                static /*0xfd5ec0*/ void AddToActiveTasksNonInlined(System.Threading.Tasks.Task task);
                static /*0xfd61c0*/ void RemoveFromActiveTasks(System.Threading.Tasks.Task task);
                static /*0xfd6090*/ void RemoveFromActiveTasksNonInlined(System.Threading.Tasks.Task task);
            }

            class Task<TResult> : System.Threading.Tasks.Task
            {
                /*0x0*/ TResult m_result;

                static /*0x2a5510*/ System.Threading.Tasks.Task<TResult> StartNew(System.Threading.Tasks.Task parent, System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x180fc0*/ Task();
                /*0x2a5510*/ Task(TResult result);
                /*0x2a5510*/ Task(bool canceled, TResult result, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.CancellationToken ct);
                /*0x2a5510*/ Task(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);
                /*0x2a5510*/ Task(System.Delegate valueSelector, object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x2a5510*/ bool TrySetResult(TResult result);
                /*0x2a5510*/ TResult get_ResultOnSuccess();
                /*0x180fc0*/ void InnerInvoke();
                /*0x2a5510*/ System.Runtime.CompilerServices.TaskAwaiter<TResult> GetAwaiter();
                /*0x2a5510*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext);
            }

            class SystemThreadingTasks_FutureDebugView<TResult>
            {
            }

            enum TaskStatus
            {
                Created = 0,
                WaitingForActivation = 1,
                WaitingToRun = 2,
                Running = 3,
                WaitingForChildrenToComplete = 4,
                RanToCompletion = 5,
                Canceled = 6,
                Faulted = 7,
            }

            class Task : System.Threading.IThreadPoolWorkItem, System.IAsyncResult, System.IDisposable
            {
                static /*0x0*/ int s_taskIdCounter;
                static /*0x8*/ object s_taskCompletionSentinel;
                static /*0x10*/ bool s_asyncDebuggingEnabled;
                static /*0x18*/ System.Action<object> s_taskCancelCallback;
                static /*0x20*/ System.Func<System.Threading.Tasks.Task.ContingentProperties> s_createContingentProperties;
                static /*0x28*/ System.Threading.Tasks.TaskFactory <Factory>k__BackingField;
                static /*0x30*/ System.Threading.Tasks.Task <CompletedTask>k__BackingField;
                static /*0x38*/ System.Predicate<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate;
                static /*0x40*/ System.Threading.ContextCallback s_ecCallback;
                static /*0x48*/ System.Predicate<object> s_IsTaskContinuationNullPredicate;
                static /*0x50*/ System.Collections.Generic.Dictionary<int, System.Threading.Tasks.Task> s_currentActiveTasks;
                static /*0x58*/ object s_activeTasksLock;
                [ThreadStatic] static System.Threading.Tasks.Task t_currentTask;
                [ThreadStatic] static System.Threading.Tasks.StackGuard t_stackGuard;
                /*0x10*/ int m_taskId;
                /*0x18*/ System.Delegate m_action;
                /*0x20*/ object m_stateObject;
                /*0x28*/ System.Threading.Tasks.TaskScheduler m_taskScheduler;
                /*0x30*/ System.Threading.Tasks.Task m_parent;
                /*0x38*/ int m_stateFlags;
                /*0x40*/ object m_continuationObject;
                /*0x48*/ System.Threading.Tasks.Task.ContingentProperties m_contingentProperties;

                static /*0xfec1c0*/ Task();
                static /*0xfeb850*/ void TaskCancelCallback(object o);
                static /*0xe31090*/ System.Threading.Tasks.TaskCreationOptions OptionsMethod(int flags);
                static /*0xfecd20*/ System.Threading.Tasks.Task get_InternalCurrent();
                static /*0xfe9fa0*/ System.Threading.Tasks.Task InternalCurrentIfAttached(System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0xfecab0*/ System.Threading.Tasks.StackGuard get_CurrentStackGuard();
                static /*0xfea500*/ bool IsCompletedMethod(int flags);
                static /*0xfecc30*/ System.Threading.Tasks.TaskFactory get_Factory();
                static /*0xfeca10*/ System.Threading.Tasks.Task get_CompletedTask();
                static /*0xfe8d50*/ void ExecutionContextCallback(object obj);
                static /*0xfe7c40*/ void CreationOptionsFromContinuationOptions(System.Threading.Tasks.TaskContinuationOptions continuationOptions, ref System.Threading.Tasks.TaskCreationOptions creationOptions, ref System.Threading.Tasks.InternalTaskOptions internalOptions);
                static /*0x2a5510*/ System.Threading.Tasks.Task<TResult> FromResult<TResult>(TResult result);
                static /*0xfe96d0*/ System.Threading.Tasks.Task FromCancellation(System.Threading.CancellationToken cancellationToken);
                static /*0x2a5510*/ System.Threading.Tasks.Task<TResult> FromCancellation<TResult>(System.Threading.CancellationToken cancellationToken);
                static /*0xfe7da0*/ System.Threading.Tasks.Task Delay(int millisecondsDelay, System.Threading.CancellationToken cancellationToken);
                static /*0xfebed0*/ System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny(System.Threading.Tasks.Task[] tasks);
                static /*0xfe6f80*/ bool AddToActiveTasks(System.Threading.Tasks.Task task);
                static /*0xfeabf0*/ void RemoveFromActiveTasks(int taskId);
                /*0xfec5d0*/ Task(bool canceled, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.CancellationToken ct);
                /*0xfec790*/ Task();
                /*0xfec6a0*/ Task(System.Delegate action, object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0xfeb940*/ void TaskConstructorCore(System.Delegate action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0xfe70c0*/ void AssignCancellationToken(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.Task antecedent, System.Threading.Tasks.TaskContinuation continuation);
                /*0xfebc20*/ bool TrySetCanceled(System.Threading.CancellationToken tokenToRecord);
                /*0xfebce0*/ bool TrySetCanceled(System.Threading.CancellationToken tokenToRecord, object cancellationException);
                /*0xfebdd0*/ bool TrySetException(object exceptionObject);
                /*0xfecf80*/ System.Threading.Tasks.TaskCreationOptions get_Options();
                /*0xfe7450*/ bool AtomicStateUpdate(int newBits, int illegalBits);
                /*0xfe7390*/ bool AtomicStateUpdate(int newBits, int illegalBits, ref int oldFlags);
                /*0xfeb090*/ void SetNotificationForWaitCompletion(bool enabled);
                /*0xfea570*/ bool NotifyDebuggerOfWaitCompletionIfNecessary();
                /*0xfecf30*/ bool get_IsWaitNotificationEnabledOrNotRanToCompletion();
                /*0xfecf60*/ bool get_ShouldNotifyDebuggerOfWaitCompletion();
                /*0xfecf60*/ bool get_IsWaitNotificationEnabled();
                /*0xfea5d0*/ void NotifyDebuggerOfWaitCompletion();
                /*0xfea550*/ bool MarkStarted();
                /*0xfe6b10*/ void AddNewChild();
                /*0xfe8680*/ void DisregardChild();
                /*0xfecc80*/ int get_Id();
                /*0xfecbe0*/ System.AggregateException get_Exception();
                /*0xfecfd0*/ System.Threading.Tasks.TaskStatus get_Status();
                /*0xfecd70*/ bool get_IsCanceled();
                /*0xfecdc0*/ bool get_IsCancellationRequested();
                /*0xfe8830*/ System.Threading.Tasks.Task.ContingentProperties EnsureContingentPropertiesInitialized(bool needsProtection);
                /*0xfe8740*/ System.Threading.Tasks.Task.ContingentProperties EnsureContingentPropertiesInitializedCore(bool needsProtection);
                /*0xfec7c0*/ System.Threading.CancellationToken get_CancellationToken();
                /*0xfecda0*/ bool get_IsCancellationAcknowledged();
                /*0xfece70*/ bool get_IsCompleted();
                /*0xfece40*/ bool get_IsCompletedSuccessfully();
                /*0xfeca60*/ System.Threading.Tasks.TaskCreationOptions get_CreationOptions();
                /*0xfeb620*/ System.Threading.WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
                /*0x79a150*/ System.Threading.Tasks.TaskScheduler get_ExecutingTaskScheduler();
                /*0xfec870*/ System.Threading.ManualResetEventSlim get_CompletedEvent();
                /*0xfecb70*/ bool get_ExceptionRecorded();
                /*0xfecf10*/ bool get_IsFaulted();
                /*0xfec7f0*/ System.Threading.ExecutionContext get_CapturedContext();
                /*0xfed060*/ void set_CapturedContext(System.Threading.ExecutionContext value);
                /*0xfe8610*/ void Dispose();
                /*0xfe84a0*/ void Dispose(bool disposing);
                /*0xfead10*/ void ScheduleAndStart(bool needsProtection);
                /*0xfe6790*/ void AddException(object exceptionObject);
                /*0xfe6470*/ void AddException(object exceptionObject, bool representsCancellation);
                /*0xfe9a20*/ System.AggregateException GetExceptions(bool includeTaskCanceledExceptions);
                /*0xfe9800*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Runtime.ExceptionServices.ExceptionDispatchInfo> GetExceptionDispatchInfos();
                /*0xfe97c0*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo GetCancellationExceptionDispatchInfo();
                /*0xfecef0*/ bool get_IsExceptionObservedByParent();
                /*0xfeced0*/ bool get_IsDelegateInvoked();
                /*0xfe9550*/ void Finish(bool bUserDelegateExecuted);
                /*0xfe9400*/ void FinishStageTwo();
                /*0xfe9350*/ void FinishStageThree();
                /*0xfea600*/ void ProcessChildCompletion(System.Threading.Tasks.Task childTask);
                /*0xfe67a0*/ void AddExceptionsFromChildren();
                /*0xfe8d10*/ void Execute();
                /*0xfeb840*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0xfe8930*/ bool ExecuteEntry(bool bPreventDoubleExecution);
                /*0xfe9d30*/ void InnerInvoke();
                /*0xfe9c20*/ void HandleException(System.Exception unhandledException);
                /*0xfeaec0*/ void SetContinuationForAwait(System.Action continuationAction, bool continueOnCapturedContext, bool flowExecutionContext);
                /*0xfec120*/ bool WrappedTryRunInline();
                /*0xfea030*/ bool InternalWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                /*0xfeb180*/ bool SpinThenBlockingWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                /*0xfeb4c0*/ bool SpinWait(int millisecondsTimeout);
                /*0xfe9dd0*/ bool InternalCancel(bool bCancelNonExecutingOnly);
                /*0xfea920*/ void RecordInternalCancellationRequest();
                /*0xfea890*/ void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord);
                /*0xfea7d0*/ void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord, object cancellationException);
                /*0xfe7510*/ void CancellationCleanupLogic();
                /*0xfeae90*/ void SetCancellationAcknowledged();
                /*0xfe8de0*/ void FinishContinuations();
                /*0xfea510*/ void LogFinishCompletionNotification();
                /*0xfe7850*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0xfe7880*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0xfe75e0*/ void ContinueWithCore(System.Threading.Tasks.Task continuationTask, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions options);
                /*0xfe6380*/ void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action);
                /*0xfe63f0*/ void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action, bool addBeforeOthers);
                /*0xfe6c10*/ bool AddTaskContinuationComplex(object tc, bool addBeforeOthers);
                /*0xfe6ec0*/ bool AddTaskContinuation(object tc, bool addBeforeOthers);
                /*0xfea9e0*/ void RemoveContinuation(object continuationObject);
                /*0x32d010*/ void MarkAborted(System.Threading.ThreadAbortException e);
                /*0xfe8af0*/ void ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot);

                class ContingentProperties
                {
                    /*0x10*/ System.Threading.ExecutionContext m_capturedContext;
                    /*0x18*/ System.Threading.ManualResetEventSlim m_completionEvent;
                    /*0x20*/ System.Threading.Tasks.TaskExceptionHolder m_exceptionsHolder;
                    /*0x28*/ System.Threading.CancellationToken m_cancellationToken;
                    /*0x30*/ object m_cancellationRegistration;
                    /*0x38*/ int m_internalCancellationRequested;
                    /*0x3c*/ int m_completionCountdown;
                    /*0x40*/ System.Collections.Generic.LowLevelListWithIList<System.Threading.Tasks.Task> m_exceptionalChildren;

                    /*0xfd5bd0*/ ContingentProperties();
                    /*0xfd5af0*/ void SetCompleted();
                    /*0xfd5b20*/ void UnregisterCancellationCallback();
                }

                class SetOnInvokeMres : System.Threading.ManualResetEventSlim, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0xfdf4c0*/ SetOnInvokeMres();
                    /*0xfdf4b0*/ void Invoke(System.Threading.Tasks.Task completingTask);
                    /*0x348b00*/ bool get_InvokeMayRunArbitraryCode();
                }

                class DelayPromise : System.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult>
                {
                    /*0x58*/ System.Threading.CancellationToken Token;
                    /*0x60*/ System.Threading.CancellationTokenRegistration Registration;
                    /*0x78*/ System.Threading.Timer Timer;

                    /*0xfd85c0*/ DelayPromise(System.Threading.CancellationToken token);
                    /*0xfd8410*/ void Complete();
                }

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.Task.<> <>9;
                    static /*0x8*/ System.Action<object> <>9__247_0;
                    static /*0x10*/ System.Threading.TimerCallback <>9__247_1;

                    static /*0xfee1d0*/ <>c();
                    /*0x32f970*/ <>c();
                    /*0xfedda0*/ void <Delay>b__247_0(object state);
                    /*0xfede10*/ void <Delay>b__247_1(object state);
                    /*0xfedf80*/ System.Threading.Tasks.Task.ContingentProperties <.cctor>b__271_0();
                    /*0xfedfd0*/ bool <.cctor>b__271_1(System.Threading.Tasks.Task t);
                    /*0xfee000*/ bool <.cctor>b__271_2(object tc);
                }
            }

            class CompletionActionInvoker : System.Threading.IThreadPoolWorkItem
            {
                /*0x10*/ System.Threading.Tasks.ITaskCompletionAction m_action;
                /*0x18*/ System.Threading.Tasks.Task m_completingTask;

                /*0xce3b90*/ CompletionActionInvoker(System.Threading.Tasks.ITaskCompletionAction action, System.Threading.Tasks.Task completingTask);
                /*0xfd5aa0*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x32d010*/ void MarkAborted(System.Threading.ThreadAbortException e);
            }

            class SystemThreadingTasks_TaskDebugView
            {
            }

            enum TaskCreationOptions
            {
                None = 0,
                PreferFairness = 1,
                LongRunning = 2,
                AttachedToParent = 4,
                DenyChildAttach = 8,
                HideScheduler = 16,
                RunContinuationsAsynchronously = 64,
            }

            enum InternalTaskOptions
            {
                None = 0,
                InternalOptionsMask = 65280,
                ContinuationTask = 512,
                PromiseTask = 1024,
                LazyCancellation = 4096,
                QueuedByRuntime = 8192,
                DoNotDispose = 16384,
            }

            enum TaskContinuationOptions
            {
                None = 0,
                PreferFairness = 1,
                LongRunning = 2,
                AttachedToParent = 4,
                DenyChildAttach = 8,
                HideScheduler = 16,
                LazyCancellation = 32,
                RunContinuationsAsynchronously = 64,
                NotOnRanToCompletion = 65536,
                NotOnFaulted = 131072,
                NotOnCanceled = 262144,
                OnlyOnRanToCompletion = 393216,
                OnlyOnFaulted = 327680,
                OnlyOnCanceled = 196608,
                ExecuteSynchronously = 524288,
            }

            class StackGuard
            {
                /*0x10*/ int m_inliningDepth;

                /*0x32f970*/ StackGuard();
                /*0xfdf520*/ bool TryBeginInliningScope();
                /*0xfdf510*/ void EndInliningScope();
            }

            struct VoidTaskResult
            {
            }

            interface ITaskCompletionAction
            {
                /*0x17aec0*/ void Invoke(System.Threading.Tasks.Task completingTask);
                /*0x17cb40*/ bool get_InvokeMayRunArbitraryCode();
            }

            class ContinuationTaskFromTask : System.Threading.Tasks.Task
            {
                /*0x50*/ System.Threading.Tasks.Task m_antecedent;

                /*0xfd5d10*/ ContinuationTaskFromTask(System.Threading.Tasks.Task antecedent, System.Delegate action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions);
                /*0xfd5c00*/ void InnerInvoke();
            }

            class TaskContinuation
            {
                static /*0xfe4480*/ void InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task task, bool needsProtection);
                /*0x32f970*/ TaskContinuation();
                void Run(System.Threading.Tasks.Task completedTask, bool bCanInlineContinuationTask);
            }

            class StandardTaskContinuation : System.Threading.Tasks.TaskContinuation
            {
                /*0x10*/ System.Threading.Tasks.Task m_task;
                /*0x18*/ System.Threading.Tasks.TaskContinuationOptions m_options;
                /*0x20*/ System.Threading.Tasks.TaskScheduler m_taskScheduler;

                /*0xfdf690*/ StandardTaskContinuation(System.Threading.Tasks.Task task, System.Threading.Tasks.TaskContinuationOptions options, System.Threading.Tasks.TaskScheduler scheduler);
                /*0xfdf550*/ void Run(System.Threading.Tasks.Task completedTask, bool bCanInlineContinuationTask);
            }

            class SynchronizationContextAwaitTaskContinuation : System.Threading.Tasks.AwaitTaskContinuation
            {
                static /*0x0*/ System.Threading.SendOrPostCallback s_postCallback;
                static /*0x8*/ System.Threading.ContextCallback s_postActionCallback;
                /*0x20*/ System.Threading.SynchronizationContext m_syncContext;

                static /*0xfe4290*/ SynchronizationContextAwaitTaskContinuation();
                static /*0xfe4030*/ void PostAction(object state);
                static /*0xfe3f50*/ System.Threading.ContextCallback GetPostActionCallback();
                /*0xfe4360*/ SynchronizationContextAwaitTaskContinuation(System.Threading.SynchronizationContext context, System.Action action, bool flowExecutionContext);
                /*0xfe40e0*/ void Run(System.Threading.Tasks.Task ignored, bool canInlineContinuationTask);

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.<> <>9;

                    static /*0xfee080*/ <>c();
                    /*0x32f970*/ <>c();
                    /*0xfee010*/ void <.cctor>b__7_0(object state);
                }
            }

            class TaskSchedulerAwaitTaskContinuation : System.Threading.Tasks.AwaitTaskContinuation
            {
                /*0x20*/ System.Threading.Tasks.TaskScheduler m_scheduler;

                /*0xfe4360*/ TaskSchedulerAwaitTaskContinuation(System.Threading.Tasks.TaskScheduler scheduler, System.Action action, bool flowExecutionContext);
                /*0xfe5810*/ void Run(System.Threading.Tasks.Task ignored, bool canInlineContinuationTask);

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation.<> <>9;
                    static /*0x8*/ System.Action<object> <>9__2_0;

                    static /*0xfee0f0*/ <>c();
                    /*0x32f970*/ <>c();
                    /*0xfede80*/ void <Run>b__2_0(object state);
                }
            }

            class AwaitTaskContinuation : System.Threading.Tasks.TaskContinuation, System.Threading.IThreadPoolWorkItem
            {
                static /*0x0*/ System.Threading.ContextCallback s_invokeActionCallback;
                /*0x10*/ System.Threading.ExecutionContext m_capturedContext;
                /*0x18*/ System.Action m_action;

                static /*0xfd56e0*/ bool get_IsValidLocationForInlining();
                static /*0xfd51a0*/ void InvokeAction(object state);
                static /*0xfd50f0*/ System.Threading.ContextCallback GetInvokeActionCallback();
                static /*0xfd5300*/ void RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask);
                static /*0xfd55c0*/ void UnsafeScheduleAction(System.Action action);
                static /*0xfd5570*/ void ThrowAsyncIfNecessary(System.Exception exc);
                /*0xfd5650*/ AwaitTaskContinuation(System.Action action, bool flowExecutionContext);
                /*0xfd5010*/ System.Threading.Tasks.Task CreateTask(System.Action<object> action, object state, System.Threading.Tasks.TaskScheduler scheduler);
                /*0xfd5410*/ void Run(System.Threading.Tasks.Task ignored, bool canInlineContinuationTask);
                /*0xfd54d0*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0xfd5210*/ void RunCallback(System.Threading.ContextCallback callback, object state, ref System.Threading.Tasks.Task currentTask);
                /*0x32d010*/ void MarkAborted(System.Threading.ThreadAbortException e);
            }

            class TaskExceptionHolder
            {
                static /*0x0*/ bool s_failFastOnUnobservedException;
                /*0x10*/ System.Threading.Tasks.Task m_task;
                /*0x18*/ System.Collections.Generic.LowLevelListWithIList<System.Runtime.ExceptionServices.ExceptionDispatchInfo> m_faultExceptions;
                /*0x20*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo m_cancellationException;
                /*0x28*/ bool m_isHandled;

                static /*0xfe5180*/ TaskExceptionHolder();
                static /*0x348b00*/ bool ShouldFailFastOnUnobservedException();
                /*0x49b490*/ TaskExceptionHolder(System.Threading.Tasks.Task task);
                /*0xfe4cc0*/ void Finalize();
                /*0xfe51c0*/ bool get_ContainsFaultList();
                /*0xfe49c0*/ void Add(object exceptionObject, bool representsCancellation);
                /*0xfe5080*/ void SetCancellationException(object exceptionObject);
                /*0xfe4580*/ void AddFaultException(object exceptionObject);
                /*0xfe5010*/ void MarkAsUnhandled();
                /*0xfe4f90*/ void MarkAsHandled(bool calledFromFinalizer);
                /*0xfe4ad0*/ System.AggregateException CreateExceptionObject(bool calledFromFinalizer, System.Exception includeThisException);
                /*0xfe4ec0*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Runtime.ExceptionServices.ExceptionDispatchInfo> GetExceptionDispatchInfos();
                /*0x61a260*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo GetCancellationExceptionDispatchInfo();
            }

            class TaskFactory
            {
                /*0x10*/ System.Threading.CancellationToken m_defaultCancellationToken;
                /*0x18*/ System.Threading.Tasks.TaskScheduler m_defaultScheduler;
                /*0x20*/ System.Threading.Tasks.TaskCreationOptions m_defaultCreationOptions;
                /*0x24*/ System.Threading.Tasks.TaskContinuationOptions m_defaultContinuationOptions;

                static /*0xfe51e0*/ void CheckCreationOptions(System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0xfe5390*/ System.Threading.Tasks.Task<System.Threading.Tasks.Task> CommonCWAnyLogic(System.Collections.Generic.IList<System.Threading.Tasks.Task> tasks);
                static /*0xfe5250*/ void CheckMultiTaskContinuationOptions(System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0xfe55e0*/ TaskFactory();
                /*0xfe5630*/ TaskFactory(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x2a5510*/ System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);

                class CompleteOnInvokePromise : System.Threading.Tasks.Task<System.Threading.Tasks.Task>, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0x58*/ System.Collections.Generic.IList<System.Threading.Tasks.Task> _tasks;

                    /*0xfd59f0*/ CompleteOnInvokePromise(System.Collections.Generic.IList<System.Threading.Tasks.Task> tasks);
                    /*0xfd5820*/ void Invoke(System.Threading.Tasks.Task completingTask);
                    /*0x3ce290*/ bool get_InvokeMayRunArbitraryCode();
                }
            }

            class TaskScheduler
            {
                static /*0x0*/ System.Threading.Tasks.TaskScheduler s_defaultTaskScheduler;
                static /*0x8*/ int s_taskSchedulerIdCounter;
                static /*0x10*/ System.EventHandler<System.Threading.Tasks.UnobservedTaskExceptionEventArgs> _unobservedTaskException;
                static /*0x18*/ System.Threading.Lock _unobservedTaskExceptionLockObject;
                /*0x10*/ int m_taskSchedulerId;

                static /*0xfe60a0*/ TaskScheduler();
                static /*0xfe61a0*/ System.Threading.Tasks.TaskScheduler get_Default();
                static /*0xfe62a0*/ System.Threading.Tasks.TaskScheduler get_InternalCurrent();
                static /*0xfe5ca0*/ void PublishUnobservedTaskException(object sender, System.Threading.Tasks.UnobservedTaskExceptionEventArgs ueea);
                /*0x32f970*/ TaskScheduler();
                /*0x17aec0*/ void QueueTask(System.Threading.Tasks.Task task);
                bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
                /*0xfe5de0*/ bool TryRunInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
                /*0x348b00*/ bool TryDequeue(System.Threading.Tasks.Task task);
                /*0x32d010*/ void NotifyWorkItemProgress();
                /*0x3ce290*/ bool get_RequiresAtomicStartTransition();
                /*0xfe61f0*/ int get_Id();

                class SystemThreadingTasks_TaskSchedulerDebugView
                {
                }
            }

            class UnobservedTaskExceptionEventArgs : System.EventArgs
            {
                /*0x10*/ System.AggregateException m_exception;
                /*0x18*/ bool m_observed;

                /*0xfee240*/ UnobservedTaskExceptionEventArgs(System.AggregateException exception);
            }

            class ThreadPoolTaskScheduler : System.Threading.Tasks.TaskScheduler
            {
                static /*0x0*/ System.Threading.ParameterizedThreadStart s_longRunningThreadWork;

                static /*0xfed480*/ ThreadPoolTaskScheduler();
                /*0xfed550*/ ThreadPoolTaskScheduler();
                /*0xfed100*/ void QueueTask(System.Threading.Tasks.Task task);
                /*0xfed3b0*/ bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
                /*0xfed3a0*/ bool TryDequeue(System.Threading.Tasks.Task task);
                /*0xfed0f0*/ void NotifyWorkItemProgress();
                /*0x348b00*/ bool get_RequiresAtomicStartTransition();

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.ThreadPoolTaskScheduler.<> <>9;

                    static /*0xfee160*/ <>c();
                    /*0x32f970*/ <>c();
                    /*0xfedf00*/ void <.cctor>b__10_0(object s);
                }
            }

            enum CausalityTraceLevel
            {
                Required = 0,
                Important = 1,
                Verbose = 2,
            }

            enum AsyncCausalityStatus
            {
                Started = 0,
                Completed = 1,
                Canceled = 2,
                Error = 3,
            }

            enum CausalityRelation
            {
                AssignDelegate = 0,
                Join = 1,
                Choice = 2,
                Cancel = 3,
                Error = 4,
            }

            enum CausalitySynchronousWork
            {
                CompletionNotification = 0,
                ProgressNotification = 1,
                Execution = 2,
            }

            class AsyncCausalityTracer
            {
                static /*0x348b00*/ bool get_LoggingOn();
                static /*0x32d010*/ void TraceOperationCreation(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, string operationName, ulong relatedContext);
                static /*0x32d010*/ void TraceOperationCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, System.Threading.Tasks.AsyncCausalityStatus status);
                static /*0x32d010*/ void TraceSynchronousWorkStart(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, System.Threading.Tasks.CausalitySynchronousWork work);
                static /*0x32d010*/ void TraceSynchronousWorkCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.CausalitySynchronousWork work);
            }
        }
    }

    namespace Text
    {
        class ASCIIEncoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.ASCIIEncoding.ASCIIEncodingSealed s_default;

            static /*0xfd4f50*/ ASCIIEncoding();
            /*0xfd5000*/ ASCIIEncoding();
            /*0xfd4f10*/ void SetDefaultFallbacks();
            /*0xfd2fd0*/ int GetByteCount(char[] chars, int index, int count);
            /*0xfd3180*/ int GetByteCount(string chars);
            /*0xfd2b60*/ int GetByteCount(char* chars, int count);
            /*0xfd3b20*/ int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0xfd3850*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0xfd3720*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0xfd3df0*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0xfd3fa0*/ int GetCharCount(byte* bytes, int count);
            /*0xfd46a0*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0xfd4240*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0xfd4d30*/ string GetString(byte[] bytes, int byteIndex, int byteCount);
            /*0xfd2c60*/ int GetByteCount(char* chars, int charCount, System.Text.EncoderNLS encoder);
            /*0xfd3220*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0xfd40a0*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS decoder);
            /*0xfd4370*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS decoder);
            /*0xfd4ab0*/ int GetMaxByteCount(int charCount);
            /*0xfd4bf0*/ int GetMaxCharCount(int byteCount);
            /*0xfd4970*/ System.Text.Decoder GetDecoder();
            /*0xfd4a10*/ System.Text.Encoder GetEncoder();

            class ASCIIEncodingSealed : System.Text.ASCIIEncoding
            {
                /*0xfd2b10*/ ASCIIEncodingSealed();
            }
        }

        class Decoder
        {
            /*0x10*/ System.Text.DecoderFallback _fallback;
            /*0x18*/ System.Text.DecoderFallbackBuffer _fallbackBuffer;

            /*0x32f970*/ Decoder();
            /*0x73d3e0*/ System.Text.DecoderFallback get_Fallback();
            /*0xfd8380*/ System.Text.DecoderFallbackBuffer get_FallbackBuffer();
            /*0xfd8400*/ bool get_InternalHasFallbackBuffer();
            /*0xfd8250*/ void Reset();
            int GetCharCount(byte[] bytes, int index, int count);
            /*0xfd7e70*/ int GetCharCount(byte[] bytes, int index, int count, bool flush);
            /*0xfd7ce0*/ int GetCharCount(byte* bytes, int count, bool flush);
            int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0xfd7e90*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
            /*0xfd7eb0*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush);
            /*0xfd8110*/ int GetChars(System.ReadOnlySpan<byte> bytes, System.Span<char> chars, bool flush);
        }

        class InternalDecoderBestFitFallback : System.Text.DecoderFallback
        {
            /*0x10*/ System.Text.Encoding _encoding;
            /*0x18*/ char[] _arrayBestFit;
            /*0x20*/ char _cReplacement;

            /*0xfdc6a0*/ InternalDecoderBestFitFallback(System.Text.Encoding encoding);
            /*0xfdc550*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x6bba80*/ int get_MaxCharCount();
            /*0xfdc5b0*/ bool Equals(object value);
            /*0xfdc670*/ int GetHashCode();
        }

        class InternalDecoderBestFitFallbackBuffer : System.Text.DecoderFallbackBuffer
        {
            static /*0x0*/ object s_InternalSyncObject;
            /*0x20*/ char _cBestFit;
            /*0x24*/ int _iCount;
            /*0x28*/ int _iSize;
            /*0x30*/ System.Text.InternalDecoderBestFitFallback _oFallback;

            static /*0xfdc4b0*/ object get_InternalSyncObject();
            /*0xfdc300*/ InternalDecoderBestFitFallbackBuffer(System.Text.InternalDecoderBestFitFallback fallback);
            /*0xfdc0c0*/ bool Fallback(byte[] bytesUnknown, int index);
            /*0xfdc110*/ char GetNextChar();
            /*0xfdc140*/ void Reset();
            /*0x6bba80*/ int InternalFallback(byte[] bytes, byte* pBytes);
            /*0xfdc150*/ char TryBestFit(byte[] bytesCheck);
        }

        class DecoderExceptionFallback : System.Text.DecoderFallback
        {
            /*0x32f970*/ DecoderExceptionFallback();
            /*0xfd6550*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x388e90*/ int get_MaxCharCount();
            /*0xfd65a0*/ bool Equals(object value);
            /*0xfd65f0*/ int GetHashCode();
        }

        class DecoderExceptionFallbackBuffer : System.Text.DecoderFallbackBuffer
        {
            /*0x32f970*/ DecoderExceptionFallbackBuffer();
            /*0xfd6330*/ bool Fallback(byte[] bytesUnknown, int index);
            /*0x388e90*/ char GetNextChar();
            /*0xfd6340*/ void Throw(byte[] bytesUnknown, int index);
        }

        class DecoderFallbackException : System.ArgumentException
        {
            /*0x98*/ byte[] _bytesUnknown;
            /*0xa0*/ int _index;

            /*0xfd6d50*/ DecoderFallbackException();
            /*0xfd6ce0*/ DecoderFallbackException(string message, byte[] bytesUnknown, int index);
            /*0xfd6d30*/ DecoderFallbackException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
        }

        class DecoderFallback
        {
            static /*0x0*/ System.Text.DecoderFallback s_replacementFallback;
            static /*0x8*/ System.Text.DecoderFallback s_exceptionFallback;

            static /*0xfd6e40*/ System.Text.DecoderFallback get_ReplacementFallback();
            static /*0xfd6da0*/ System.Text.DecoderFallback get_ExceptionFallback();
            /*0x32f970*/ DecoderFallback();
            /*0x1803b0*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x180980*/ int get_MaxCharCount();
        }

        class DecoderFallbackBuffer
        {
            /*0x10*/ byte* byteStart;
            /*0x18*/ char* charEnd;

            /*0x32f970*/ DecoderFallbackBuffer();
            bool Fallback(byte[] bytesUnknown, int index);
            /*0x180560*/ char GetNextChar();
            /*0xfd6a90*/ void Reset();
            /*0xfd6a70*/ void InternalReset();
            /*0xfd6a60*/ void InternalInitialize(byte* byteStart, char* charEnd);
            /*0xfd6820*/ bool InternalFallback(byte[] bytes, byte* pBytes, ref char* chars);
            /*0xfd6600*/ int InternalFallback(byte[] bytes, byte* pBytes);
            /*0xfd6ad0*/ void ThrowLastBytesRecursive(byte[] bytesUnknown);
        }

        class DecoderNLS : System.Text.Decoder
        {
            /*0x20*/ System.Text.Encoding _encoding;
            /*0x28*/ bool _mustFlush;
            /*0x29*/ bool _throwOnOverflow;
            /*0x2c*/ int _bytesUsed;

            /*0xfd7730*/ DecoderNLS(System.Text.Encoding encoding);
            /*0xfd7710*/ void Reset();
            /*0xfd6f10*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0xfd7060*/ int GetCharCount(byte[] bytes, int index, int count, bool flush);
            /*0xfd6f40*/ int GetCharCount(byte* bytes, int count, bool flush);
            /*0xfd7260*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0xfd7400*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
            /*0xfd72a0*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush);
            /*0x4ba480*/ bool get_MustFlush();
            /*0x348b00*/ bool get_HasState();
            /*0xfd6f00*/ void ClearMustFlush();
        }

        class DecoderReplacementFallback : System.Text.DecoderFallback, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ string _strDefault;

            /*0xfd7a20*/ DecoderReplacementFallback();
            /*0xfd7a60*/ DecoderReplacementFallback(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xfd7b20*/ DecoderReplacementFallback(string replacement);
            /*0xfd79c0*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x73d3e0*/ string get_DefaultString();
            /*0xfd78d0*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0xfd7cc0*/ int get_MaxCharCount();
            /*0xfd7950*/ bool Equals(object value);
            /*0xe77c60*/ int GetHashCode();
        }

        class DecoderReplacementFallbackBuffer : System.Text.DecoderFallbackBuffer
        {
            /*0x20*/ string _strDefault;
            /*0x28*/ int _fallbackCount;
            /*0x2c*/ int _fallbackIndex;

            /*0xfd7880*/ DecoderReplacementFallbackBuffer(System.Text.DecoderReplacementFallback fallback);
            /*0xfd77a0*/ bool Fallback(byte[] bytesUnknown, int index);
            /*0xfd77f0*/ char GetNextChar();
            /*0xfd7860*/ void Reset();
            /*0xfd7840*/ int InternalFallback(byte[] bytes, byte* pBytes);
        }

        class Encoder
        {
            /*0x10*/ System.Text.EncoderFallback _fallback;
            /*0x18*/ System.Text.EncoderFallbackBuffer _fallbackBuffer;

            /*0x32f970*/ Encoder();
            /*0x73d3e0*/ System.Text.EncoderFallback get_Fallback();
            /*0xfda780*/ System.Text.EncoderFallbackBuffer get_FallbackBuffer();
            /*0xfd8400*/ bool get_InternalHasFallbackBuffer();
            /*0xfda6a0*/ void Reset();
            int GetByteCount(char[] chars, int index, int count, bool flush);
            /*0xfda2a0*/ int GetByteCount(char* chars, int count, bool flush);
            int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
            /*0xfda440*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush);
        }

        class InternalEncoderBestFitFallback : System.Text.EncoderFallback
        {
            /*0x10*/ System.Text.Encoding _encoding;
            /*0x18*/ char[] _arrayBestFit;

            /*0x49b490*/ InternalEncoderBestFitFallback(System.Text.Encoding encoding);
            /*0xfdce00*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x6bba80*/ int get_MaxCharCount();
            /*0xfdce60*/ bool Equals(object value);
            /*0xfdc670*/ int GetHashCode();
        }

        class InternalEncoderBestFitFallbackBuffer : System.Text.EncoderFallbackBuffer
        {
            static /*0x0*/ object s_InternalSyncObject;
            /*0x30*/ char _cBestFit;
            /*0x38*/ System.Text.InternalEncoderBestFitFallback _oFallback;
            /*0x40*/ int _iCount;
            /*0x44*/ int _iSize;

            static /*0xfdcd50*/ object get_InternalSyncObject();
            /*0xfdcba0*/ InternalEncoderBestFitFallbackBuffer(System.Text.InternalEncoderBestFitFallback fallback);
            /*0xfdc6e0*/ bool Fallback(char charUnknown, int index);
            /*0xfdc810*/ bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0xfdca20*/ char GetNextChar();
            /*0xfdca50*/ bool MovePrevious();
            /*0xfdcdf0*/ int get_Remaining();
            /*0xfdca70*/ void Reset();
            /*0xfdca90*/ char TryBestFit(char cUnknown);
        }

        class EncoderExceptionFallback : System.Text.EncoderFallback
        {
            /*0x32f970*/ EncoderExceptionFallback();
            /*0xfd89e0*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x388e90*/ int get_MaxCharCount();
            /*0xfd8a30*/ bool Equals(object value);
            /*0xfd8a80*/ int GetHashCode();
        }

        class EncoderExceptionFallbackBuffer : System.Text.EncoderFallbackBuffer
        {
            /*0x32f970*/ EncoderExceptionFallbackBuffer();
            /*0xfd8660*/ bool Fallback(char charUnknown, int index);
            /*0xfd8720*/ bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x388e90*/ char GetNextChar();
            /*0x348b00*/ bool MovePrevious();
            /*0x388e90*/ int get_Remaining();
        }

        class EncoderFallbackException : System.ArgumentException
        {
            /*0x98*/ char _charUnknown;
            /*0x9a*/ char _charUnknownHigh;
            /*0x9c*/ char _charUnknownLow;
            /*0xa0*/ int _index;

            /*0xfd8dc0*/ EncoderFallbackException();
            /*0xfd9030*/ EncoderFallbackException(string message, char charUnknown, int index);
            /*0xfd8e10*/ EncoderFallbackException(string message, char charUnknownHigh, char charUnknownLow, int index);
            /*0xfd6d30*/ EncoderFallbackException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
        }

        class EncoderFallback
        {
            static /*0x0*/ System.Text.EncoderFallback s_replacementFallback;
            static /*0x8*/ System.Text.EncoderFallback s_exceptionFallback;

            static /*0xfd9110*/ System.Text.EncoderFallback get_ReplacementFallback();
            static /*0xfd9070*/ System.Text.EncoderFallback get_ExceptionFallback();
            /*0x32f970*/ EncoderFallback();
            /*0x1803b0*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x180980*/ int get_MaxCharCount();
        }

        class EncoderFallbackBuffer
        {
            /*0x10*/ char* charStart;
            /*0x18*/ char* charEnd;
            /*0x20*/ System.Text.EncoderNLS encoder;
            /*0x28*/ bool setEncoder;
            /*0x29*/ bool bUsedEncoder;
            /*0x2a*/ bool bFallingBack;
            /*0x2c*/ int iRecursionCount;

            /*0x32f970*/ EncoderFallbackBuffer();
            bool Fallback(char charUnknown, int index);
            bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x180560*/ char GetNextChar();
            /*0x17cb40*/ bool MovePrevious();
            /*0x180980*/ int get_Remaining();
            /*0xfd8ce0*/ void Reset();
            /*0xfd8cc0*/ void InternalReset();
            /*0xfd8c80*/ void InternalInitialize(char* charStart, char* charEnd, System.Text.EncoderNLS encoder, bool setEncoder);
            /*0xfd8c40*/ char InternalGetNextChar();
            /*0xfd8a90*/ bool InternalFallback(char ch, ref char* chars);
            /*0xfd8d20*/ void ThrowLastCharRecursive(int charRecursive);
        }

        class EncoderNLS : System.Text.Encoder
        {
            /*0x20*/ char _charLeftOver;
            /*0x28*/ System.Text.Encoding _encoding;
            /*0x30*/ bool _mustFlush;
            /*0x31*/ bool _throwOnOverflow;
            /*0x34*/ int _charsUsed;

            /*0xfd9990*/ EncoderNLS(System.Text.Encoding encoding);
            /*0xfd9960*/ void Reset();
            /*0xfd91e0*/ int GetByteCount(char[] chars, int index, int count, bool flush);
            /*0xfd93e0*/ int GetByteCount(char* chars, int count, bool flush);
            /*0xfd9500*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
            /*0xfd9810*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush);
            /*0x79a150*/ System.Text.Encoding get_Encoding();
            /*0x995050*/ bool get_MustFlush();
            /*0xfd91d0*/ void ClearMustFlush();
        }

        class EncoderReplacementFallback : System.Text.EncoderFallback, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ string _strDefault;

            /*0xfda000*/ EncoderReplacementFallback();
            /*0xfda040*/ EncoderReplacementFallback(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xfda100*/ EncoderReplacementFallback(string replacement);
            /*0xfd9fa0*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x73d3e0*/ string get_DefaultString();
            /*0xfd9ea0*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0xfd7cc0*/ int get_MaxCharCount();
            /*0xfd9f30*/ bool Equals(object value);
            /*0xe77c60*/ int GetHashCode();
        }

        class EncoderReplacementFallbackBuffer : System.Text.EncoderFallbackBuffer
        {
            /*0x30*/ string _strDefault;
            /*0x38*/ int _fallbackCount;
            /*0x3c*/ int _fallbackIndex;

            /*0xfd9e30*/ EncoderReplacementFallbackBuffer(System.Text.EncoderReplacementFallback fallback);
            /*0xfd9c50*/ bool Fallback(char charUnknown, int index);
            /*0xfd9a00*/ bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0xfd9da0*/ char GetNextChar();
            /*0xfd9df0*/ bool MovePrevious();
            /*0xfd9e90*/ int get_Remaining();
            /*0xfd9e10*/ void Reset();
        }

        class EncodingNLS : System.Text.Encoding
        {
            /*0xfdbbf0*/ EncodingNLS(int codePage);
            /*0xfda9a0*/ int GetByteCount(char[] chars, int index, int count);
            /*0xfda800*/ int GetByteCount(string s);
            /*0xfda8a0*/ int GetByteCount(char* chars, int count);
            /*0xfdab50*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0xfdaf50*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0xfdae20*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0xfdb220*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0xfdb3d0*/ int GetCharCount(byte* bytes, int count);
            /*0xfdb600*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0xfdb4d0*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0xfdba10*/ string GetString(byte[] bytes, int index, int count);
            /*0xfdb8d0*/ System.Text.Decoder GetDecoder();
            /*0xfdb970*/ System.Text.Encoder GetEncoder();
        }

        class EncodingProvider
        {
            static /*0x0*/ object s_InternalSyncObject;
            static /*0x8*/ System.Text.EncodingProvider[] s_providers;

            static /*0xfdc040*/ EncodingProvider();
            static /*0xfdbd20*/ System.Text.Encoding GetEncodingFromProvider(int codepage);
            static /*0xfdbe20*/ System.Text.Encoding GetEncodingFromProvider(string encodingName);
            static /*0xfdbc00*/ System.Text.Encoding GetEncodingFromProvider(int codepage, System.Text.EncoderFallback enc, System.Text.DecoderFallback dec);
            /*0x1858d0*/ System.Text.Encoding GetEncoding(string name);
            /*0x184ab0*/ System.Text.Encoding GetEncoding(int codepage);
            /*0xfdbf20*/ System.Text.Encoding GetEncoding(int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);
        }

        class Latin1Encoding : System.Text.EncodingNLS, System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Text.Latin1Encoding s_default;
            static /*0x8*/ char[] arrayCharBestFit;

            static /*0xfddaf0*/ Latin1Encoding();
            /*0xfddc20*/ Latin1Encoding();
            /*0xfddbd0*/ Latin1Encoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xfdda10*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xfdd000*/ int GetByteCount(char* chars, int charCount, System.Text.EncoderNLS encoder);
            /*0xfdd270*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0xfdd700*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS decoder);
            /*0xfdd710*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS decoder);
            /*0xfdd790*/ int GetMaxByteCount(int charCount);
            /*0xfdd8d0*/ int GetMaxCharCount(int byteCount);
            /*0xfdcfb0*/ char[] GetBestFitUnicodeToBytesData();
        }

        enum NormalizationForm
        {
            FormC = 1,
            FormD = 2,
            FormKC = 5,
            FormKD = 6,
        }

        class StringBuilder : System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ char[] m_ChunkChars;
            /*0x18*/ System.Text.StringBuilder m_ChunkPrevious;
            /*0x20*/ int m_ChunkLength;
            /*0x24*/ int m_ChunkOffset;
            /*0x28*/ int m_MaxCapacity;

            static /*0xfe1570*/ void FormatError();
            static /*0xfe29d0*/ void ThreadSafeCopy(char* sourcePtr, char[] destination, int destinationIndex, int count);
            static /*0xfe2aa0*/ void ThreadSafeCopy(char[] source, int sourceIndex, System.Span<char> destination, int destinationIndex, int count);
            /*0xfe2fd0*/ StringBuilder();
            /*0xfe3030*/ StringBuilder(int capacity);
            /*0xfe3980*/ StringBuilder(string value);
            /*0xfe39c0*/ StringBuilder(string value, int capacity);
            /*0xfe3230*/ StringBuilder(string value, int startIndex, int length, int capacity);
            /*0xfe3040*/ StringBuilder(int capacity, int maxCapacity);
            /*0xfe3520*/ StringBuilder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xfe3910*/ StringBuilder(System.Text.StringBuilder from);
            /*0xfe3870*/ StringBuilder(int size, int maxCapacity, System.Text.StringBuilder previousBlock);
            /*0xfe28a0*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xfe3a00*/ int get_Capacity();
            /*0x3e3ae0*/ int get_MaxCapacity();
            /*0xfe2e80*/ string ToString();
            /*0xfe2c40*/ string ToString(int startIndex, int length);
            /*0xfe10f0*/ System.Text.StringBuilder Clear();
            /*0xe7e5d0*/ int get_Length();
            /*0xfe3cb0*/ void set_Length(int value);
            /*0xfe3a20*/ char get_Chars(int index);
            /*0xfe3b90*/ void set_Chars(int index, char value);
            /*0xfe0d80*/ System.Text.StringBuilder Append(char value, int repeatCount);
            /*0xfe0b20*/ System.Text.StringBuilder Append(char[] value, int startIndex, int charCount);
            /*0xfe06d0*/ System.Text.StringBuilder Append(string value);
            /*0xfe0620*/ void AppendHelper(string value);
            /*0xfe0f00*/ System.Text.StringBuilder Append(string value, int startIndex, int count);
            /*0xfe0ae0*/ System.Text.StringBuilder Append(System.Text.StringBuilder value);
            /*0xfdf760*/ System.Text.StringBuilder AppendCore(System.Text.StringBuilder value, int startIndex, int count);
            /*0xfe0670*/ System.Text.StringBuilder AppendLine();
            /*0xfe06a0*/ System.Text.StringBuilder AppendLine(string value);
            /*0xfe1110*/ void CopyTo(int sourceIndex, System.Span<char> destination, int count);
            /*0xfe21d0*/ System.Text.StringBuilder Remove(int startIndex, int length);
            /*0xfe0a70*/ System.Text.StringBuilder Append(char value);
            /*0xfe07d0*/ System.Text.StringBuilder Append(int value);
            /*0xfe0a20*/ System.Text.StringBuilder Append(uint value);
            /*0x2a5510*/ System.Text.StringBuilder AppendSpanFormattable<T>(T value);
            /*0xfe0820*/ System.Text.StringBuilder Append(object value);
            /*0xfe0d00*/ System.Text.StringBuilder Append(System.ReadOnlySpan<char> value);
            /*0xfe1c40*/ System.Text.StringBuilder Insert(int index, string value);
            /*0xfe15c0*/ System.Text.StringBuilder Insert(int index, char value);
            /*0xfe05b0*/ System.Text.StringBuilder AppendFormat(string format, object arg0);
            /*0xfe0530*/ System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1);
            /*0xfe0350*/ System.Text.StringBuilder AppendFormat(string format, object[] args);
            /*0xfe04b0*/ System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, string format, object arg0);
            /*0xfe0420*/ System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, string format, object arg0, object arg1, object arg2);
            /*0xfdf9c0*/ System.Text.StringBuilder AppendFormatHelper(System.IFormatProvider provider, string format, System.ParamsArray args);
            /*0xfe0870*/ System.Text.StringBuilder Append(char* value, int valueCount);
            /*0xfe15f0*/ void Insert(int index, char* value, int valueCount);
            /*0xfe26d0*/ void ReplaceInPlaceAtChunk(ref System.Text.StringBuilder chunk, ref int indexInChunk, char* value, int count);
            /*0xfe1530*/ System.Text.StringBuilder FindChunkForIndex(int index);
            /*0xfe3af0*/ System.Span<char> get_RemainingCurrentChunk();
            /*0xfe2180*/ System.Text.StringBuilder Next(System.Text.StringBuilder chunk);
            /*0xfe1340*/ void ExpandByABlock(int minBlockCharCount);
            /*0xfe1d00*/ void MakeRoom(int index, int count, ref System.Text.StringBuilder chunk, ref int indexInChunk, bool doNotMoveFollowingChars);
            /*0xfe24f0*/ void Remove(int startIndex, int count, ref System.Text.StringBuilder chunk, ref int indexInChunk);
        }

        class StringBuilderCache
        {
            [ThreadStatic] static System.Text.StringBuilder t_cachedInstance;

            static /*0xff3480*/ System.Text.StringBuilder Acquire(int capacity);
            static /*0xff35e0*/ void Release(System.Text.StringBuilder sb);
            static /*0xff3550*/ string GetStringAndRelease(System.Text.StringBuilder sb);
        }

        class UTF32Encoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UTF32Encoding s_default;
            static /*0x8*/ System.Text.UTF32Encoding s_bigEndianDefault;
            static /*0x10*/ byte[] s_bigEndianPreamble;
            static /*0x18*/ byte[] s_littleEndianPreamble;
            /*0x38*/ bool _emitUTF32ByteOrderMark;
            /*0x39*/ bool _isThrowException;
            /*0x3a*/ bool _bigEndian;

            static /*0xff6100*/ UTF32Encoding();
            /*0xff62a0*/ UTF32Encoding();
            /*0xff6340*/ UTF32Encoding(bool bigEndian, bool byteOrderMark);
            /*0xff62d0*/ UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);
            /*0xff6010*/ void SetDefaultFallbacks();
            /*0xff3ad0*/ int GetByteCount(char[] chars, int index, int count);
            /*0xff3c80*/ int GetByteCount(string s);
            /*0xff3d20*/ int GetByteCount(char* chars, int count);
            /*0xff4220*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0xff3e20*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0xff40f0*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0xff4e60*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0xff4d60*/ int GetCharCount(byte* bytes, int count);
            /*0xff5140*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0xff5010*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0xff5e10*/ string GetString(byte[] bytes, int index, int count);
            /*0xff3770*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS encoder);
            /*0xff44f0*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0xff4a00*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0xff5410*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0xff5ff0*/ uint GetSurrogate(char cHigh, char cLow);
            /*0xff5b00*/ char GetHighSurrogate(uint iChar);
            /*0xff5b20*/ char GetLowSurrogate(uint iChar);
            /*0xff5990*/ System.Text.Decoder GetDecoder();
            /*0xff59f0*/ System.Text.Encoder GetEncoder();
            /*0xff5b40*/ int GetMaxByteCount(int charCount);
            /*0xff5c80*/ int GetMaxCharCount(int byteCount);
            /*0xff5d60*/ byte[] GetPreamble();
            /*0xff6390*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0xff36a0*/ bool Equals(object value);
            /*0xff5a50*/ int GetHashCode();

            class UTF32Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int iChar;
                /*0x34*/ int readByteCount;

                /*0xfee5c0*/ UTF32Decoder(System.Text.UTF32Encoding encoding);
                /*0xff3660*/ void Reset();
                /*0xff3690*/ bool get_HasState();
            }
        }

        class UTF7Encoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UTF7Encoding s_default;
            /*0x38*/ byte[] _base64Bytes;
            /*0x40*/ sbyte[] _base64Values;
            /*0x48*/ bool[] _directEncode;
            /*0x50*/ bool _allowOptionals;

            static /*0xff8670*/ UTF7Encoding();
            /*0xff8710*/ UTF7Encoding();
            /*0xff8760*/ UTF7Encoding(bool allowOptionals);
            /*0xff8330*/ void MakeTables();
            /*0xff85b0*/ void SetDefaultFallbacks();
            /*0xff64f0*/ bool Equals(object value);
            /*0xff7f50*/ int GetHashCode();
            /*0xff67a0*/ int GetByteCount(char[] chars, int index, int count);
            /*0xff6700*/ int GetByteCount(string s);
            /*0xff65c0*/ int GetByteCount(char* chars, int count);
            /*0xff6c20*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0xff6950*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0xff7370*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0xff75a0*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0xff74a0*/ int GetCharCount(byte* bytes, int count);
            /*0xff7a90*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0xff7d60*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0xff8150*/ string GetString(byte[] bytes, int index, int count);
            /*0xff66c0*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS baseEncoder);
            /*0xff6ef0*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS baseEncoder);
            /*0xff7750*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0xff7790*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0xff7e90*/ System.Text.Decoder GetDecoder();
            /*0xff7ef0*/ System.Text.Encoder GetEncoder();
            /*0xff7fd0*/ int GetMaxByteCount(int charCount);
            /*0xff80c0*/ int GetMaxCharCount(int byteCount);

            class Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int bits;
                /*0x34*/ int bitCount;
                /*0x38*/ bool firstByte;

                /*0xfee5c0*/ Decoder(System.Text.UTF7Encoding encoding);
                /*0xfee580*/ void Reset();
                /*0xfee5e0*/ bool get_HasState();
            }

            class Encoder : System.Text.EncoderNLS
            {
                /*0x38*/ int bits;
                /*0x3c*/ int bitCount;

                /*0xfef080*/ Encoder(System.Text.UTF7Encoding encoding);
                /*0xfef050*/ void Reset();
            }

            class DecoderUTF7Fallback : System.Text.DecoderFallback
            {
                /*0x534220*/ DecoderUTF7Fallback();
                /*0xfee4a0*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
                /*0x6bba80*/ int get_MaxCharCount();
                /*0xfee4f0*/ bool Equals(object value);
                /*0xfee540*/ int GetHashCode();
            }

            class DecoderUTF7FallbackBuffer : System.Text.DecoderFallbackBuffer
            {
                /*0x20*/ char cFallback;
                /*0x24*/ int iCount;
                /*0x28*/ int iSize;

                /*0xfee490*/ DecoderUTF7FallbackBuffer(System.Text.UTF7Encoding.DecoderUTF7Fallback fallback);
                /*0xfee3a0*/ bool Fallback(byte[] bytesUnknown, int index);
                /*0xfee3f0*/ char GetNextChar();
                /*0xfdc140*/ void Reset();
                /*0xfee410*/ int InternalFallback(byte[] bytes, byte* pBytes);
            }
        }

        class UTF8Encoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UTF8Encoding.UTF8EncodingSealed s_default;
            static /*0x8*/ byte[] s_preamble;
            /*0x38*/ bool _emitUTF8Identifier;
            /*0x39*/ bool _isThrowException;

            static /*0xffc0e0*/ UTF8Encoding();
            static /*0xffbfe0*/ int PtrDiff(char* a, char* b);
            static /*0xffbfd0*/ int PtrDiff(byte* a, byte* b);
            static /*0xffbfc0*/ bool InRange(int ch, int start, int end);
            /*0xffc2a0*/ UTF8Encoding();
            /*0xffc2e0*/ UTF8Encoding(bool encoderShouldEmitUTF8Identifier);
            /*0xffc220*/ UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);
            /*0xffbff0*/ void SetDefaultFallbacks();
            /*0xff91b0*/ int GetByteCount(char[] chars, int index, int count);
            /*0xff8af0*/ int GetByteCount(string chars);
            /*0xff9360*/ int GetByteCount(char* chars, int count);
            /*0xff9fc0*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0xffa290*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0xff9e90*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0xffab30*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0xffaa30*/ int GetCharCount(byte* bytes, int count);
            /*0xfface0*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0xffb870*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0xffbde0*/ string GetString(byte[] bytes, int index, int count);
            /*0xff8b90*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS baseEncoder);
            /*0xff96c0*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS baseEncoder);
            /*0xffa560*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0xffafb0*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0xff8a70*/ bool FallbackInvalidByteSequence(ref byte* pSrc, int ch, System.Text.DecoderFallbackBuffer fallback, ref char* pTarget);
            /*0xff8a20*/ int FallbackInvalidByteSequence(byte* pSrc, int ch, System.Text.DecoderFallbackBuffer fallback);
            /*0xff9460*/ byte[] GetBytesUnknown(ref byte* pSrc, int ch);
            /*0xffb9a0*/ System.Text.Decoder GetDecoder();
            /*0xffba00*/ System.Text.Encoder GetEncoder();
            /*0xffbad0*/ int GetMaxByteCount(int charCount);
            /*0xffbc10*/ int GetMaxCharCount(int byteCount);
            /*0xffbd50*/ byte[] GetPreamble();
            /*0xffc330*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0xff8950*/ bool Equals(object value);
            /*0xffba60*/ int GetHashCode();

            class UTF8EncodingSealed : System.Text.UTF8Encoding
            {
                /*0xff8820*/ UTF8EncodingSealed(bool encoderShouldEmitUTF8Identifier);
                /*0xff88a0*/ System.ReadOnlySpan<byte> get_Preamble();
            }

            class UTF8Encoder : System.Text.EncoderNLS
            {
                /*0x38*/ int surrogateChar;

                /*0xfef080*/ UTF8Encoder(System.Text.UTF8Encoding encoding);
                /*0xff87f0*/ void Reset();
            }

            class UTF8Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int bits;

                /*0xfee5c0*/ UTF8Decoder(System.Text.UTF8Encoding encoding);
                /*0xff87b0*/ void Reset();
                /*0xff87e0*/ bool get_HasState();
            }
        }

        class UnicodeEncoding : System.Text.Encoding
        {
            static /*0x0*/ System.Text.UnicodeEncoding s_bigEndianDefault;
            static /*0x8*/ System.Text.UnicodeEncoding s_littleEndianDefault;
            static /*0x10*/ byte[] s_bigEndianPreamble;
            static /*0x18*/ byte[] s_littleEndianPreamble;
            static /*0x20*/ ulong highLowPatternMask;
            /*0x38*/ bool isThrowException;
            /*0x39*/ bool bigEndian;
            /*0x3a*/ bool byteOrderMark;

            static /*0x1000240*/ UnicodeEncoding();
            /*0x10004e0*/ UnicodeEncoding();
            /*0x1000490*/ UnicodeEncoding(bool bigEndian, bool byteOrderMark);
            /*0x1000410*/ UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);
            /*0x1000150*/ void SetDefaultFallbacks();
            /*0xffc590*/ int GetByteCount(char[] chars, int index, int count);
            /*0xffce90*/ int GetByteCount(string s);
            /*0xffcf30*/ int GetByteCount(char* chars, int count);
            /*0xffd030*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0xffdc70*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0xffdf40*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0xffea10*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0xffe910*/ int GetCharCount(byte* bytes, int count);
            /*0xfff800*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0xfff6d0*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0xffff70*/ string GetString(byte[] bytes, int index, int count);
            /*0xffc740*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS encoder);
            /*0xffd300*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0xffe070*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0xffebc0*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0xfffb30*/ System.Text.Encoder GetEncoder();
            /*0xfffad0*/ System.Text.Decoder GetDecoder();
            /*0xfffec0*/ byte[] GetPreamble();
            /*0x1000510*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0xfffc30*/ int GetMaxByteCount(int charCount);
            /*0xfffd70*/ int GetMaxCharCount(int byteCount);
            /*0xffc470*/ bool Equals(object value);
            /*0xfffb90*/ int GetHashCode();

            class Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int lastByte;
                /*0x34*/ char lastChar;

                /*0xfee5d0*/ Decoder(System.Text.UnicodeEncoding encoding);
                /*0xfee550*/ void Reset();
                /*0xfee5f0*/ bool get_HasState();
            }
        }

        struct ValueStringBuilder
        {
            /*0x10*/ char[] _arrayToReturnToPool;
            /*0x18*/ System.Span<char> _chars;
            /*0x28*/ int _pos;

            /*0x1001120*/ ValueStringBuilder(System.Span<char> initialBuffer);
            /*0x8a5c20*/ int get_Length();
            /*0x1001130*/ ref char get_Item(int index);
            /*0x1000f50*/ string ToString();
            /*0x1001030*/ bool TryCopyTo(System.Span<char> destination, ref int charsWritten);
            /*0x1000c20*/ void Append(char c);
            /*0x1000980*/ void Append(string s);
            /*0x1000670*/ void AppendSlow(string s);
            /*0x1000b40*/ void Append(char c, int count);
            /*0x10008a0*/ void Append(char* value, int length);
            /*0x10007c0*/ System.Span<char> AppendSpan(int length);
            /*0x1000d30*/ void GrowAndAppend(char c);
            /*0x1000da0*/ void Grow(int requiredAdditionalCapacity);
            /*0x1000c90*/ void Dispose();
        }

        class Encoding : System.ICloneable
        {
            static /*0x0*/ System.Text.Encoding defaultEncoding;
            static /*0x8*/ System.Text.Encoding unicodeEncoding;
            static /*0x10*/ System.Text.Encoding bigEndianUnicode;
            static /*0x18*/ System.Text.Encoding utf7Encoding;
            static /*0x20*/ System.Text.Encoding utf8Encoding;
            static /*0x28*/ System.Text.Encoding utf32Encoding;
            static /*0x30*/ System.Text.Encoding asciiEncoding;
            static /*0x38*/ System.Text.Encoding latin1Encoding;
            static /*0x40*/ System.Collections.Generic.Dictionary<int, System.Text.Encoding> encodings;
            static /*0x48*/ object s_InternalSyncObject;
            /*0x10*/ int m_codePage;
            /*0x18*/ System.Globalization.CodePageDataItem dataItem;
            /*0x20*/ bool m_deserializedFromEverett;
            /*0x21*/ bool m_isReadOnly;
            /*0x28*/ System.Text.EncoderFallback encoderFallback;
            /*0x30*/ System.Text.DecoderFallback decoderFallback;

            static /*0xff2d80*/ object get_InternalSyncObject();
            static /*0xff1230*/ System.Text.Encoding GetEncoding(int codepage);
            static /*0xff0f30*/ System.Text.Encoding GetEncoding(int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);
            static /*0xff11a0*/ System.Text.Encoding GetEncoding(string name);
            static /*0xff2b00*/ System.Text.Encoding get_ASCII();
            static /*0xff2e30*/ System.Text.Encoding get_Latin1();
            static /*0xfefc20*/ System.Text.Encoding CreateDefaultEncoding();
            static /*0xff2c90*/ System.Text.Encoding get_Default();
            static /*0xff3200*/ System.Text.Encoding get_Unicode();
            static /*0xff2bc0*/ System.Text.Encoding get_BigEndianUnicode();
            static /*0xff3030*/ System.Text.Encoding get_UTF7();
            static /*0xff3120*/ System.Text.Encoding get_UTF8();
            static /*0xff2f60*/ System.Text.Encoding get_UTF32();
            /*0xff2a30*/ Encoding();
            /*0xff2a70*/ Encoding(int codePage);
            /*0xff2630*/ void SetDefaultFallbacks();
            /*0xff2480*/ void OnDeserializing();
            /*0xff2430*/ void OnDeserialized();
            /*0xff2480*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0xff2430*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0xa7cbe0*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0xfefc70*/ void DeserializeEncoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xff24c0*/ void SerializeEncoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xff2090*/ byte[] GetPreamble();
            /*0xff2ef0*/ System.ReadOnlySpan<byte> get_Preamble();
            /*0xff2d70*/ string get_EncodingName();
            /*0x79a150*/ System.Text.EncoderFallback get_EncoderFallback();
            /*0xff33b0*/ void set_EncoderFallback(System.Text.EncoderFallback value);
            /*0x997630*/ System.Text.DecoderFallback get_DecoderFallback();
            /*0xff32e0*/ void set_DecoderFallback(System.Text.DecoderFallback value);
            /*0xfefba0*/ object Clone();
            /*0xff2e20*/ bool get_IsReadOnly();
            /*0xff01b0*/ int GetByteCount(string s);
            int GetByteCount(char[] chars, int index, int count);
            /*0xff0250*/ int GetByteCount(char* chars, int count);
            /*0xff03f0*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS encoder);
            /*0xff0680*/ byte[] GetBytes(char[] chars, int index, int count);
            int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0xff0770*/ byte[] GetBytes(string s);
            /*0xff0880*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0xff0750*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0xff0410*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            int GetCharCount(byte[] bytes, int index, int count);
            /*0xff0930*/ int GetCharCount(byte* bytes, int count);
            /*0xff0ad0*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS decoder);
            /*0xff0af0*/ char[] GetChars(byte[] bytes, int index, int count);
            int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0xff0be0*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0xff0bc0*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS decoder);
            /*0xff2190*/ string GetString(byte* bytes, int byteCount);
            /*0xff2290*/ string GetString(System.ReadOnlySpan<byte> bytes);
            /*0x417e30*/ int get_CodePage();
            /*0xff0e50*/ System.Text.Decoder GetDecoder();
            /*0xff32d0*/ void setReadOnly(bool value);
            /*0xff0ec0*/ System.Text.Encoder GetEncoder();
            /*0x17a330*/ int GetMaxByteCount(int charCount);
            /*0x17a330*/ int GetMaxCharCount(int byteCount);
            /*0xff20e0*/ string GetString(byte[] bytes);
            /*0xff2400*/ string GetString(byte[] bytes, int index, int count);
            /*0xff0040*/ bool Equals(object value);
            /*0xff2020*/ int GetHashCode();
            /*0xff0160*/ char[] GetBestFitUnicodeToBytesData();
            /*0xff0110*/ char[] GetBestFitBytesToUnicodeData();
            /*0xff26d0*/ void ThrowBytesOverflow();
            /*0xff27e0*/ void ThrowBytesOverflow(System.Text.EncoderNLS encoder, bool nothingEncoded);
            /*0xff2880*/ void ThrowCharsOverflow();
            /*0xff2990*/ void ThrowCharsOverflow(System.Text.DecoderNLS decoder, bool nothingDecoded);

            class DefaultEncoder : System.Text.Encoder, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
            {
                /*0x20*/ System.Text.Encoding m_encoding;
                /*0x28*/ bool m_hasInitializedEncoding;
                /*0x2a*/ char charLeftOver;

                /*0xfeeab0*/ DefaultEncoder(System.Text.Encoding encoding);
                /*0xfeed30*/ DefaultEncoder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0xfeebc0*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0xfeec90*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0xfeeb20*/ int GetByteCount(char[] chars, int index, int count, bool flush);
                /*0xfeeaf0*/ int GetByteCount(char* chars, int count, bool flush);
                /*0xfeeb50*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
                /*0xfeeb90*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush);
            }

            class DefaultDecoder : System.Text.Decoder, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
            {
                /*0x20*/ System.Text.Encoding m_encoding;
                /*0x28*/ bool m_hasInitializedEncoding;

                /*0xfeeab0*/ DefaultDecoder(System.Text.Encoding encoding);
                /*0xfee7f0*/ DefaultDecoder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0xfee6e0*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0xfee750*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0xfd6f10*/ int GetCharCount(byte[] bytes, int index, int count);
                /*0xfee610*/ int GetCharCount(byte[] bytes, int index, int count, bool flush);
                /*0xfee640*/ int GetCharCount(byte* bytes, int count, bool flush);
                /*0xfd7260*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
                /*0xfee6a0*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
                /*0xfee670*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush);
            }

            class EncodingCharBuffer
            {
                /*0x10*/ char* chars;
                /*0x18*/ char* charStart;
                /*0x20*/ char* charEnd;
                /*0x28*/ int charCountResult;
                /*0x30*/ System.Text.Encoding enc;
                /*0x38*/ System.Text.DecoderNLS decoder;
                /*0x40*/ byte* byteStart;
                /*0x48*/ byte* byteEnd;
                /*0x50*/ byte* bytes;
                /*0x58*/ System.Text.DecoderFallbackBuffer fallbackBuffer;

                /*0xfefa90*/ EncodingCharBuffer(System.Text.Encoding enc, System.Text.DecoderNLS decoder, char* charStart, int charCount, byte* byteStart, int byteCount);
                /*0xfef6b0*/ bool AddChar(char ch, int numBytes);
                /*0xfef7a0*/ bool AddChar(char ch);
                /*0xfef880*/ void AdjustBytes(int count);
                /*0xfefb90*/ bool get_MoreData();
                /*0xfefa70*/ byte GetNextByte();
                /*0xfefb80*/ int get_BytesUsed();
                /*0xfef890*/ bool Fallback(byte fallbackByte);
                /*0xfef900*/ bool Fallback(byte[] byteBuffer);
                /*0x3e3ae0*/ int get_Count();
            }

            class EncodingByteBuffer
            {
                /*0x10*/ byte* bytes;
                /*0x18*/ byte* byteStart;
                /*0x20*/ byte* byteEnd;
                /*0x28*/ char* chars;
                /*0x30*/ char* charStart;
                /*0x38*/ char* charEnd;
                /*0x40*/ int byteCountResult;
                /*0x48*/ System.Text.Encoding enc;
                /*0x50*/ System.Text.EncoderNLS encoder;
                /*0x58*/ System.Text.EncoderFallbackBuffer fallbackBuffer;

                /*0xfef3c0*/ EncodingByteBuffer(System.Text.Encoding inEncoding, System.Text.EncoderNLS inEncoder, byte* inByteStart, int inByteCount, char* inCharStart, int inCharCount);
                /*0xfef150*/ bool AddByte(byte b, int moreBytesExpected);
                /*0xfef140*/ bool AddByte(byte b1);
                /*0xfef0f0*/ bool AddByte(byte b1, byte b2);
                /*0xfef090*/ bool AddByte(byte b1, byte b2, int moreBytesExpected);
                /*0xfef2c0*/ void MovePrevious(bool bThrow);
                /*0xfef660*/ bool get_MoreData();
                /*0xfef270*/ char GetNextChar();
                /*0xfef640*/ int get_CharsUsed();
                /*0xbe6be0*/ int get_Count();
            }
        }

        enum NormalizationCheck
        {
            Yes = 0,
            No = 1,
            Maybe = 2,
        }

        class Normalization
        {
            static /*0x0*/ byte* props;
            static /*0x8*/ int* mappedChars;
            static /*0x10*/ short* charMapIndex;
            static /*0x18*/ short* helperIndex;
            static /*0x20*/ ushort* mapIdxToComposite;
            static /*0x28*/ byte* combiningClass;
            static /*0x30*/ object forLock;
            static /*0x38*/ bool isReady;

            static /*0xe571a0*/ Normalization();
            static /*0xe56860*/ uint PropValue(int cp);
            static /*0xe54dc0*/ int CharMapIdx(int cp);
            static /*0xe564e0*/ byte GetCombiningClass(int c);
            static /*0xe56590*/ int GetPrimaryCompositeFromMapIndex(int src);
            static /*0xe56640*/ int GetPrimaryCompositeHelperIndex(int cp);
            static /*0xe553b0*/ string Compose(string source, int checkType);
            static /*0xe55050*/ System.Text.StringBuilder Combine(string source, int start, int checkType);
            static /*0xe55180*/ void Combine(System.Text.StringBuilder sb, int i, int checkType);
            static /*0xe54e50*/ int CombineHangul(System.Text.StringBuilder sb, string s, int current);
            static /*0xe56030*/ int Fetch(System.Text.StringBuilder sb, string s, int i);
            static /*0xe56cc0*/ int TryComposeWithPreviousStarter(System.Text.StringBuilder sb, string s, int current);
            static /*0xe57030*/ int TryCompose(int i, int starter, int candidate);
            static /*0xe557b0*/ string Decompose(string source, int checkType);
            static /*0xe55d40*/ void Decompose(string source, ref System.Text.StringBuilder sb, int checkType);
            static /*0xe56a30*/ void ReorderCanonical(string src, ref System.Text.StringBuilder sb, int start);
            static /*0xe555a0*/ void DecomposeChar(ref System.Text.StringBuilder sb, ref int[] buf, string s, int i, int checkType, ref int start);
            static /*0xe568f0*/ System.Text.NormalizationCheck QuickCheck(char c, int type);
            static /*0xe56080*/ int GetCanonicalHangul(int s, int[] buf, int bufIdx);
            static /*0xe561a0*/ int GetCanonical(int c, int[] buf, int bufIdx, int checkType);
            static /*0xe566f0*/ string Normalize(string source, System.Text.NormalizationForm normalizationForm);
            static /*0xe567c0*/ string Normalize(string source, int type);
            static /*0xe573f0*/ void load_normalization_resource(ref nint props, ref nint mappedChars, ref nint charMapIndex, ref nint helperIndex, ref nint mapIdxToComposite, ref nint combiningClass);
        }

        class EncodingHelper
        {
            static /*0x0*/ System.Text.Encoding utf8EncodingWithoutMarkers;
            static /*0x8*/ object lockobj;
            static /*0x10*/ System.Reflection.Assembly i18nAssembly;
            static /*0x18*/ bool i18nDisabled;

            static /*0xe51da0*/ EncodingHelper();
            static /*0xe51e20*/ System.Text.Encoding get_UTF8Unmarked();
            static /*0xe51810*/ string InternalCodePage(ref int code_page);
            static /*0xe51700*/ System.Text.Encoding GetDefaultEncoding();
            static /*0xe51820*/ object InvokeI18N(string name, object[] args);
        }
    }

    namespace Security
    {
        class SecureString
        {
            /*0x10*/ int length;
            /*0x14*/ bool disposed;
            /*0x18*/ byte[] data;

            /*0xe63a20*/ int get_Length();
            /*0x6b4390*/ void Encrypt();
            /*0x6b4390*/ void Decrypt();
            /*0xe63970*/ byte[] GetBuffer();
        }

        class SecurityException : System.SystemException
        {
            /*0x90*/ string permissionState;

            /*0xe63b50*/ SecurityException();
            /*0xe63b30*/ SecurityException(string message);
            /*0xe63ba0*/ SecurityException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xe63a90*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xe63b20*/ string ToString();
        }

        class SecurityManager
        {
            static /*0x32d010*/ void EnsureElevatedPermissions();
        }

        namespace Policy
        {
            class Evidence : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ bool _locked;
                /*0x18*/ System.Collections.ArrayList hostEvidenceList;
                /*0x20*/ System.Collections.ArrayList assemblyEvidenceList;

                /*0x32f970*/ Evidence();
                /*0xe52390*/ int get_Count();
                /*0x348b00*/ bool get_IsSynchronized();
                /*0x621ca0*/ object get_SyncRoot();
                /*0xe521f0*/ void CopyTo(System.Array array, int index);
                /*0xe522c0*/ System.Collections.IEnumerator GetEnumerator();

                class EvidenceEnumerator : System.Collections.IEnumerator
                {
                    /*0x10*/ System.Collections.IEnumerator currentEnum;
                    /*0x18*/ System.Collections.IEnumerator hostEnum;
                    /*0x20*/ System.Collections.IEnumerator assemblyEnum;

                    /*0xe52140*/ EvidenceEnumerator(System.Collections.IEnumerator hostenum, System.Collections.IEnumerator assemblyenum);
                    /*0xe52020*/ bool MoveNext();
                    /*0xe520b0*/ void Reset();
                    /*0xe521a0*/ object get_Current();
                }
            }
        }

        namespace Cryptography
        {
            class HashAlgorithm : System.IDisposable
            {
                /*0x10*/ bool _disposed;
                /*0x14*/ int HashSizeValue;
                /*0x18*/ byte[] HashValue;
                /*0x20*/ int State;

                /*0x32f970*/ HashAlgorithm();
                /*0xe52530*/ byte[] ComputeHash(byte[] buffer);
                /*0xe52470*/ byte[] CaptureHashCodeAndReinitialize();
                /*0xe526c0*/ void Dispose();
                /*0xe526b0*/ void Dispose(bool disposing);
                void HashCore(byte[] array, int ibStart, int cbSize);
                /*0x1803b0*/ byte[] HashFinal();
                /*0x180fc0*/ void Initialize();
            }

            class CryptographicException : System.SystemException
            {
                /*0xe50b50*/ CryptographicException();
                /*0xe50bb0*/ CryptographicException(string message);
                /*0xe291b0*/ CryptographicException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class CryptographicUnexpectedOperationException : System.Security.Cryptography.CryptographicException
            {
                /*0xe50be0*/ CryptographicUnexpectedOperationException();
                /*0xe50c50*/ CryptographicUnexpectedOperationException(string message);
                /*0xe291b0*/ CryptographicUnexpectedOperationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class RandomNumberGenerator : System.IDisposable
            {
                /*0x32f970*/ RandomNumberGenerator();
                /*0xe58c00*/ void Dispose();
                /*0x32d010*/ void Dispose(bool disposing);
            }

            class SHA1 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0xe63820*/ System.Security.Cryptography.SHA1 Create();
                /*0xe63950*/ SHA1();
            }

            class CryptoConfig
            {
                static /*0x0*/ object lockObject;

                static /*0xe50ad0*/ CryptoConfig();
                static /*0xe50680*/ byte[] EncodeOID(string str);
                static /*0xe504d0*/ byte[] EncodeLongNumber(long x);
            }

            class RNGCryptoServiceProvider : System.Security.Cryptography.RandomNumberGenerator
            {
                static /*0x0*/ object _lock;
                /*0x10*/ nint _handle;

                static /*0xe58aa0*/ RNGCryptoServiceProvider();
                static /*0xe58a90*/ bool RngOpen();
                static /*0xe58a80*/ nint RngInitialize(byte* seed, nint seed_length);
                static /*0xe58a70*/ void RngClose(nint handle);
                /*0xe58b30*/ RNGCryptoServiceProvider();
                /*0xe58920*/ void Check();
                /*0xe589b0*/ void Finalize();
                /*0x32d010*/ void Dispose(bool disposing);
            }

            class SHA1Internal
            {
                /*0x10*/ uint[] _H;
                /*0x18*/ ulong count;
                /*0x20*/ byte[] _ProcessingBuffer;
                /*0x28*/ int _ProcessingBufferCount;
                /*0x30*/ uint[] buff;

                static /*0xe625a0*/ void InitialiseBuff(uint[] buff, byte[] input, uint inputOffset);
                static /*0xe62040*/ void FillBuff(uint[] buff);
                /*0xe63770*/ SHA1Internal();
                /*0xe62370*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0xe624b0*/ byte[] HashFinal();
                /*0xe62d20*/ void Initialize();
                /*0xe62db0*/ void ProcessBlock(byte[] inputBuffer, uint inputOffset);
                /*0xe63520*/ void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0xe61f60*/ void AddLength(ulong length, byte[] buffer, int position);
            }

            class SHA1CryptoServiceProvider : System.Security.Cryptography.SHA1
            {
                /*0x28*/ System.Security.Cryptography.SHA1Internal sha;

                /*0xe61e50*/ SHA1CryptoServiceProvider();
                /*0xe61b70*/ void Finalize();
                /*0xe526b0*/ void Dispose(bool disposing);
                /*0xe61be0*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0xe61d30*/ byte[] HashFinal();
                /*0xe61e30*/ void Initialize();
            }
        }

        namespace Principal
        {
            interface IPrincipal
            {
            }
        }
    }

    namespace Runtime
    {
        class AmbiguousImplementationException : System.Exception
        {
            /*0xe48d60*/ AmbiguousImplementationException();
            /*0xe48e50*/ AmbiguousImplementationException(string message);
            /*0xe48dd0*/ AmbiguousImplementationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class RuntimeImports
        {
            static /*0xe61b40*/ void Memmove(byte* dest, byte* src, uint len);
            static /*0xe61b50*/ void Memmove_wbarrier(byte* dest, byte* src, uint len, nint type_handle);
            static /*0xe61b60*/ void _ecvt_s(byte* buffer, int sizeInBytes, double value, int count, int* dec, int* sign);
        }

        namespace Remoting
        {
            class ChannelInfo : System.Runtime.Remoting.IChannelInfo
            {
                /*0x10*/ object[] channelData;

                /*0xe49a20*/ ChannelInfo();
                /*0xe49a80*/ ChannelInfo(object remoteChannelData);
                /*0x73d3e0*/ object[] get_ChannelData();
            }

            class ActivatedClientTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ string applicationUrl;
                /*0x28*/ System.Type obj_type;

                /*0xe48a90*/ ActivatedClientTypeEntry(string typeName, string assemblyName, string appUrl);
                /*0x61a260*/ string get_ApplicationUrl();
                /*0x388e90*/ System.Runtime.Remoting.Contexts.IContextAttribute[] get_ContextAttributes();
                /*0x79a150*/ System.Type get_ObjectType();
                /*0xe48a70*/ string ToString();
            }

            class ActivatedServiceTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ System.Type obj_type;

                /*0xe48c10*/ ActivatedServiceTypeEntry(string typeName, string assemblyName);
                /*0x61a260*/ System.Type get_ObjectType();
                /*0xe48c00*/ string ToString();
            }

            enum CustomErrorsModes
            {
                On = 0,
                Off = 1,
                RemoteOnly = 2,
            }

            class EnvoyInfo : System.Runtime.Remoting.IEnvoyInfo
            {
                /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink envoySinks;

                /*0x49b490*/ EnvoyInfo(System.Runtime.Remoting.Messaging.IMessageSink sinks);
                /*0x73d3e0*/ System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySinks();
            }

            interface IChannelInfo
            {
                /*0x1803b0*/ object[] get_ChannelData();
            }

            interface IEnvoyInfo
            {
                /*0x1803b0*/ System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySinks();
            }

            interface IRemotingTypeInfo
            {
                /*0x1803b0*/ string get_TypeName();
                bool CanCastTo(System.Type fromType, object o);
            }

            class Identity
            {
                /*0x10*/ string _objectUri;
                /*0x18*/ System.Runtime.Remoting.Messaging.IMessageSink _channelSink;
                /*0x20*/ System.Runtime.Remoting.Messaging.IMessageSink _envoySink;
                /*0x28*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection _clientDynamicProperties;
                /*0x30*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection _serverDynamicProperties;
                /*0x38*/ System.Runtime.Remoting.ObjRef _objRef;
                /*0x40*/ bool _disposed;

                /*0x49b490*/ Identity(string objectUri);
                /*0x1858d0*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
                /*0x32f410*/ System.Runtime.Remoting.Messaging.IMessageSink get_ChannelSink();
                /*0x7963c0*/ void set_ChannelSink(System.Runtime.Remoting.Messaging.IMessageSink value);
                /*0x61a260*/ System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySink();
                /*0x73d3e0*/ string get_ObjectUri();
                /*0x9f12f0*/ void set_ObjectUri(string value);
                /*0xe52980*/ bool get_IsConnected();
                /*0xb61dd0*/ bool get_Disposed();
                /*0xb61de0*/ void set_Disposed(bool value);
                /*0xe52870*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection get_ClientDynamicProperties();
                /*0xe52930*/ bool get_HasServerDynamicSinks();
                /*0xe52730*/ void NotifyClientDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
                /*0xe527d0*/ void NotifyServerDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
            }

            class ClientIdentity : System.Runtime.Remoting.Identity
            {
                /*0x48*/ System.WeakReference _proxyReference;

                /*0xe49d80*/ ClientIdentity(string objectUri, System.Runtime.Remoting.ObjRef objRef);
                /*0xe49e60*/ System.MarshalByRefObject get_ClientProxy();
                /*0xe49f20*/ void set_ClientProxy(System.MarshalByRefObject value);
                /*0x995140*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
                /*0xe49ef0*/ string get_TargetUri();
            }

            class InternalRemotingServices
            {
                static /*0x0*/ System.Collections.Hashtable _soapAttributes;

                static /*0xe52f00*/ InternalRemotingServices();
                static /*0xe52990*/ System.Runtime.Remoting.Metadata.SoapAttribute GetCachedSoapAttribute(object reflectionObject);
            }

            class ObjRef : System.Runtime.Serialization.IObjectReference, System.Runtime.Serialization.ISerializable
            {
                static /*0x0*/ int MarshalledObjectRef;
                static /*0x4*/ int WellKnowObjectRef;
                /*0x10*/ System.Runtime.Remoting.IChannelInfo channel_info;
                /*0x18*/ string uri;
                /*0x20*/ System.Runtime.Remoting.IRemotingTypeInfo typeInfo;
                /*0x28*/ System.Runtime.Remoting.IEnvoyInfo envoyInfo;
                /*0x30*/ int flags;
                /*0x38*/ System.Type _serverType;

                static /*0xe57900*/ ObjRef();
                /*0xe58020*/ ObjRef();
                /*0xe57fd0*/ ObjRef(string uri, System.Runtime.Remoting.IChannelInfo cinfo);
                /*0xe57950*/ ObjRef(System.Type type, string url, object remoteChannelData);
                /*0xe57a70*/ ObjRef(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0xe57400*/ System.Runtime.Remoting.ObjRef DeserializeInTheCurrentDomain(int domainId, byte[] tInfo);
                /*0xe577c0*/ byte[] SerializeType();
                /*0xe58040*/ bool get_IsReferenceToWellKnow();
                /*0x73d3e0*/ System.Runtime.Remoting.IChannelInfo get_ChannelInfo();
                /*0x79a150*/ System.Runtime.Remoting.IEnvoyInfo get_EnvoyInfo();
                /*0x98b030*/ void set_EnvoyInfo(System.Runtime.Remoting.IEnvoyInfo value);
                /*0x61a260*/ System.Runtime.Remoting.IRemotingTypeInfo get_TypeInfo();
                /*0x7965a0*/ void set_TypeInfo(System.Runtime.Remoting.IRemotingTypeInfo value);
                /*0x32f410*/ string get_URI();
                /*0x7963c0*/ void set_URI(string value);
                /*0xe57540*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0xe576f0*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0xe57850*/ void UpdateChannelInfo();
                /*0xe580a0*/ System.Type get_ServerType();
            }

            class RemotingConfiguration
            {
                static /*0x0*/ string applicationID;
                static /*0x8*/ string applicationName;
                static /*0x10*/ string processGuid;
                static /*0x18*/ bool defaultConfigRead;
                static /*0x19*/ bool defaultDelayedConfigRead;
                static /*0x1c*/ System.Runtime.Remoting.CustomErrorsModes _errorMode;
                static /*0x20*/ System.Collections.Hashtable wellKnownClientEntries;
                static /*0x28*/ System.Collections.Hashtable activatedClientEntries;
                static /*0x30*/ System.Collections.Hashtable wellKnownServiceEntries;
                static /*0x38*/ System.Collections.Hashtable activatedServiceEntries;
                static /*0x40*/ System.Collections.Hashtable channelTemplates;
                static /*0x48*/ System.Collections.Hashtable clientProviderTemplates;
                static /*0x50*/ System.Collections.Hashtable serverProviderTemplates;

                static /*0xe5c0e0*/ RemotingConfiguration();
                static /*0xe5c3b0*/ string get_ApplicationName();
                static /*0xe5c4e0*/ void set_ApplicationName(string value);
                static /*0xe5c400*/ string get_ProcessId();
                static /*0xe5a550*/ void LoadDefaultDelayedChannels();
                static /*0xe5a120*/ bool IsActivationAllowed(System.Type svrType);
                static /*0xe5a250*/ System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType(System.Type svrType);
                static /*0xe5a3d0*/ System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType(System.Type svrType);
                static /*0xe5a890*/ void RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry entry);
                static /*0xe5ab20*/ void RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry entry);
                static /*0xe5ba90*/ void RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry entry);
                static /*0xe5bd20*/ void RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry entry);
                static /*0xe5ac50*/ void RegisterChannelTemplate(System.Runtime.Remoting.ChannelData channel);
                static /*0xe5b530*/ void RegisterClientProviderTemplate(System.Runtime.Remoting.ProviderData prov);
                static /*0xe5b5b0*/ void RegisterServerProviderTemplate(System.Runtime.Remoting.ProviderData prov);
                static /*0xe5acd0*/ void RegisterChannels(System.Collections.ArrayList channels, bool onlyDelayed);
                static /*0xe5b630*/ void RegisterTypes(System.Collections.ArrayList types);
                static /*0xe5a090*/ bool CustomErrorsEnabled(bool isLocalRequest);
                static /*0xe5bea0*/ void SetCustomErrorsMode(string mode);
            }

            class ConfigHandler : Mono.Xml.SmallXmlParser.IContentHandler
            {
                /*0x10*/ System.Collections.ArrayList typeEntries;
                /*0x18*/ System.Collections.ArrayList channelInstances;
                /*0x20*/ System.Runtime.Remoting.ChannelData currentChannel;
                /*0x28*/ System.Collections.Stack currentProviderData;
                /*0x30*/ string currentClientUrl;
                /*0x38*/ string appName;
                /*0x40*/ string currentXmlPath;
                /*0x48*/ bool onlyDelayedChannels;

                /*0xe4d700*/ ConfigHandler(bool onlyDelayedChannels);
                /*0xe4d610*/ void ValidatePath(string element, string[] paths);
                /*0xe49f90*/ bool CheckPath(string path);
                /*0x32d010*/ void OnStartParsing(Mono.Xml.SmallXmlParser parser);
                /*0x32d010*/ void OnProcessingInstruction(string name, string text);
                /*0x32d010*/ void OnIgnorableWhitespace(string s);
                /*0xe4a420*/ void OnStartElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0xe4a580*/ void ParseElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0xe4a260*/ void OnEndElement(string name);
                /*0xe4c0e0*/ void ReadCustomProviderData(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0xe4c670*/ void ReadLifetine(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0xe4b340*/ System.TimeSpan ParseTime(string s);
                /*0xe4b6c0*/ void ReadChannel(Mono.Xml.SmallXmlParser.IAttrList attrs, bool isTemplate);
                /*0xe4cc40*/ System.Runtime.Remoting.ProviderData ReadProvider(string name, Mono.Xml.SmallXmlParser.IAttrList attrs, bool isTemplate);
                /*0xe4bc50*/ void ReadClientActivated(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0xe4d120*/ void ReadServiceActivated(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0xe4bec0*/ void ReadClientWellKnown(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0xe4d300*/ void ReadServiceWellKnown(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0xe4c4c0*/ void ReadInteropXml(Mono.Xml.SmallXmlParser.IAttrList attrs, bool isElement);
                /*0xe4c9b0*/ void ReadPreload(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0xe4a180*/ string GetNotNull(Mono.Xml.SmallXmlParser.IAttrList attrs, string name);
                /*0xe4a0a0*/ string ExtractAssembly(ref string type);
                /*0x32d010*/ void OnChars(string ch);
                /*0xe4a310*/ void OnEndParsing(Mono.Xml.SmallXmlParser parser);
            }

            class ChannelData
            {
                /*0x10*/ string Ref;
                /*0x18*/ string Type;
                /*0x20*/ string Id;
                /*0x28*/ string DelayLoadAsClientChannel;
                /*0x30*/ System.Collections.ArrayList _serverProviders;
                /*0x38*/ System.Collections.ArrayList _clientProviders;
                /*0x40*/ System.Collections.Hashtable _customProperties;

                /*0xe49800*/ ChannelData();
                /*0xe499b0*/ System.Collections.ArrayList get_ServerProviders();
                /*0xe498d0*/ System.Collections.ArrayList get_ClientProviders();
                /*0xe49940*/ System.Collections.Hashtable get_CustomProperties();
                /*0xe48ec0*/ void CopyFrom(System.Runtime.Remoting.ChannelData other);
            }

            class ProviderData
            {
                /*0x10*/ string Ref;
                /*0x18*/ string Type;
                /*0x20*/ string Id;
                /*0x28*/ System.Collections.Hashtable CustomProperties;
                /*0x30*/ System.Collections.IList CustomData;

                /*0xe52400*/ ProviderData();
                /*0xe58190*/ void CopyFrom(System.Runtime.Remoting.ProviderData other);
            }

            class FormatterData : System.Runtime.Remoting.ProviderData
            {
                /*0xe52400*/ FormatterData();
            }

            class RemotingException : System.SystemException
            {
                /*0xe5c570*/ RemotingException();
                /*0xe5c560*/ RemotingException(string message);
                /*0xe291b0*/ RemotingException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0xe5c550*/ RemotingException(string message, System.Exception InnerException);
            }

            class RemotingServices
            {
                static /*0x0*/ System.Collections.Hashtable uri_hash;
                static /*0x8*/ System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _serializationFormatter;
                static /*0x10*/ System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _deserializationFormatter;
                static /*0x18*/ string app_id;
                static /*0x20*/ object app_id_lock;
                static /*0x28*/ int next_id;
                static /*0x30*/ System.Reflection.MethodInfo FieldSetterMethod;
                static /*0x38*/ System.Reflection.MethodInfo FieldGetterMethod;

                static /*0xe61760*/ RemotingServices();
                static /*0xe605c0*/ object InternalExecute(System.Reflection.MethodBase method, object obj, object[] parameters, ref object[] out_args);
                static /*0xe5fe20*/ System.Reflection.MethodBase GetVirtualMethod(System.Type type, System.Reflection.MethodBase method);
                static /*0xe60660*/ bool IsTransparentProxy(object proxy);
                static /*0xe5fe30*/ System.Runtime.Remoting.Messaging.IMethodReturnMessage InternalExecuteMessage(System.MarshalByRefObject target, System.Runtime.Remoting.Messaging.IMethodCallMessage reqMsg);
                static /*0xe5d700*/ object Connect(System.Type classToProxy, string url);
                static /*0xe5d610*/ object Connect(System.Type classToProxy, string url, object data);
                static /*0xe5fd80*/ System.Type GetServerTypeForUri(string URI);
                static /*0xe611f0*/ object Unmarshal(System.Runtime.Remoting.ObjRef objectRef);
                static /*0xe61240*/ object Unmarshal(System.Runtime.Remoting.ObjRef objectRef, bool fRefine);
                static /*0xe60720*/ System.Runtime.Remoting.ObjRef Marshal(System.MarshalByRefObject Obj);
                static /*0xe606a0*/ System.Runtime.Remoting.ObjRef Marshal(System.MarshalByRefObject Obj, string ObjURI, System.Type RequestedType);
                static /*0xe60770*/ string NewUri();
                static /*0xe5fcc0*/ System.Runtime.Remoting.Proxies.RealProxy GetRealProxy(object proxy);
                static /*0xe5eee0*/ System.Reflection.MethodBase GetMethodBaseFromMethodMessage(System.Runtime.Remoting.Messaging.IMethodMessage msg);
                static /*0xe5f0e0*/ System.Reflection.MethodBase GetMethodBaseFromName(System.Type type, string methodName, System.Type[] signature);
                static /*0xe5e5e0*/ System.Reflection.MethodBase FindInterfaceMethod(System.Type type, string methodName, System.Type[] signature);
                static /*0xe5f350*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                static /*0xe605d0*/ bool IsOneWay(System.Reflection.MethodBase method);
                static /*0xe5dde0*/ object CreateClientProxy(System.Runtime.Remoting.ActivatedClientTypeEntry entry, object[] activationAttributes);
                static /*0xe5da60*/ object CreateClientProxy(System.Type objectType, string url, object[] activationAttributes);
                static /*0xe5dcb0*/ object CreateClientProxy(System.Runtime.Remoting.WellKnownClientTypeEntry entry);
                static /*0xe5d890*/ object CreateClientProxyForContextBound(System.Type type, object[] activationAttributes);
                static /*0xe5e850*/ System.Runtime.Remoting.Identity GetIdentityForUri(string uri);
                static /*0xe60d00*/ string RemoveAppNameFromUri(string uri);
                static /*0xe5f400*/ System.Runtime.Remoting.ClientIdentity GetOrCreateClientIdentity(System.Runtime.Remoting.ObjRef objRef, System.Type proxyType, ref object clientProxy);
                static /*0xe5e720*/ System.Runtime.Remoting.Messaging.IMessageSink GetClientChannelSinkChain(string url, object channelData, ref string objectUri);
                static /*0xe5def0*/ System.Runtime.Remoting.ClientActivatedIdentity CreateContextBoundObjectIdentity(System.Type objectType);
                static /*0xe5d7e0*/ System.Runtime.Remoting.ClientActivatedIdentity CreateClientActivatedServerIdentity(System.MarshalByRefObject realObject, System.Type objectType, string objectUri);
                static /*0xe5dff0*/ System.Runtime.Remoting.ServerIdentity CreateWellKnownServerIdentity(System.Type objectType, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);
                static /*0xe60af0*/ void RegisterServerIdentity(System.Runtime.Remoting.ServerIdentity identity);
                static /*0xe5fbc0*/ object GetProxyForRemoteObject(System.Runtime.Remoting.ObjRef objref, System.Type classToProxy);
                static /*0xe5fd10*/ object GetRemoteObject(System.Runtime.Remoting.ObjRef objRef, System.Type proxyType);
                static /*0xe60e00*/ byte[] SerializeCallData(object obj);
                static /*0xe5e120*/ object DeserializeCallData(byte[] array);
                static /*0xe61040*/ byte[] SerializeExceptionData(System.Exception ex);
                static /*0xe60ab0*/ void RegisterInternalChannels();
                static /*0xe5e390*/ void DisposeIdentity(System.Runtime.Remoting.Identity ident);
                static /*0xe5eba0*/ System.Runtime.Remoting.Identity GetMessageTargetIdentity(System.Runtime.Remoting.Messaging.IMessage msg);
                static /*0xe61130*/ void SetMessageTargetIdentity(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Identity ident);
                static /*0xe615c0*/ bool UpdateOutArgObject(System.Reflection.ParameterInfo pi, object local, object remote);
                static /*0xe5f2e0*/ string GetNormalizedUri(string uri);

                class CACD
                {
                    /*0x10*/ object d;
                    /*0x18*/ object c;

                    /*0x32f970*/ CACD();
                }
            }

            class ServerIdentity : System.Runtime.Remoting.Identity
            {
                /*0x48*/ System.Type _objectType;
                /*0x50*/ System.MarshalByRefObject _serverObject;
                /*0x58*/ System.Runtime.Remoting.Messaging.IMessageSink _serverSink;
                /*0x60*/ System.Runtime.Remoting.Contexts.Context _context;
                /*0x68*/ System.Runtime.Remoting.Lifetime.Lease _lease;

                /*0xe64340*/ ServerIdentity(string objectUri, System.Runtime.Remoting.Contexts.Context context, System.Type objectType);
                /*0x4e40d0*/ System.Type get_ObjectType();
                /*0xe64020*/ void StartTrackingLifetime(System.Runtime.Remoting.Lifetime.ILease lease);
                /*0xe64010*/ void OnLifetimeExpired();
                /*0xe63d70*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
                /*0xe63cf0*/ void AttachServerObject(System.MarshalByRefObject serverObject, System.Runtime.Remoting.Contexts.Context context);
                /*0x8af030*/ System.Runtime.Remoting.Lifetime.Lease get_Lease();
                /*0xe643b0*/ System.Runtime.Remoting.Contexts.Context get_Context();
                /*0xe643c0*/ void set_Context(System.Runtime.Remoting.Contexts.Context value);
                /*0x1858d0*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0x177730*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                /*0xe63f70*/ void DisposeServerObject();
            }

            class ClientActivatedIdentity : System.Runtime.Remoting.ServerIdentity
            {
                /*0x70*/ System.MarshalByRefObject _targetThis;

                /*0xe49d10*/ ClientActivatedIdentity(string objectUri, System.Type objectType);
                /*0x4e40e0*/ System.MarshalByRefObject GetServerObject();
                /*0xe49c60*/ void SetClientProxy(System.MarshalByRefObject obj);
                /*0xe49c00*/ void OnLifetimeExpired();
                /*0xe49c70*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0xe49b40*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class SingletonIdentity : System.Runtime.Remoting.ServerIdentity
            {
                /*0xe64340*/ SingletonIdentity(string objectUri, System.Runtime.Remoting.Contexts.Context context, System.Type objectType);
                /*0xe647a0*/ System.MarshalByRefObject GetServerObject();
                /*0xe648c0*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0xe646f0*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class SingleCallIdentity : System.Runtime.Remoting.ServerIdentity
            {
                /*0xe64340*/ SingleCallIdentity(string objectUri, System.Runtime.Remoting.Contexts.Context context, System.Type objectType);
                /*0xe64570*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0xe643d0*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class DisposerReplySink : System.Runtime.Remoting.Messaging.IMessageSink
            {
                /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _next;
                /*0x18*/ System.IDisposable _disposable;

                /*0xce3b90*/ DisposerReplySink(System.Runtime.Remoting.Messaging.IMessageSink next, System.IDisposable disposable);
                /*0xe50cd0*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0xe50c90*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class SoapServices
            {
                static /*0x0*/ System.Collections.Hashtable _xmlTypes;
                static /*0x8*/ System.Collections.Hashtable _xmlElements;
                static /*0x10*/ System.Collections.Hashtable _soapActions;
                static /*0x18*/ System.Collections.Hashtable _soapActionsMethods;
                static /*0x20*/ System.Collections.Hashtable _typeInfos;

                static /*0xe65b30*/ SoapServices();
                static /*0xe65cc0*/ string get_XmlNsForClrTypeWithAssembly();
                static /*0xe65d20*/ string get_XmlNsForClrTypeWithNs();
                static /*0xe65cf0*/ string get_XmlNsForClrTypeWithNsAndAssembly();
                static /*0xe64950*/ string CodeXmlNamespaceForClrTypeNamespace(string typeNamespace, string assemblyName);
                static /*0xe64d20*/ string GetNameKey(string name, string namspace);
                static /*0xe64bb0*/ string GetAssemblyName(System.Reflection.MethodBase mb);
                static /*0xe64d80*/ bool GetXmlElementForInteropType(System.Type type, ref string xmlElement, ref string xmlNamespace);
                static /*0xe64e90*/ string GetXmlNamespaceForMethodCall(System.Reflection.MethodBase mb);
                static /*0xe64f40*/ string GetXmlNamespaceForMethodResponse(System.Reflection.MethodBase mb);
                static /*0xe64ff0*/ bool GetXmlTypeForInteropType(System.Type type, ref string xmlType, ref string xmlTypeNamespace);
                static /*0xe65760*/ void PreLoad(System.Reflection.Assembly assembly);
                static /*0xe650e0*/ void PreLoad(System.Type type);
                static /*0xe65820*/ void RegisterInteropXmlElement(string xmlElement, string xmlNamespace, System.Type type);
                static /*0xe659b0*/ void RegisterInteropXmlType(string xmlType, string xmlTypeNamespace, System.Type type);
                static /*0xe64ae0*/ string EncodeNs(string ns);

                class TypeInfo
                {
                    /*0x10*/ System.Collections.Hashtable Attributes;
                    /*0x18*/ System.Collections.Hashtable Elements;

                    /*0x32f970*/ TypeInfo();
                }
            }

            class TypeEntry
            {
                /*0x10*/ string assembly_name;
                /*0x18*/ string type_name;

                /*0x32f970*/ TypeEntry();
                /*0x73d3e0*/ string get_AssemblyName();
                /*0x9f12f0*/ void set_AssemblyName(string value);
                /*0x32f410*/ string get_TypeName();
                /*0x7963c0*/ void set_TypeName(string value);
            }

            class TypeInfo : System.Runtime.Remoting.IRemotingTypeInfo
            {
                /*0x10*/ string serverType;
                /*0x18*/ string[] serverHierarchy;
                /*0x20*/ string[] interfacesImplemented;

                /*0xe67370*/ TypeInfo(System.Type type);
                /*0x73d3e0*/ string get_TypeName();
                /*0xe67110*/ bool CanCastTo(System.Type fromType, object o);
            }

            class WellKnownClientTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ System.Type obj_type;
                /*0x28*/ string obj_url;
                /*0x30*/ string app_url;

                /*0xe67840*/ WellKnownClientTypeEntry(string typeName, string assemblyName, string objectUrl);
                /*0x997630*/ string get_ApplicationUrl();
                /*0x61a260*/ System.Type get_ObjectType();
                /*0x79a150*/ string get_ObjectUrl();
                /*0xe67800*/ string ToString();
            }

            enum WellKnownObjectMode
            {
                Singleton = 1,
                SingleCall = 2,
            }

            class WellKnownServiceTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ System.Type obj_type;
                /*0x28*/ string obj_uri;
                /*0x30*/ System.Runtime.Remoting.WellKnownObjectMode obj_mode;

                /*0xe67ab0*/ WellKnownServiceTypeEntry(string typeName, string assemblyName, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);
                /*0xa79cc0*/ System.Runtime.Remoting.WellKnownObjectMode get_Mode();
                /*0x61a260*/ System.Type get_ObjectType();
                /*0x79a150*/ string get_ObjectUri();
                /*0xe679b0*/ string ToString();
            }

            namespace Services
            {
                interface ITrackingHandler
                {
                    /*0x17aec0*/ void DisconnectedObject(object obj);
                    /*0x183150*/ void MarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                    /*0x183150*/ void UnmarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                }

                class TrackingServices
                {
                    static /*0x0*/ System.Collections.ArrayList _handlers;

                    static /*0xe66740*/ TrackingServices();
                    static /*0xe660a0*/ void NotifyMarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                    static /*0xe663f0*/ void NotifyUnmarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                    static /*0xe65d50*/ void NotifyDisconnectedObject(object obj);
                }
            }

            namespace Proxies
            {
                class ProxyAttribute : System.Attribute, System.Runtime.Remoting.Contexts.IContextAttribute
                {
                    /*0xe58780*/ System.MarshalByRefObject CreateInstance(System.Type serverType);
                    /*0xe588c0*/ System.Runtime.Remoting.Proxies.RealProxy CreateProxy(System.Runtime.Remoting.ObjRef objRef, System.Type serverType, object serverObject, System.Runtime.Remoting.Contexts.Context serverContext);
                    /*0x32d010*/ void GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    /*0x3ce290*/ bool IsContextOK(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                class TransparentProxy
                {
                    /*0x10*/ System.Runtime.Remoting.Proxies.RealProxy _rp;
                    /*0x18*/ Mono.RuntimeRemoteClassHandle _class;
                    /*0x20*/ bool _custom_type_info;

                    /*0x32f970*/ TransparentProxy();
                    /*0xe667c0*/ System.RuntimeType GetProxyType();
                    /*0xe67030*/ bool get_IsContextBoundObject();
                    /*0xe670f0*/ System.Runtime.Remoting.Contexts.Context get_TargetContext();
                    /*0xe66880*/ bool InCurrentContext();
                    /*0xe66980*/ object LoadRemoteFieldNew(nint classPtr, nint fieldPtr);
                    /*0xe66cd0*/ void StoreRemoteField(nint classPtr, nint fieldPtr, object arg);
                }

                class RealProxy
                {
                    /*0x10*/ System.Type class_to_proxy;
                    /*0x18*/ System.Runtime.Remoting.Contexts.Context _targetContext;
                    /*0x20*/ System.MarshalByRefObject _server;
                    /*0x28*/ int _targetDomainId;
                    /*0x30*/ string _targetUri;
                    /*0x38*/ System.Runtime.Remoting.Identity _objectIdentity;
                    /*0x40*/ object _objTP;
                    /*0x48*/ object _stubData;

                    static /*0xe58ff0*/ System.Type InternalGetProxyType(object transparentProxy);
                    static /*0xe59010*/ object PrivateInvoke(System.Runtime.Remoting.Proxies.RealProxy rp, System.Runtime.Remoting.Messaging.IMessage msg, ref System.Exception exc, ref object[] out_args);
                    static /*0xe598c0*/ object[] ProcessResponse(System.Runtime.Remoting.Messaging.IMethodReturnMessage mrm, System.Runtime.Remoting.Messaging.MonoMethodMessage call);
                    /*0xe59f30*/ RealProxy();
                    /*0xe5a060*/ RealProxy(System.Type classToProxy);
                    /*0xe59ef0*/ RealProxy(System.Type classToProxy, System.Runtime.Remoting.ClientIdentity identity);
                    /*0xe59f40*/ RealProxy(System.Type classToProxy, nint stub, object stubData);
                    /*0xe58e10*/ System.Type GetProxiedType();
                    /*0xe58da0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x995140*/ System.Runtime.Remoting.Identity get_ObjectIdentity();
                    /*0xe5a080*/ void set_ObjectIdentity(System.Runtime.Remoting.Identity value);
                    /*0x1858d0*/ System.Runtime.Remoting.Messaging.IMessage Invoke(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xe59000*/ object InternalGetTransparentProxy(string className);
                    /*0xe58eb0*/ object GetTransparentProxy();
                    /*0x7965a0*/ void AttachServer(System.MarshalByRefObject s);
                    /*0xc6dab0*/ void SetTargetDomain(int domainId);
                    /*0xe58c70*/ object GetAppDomainTarget();
                }

                class RemotingProxy : System.Runtime.Remoting.Proxies.RealProxy, System.Runtime.Remoting.IRemotingTypeInfo
                {
                    static /*0x0*/ System.Reflection.MethodInfo _cache_GetTypeMethod;
                    static /*0x8*/ System.Reflection.MethodInfo _cache_GetHashCodeMethod;
                    /*0x50*/ System.Runtime.Remoting.Messaging.IMessageSink _sink;
                    /*0x58*/ bool _hasEnvoySink;
                    /*0x60*/ System.Runtime.Remoting.Messaging.ConstructionCall _ctorCall;

                    static /*0xe5d2d0*/ RemotingProxy();
                    /*0xe5d3f0*/ RemotingProxy(System.Type type, System.Runtime.Remoting.ClientIdentity identity);
                    /*0xe5d480*/ RemotingProxy(System.Type type, string activationUrl, object[] activationAttributes);
                    /*0xe5ccb0*/ System.Runtime.Remoting.Messaging.IMessage Invoke(System.Runtime.Remoting.Messaging.IMessage request);
                    /*0xe5c660*/ void AttachIdentity(System.Runtime.Remoting.Identity identity);
                    /*0xe5c580*/ System.Runtime.Remoting.Messaging.IMessage ActivateRemoteObject(System.Runtime.Remoting.Messaging.IMethodMessage request);
                    /*0xe5d4f0*/ string get_TypeName();
                    /*0xe5c950*/ bool CanCastTo(System.Type fromType, object o);
                    /*0xe5cbd0*/ void Finalize();
                }
            }

            namespace Lifetime
            {
                interface ILease
                {
                    /*0x1803b0*/ System.TimeSpan get_CurrentLeaseTime();
                    /*0x180980*/ System.Runtime.Remoting.Lifetime.LeaseState get_CurrentState();
                    /*0x1803b0*/ System.TimeSpan get_RenewOnCallTime();
                    System.TimeSpan Renew(System.TimeSpan renewalTime);
                }

                interface ISponsor
                {
                    System.TimeSpan Renewal(System.Runtime.Remoting.Lifetime.ILease lease);
                }

                class Lease : System.MarshalByRefObject, System.Runtime.Remoting.Lifetime.ILease
                {
                    /*0x18*/ System.DateTime _leaseExpireTime;
                    /*0x20*/ System.Runtime.Remoting.Lifetime.LeaseState _currentState;
                    /*0x28*/ System.TimeSpan _initialLeaseTime;
                    /*0x30*/ System.TimeSpan _renewOnCallTime;
                    /*0x38*/ System.TimeSpan _sponsorshipTimeout;
                    /*0x40*/ System.Collections.ArrayList _sponsors;
                    /*0x48*/ System.Collections.Queue _renewingSponsors;
                    /*0x50*/ System.Runtime.Remoting.Lifetime.Lease.RenewalDelegate _renewalDelegate;

                    /*0xe54730*/ Lease();
                    /*0xe548a0*/ System.TimeSpan get_CurrentLeaseTime();
                    /*0x3e3af0*/ System.Runtime.Remoting.Lifetime.LeaseState get_CurrentState();
                    /*0xe53a00*/ void Activate();
                    /*0x997630*/ System.TimeSpan get_RenewOnCallTime();
                    /*0xe54360*/ System.TimeSpan Renew(System.TimeSpan renewalTime);
                    /*0xe54430*/ void Unregister(System.Runtime.Remoting.Lifetime.ISponsor obj);
                    /*0xe54580*/ void UpdateState();
                    /*0xe53a10*/ void CheckNextSponsor();
                    /*0xe53dc0*/ void ProcessSponsorResponse(object state, bool timedOut);

                    class RenewalDelegate : System.MulticastDelegate
                    {
                        /*0x791ec0*/ RenewalDelegate(object object, nint method);
                        /*0x720980*/ System.TimeSpan Invoke(System.Runtime.Remoting.Lifetime.ILease lease);
                        /*0xe29290*/ System.IAsyncResult BeginInvoke(System.Runtime.Remoting.Lifetime.ILease lease, System.AsyncCallback callback, object object);
                        /*0xe61b10*/ System.TimeSpan EndInvoke(System.IAsyncResult result);
                    }
                }

                class LeaseManager
                {
                    /*0x10*/ System.Collections.ArrayList _objects;
                    /*0x18*/ System.Threading.Timer _timer;

                    /*0xe536e0*/ LeaseManager();
                    /*0xe531d0*/ void SetPollTime(System.TimeSpan timeSpan);
                    /*0xe53460*/ void TrackLifetime(System.Runtime.Remoting.ServerIdentity identity);
                    /*0xe532a0*/ void StartManager();
                    /*0xe53420*/ void StopManager();
                    /*0xe52f80*/ void ManageLeases(object state);
                }

                class LeaseSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _nextSink;

                    /*0x49b490*/ LeaseSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                    /*0xe53990*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xe53750*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0xe537d0*/ void RenewLease(System.Runtime.Remoting.Messaging.IMessage msg);
                }

                enum LeaseState
                {
                    Null = 0,
                    Initial = 1,
                    Active = 2,
                    Renewing = 3,
                    Expired = 4,
                }

                class LifetimeServices
                {
                    static /*0x0*/ System.TimeSpan _leaseManagerPollTime;
                    static /*0x8*/ System.TimeSpan _leaseTime;
                    static /*0x10*/ System.TimeSpan _renewOnCallTime;
                    static /*0x18*/ System.TimeSpan _sponsorshipTimeout;
                    static /*0x20*/ System.Runtime.Remoting.Lifetime.LeaseManager _leaseManager;

                    static /*0xe54970*/ LifetimeServices();
                    static /*0xe54ae0*/ System.TimeSpan get_LeaseManagerPollTime();
                    static /*0xe54c20*/ void set_LeaseManagerPollTime(System.TimeSpan value);
                    static /*0xe54b30*/ System.TimeSpan get_LeaseTime();
                    static /*0xe54ca0*/ void set_LeaseTime(System.TimeSpan value);
                    static /*0xe54b80*/ System.TimeSpan get_RenewOnCallTime();
                    static /*0xe54d00*/ void set_RenewOnCallTime(System.TimeSpan value);
                    static /*0xe54bd0*/ System.TimeSpan get_SponsorshipTimeout();
                    static /*0xe54d60*/ void set_SponsorshipTimeout(System.TimeSpan value);
                    static /*0xe54900*/ void TrackLifetime(System.Runtime.Remoting.ServerIdentity identity);
                }
            }

            namespace Contexts
            {
                class Context
                {
                    static /*0x0*/ object[] local_slots;
                    static /*0x8*/ System.Runtime.Remoting.Messaging.IMessageSink default_server_context_sink;
                    static /*0x10*/ int global_count;
                    static /*0x18*/ System.LocalDataStoreMgr _localDataStoreMgr;
                    static /*0x20*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection global_dynamic_properties;
                    /*0x10*/ int domain_id;
                    /*0x14*/ int context_id;
                    /*0x18*/ nuint static_data;
                    /*0x20*/ nuint data;
                    /*0x28*/ System.Runtime.Remoting.Messaging.IMessageSink server_context_sink_chain;
                    /*0x30*/ System.Runtime.Remoting.Messaging.IMessageSink client_context_sink_chain;
                    /*0x38*/ System.Collections.Generic.List<System.Runtime.Remoting.Contexts.IContextProperty> context_properties;
                    /*0x40*/ System.LocalDataStoreHolder _localDataStore;
                    /*0x48*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection context_dynamic_properties;
                    /*0x50*/ System.Runtime.Remoting.Contexts.ContextCallbackObject callback_object;

                    static /*0xe4f5c0*/ Context();
                    static /*0xe4ef10*/ void RegisterContext(System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0xe4f120*/ void ReleaseContext(System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0xe4f720*/ System.Runtime.Remoting.Contexts.Context get_DefaultContext();
                    static /*0xe4ef20*/ bool RegisterDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty prop, System.ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0xe4f3c0*/ bool UnregisterDynamicProperty(string name, System.ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0xe4e810*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection GetDynamicPropertyCollection(System.ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0xe4edf0*/ void NotifyGlobalDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
                    static /*0xe4f8f0*/ bool get_HasGlobalDynamicSinks();
                    static /*0xe4f360*/ System.Runtime.Remoting.Contexts.Context SwitchToContext(System.Runtime.Remoting.Contexts.Context newContext);
                    static /*0xe4da30*/ System.Runtime.Remoting.Contexts.Context CreateNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    static /*0xe4d7d0*/ System.LocalDataStoreSlot AllocateDataSlot();
                    static /*0xe4d830*/ System.LocalDataStoreSlot AllocateNamedDataSlot(string name);
                    static /*0xe4e420*/ void FreeNamedDataSlot(string name);
                    static /*0xe4e9c0*/ System.LocalDataStoreSlot GetNamedDataSlot(string name);
                    static /*0xe4e7d0*/ object GetData(System.LocalDataStoreSlot slot);
                    static /*0xe4f130*/ void SetData(System.LocalDataStoreSlot slot, object data);
                    /*0xe4f640*/ Context();
                    /*0xe4e390*/ void Finalize();
                    /*0x70a440*/ int get_ContextID();
                    /*0xe4f6c0*/ System.Runtime.Remoting.Contexts.IContextProperty[] get_ContextProperties();
                    /*0xe4f9a0*/ bool get_IsDefaultContext();
                    /*0xe4fb30*/ bool get_NeedsContextSink();
                    /*0xe4ed50*/ void NotifyDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
                    /*0xe4f730*/ bool get_HasDynamicSinks();
                    /*0xe4f780*/ bool get_HasExitSinks();
                    /*0xe4ea30*/ System.Runtime.Remoting.Contexts.IContextProperty GetProperty(string name);
                    /*0xe4f180*/ void SetProperty(System.Runtime.Remoting.Contexts.IContextProperty prop);
                    /*0xe4e490*/ void Freeze();
                    /*0xe4f370*/ string ToString();
                    /*0xe4eba0*/ System.Runtime.Remoting.Messaging.IMessageSink GetServerContextSinkChain();
                    /*0xe4e640*/ System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSinkChain();
                    /*0xe4e0f0*/ System.Runtime.Remoting.Messaging.IMessageSink CreateServerObjectSinkChain(System.MarshalByRefObject obj, bool forceInternalExecute);
                    /*0xe4d8a0*/ System.Runtime.Remoting.Messaging.IMessageSink CreateEnvoySink(System.MarshalByRefObject serverObject);
                    /*0xe4e260*/ void DoCallBack(System.Runtime.Remoting.Contexts.CrossContextDelegate deleg);
                    /*0xe4f9b0*/ System.LocalDataStore get_MyLocalStore();
                }

                class DynamicPropertyCollection
                {
                    /*0x10*/ System.Collections.ArrayList _properties;

                    /*0xe51660*/ DynamicPropertyCollection();
                    /*0xe516d0*/ bool get_HasProperties();
                    /*0xe512e0*/ bool RegisterDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty prop);
                    /*0xe51510*/ bool UnregisterDynamicProperty(string name);
                    /*0xe50e80*/ void NotifyMessage(bool start, System.Runtime.Remoting.Messaging.IMessage msg, bool client_site, bool async);
                    /*0xe50d50*/ int FindProperty(string name);

                    class DynamicPropertyReg
                    {
                        /*0x10*/ System.Runtime.Remoting.Contexts.IDynamicProperty Property;
                        /*0x18*/ System.Runtime.Remoting.Contexts.IDynamicMessageSink Sink;

                        /*0x32f970*/ DynamicPropertyReg();
                    }
                }

                class ContextCallbackObject : System.ContextBoundObject
                {
                    /*0x534220*/ ContextCallbackObject();
                    /*0x32d010*/ void DoCallBack(System.Runtime.Remoting.Contexts.CrossContextDelegate deleg);
                }

                class CrossContextChannel : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x32f970*/ CrossContextChannel();
                    /*0xe4ffc0*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xe4fc20*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);

                    class ContextRestoreSink : System.Runtime.Remoting.Messaging.IMessageSink
                    {
                        /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _next;
                        /*0x18*/ System.Runtime.Remoting.Contexts.Context _context;
                        /*0x20*/ System.Runtime.Remoting.Messaging.IMessage _call;

                        /*0xce5250*/ ContextRestoreSink(System.Runtime.Remoting.Messaging.IMessageSink next, System.Runtime.Remoting.Contexts.Context context, System.Runtime.Remoting.Messaging.IMessage call);
                        /*0xe71790*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                        /*0xe71750*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    }
                }

                class CrossContextDelegate : System.MulticastDelegate
                {
                    /*0xe25c50*/ CrossContextDelegate(object object, nint method);
                    /*0x9dbe20*/ void Invoke();
                }

                interface IContextAttribute
                {
                    /*0x17aec0*/ void GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    bool IsContextOK(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                interface IContextProperty
                {
                    /*0x1803b0*/ string get_Name();
                    /*0x17aec0*/ void Freeze(System.Runtime.Remoting.Contexts.Context newContext);
                    /*0x17e620*/ bool IsNewContextOK(System.Runtime.Remoting.Contexts.Context newCtx);
                }

                interface IContributeClientContextSink
                {
                    /*0x1858d0*/ System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IContributeDynamicSink
                {
                    /*0x1803b0*/ System.Runtime.Remoting.Contexts.IDynamicMessageSink GetDynamicSink();
                }

                interface IContributeEnvoySink
                {
                    /*0x177730*/ System.Runtime.Remoting.Messaging.IMessageSink GetEnvoySink(System.MarshalByRefObject obj, System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IContributeObjectSink
                {
                    /*0x177730*/ System.Runtime.Remoting.Messaging.IMessageSink GetObjectSink(System.MarshalByRefObject obj, System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IContributeServerContextSink
                {
                    /*0x1858d0*/ System.Runtime.Remoting.Messaging.IMessageSink GetServerContextSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IDynamicMessageSink
                {
                    void ProcessMessageFinish(System.Runtime.Remoting.Messaging.IMessage replyMsg, bool bCliSide, bool bAsync);
                    void ProcessMessageStart(System.Runtime.Remoting.Messaging.IMessage reqMsg, bool bCliSide, bool bAsync);
                }

                interface IDynamicProperty
                {
                    /*0x1803b0*/ string get_Name();
                }
            }

            namespace Channels
            {
                class ChannelServices
                {
                    static /*0x0*/ System.Collections.ArrayList registeredChannels;
                    static /*0x8*/ System.Collections.ArrayList delayedClientChannels;
                    static /*0x10*/ System.Runtime.Remoting.Contexts.CrossContextChannel _crossContextSink;
                    static /*0x18*/ string CrossContextUrl;
                    static /*0x20*/ System.Collections.IList oldStartModeTypes;

                    static /*0xe6f960*/ ChannelServices();
                    static /*0xe6fb60*/ System.Runtime.Remoting.Contexts.CrossContextChannel get_CrossContextChannel();
                    static /*0xe6d710*/ System.Runtime.Remoting.Messaging.IMessageSink CreateClientChannelSinkChain(string url, object remoteChannelData, ref string objectUri);
                    static /*0xe6d5f0*/ System.Runtime.Remoting.Messaging.IMessageSink CreateClientChannelSinkChain(System.Runtime.Remoting.Channels.IChannelSender sender, string url, object[] channelDataArray, ref string objectUri);
                    static /*0xe6f840*/ void RegisterChannel(System.Runtime.Remoting.Channels.IChannel chnl);
                    static /*0xe6f210*/ void RegisterChannel(System.Runtime.Remoting.Channels.IChannel chnl, bool ensureSecurity);
                    static /*0xe6e390*/ void RegisterChannelConfig(System.Runtime.Remoting.ChannelData channel);
                    static /*0xe6dcd0*/ object CreateProvider(System.Runtime.Remoting.ProviderData prov);
                    static /*0xe6f890*/ System.Runtime.Remoting.Messaging.IMessage SyncDispatchMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    static /*0xe6d280*/ System.Runtime.Remoting.Messaging.ReturnMessage CheckIncomingMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    static /*0xe6d480*/ System.Runtime.Remoting.Messaging.IMessage CheckReturnMessage(System.Runtime.Remoting.Messaging.IMessage callMsg, System.Runtime.Remoting.Messaging.IMessage retMsg);
                    static /*0x3ce290*/ bool IsLocalCall(System.Runtime.Remoting.Messaging.IMessage callMsg);
                    static /*0xe6e010*/ object[] GetCurrentChannelInfo();
                }

                class CrossAppDomainData
                {
                    /*0x10*/ object _ContextID;
                    /*0x18*/ int _DomainID;
                    /*0x20*/ string _processGuid;

                    /*0xe71dc0*/ CrossAppDomainData(int domainId);
                    /*0x8a5c20*/ int get_DomainID();
                    /*0x61a260*/ string get_ProcessID();
                }

                class CrossAppDomainChannel : System.Runtime.Remoting.Channels.IChannel, System.Runtime.Remoting.Channels.IChannelSender, System.Runtime.Remoting.Channels.IChannelReceiver
                {
                    static /*0x0*/ object s_lock;

                    static /*0xe71c30*/ CrossAppDomainChannel();
                    static /*0xe71af0*/ void RegisterCrossAppDomainChannel();
                    /*0x32f970*/ CrossAppDomainChannel();
                    /*0xe71d90*/ string get_ChannelName();
                    /*0x3bcaf0*/ int get_ChannelPriority();
                    /*0xe71cb0*/ object get_ChannelData();
                    /*0x32d010*/ void StartListening(object data);
                    /*0xe71970*/ System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object data, ref string uri);
                }

                class CrossAppDomainSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    static /*0x0*/ System.Collections.Hashtable s_sinks;
                    static /*0x8*/ System.Reflection.MethodInfo processMessageMethod;
                    /*0x10*/ int _domainID;

                    static /*0xe72870*/ CrossAppDomainSink();
                    static /*0xe71f50*/ System.Runtime.Remoting.Channels.CrossAppDomainSink GetSink(int domainID);
                    static /*0xe72220*/ System.Runtime.Remoting.Channels.CrossAppDomainSink.ProcessMessageRes ProcessMessageInDomain(byte[] arrRequest, System.Runtime.Remoting.Messaging.CADMethodCallMessage cadMsg);
                    /*0x32f460*/ CrossAppDomainSink(int domainID);
                    /*0x417e30*/ int get_TargetDomainId();
                    /*0xe723e0*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msgRequest);
                    /*0xe71e70*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage reqMsg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0xe72320*/ void SendAsyncMessage(object data);
                    /*0xe727b0*/ void <AsyncProcessMessage>b__10_0(object data);

                    struct ProcessMessageRes
                    {
                        /*0x10*/ byte[] arrResponse;
                        /*0x18*/ System.Runtime.Remoting.Messaging.CADMethodReturnMessage cadMrm;
                    }
                }

                class CADSerializer
                {
                    static /*0xe6cd40*/ System.Runtime.Remoting.Messaging.IMessage DeserializeMessage(System.IO.MemoryStream mem, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    static /*0xe6cf30*/ System.IO.MemoryStream SerializeMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    static /*0xe6cd80*/ object DeserializeObjectSafe(byte[] mem);
                    static /*0xe6d030*/ System.IO.MemoryStream SerializeObject(object obj);
                    static /*0xe6ce90*/ object DeserializeObject(System.IO.MemoryStream mem);
                }

                class AsyncRequest
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink ReplySink;
                    /*0x18*/ System.Runtime.Remoting.Messaging.IMessage MsgRequest;

                    /*0xe692f0*/ AsyncRequest(System.Runtime.Remoting.Messaging.IMessage msgRequest, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                interface IChannel
                {
                    /*0x1803b0*/ string get_ChannelName();
                    /*0x180980*/ int get_ChannelPriority();
                }

                interface IChannelDataStore
                {
                }

                interface IChannelReceiver : System.Runtime.Remoting.Channels.IChannel
                {
                    /*0x1803b0*/ object get_ChannelData();
                    /*0x17aec0*/ void StartListening(object data);
                }

                interface IChannelSender : System.Runtime.Remoting.Channels.IChannel
                {
                    /*0x177dc0*/ System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object remoteChannelData, ref string objectURI);
                }

                interface IClientChannelSinkProvider
                {
                    /*0x17aec0*/ void set_Next(System.Runtime.Remoting.Channels.IClientChannelSinkProvider value);
                }

                interface ISecurableChannel
                {
                    /*0x181190*/ void set_IsSecured(bool value);
                }

                interface IServerChannelSinkProvider
                {
                    /*0x17aec0*/ void set_Next(System.Runtime.Remoting.Channels.IServerChannelSinkProvider value);
                }

                class SinkProviderData
                {
                    /*0x10*/ string sinkName;
                    /*0x18*/ System.Collections.ArrayList children;
                    /*0x20*/ System.Collections.Hashtable properties;

                    /*0xe85a50*/ SinkProviderData(string name);
                    /*0x32f410*/ System.Collections.IList get_Children();
                    /*0x61a260*/ System.Collections.IDictionary get_Properties();
                }
            }

            namespace Activation
            {
                class ActivationServices
                {
                    static /*0x0*/ System.Runtime.Remoting.Activation.IActivator _constructionActivator;

                    static /*0xe68c40*/ System.Runtime.Remoting.Activation.IActivator get_ConstructionActivator();
                    static /*0xe67c80*/ System.Runtime.Remoting.Messaging.IMessage Activate(System.Runtime.Remoting.Proxies.RemotingProxy proxy, System.Runtime.Remoting.Messaging.ConstructionCall ctorCall);
                    static /*0xe68b80*/ System.Runtime.Remoting.Messaging.IMessage RemoteActivate(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                    static /*0xe67e50*/ System.Runtime.Remoting.Messaging.ConstructionCall CreateConstructionCall(System.Type type, string activationUrl, object[] activationAttributes);
                    static /*0xe68700*/ System.Runtime.Remoting.Messaging.IMessage CreateInstanceFromMessage(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                    static /*0xe68a30*/ object CreateProxyForType(System.Type type);
                    static /*0xe67e40*/ object AllocateUninitializedClassInstance(System.Type type);
                    static /*0xe68b70*/ void EnableProxyActivation(System.Type type, bool enable);
                }

                class AppDomainLevelActivator : System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x10*/ string _activationUrl;
                    /*0x18*/ System.Runtime.Remoting.Activation.IActivator _next;

                    /*0xce3b90*/ AppDomainLevelActivator(string activationUrl, System.Runtime.Remoting.Activation.IActivator next);
                    /*0x32f410*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0xe68ce0*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                }

                class ConstructionLevelActivator : System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x32f970*/ ConstructionLevelActivator();
                    /*0x388e90*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0xe71260*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                class ContextLevelActivator : System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x10*/ System.Runtime.Remoting.Activation.IActivator m_NextActivator;

                    /*0x49b490*/ ContextLevelActivator(System.Runtime.Remoting.Activation.IActivator next);
                    /*0x73d3e0*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0xe71540*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                }

                interface IActivator
                {
                    /*0x1803b0*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0x1858d0*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                interface IConstructionCallMessage : System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage
                {
                    /*0x1803b0*/ System.Type get_ActivationType();
                    /*0x1803b0*/ string get_ActivationTypeName();
                    /*0x1803b0*/ System.Runtime.Remoting.Activation.IActivator get_Activator();
                    /*0x17aec0*/ void set_Activator(System.Runtime.Remoting.Activation.IActivator value);
                    /*0x1803b0*/ object[] get_CallSiteActivationAttributes();
                    /*0x1803b0*/ System.Collections.IList get_ContextProperties();
                }

                interface IConstructionReturnMessage : System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                }

                class RemoteActivationAttribute : System.Attribute, System.Runtime.Remoting.Contexts.IContextAttribute
                {
                    /*0x10*/ System.Collections.IList _contextProperties;

                    /*0xa32e30*/ RemoteActivationAttribute(System.Collections.IList contextProperties);
                    /*0x348b00*/ bool IsContextOK(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage ctor);
                    /*0xe832f0*/ void GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage ctor);
                }

                class RemoteActivator : System.MarshalByRefObject, System.Runtime.Remoting.Activation.IActivator
                {
                    /*0xe83600*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    /*0xe83910*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                }
            }

            namespace Metadata
            {
                class SoapAttribute : System.Attribute
                {
                    /*0x10*/ bool _useAttribute;
                    /*0x18*/ string ProtXmlNamespace;
                    /*0x20*/ object ReflectInfo;

                    /*0x534220*/ SoapAttribute();
                    /*0x793eb0*/ bool get_UseAttribute();
                    /*0x32f410*/ string get_XmlNamespace();
                    /*0x7965a0*/ void SetReflectionObject(object reflectionObject);
                }

                class SoapFieldAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x28*/ string _elementName;
                    /*0x30*/ bool _isElement;

                    /*0x534220*/ SoapFieldAttribute();
                    /*0x79a150*/ string get_XmlElementName();
                    /*0x995050*/ bool IsInteropXmlElement();
                    /*0xe85b00*/ void SetReflectionObject(object reflectionObject);
                }

                class SoapMethodAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x28*/ string _responseElement;
                    /*0x30*/ string _responseNamespace;
                    /*0x38*/ string _returnElement;
                    /*0x40*/ string _soapAction;
                    /*0x48*/ bool _useAttribute;
                    /*0x50*/ string _namespace;

                    /*0x534220*/ SoapMethodAttribute();
                    /*0xe85db0*/ bool get_UseAttribute();
                    /*0x4e40e0*/ string get_XmlNamespace();
                    /*0xe85bb0*/ void SetReflectionObject(object reflectionObject);
                }

                class SoapParameterAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x534220*/ SoapParameterAttribute();
                }

                class SoapTypeAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x28*/ bool _useAttribute;
                    /*0x30*/ string _xmlElementName;
                    /*0x38*/ string _xmlNamespace;
                    /*0x40*/ string _xmlTypeName;
                    /*0x48*/ string _xmlTypeNamespace;
                    /*0x50*/ bool _isType;
                    /*0x51*/ bool _isElement;

                    /*0x534220*/ SoapTypeAttribute();
                    /*0x4ba480*/ bool get_UseAttribute();
                    /*0x997630*/ string get_XmlElementName();
                    /*0x995140*/ string get_XmlNamespace();
                    /*0xb61870*/ string get_XmlTypeName();
                    /*0x4e40d0*/ string get_XmlTypeNamespace();
                    /*0xe86030*/ bool get_IsInteropXmlElement();
                    /*0x9ef740*/ bool get_IsInteropXmlType();
                    /*0xe85dc0*/ void SetReflectionObject(object reflectionObject);
                }
            }

            namespace Messaging
            {
                class CallContext
                {
                    static /*0x388e90*/ object SetCurrentCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext ctx);
                    static /*0xe6d210*/ System.Runtime.Remoting.Messaging.LogicalCallContext SetLogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext callCtx);
                    /*0x32f970*/ CallContext();
                }

                class IllogicalCallContext
                {
                    /*0x10*/ System.Collections.Hashtable m_Datastore;
                    /*0x18*/ object m_HostContext;

                    /*0x32f970*/ IllogicalCallContext();
                    /*0xe76200*/ System.Collections.Hashtable get_Datastore();
                    /*0x32f410*/ object get_HostContext();
                    /*0x7963c0*/ void set_HostContext(object value);
                    /*0xe76270*/ bool get_HasUserData();
                    /*0xe75ec0*/ System.Runtime.Remoting.Messaging.IllogicalCallContext CreateCopy();
                }

                class LogicalCallContext : System.Runtime.Serialization.ISerializable, System.ICloneable
                {
                    static string s_CorrelationMgrSlotName = "System.Diagnostics.Trace.CorrelationManagerSlot";
                    static /*0x0*/ System.Type s_callContextType;
                    /*0x10*/ System.Collections.Hashtable m_Datastore;
                    /*0x18*/ System.Runtime.Remoting.Messaging.CallContextRemotingData m_RemotingData;
                    /*0x20*/ System.Runtime.Remoting.Messaging.CallContextSecurityData m_SecurityData;
                    /*0x28*/ object m_HostContext;
                    /*0x30*/ bool m_IsCorrelationMgr;
                    /*0x38*/ System.Runtime.Remoting.Messaging.Header[] _sendHeaders;
                    /*0x40*/ System.Runtime.Remoting.Messaging.Header[] _recvHeaders;

                    static /*0xe77150*/ LogicalCallContext();
                    /*0x32f970*/ LogicalCallContext();
                    /*0xe771e0*/ LogicalCallContext(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xe76a60*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xe762b0*/ object Clone();
                    /*0xe76e30*/ void Merge(System.Runtime.Remoting.Messaging.LogicalCallContext lc);
                    /*0xe77970*/ bool get_HasInfo();
                    /*0xe76270*/ bool get_HasUserData();
                    /*0xe77900*/ System.Collections.Hashtable get_Datastore();

                    struct Reader
                    {
                        /*0x10*/ System.Runtime.Remoting.Messaging.LogicalCallContext m_ctx;

                        /*0x792990*/ Reader(System.Runtime.Remoting.Messaging.LogicalCallContext ctx);
                        /*0xe832e0*/ bool get_IsNull();
                        /*0xe83260*/ bool get_HasInfo();
                        /*0xe831f0*/ System.Runtime.Remoting.Messaging.LogicalCallContext Clone();
                    }
                }

                class CallContextSecurityData : System.ICloneable
                {
                    /*0x10*/ System.Security.Principal.IPrincipal _principal;

                    /*0x32f970*/ CallContextSecurityData();
                    /*0xe52980*/ bool get_HasInfo();
                    /*0xe6d1a0*/ object Clone();
                }

                class CallContextRemotingData : System.ICloneable
                {
                    /*0x10*/ string _logicalCallID;

                    /*0x32f970*/ CallContextRemotingData();
                    /*0x73d3e0*/ string get_LogicalCallID();
                    /*0x9f12f0*/ void set_LogicalCallID(string value);
                    /*0xe52980*/ bool get_HasInfo();
                    /*0xe6d130*/ object Clone();
                }

                enum ArgInfoType
                {
                    In = 0,
                    Out = 1,
                }

                class ArgInfo
                {
                    /*0x10*/ int[] _paramMap;
                    /*0x18*/ int _inoutArgCount;
                    /*0x20*/ System.Reflection.MethodBase _method;

                    /*0xe69100*/ ArgInfo(System.Reflection.MethodBase method, System.Runtime.Remoting.Messaging.ArgInfoType type);
                    /*0xe68fd0*/ object[] GetInOutArgs(object[] args);
                }

                class AsyncResult : System.IAsyncResult, System.Runtime.Remoting.Messaging.IMessageSink, System.Threading.IThreadPoolWorkItem
                {
                    /*0x10*/ object async_state;
                    /*0x18*/ System.Threading.WaitHandle handle;
                    /*0x20*/ object async_delegate;
                    /*0x28*/ nint data;
                    /*0x30*/ object object_data;
                    /*0x38*/ bool sync_completed;
                    /*0x39*/ bool completed;
                    /*0x3a*/ bool endinvoke_called;
                    /*0x40*/ object async_callback;
                    /*0x48*/ System.Threading.ExecutionContext current;
                    /*0x50*/ System.Threading.ExecutionContext original;
                    /*0x58*/ long add_time;
                    /*0x60*/ System.Runtime.Remoting.Messaging.MonoMethodMessage call_message;
                    /*0x68*/ System.Runtime.Remoting.Messaging.IMessageCtrl message_ctrl;
                    /*0x70*/ System.Runtime.Remoting.Messaging.IMessage reply_message;
                    /*0x78*/ System.Threading.WaitCallback orig_cb;

                    /*0x32f970*/ AsyncResult();
                    /*0x73d3e0*/ object get_AsyncState();
                    /*0xe69610*/ System.Threading.WaitHandle get_AsyncWaitHandle();
                    /*0xd180c0*/ bool get_CompletedSynchronously();
                    /*0xd18470*/ bool get_IsCompleted();
                    /*0xe69700*/ bool get_EndInvokeCalled();
                    /*0xe69710*/ void set_EndInvokeCalled(bool value);
                    /*0x61a260*/ object get_AsyncDelegate();
                    /*0x388e90*/ System.Runtime.Remoting.Messaging.IMessageSink get_NextSink();
                    /*0xe69340*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0xd184b0*/ System.Runtime.Remoting.Messaging.IMessage GetReplyMessage();
                    /*0xe69480*/ void SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl mc);
                    /*0xd18610*/ void SetCompletedSynchronously(bool completed);
                    /*0xe69380*/ System.Runtime.Remoting.Messaging.IMessage EndInvoke();
                    /*0xe69490*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xe643b0*/ System.Runtime.Remoting.Messaging.MonoMethodMessage get_CallMessage();
                    /*0xe643c0*/ void set_CallMessage(System.Runtime.Remoting.Messaging.MonoMethodMessage value);
                    /*0xe69470*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                    /*0x32d010*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
                    /*0xe69470*/ object Invoke();
                }

                class CADArgHolder
                {
                    /*0x10*/ int index;

                    /*0x32f460*/ CADArgHolder(int i);
                }

                class CADObjRef
                {
                    /*0x10*/ System.Runtime.Remoting.ObjRef objref;
                    /*0x18*/ int SourceDomain;
                    /*0x20*/ byte[] TypeInfo;

                    /*0xe6ccd0*/ CADObjRef(System.Runtime.Remoting.ObjRef o, int sourceDomain);
                }

                class CADMethodRef
                {
                    /*0x10*/ bool ctor;
                    /*0x18*/ string typeName;
                    /*0x20*/ string methodName;
                    /*0x28*/ string[] param_names;
                    /*0x30*/ string[] generic_arg_names;

                    /*0xe6c450*/ CADMethodRef(System.Runtime.Remoting.Messaging.IMethodMessage msg);
                    /*0xe6bdb0*/ System.Type[] GetTypes(string[] typeArray);
                    /*0xe6bf10*/ System.Reflection.MethodBase Resolve();
                }

                class CADMessageBase
                {
                    /*0x10*/ object[] _args;
                    /*0x18*/ byte[] _serializedArgs;
                    /*0x20*/ int _propertyCount;
                    /*0x28*/ System.Runtime.Remoting.Messaging.CADArgHolder _callContext;
                    /*0x30*/ byte[] serializedMethod;

                    static /*0xe69970*/ System.Type[] GetSignature(System.Reflection.MethodBase methodBase, bool load);
                    static /*0xe6a240*/ int MarshalProperties(System.Collections.IDictionary dict, ref System.Collections.ArrayList args);
                    static /*0xe6b640*/ void UnmarshalProperties(System.Collections.IDictionary dict, int count, System.Collections.ArrayList args);
                    static /*0xe69b90*/ bool IsPossibleToIgnoreMarshal(object obj);
                    /*0xe6b7c0*/ CADMessageBase(System.Runtime.Remoting.Messaging.IMethodMessage msg);
                    /*0xe69800*/ System.Reflection.MethodBase GetMethod();
                    /*0xe69d50*/ object MarshalArgument(object arg, ref System.Collections.ArrayList args);
                    /*0xe6a8f0*/ object UnmarshalArgument(object arg, System.Collections.ArrayList args);
                    /*0xe6a0f0*/ object[] MarshalArguments(object[] arguments, ref System.Collections.ArrayList args);
                    /*0xe6b4f0*/ object[] UnmarshalArguments(object[] arguments, System.Collections.ArrayList args);
                    /*0xe6a720*/ void SaveLogicalCallContext(System.Runtime.Remoting.Messaging.IMethodMessage msg, ref System.Collections.ArrayList serializeList);
                    /*0xe69770*/ System.Runtime.Remoting.Messaging.LogicalCallContext GetLogicalCallContext(System.Collections.ArrayList args);
                }

                class CADMethodCallMessage : System.Runtime.Remoting.Messaging.CADMessageBase
                {
                    /*0x38*/ string _uri;

                    static /*0xe6b870*/ System.Runtime.Remoting.Messaging.CADMethodCallMessage Create(System.Runtime.Remoting.Messaging.IMessage callMsg);
                    /*0xe6bad0*/ CADMethodCallMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage callMsg);
                    /*0x995140*/ string get_Uri();
                    /*0xe6b910*/ System.Collections.ArrayList GetArguments();
                    /*0xe6b900*/ object[] GetArgs(System.Collections.ArrayList args);
                    /*0x3e3af0*/ int get_PropertiesCount();
                }

                class CADMethodReturnMessage : System.Runtime.Remoting.Messaging.CADMessageBase
                {
                    /*0x38*/ object _returnValue;
                    /*0x40*/ System.Runtime.Remoting.Messaging.CADArgHolder _exception;
                    /*0x48*/ System.Type[] _sig;

                    static /*0xe6c730*/ System.Runtime.Remoting.Messaging.CADMethodReturnMessage Create(System.Runtime.Remoting.Messaging.IMessage callMsg);
                    /*0xe6ca40*/ CADMethodReturnMessage(System.Runtime.Remoting.Messaging.IMethodReturnMessage retMsg);
                    /*0xe6c7c0*/ System.Collections.ArrayList GetArguments();
                    /*0xe6b900*/ object[] GetArgs(System.Collections.ArrayList args);
                    /*0xe6ca30*/ object GetReturnValue(System.Collections.ArrayList args);
                    /*0xe6c980*/ System.Exception GetException(System.Collections.ArrayList args);
                    /*0x3e3af0*/ int get_PropertiesCount();
                }

                class ClientContextTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Contexts.Context _context;

                    /*0x49b490*/ ClientContextTerminatorSink(System.Runtime.Remoting.Contexts.Context ctx);
                    /*0xe6fef0*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xe6fcb0*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ClientContextReplySink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _replySink;
                    /*0x18*/ System.Runtime.Remoting.Contexts.Context _context;

                    /*0xe692f0*/ ClientContextReplySink(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0xe6fbf0*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xe6fbb0*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ConstructionCall : System.Runtime.Remoting.Messaging.MethodCall, System.Runtime.Remoting.Activation.IConstructionCallMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage
                {
                    /*0x68*/ System.Runtime.Remoting.Activation.IActivator _activator;
                    /*0x70*/ object[] _activationAttributes;
                    /*0x78*/ System.Collections.IList _contextProperties;
                    /*0x80*/ System.Type _activationType;
                    /*0x88*/ string _activationTypeName;
                    /*0x90*/ bool _isContextOk;
                    /*0x98*/ System.Runtime.Remoting.Proxies.RemotingProxy _sourceProxy;

                    /*0xe71040*/ ConstructionCall(System.Type type);
                    /*0xe70f80*/ ConstructionCall(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xe70a20*/ void InitDictionary();
                    /*0xe71200*/ bool get_IsContextOk();
                    /*0xe71250*/ void set_IsContextOk(bool value);
                    /*0xe710c0*/ System.Type get_ActivationType();
                    /*0x7379f0*/ string get_ActivationTypeName();
                    /*0x8af030*/ System.Runtime.Remoting.Activation.IActivator get_Activator();
                    /*0xe69480*/ void set_Activator(System.Runtime.Remoting.Activation.IActivator value);
                    /*0xd184b0*/ object[] get_CallSiteActivationAttributes();
                    /*0xe49c60*/ void SetActivationAttributes(object[] attributes);
                    /*0xe71190*/ System.Collections.IList get_ContextProperties();
                    /*0xe70b30*/ void InitMethodProperty(string key, object value);
                    /*0xe708e0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xe71210*/ System.Collections.IDictionary get_Properties();
                    /*0x9c7a50*/ System.Runtime.Remoting.Proxies.RemotingProxy get_SourceProxy();
                    /*0x9c7a70*/ void set_SourceProxy(System.Runtime.Remoting.Proxies.RemotingProxy value);
                }

                class ConstructionCallDictionary : System.Runtime.Remoting.Messaging.MessageDictionary
                {
                    static /*0x0*/ string[] InternalKeys;

                    static /*0xe70600*/ ConstructionCallDictionary();
                    /*0xe70850*/ ConstructionCallDictionary(System.Runtime.Remoting.Activation.IConstructionCallMessage message);
                    /*0xe700a0*/ object GetMethodProperty(string key);
                    /*0xe703e0*/ void SetMethodProperty(string key, object value);
                }

                class ConstructionResponse : System.Runtime.Remoting.Messaging.MethodResponse, System.Runtime.Remoting.Activation.IConstructionReturnMessage, System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0xe71310*/ ConstructionResponse(object resultObject, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0xe713d0*/ ConstructionResponse(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0xe713e0*/ ConstructionResponse(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xe71480*/ System.Collections.IDictionary get_Properties();
                }

                class EnvoyTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    static /*0x0*/ System.Runtime.Remoting.Messaging.EnvoyTerminatorSink Instance;

                    static /*0xe72ee0*/ EnvoyTerminatorSink();
                    /*0x32f970*/ EnvoyTerminatorSink();
                    /*0xe72e80*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xe72e00*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ErrorMessage : System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0x10*/ string _uri;

                    /*0xe72f50*/ ErrorMessage();
                    /*0x388e90*/ int get_ArgCount();
                    /*0x388e90*/ object[] get_Args();
                    /*0x388e90*/ System.Reflection.MethodBase get_MethodBase();
                    /*0xe72fa0*/ string get_MethodName();
                    /*0x388e90*/ object get_MethodSignature();
                    /*0x388e90*/ System.Collections.IDictionary get_Properties();
                    /*0xe72fd0*/ string get_TypeName();
                    /*0x73d3e0*/ string get_Uri();
                    /*0x388e90*/ object GetArg(int arg_num);
                    /*0x388e90*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                }

                class Header
                {
                    /*0x10*/ string HeaderNamespace;
                    /*0x18*/ bool MustUnderstand;
                    /*0x20*/ string Name;
                    /*0x28*/ object Value;
                }

                class HeaderHandler : System.MulticastDelegate
                {
                    /*0x791ec0*/ HeaderHandler(object object, nint method);
                    /*0x720980*/ object Invoke(System.Runtime.Remoting.Messaging.Header[] headers);
                }

                interface IInternalMessage
                {
                    /*0x1803b0*/ System.Runtime.Remoting.Identity get_TargetIdentity();
                    /*0x17aec0*/ void set_TargetIdentity(System.Runtime.Remoting.Identity value);
                    /*0x1803b0*/ string get_Uri();
                    /*0x17aec0*/ void set_Uri(string value);
                }

                interface IMessage
                {
                    /*0x1803b0*/ System.Collections.IDictionary get_Properties();
                }

                interface IMessageCtrl
                {
                }

                interface IMessageSink
                {
                    /*0x1858d0*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x177730*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                interface IMethodCallMessage : System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                }

                interface IMethodMessage : System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0x180980*/ int get_ArgCount();
                    /*0x1803b0*/ object[] get_Args();
                    /*0x1803b0*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x1803b0*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x1803b0*/ string get_MethodName();
                    /*0x1803b0*/ object get_MethodSignature();
                    /*0x1803b0*/ string get_TypeName();
                    /*0x1803b0*/ string get_Uri();
                    /*0x184ab0*/ object GetArg(int argNum);
                }

                interface IMethodReturnMessage : System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0x1803b0*/ System.Exception get_Exception();
                    /*0x1803b0*/ object[] get_OutArgs();
                    /*0x1803b0*/ object get_ReturnValue();
                }

                class MethodCall : System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Serialization.ISerializable, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ string _uri;
                    /*0x18*/ string _typeName;
                    /*0x20*/ string _methodName;
                    /*0x28*/ object[] _args;
                    /*0x30*/ System.Type[] _methodSignature;
                    /*0x38*/ System.Reflection.MethodBase _methodBase;
                    /*0x40*/ System.Runtime.Remoting.Messaging.LogicalCallContext _callContext;
                    /*0x48*/ System.Runtime.Remoting.Identity _targetIdentity;
                    /*0x50*/ System.Type[] _genericArguments;
                    /*0x58*/ System.Collections.IDictionary ExternalProperties;
                    /*0x60*/ System.Collections.IDictionary InternalProperties;

                    static /*0xe79cf0*/ string GetTypeNameFromAssemblyQualifiedName(string aqname);
                    /*0xe70f80*/ MethodCall(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xe7aa40*/ MethodCall(System.Runtime.Remoting.Messaging.CADMethodCallMessage msg);
                    /*0x32f970*/ MethodCall();
                    /*0xe79780*/ void CopyFrom(System.Runtime.Remoting.Messaging.IMethodMessage call);
                    /*0xe79e30*/ void InitMethodProperty(string key, object value);
                    /*0xe79990*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xe7ad80*/ int get_ArgCount();
                    /*0x79a150*/ object[] get_Args();
                    /*0xe7ae10*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0xe7ae80*/ System.Reflection.MethodBase get_MethodBase();
                    /*0xe7aeb0*/ string get_MethodName();
                    /*0xe7af00*/ object get_MethodSignature();
                    /*0xe71210*/ System.Collections.IDictionary get_Properties();
                    /*0xe79d80*/ void InitDictionary();
                    /*0xe7b070*/ string get_TypeName();
                    /*0x73d3e0*/ string get_Uri();
                    /*0x9f12f0*/ void set_Uri(string value);
                    /*0x73d3e0*/ string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri();
                    /*0x9f12f0*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value);
                    /*0xe79960*/ object GetArg(int argNum);
                    /*0x32d010*/ void Init();
                    /*0xe7a320*/ void ResolveMethod();
                    /*0xe79570*/ System.Type CastTo(string clientType, System.Type serverType);
                    /*0x4e40d0*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0x4e4360*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                    /*0xe7ada0*/ System.Type[] get_GenericArguments();
                }

                class MCMDictionary : System.Runtime.Remoting.Messaging.MessageDictionary
                {
                    static /*0x0*/ string[] InternalKeys;

                    static /*0xe779d0*/ MCMDictionary();
                    /*0xe77b50*/ MCMDictionary(System.Runtime.Remoting.Messaging.IMethodMessage message);
                }

                class MessageDictionary : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable
                {
                    /*0x10*/ System.Collections.IDictionary _internalProperties;
                    /*0x18*/ System.Runtime.Remoting.Messaging.IMethodMessage _message;
                    /*0x20*/ string[] _methodKeys;
                    /*0x28*/ bool _ownProperties;

                    /*0xe78ae0*/ MessageDictionary(System.Runtime.Remoting.Messaging.IMethodMessage message);
                    /*0xe78490*/ bool HasUserData();
                    /*0xe78b90*/ System.Collections.IDictionary get_InternalDictionary();
                    /*0x7965a0*/ void set_MethodKeys(string[] value);
                    /*0xe77e40*/ System.Collections.IDictionary AllocInternalProperties();
                    /*0xe78080*/ System.Collections.IDictionary GetInternalProperties();
                    /*0xe78570*/ bool IsOverridenKey(string key);
                    /*0x348b00*/ bool get_IsFixedSize();
                    /*0x348b00*/ bool get_IsReadOnly();
                    /*0xe78c40*/ object get_Item(object key);
                    /*0xe77ce0*/ void set_Item(object key, object value);
                    /*0xe780d0*/ object GetMethodProperty(string key);
                    /*0xe78750*/ void SetMethodProperty(string key, object value);
                    /*0xe78d70*/ System.Collections.ICollection get_Keys();
                    /*0xe79150*/ System.Collections.ICollection get_Values();
                    /*0xe77ce0*/ void Add(object key, object value);
                    /*0xe77e90*/ bool Contains(object key);
                    /*0xe785f0*/ void Remove(object key);
                    /*0xe78b20*/ int get_Count();
                    /*0x348b00*/ bool get_IsSynchronized();
                    /*0x621ca0*/ object get_SyncRoot();
                    /*0xe77fa0*/ void CopyTo(System.Array array, int index);
                    /*0xe78a80*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    /*0xe78020*/ System.Collections.IDictionaryEnumerator GetEnumerator();

                    class DictionaryEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
                    {
                        /*0x10*/ System.Runtime.Remoting.Messaging.MessageDictionary _methodDictionary;
                        /*0x18*/ System.Collections.IDictionaryEnumerator _hashtableEnum;
                        /*0x20*/ int _posMethod;

                        /*0xe72b00*/ DictionaryEnumerator(System.Runtime.Remoting.Messaging.MessageDictionary methodDictionary);
                        /*0xe72ba0*/ object get_Current();
                        /*0xe72980*/ bool MoveNext();
                        /*0xe72aa0*/ void Reset();
                        /*0xe72c00*/ System.Collections.DictionaryEntry get_Entry();
                        /*0xe72dc0*/ object get_Key();
                        /*0xe72de0*/ object get_Value();
                    }
                }

                class MethodResponse : System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Serialization.ISerializable, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ string _methodName;
                    /*0x18*/ string _uri;
                    /*0x20*/ string _typeName;
                    /*0x28*/ System.Reflection.MethodBase _methodBase;
                    /*0x30*/ object _returnValue;
                    /*0x38*/ System.Exception _exception;
                    /*0x40*/ System.Type[] _methodSignature;
                    /*0x48*/ System.Runtime.Remoting.Messaging.ArgInfo _inArgInfo;
                    /*0x50*/ object[] _args;
                    /*0x58*/ object[] _outArgs;
                    /*0x60*/ System.Runtime.Remoting.Messaging.IMethodCallMessage _callMsg;
                    /*0x68*/ System.Runtime.Remoting.Messaging.LogicalCallContext _callContext;
                    /*0x70*/ System.Runtime.Remoting.Identity _targetIdentity;
                    /*0x78*/ System.Collections.IDictionary ExternalProperties;
                    /*0x80*/ System.Collections.IDictionary InternalProperties;

                    /*0xe7ba90*/ MethodResponse(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0xe7bb90*/ MethodResponse(object returnValue, object[] outArgs, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0xe7bc60*/ MethodResponse(System.Runtime.Remoting.Messaging.IMethodCallMessage msg, System.Runtime.Remoting.Messaging.CADMethodReturnMessage retmsg);
                    /*0xe713e0*/ MethodResponse(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xe7b4a0*/ void InitMethodProperty(string key, object value);
                    /*0xe7c0a0*/ int get_ArgCount();
                    /*0x4e40e0*/ object[] get_Args();
                    /*0x995140*/ System.Exception get_Exception();
                    /*0xe7c0c0*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0xe7c130*/ System.Reflection.MethodBase get_MethodBase();
                    /*0xe7c290*/ string get_MethodName();
                    /*0xe7c300*/ object get_MethodSignature();
                    /*0xe7c3e0*/ object[] get_OutArgs();
                    /*0xe71480*/ System.Collections.IDictionary get_Properties();
                    /*0x997630*/ object get_ReturnValue();
                    /*0xe7c5f0*/ string get_TypeName();
                    /*0xe7ba20*/ string get_Uri();
                    /*0x7963c0*/ void set_Uri(string value);
                    /*0xe7ba20*/ string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri();
                    /*0x7963c0*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value);
                    /*0xe7b0e0*/ object GetArg(int argNum);
                    /*0xe7b110*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0xd184b0*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0xe49c60*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                }

                class MethodReturnDictionary : System.Runtime.Remoting.Messaging.MessageDictionary
                {
                    static /*0x0*/ string[] InternalReturnKeys;
                    static /*0x8*/ string[] InternalExceptionKeys;

                    static /*0xe7c660*/ MethodReturnDictionary();
                    /*0xe7c870*/ MethodReturnDictionary(System.Runtime.Remoting.Messaging.IMethodReturnMessage message);
                }

                class MonoMethodMessage : System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ System.Reflection.RuntimeMethodInfo method;
                    /*0x18*/ object[] args;
                    /*0x20*/ string[] names;
                    /*0x28*/ byte[] arg_types;
                    /*0x30*/ System.Runtime.Remoting.Messaging.LogicalCallContext ctx;
                    /*0x38*/ object rval;
                    /*0x40*/ System.Exception exc;
                    /*0x48*/ System.Runtime.Remoting.Messaging.AsyncResult asyncResult;
                    /*0x50*/ System.Runtime.Remoting.Messaging.CallType call_type;
                    /*0x58*/ string uri;
                    /*0x60*/ System.Runtime.Remoting.Messaging.MCMDictionary properties;
                    /*0x68*/ System.Runtime.Remoting.Identity identity;
                    /*0x70*/ System.Type[] methodSignature;

                    static /*0xe7c980*/ System.Reflection.MethodInfo GetMethodInfo(System.Type type, string methodName);
                    /*0xe7d160*/ MonoMethodMessage(System.Reflection.MethodBase method, object[] out_args);
                    /*0xe7d000*/ MonoMethodMessage(System.Reflection.MethodInfo minfo, object[] in_args, object[] out_args);
                    /*0xe7ce00*/ MonoMethodMessage(System.Type type, string methodName, object[] in_args);
                    /*0xe7ca40*/ void InitMessage(System.Reflection.RuntimeMethodInfo method, object[] out_args);
                    /*0xe7d740*/ System.Collections.IDictionary get_Properties();
                    /*0xe7d230*/ int get_ArgCount();
                    /*0x32f410*/ object[] get_Args();
                    /*0x997630*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x997640*/ void set_LogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext value);
                    /*0x73d3e0*/ System.Reflection.MethodBase get_MethodBase();
                    /*0xe7d330*/ string get_MethodName();
                    /*0xe7d3b0*/ object get_MethodSignature();
                    /*0xe7d7b0*/ string get_TypeName();
                    /*0xb61940*/ string get_Uri();
                    /*0xb61a20*/ void set_Uri(string value);
                    /*0xe7c950*/ object GetArg(int arg_num);
                    /*0xb61870*/ System.Exception get_Exception();
                    /*0xe7d510*/ int get_OutArgCount();
                    /*0xe7d570*/ object[] get_OutArgs();
                    /*0x995140*/ object get_ReturnValue();
                    /*0x8af030*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0xe69480*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                    /*0x4e40d0*/ System.Runtime.Remoting.Messaging.AsyncResult get_AsyncResult();
                    /*0xe7d2c0*/ System.Runtime.Remoting.Messaging.CallType get_CallType();
                    /*0xe7cd80*/ bool NeedsOutProcessing(ref int outCount);
                }

                enum CallType
                {
                    Sync = 0,
                    BeginInvoke = 1,
                    EndInvoke = 2,
                    OneWay = 3,
                }

                class OneWayAttribute : System.Attribute
                {
                }

                class RemotingSurrogate : System.Runtime.Serialization.ISerializationSurrogate
                {
                    /*0x32f970*/ RemotingSurrogate();
                    /*0xe83c20*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc);
                    /*0xe83d60*/ object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc, System.Runtime.Serialization.ISurrogateSelector selector);
                }

                class ObjRefSurrogate : System.Runtime.Serialization.ISerializationSurrogate
                {
                    /*0x32f970*/ ObjRefSurrogate();
                    /*0xe7d850*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc);
                    /*0xe7d960*/ object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc, System.Runtime.Serialization.ISurrogateSelector selector);
                }

                class RemotingSurrogateSelector : System.Runtime.Serialization.ISurrogateSelector
                {
                    static /*0x0*/ System.Type s_cachedTypeObjRef;
                    static /*0x8*/ System.Runtime.Remoting.Messaging.ObjRefSurrogate _objRefSurrogate;
                    static /*0x10*/ System.Runtime.Remoting.Messaging.RemotingSurrogate _objRemotingSurrogate;
                    /*0x10*/ System.Runtime.Serialization.ISurrogateSelector _next;

                    static /*0xe83af0*/ RemotingSurrogateSelector();
                    /*0x32f970*/ RemotingSurrogateSelector();
                    /*0xe83950*/ System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(System.Type type, System.Runtime.Serialization.StreamingContext context, ref System.Runtime.Serialization.ISurrogateSelector ssout);
                }

                class ReturnMessage : System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ object[] _outArgs;
                    /*0x18*/ object[] _args;
                    /*0x20*/ System.Runtime.Remoting.Messaging.LogicalCallContext _callCtx;
                    /*0x28*/ object _returnValue;
                    /*0x30*/ string _uri;
                    /*0x38*/ System.Exception _exception;
                    /*0x40*/ System.Reflection.MethodBase _methodBase;
                    /*0x48*/ string _methodName;
                    /*0x50*/ System.Type[] _methodSignature;
                    /*0x58*/ string _typeName;
                    /*0x60*/ System.Runtime.Remoting.Messaging.MethodReturnDictionary _properties;
                    /*0x68*/ System.Runtime.Remoting.Identity _targetIdentity;
                    /*0x70*/ System.Runtime.Remoting.Messaging.ArgInfo _inArgInfo;

                    /*0xe83eb0*/ ReturnMessage(object ret, object[] outArgs, int outArgsCount, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm);
                    /*0xe83dd0*/ ReturnMessage(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm);
                    /*0xe83fc0*/ int get_ArgCount();
                    /*0x32f410*/ object[] get_Args();
                    /*0xe83fe0*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0xb61870*/ System.Reflection.MethodBase get_MethodBase();
                    /*0xe84050*/ string get_MethodName();
                    /*0xe840b0*/ object get_MethodSignature();
                    /*0xe842e0*/ System.Collections.IDictionary get_Properties();
                    /*0xe84350*/ string get_TypeName();
                    /*0x997630*/ string get_Uri();
                    /*0x997640*/ void set_Uri(string value);
                    /*0x997630*/ string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri();
                    /*0x997640*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value);
                    /*0xe83da0*/ object GetArg(int argNum);
                    /*0x995140*/ System.Exception get_Exception();
                    /*0xe84220*/ object[] get_OutArgs();
                    /*0x79a150*/ object get_ReturnValue();
                    /*0x8af030*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0xe69480*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                }

                class ServerContextTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x32f970*/ ServerContextTerminatorSink();
                    /*0xe855b0*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xe854f0*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ServerObjectTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _nextSink;

                    /*0x49b490*/ ServerObjectTerminatorSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                    /*0xe85930*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xe85790*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ServerObjectReplySink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _replySink;
                    /*0x18*/ System.Runtime.Remoting.ServerIdentity _identity;

                    /*0xe692f0*/ ServerObjectReplySink(System.Runtime.Remoting.ServerIdentity identity, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0xe85710*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xe856d0*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class StackBuilderSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.MarshalByRefObject _target;
                    /*0x18*/ System.Runtime.Remoting.Proxies.RealProxy _rp;

                    /*0xe86850*/ StackBuilderSink(System.MarshalByRefObject obj, bool forceInternalExecute);
                    /*0xe86740*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xe86040*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0xe86570*/ void ExecuteAsyncMessage(object ob);
                    /*0xe86190*/ void CheckParameters(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0xe86830*/ void <AsyncProcessMessage>b__4_0(object data);
                }
            }
        }

        namespace Versioning
        {
            class NonVersionableAttribute : System.Attribute
            {
                /*0x534220*/ NonVersionableAttribute();
            }

            class BinaryCompatibility
            {
                static /*0x0*/ bool TargetsAtLeast_Desktop_V4_5;
                static /*0x1*/ bool TargetsAtLeast_Desktop_V4_5_1;

                static /*0xe69720*/ BinaryCompatibility();
            }
        }

        namespace Serialization
        {
            interface IDeserializationCallback
            {
                /*0x17aec0*/ void OnDeserialization(object sender);
            }

            interface IFormatterConverter
            {
                /*0x177730*/ object Convert(object value, System.Type type);
                /*0x17e620*/ bool ToBoolean(object value);
                /*0x17b580*/ int ToInt32(object value);
                long ToInt64(object value);
                float ToSingle(object value);
                /*0x1858d0*/ string ToString(object value);
            }

            interface IObjectReference
            {
                object GetRealObject(System.Runtime.Serialization.StreamingContext context);
            }

            interface ISerializable
            {
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class SerializationException : System.SystemException
            {
                static /*0x0*/ string s_nullMessage;

                static /*0xe84cd0*/ SerializationException();
                /*0xe84d60*/ SerializationException();
                /*0xe84d40*/ SerializationException(string message);
                /*0xe84dd0*/ SerializationException(string message, System.Exception innerException);
                /*0xe291b0*/ SerializationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            struct SerializationEntry
            {
                /*0x10*/ string _name;
                /*0x18*/ object _value;
                /*0x20*/ System.Type _type;

                /*0xd4aac0*/ SerializationEntry(string entryName, object entryValue, System.Type entryType);
                /*0xa5a7f0*/ object get_Value();
                /*0x6937d0*/ string get_Name();
            }

            class SerializationInfoEnumerator : System.Collections.IEnumerator
            {
                /*0x10*/ string[] _members;
                /*0x18*/ object[] _data;
                /*0x20*/ System.Type[] _types;
                /*0x28*/ int _numItems;
                /*0x2c*/ int _currItem;
                /*0x30*/ bool _current;

                /*0xe84e80*/ SerializationInfoEnumerator(string[] members, object[] info, System.Type[] types, int numItems);
                /*0xe84df0*/ bool MoveNext();
                /*0xe84e20*/ object System.Collections.IEnumerator.get_Current();
                /*0xe84f00*/ System.Runtime.Serialization.SerializationEntry get_Current();
                /*0xe84e10*/ void Reset();
                /*0xe85020*/ string get_Name();
                /*0xe85140*/ object get_Value();
                /*0xe850b0*/ System.Type get_ObjectType();
            }

            class DeserializationEventHandler : System.MulticastDelegate
            {
                /*0x7214c0*/ DeserializationEventHandler(object object, nint method);
                /*0x720980*/ void Invoke(object sender);
            }

            class SerializationEventHandler : System.MulticastDelegate
            {
                /*0x720f40*/ SerializationEventHandler(object object, nint method);
                /*0x7208f0*/ void Invoke(System.Runtime.Serialization.StreamingContext context);
            }

            class FormatterConverter : System.Runtime.Serialization.IFormatterConverter
            {
                static /*0xe730a0*/ void ThrowValueNullException();
                /*0x32f970*/ FormatterConverter();
                /*0xe73000*/ object Convert(object value, System.Type type);
                /*0xe730f0*/ bool ToBoolean(object value);
                /*0xe73180*/ int ToInt32(object value);
                /*0xe73210*/ long ToInt64(object value);
                /*0xe732a0*/ float ToSingle(object value);
                /*0xe73330*/ string ToString(object value);
            }

            interface ISerializationSurrogate
            {
                void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ISurrogateSelector selector);
            }

            interface ISurrogateSelector
            {
                System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(System.Type type, System.Runtime.Serialization.StreamingContext context, ref System.Runtime.Serialization.ISurrogateSelector selector);
            }

            class MemberHolder
            {
                /*0x10*/ System.Type _memberType;
                /*0x18*/ System.Runtime.Serialization.StreamingContext _context;

                /*0xe77c90*/ MemberHolder(System.Type type, System.Runtime.Serialization.StreamingContext ctx);
                /*0xe77c60*/ int GetHashCode();
                /*0xe77be0*/ bool Equals(object obj);
            }

            class SerializationBinder
            {
                /*0x32f970*/ SerializationBinder();
                /*0xe843d0*/ void BindToName(System.Type serializedType, ref string assemblyName, ref string typeName);
                /*0x177730*/ System.Type BindToType(string assemblyName, string typeName);
            }

            class SerializationEvents
            {
                /*0x10*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onSerializingMethods;
                /*0x18*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onSerializedMethods;
                /*0x20*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onDeserializingMethods;
                /*0x28*/ System.Collections.Generic.List<System.Reflection.MethodInfo> _onDeserializedMethods;

                static /*0xe84a30*/ void InvokeOnDelegate(object obj, System.Runtime.Serialization.StreamingContext context, System.Collections.Generic.List<System.Reflection.MethodInfo> methods);
                static /*0xe845f0*/ System.Runtime.Serialization.SerializationEventHandler AddOnDelegate(object obj, System.Runtime.Serialization.SerializationEventHandler handler, System.Collections.Generic.List<System.Reflection.MethodInfo> methods);
                /*0xe84b60*/ SerializationEvents(System.Type t);
                /*0xe84830*/ System.Collections.Generic.List<System.Reflection.MethodInfo> GetMethodsWithAttribute(System.Type attribute, System.Type t);
                /*0xe84cb0*/ bool get_HasOnSerializingEvents();
                /*0xe84b10*/ void InvokeOnSerializing(object obj, System.Runtime.Serialization.StreamingContext context);
                /*0xe84ac0*/ void InvokeOnDeserializing(object obj, System.Runtime.Serialization.StreamingContext context);
                /*0xe84a70*/ void InvokeOnDeserialized(object obj, System.Runtime.Serialization.StreamingContext context);
                /*0xe84810*/ System.Runtime.Serialization.SerializationEventHandler AddOnSerialized(object obj, System.Runtime.Serialization.SerializationEventHandler handler);
                /*0xe847f0*/ System.Runtime.Serialization.SerializationEventHandler AddOnDeserialized(object obj, System.Runtime.Serialization.SerializationEventHandler handler);
            }

            class SerializationEventsCache
            {
                static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<System.Type, System.Runtime.Serialization.SerializationEvents> s_cache;

                static /*0xe84560*/ SerializationEventsCache();
                static /*0xe84400*/ System.Runtime.Serialization.SerializationEvents GetSerializationEventsForType(System.Type t);

                class <>c
                {
                    static /*0x0*/ System.Runtime.Serialization.SerializationEventsCache.<> <>9;
                    static /*0x8*/ System.Func<System.Type, System.Runtime.Serialization.SerializationEvents> <>9__1_0;

                    static /*0xe86d30*/ <>c();
                    /*0x32f970*/ <>c();
                    /*0xe86b00*/ System.Runtime.Serialization.SerializationEvents <GetSerializationEventsForType>b__1_0(System.Type type);
                }
            }

            class SerializationObjectManager
            {
                /*0x10*/ System.Collections.Generic.Dictionary<object, object> _objectSeenTable;
                /*0x18*/ System.Runtime.Serialization.StreamingContext _context;
                /*0x28*/ System.Runtime.Serialization.SerializationEventHandler _onSerializedHandler;

                /*0xe85460*/ SerializationObjectManager(System.Runtime.Serialization.StreamingContext context);
                /*0xe852b0*/ void RegisterObject(object obj);
                /*0xe85270*/ void RaiseOnSerializedEvent();
                /*0xe851d0*/ void AddOnSerialized(object obj);
            }

            class ValueTypeFixupInfo
            {
                /*0x10*/ long _containerID;
                /*0x18*/ System.Reflection.FieldInfo _parentField;
                /*0x20*/ int[] _parentIndex;

                /*0xe86da0*/ ValueTypeFixupInfo(long containerID, System.Reflection.FieldInfo member, int[] parentIndex);
                /*0x73d3e0*/ long get_ContainerID();
                /*0x32f410*/ System.Reflection.FieldInfo get_ParentField();
                /*0x61a260*/ int[] get_ParentIndex();
            }

            class FormatterServices
            {
                static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<System.Runtime.Serialization.MemberHolder, System.Reflection.MemberInfo[]> m_MemberInfoTable;
                static /*0x8*/ bool unsafeTypeForwardersIsEnabled;
                static /*0x9*/ bool unsafeTypeForwardersIsEnabledInitialized;
                static /*0x10*/ System.Type[] advancedTypes;
                static /*0x18*/ System.Reflection.Binder s_binder;

                static /*0xe75ce0*/ FormatterServices();
                static /*0xe74760*/ System.Reflection.MemberInfo[] GetSerializableMembers(System.RuntimeType type);
                static /*0xe733c0*/ bool CheckSerializable(System.RuntimeType type);
                static /*0xe74e60*/ System.Reflection.MemberInfo[] InternalGetSerializableMembers(System.RuntimeType type);
                static /*0xe74070*/ bool GetParentTypes(System.RuntimeType parentType, ref System.RuntimeType[] parentTypes, ref int parentTypeCount);
                static /*0xe74920*/ System.Reflection.MemberInfo[] GetSerializableMembers(System.Type type, System.Runtime.Serialization.StreamingContext context);
                static /*0xe74c90*/ object GetUninitializedObject(System.Type type);
                static /*0xe744c0*/ object GetSafeUninitializedObject(System.Type type);
                static /*0xe67e40*/ object nativeGetUninitializedObject(System.RuntimeType type);
                static /*0xe67e40*/ object nativeGetSafeUninitializedObject(System.RuntimeType type);
                static /*0x348b00*/ bool GetEnableUnsafeTypeForwarders();
                static /*0xe75c10*/ bool UnsafeTypeForwardersIsEnabled();
                static /*0xe759e0*/ void SerializationSetValue(System.Reflection.MemberInfo fi, object target, object value);
                static /*0xe75640*/ object PopulateObjectMembers(object obj, System.Reflection.MemberInfo[] members, object[] data);
                static /*0xe73c30*/ object[] GetObjectData(object obj, System.Reflection.MemberInfo[] members);
                static /*0xe74be0*/ System.Type GetTypeFromAssembly(System.Reflection.Assembly assem, string name);
                static /*0xe75630*/ System.Reflection.Assembly LoadAssemblyFromString(string assemblyName);
                static /*0xe755d0*/ System.Reflection.Assembly LoadAssemblyFromStringNoThrow(string assemblyName);
                static /*0xe733f0*/ string GetClrAssemblyName(System.Type type, ref bool hasTypeForwardedFrom);
                static /*0xe73bb0*/ string GetClrTypeFullName(System.Type type);
                static /*0xe73590*/ string GetClrTypeFullNameForArray(System.Type type);
                static /*0xe737c0*/ string GetClrTypeFullNameForNonArrayTypes(System.Type type);

                class <>c__DisplayClass9_0
                {
                    /*0x10*/ System.Type type;

                    /*0x32f970*/ <>c__DisplayClass9_0();
                    /*0xe86c80*/ System.Reflection.MemberInfo[] <GetSerializableMembers>b__0(System.Runtime.Serialization.MemberHolder _);
                }
            }

            class SurrogateForCyclicalReference : System.Runtime.Serialization.ISerializationSurrogate
            {
                /*0x10*/ System.Runtime.Serialization.ISerializationSurrogate innerSurrogate;

                /*0xe86910*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0xe86a00*/ object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ISurrogateSelector selector);
            }

            class ObjectIDGenerator
            {
                static /*0x0*/ int[] sizes;
                /*0x10*/ int m_currentCount;
                /*0x14*/ int m_currentSize;
                /*0x18*/ long[] m_ids;
                /*0x20*/ object[] m_objs;

                static /*0xe7ece0*/ ObjectIDGenerator();
                /*0xe7ed70*/ ObjectIDGenerator();
                /*0xe7e680*/ int FindElement(object obj, ref bool found);
                /*0xe7e750*/ long GetId(object obj, ref bool firstTime);
                /*0xe7e8f0*/ long HasId(object obj, ref bool firstTime);
                /*0xe7e9d0*/ void Rehash();
            }

            class ObjectManager
            {
                /*0x10*/ System.Runtime.Serialization.DeserializationEventHandler m_onDeserializationHandler;
                /*0x18*/ System.Runtime.Serialization.SerializationEventHandler m_onDeserializedHandler;
                /*0x20*/ System.Runtime.Serialization.ObjectHolder[] m_objects;
                /*0x28*/ object m_topObject;
                /*0x30*/ System.Runtime.Serialization.ObjectHolderList m_specialFixupObjects;
                /*0x38*/ long m_fixupCount;
                /*0x40*/ System.Runtime.Serialization.ISurrogateSelector m_selector;
                /*0x48*/ System.Runtime.Serialization.StreamingContext m_context;

                static /*0xe819e0*/ System.Reflection.RuntimeConstructorInfo GetConstructor(System.RuntimeType t);
                /*0xe830f0*/ ObjectManager(System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context, bool checkSecurity, bool isCrossAppDomain);
                /*0x3ce290*/ bool CanCallGetType(object obj);
                /*0x98b030*/ void set_TopObject(object value);
                /*0x79a150*/ object get_TopObject();
                /*0xe83180*/ System.Runtime.Serialization.ObjectHolderList get_SpecialFixupObjects();
                /*0xe810b0*/ System.Runtime.Serialization.ObjectHolder FindObjectHolder(long objectID);
                /*0xe81100*/ System.Runtime.Serialization.ObjectHolder FindOrCreateObjectHolder(long objectID);
                /*0xe7ee50*/ void AddObjectHolder(System.Runtime.Serialization.ObjectHolder holder);
                /*0xe81600*/ bool GetCompletionInfo(System.Runtime.Serialization.FixupHolder fixup, ref System.Runtime.Serialization.ObjectHolder holder, ref object member, bool bThrowIfMissing);
                /*0xe81250*/ void FixupSpecialObject(System.Runtime.Serialization.ObjectHolder holder);
                /*0xe82eb0*/ bool ResolveObjectReference(System.Runtime.Serialization.ObjectHolder holder);
                /*0xe80a50*/ bool DoValueTypeFixup(System.Reflection.FieldInfo memberToFix, System.Runtime.Serialization.ObjectHolder holder, object value);
                /*0xe7f440*/ void CompleteObject(System.Runtime.Serialization.ObjectHolder holder, bool bObjectFullyComplete);
                /*0xe80900*/ void DoNewlyRegisteredObjectFixups(System.Runtime.Serialization.ObjectHolder holder);
                /*0xe81b10*/ object GetObject(long objectID);
                /*0xe82db0*/ void RegisterString(string obj, long objectID, System.Runtime.Serialization.SerializationInfo info, long idOfContainingObj, System.Reflection.MemberInfo member);
                /*0xe825a0*/ void RegisterObject(object obj, long objectID, System.Runtime.Serialization.SerializationInfo info, long idOfContainingObj, System.Reflection.MemberInfo member, int[] arrayIndex);
                /*0xe7f0d0*/ void CompleteISerializableObject(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0xe804c0*/ void DoFixups();
                /*0xe82390*/ void RegisterFixup(System.Runtime.Serialization.FixupHolder fixup, long objectToBeFixed, long objectRequired);
                /*0xe820e0*/ void RecordFixup(long objectToBeFixed, System.Reflection.MemberInfo member, long objectRequired);
                /*0xe81f60*/ void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired);
                /*0xe81de0*/ void RecordArrayElementFixup(long arrayToBeFixed, int[] indices, long objectRequired);
                /*0xe81c00*/ void RaiseDeserializationEvent();
                /*0xe7ef90*/ void AddOnDeserialization(System.Runtime.Serialization.DeserializationEventHandler handler);
                /*0xe7f030*/ void AddOnDeserialized(object obj);
                /*0xe81c60*/ void RaiseOnDeserializedEvent(object obj);
                /*0xe81d20*/ void RaiseOnDeserializingEvent(object obj);
            }

            class ObjectHolder
            {
                /*0x10*/ object m_object;
                /*0x18*/ long m_id;
                /*0x20*/ int m_missingElementsRemaining;
                /*0x24*/ int m_missingDecendents;
                /*0x28*/ System.Runtime.Serialization.SerializationInfo m_serInfo;
                /*0x30*/ System.Runtime.Serialization.ISerializationSurrogate m_surrogate;
                /*0x38*/ System.Runtime.Serialization.FixupHolderList m_missingElements;
                /*0x40*/ System.Runtime.Serialization.LongList m_dependentObjects;
                /*0x48*/ System.Runtime.Serialization.ObjectHolder m_next;
                /*0x50*/ int m_flags;
                /*0x54*/ bool m_markForFixupWhenAvailable;
                /*0x58*/ System.Runtime.Serialization.ValueTypeFixupInfo m_valueFixup;
                /*0x60*/ System.Runtime.Serialization.TypeLoadExceptionHolder m_typeLoad;
                /*0x68*/ bool m_reachable;

                /*0xe7dfe0*/ ObjectHolder(long objID);
                /*0xe7e0a0*/ ObjectHolder(object obj, long objID, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, long idOfContainingObj, System.Reflection.FieldInfo field, int[] arrayIndex);
                /*0xe7e330*/ ObjectHolder(string obj, long objID, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, long idOfContainingObj, System.Reflection.FieldInfo field, int[] arrayIndex);
                /*0xe7db90*/ void IncrementDescendentFixups(int amount);
                /*0xe7db30*/ void DecrementFixupsRemaining(System.Runtime.Serialization.ObjectManager manager);
                /*0xe7dbb0*/ void RemoveDependency(long id);
                /*0xe7da40*/ void AddFixup(System.Runtime.Serialization.FixupHolder fixup, System.Runtime.Serialization.ObjectManager manager);
                /*0xe7df80*/ void UpdateDescendentDependencyChain(int amount, System.Runtime.Serialization.ObjectManager manager);
                /*0xe7d9b0*/ void AddDependency(long dependentObject);
                /*0xe7dd90*/ void UpdateData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, long idOfContainer, System.Reflection.FieldInfo field, int[] arrayIndex, System.Runtime.Serialization.ObjectManager manager);
                /*0xe7dba0*/ void MarkForCompletionWhenAvailable();
                /*0xe7dbd0*/ void SetFlags();
                /*0xe7e570*/ bool get_IsIncompleteObjectReference();
                /*0xe7e620*/ void set_IsIncompleteObjectReference(bool value);
                /*0xe7e590*/ bool get_RequiresDelayedFixup();
                /*0xe7e5c0*/ bool get_RequiresValueTypeFixup();
                /*0xe7e5f0*/ bool get_ValueTypeFixupPerformed();
                /*0xe7e670*/ void set_ValueTypeFixupPerformed(bool value);
                /*0xe7e550*/ bool get_HasISerializable();
                /*0xe7e560*/ bool get_HasSurrogate();
                /*0xe7e470*/ bool get_CanSurrogatedObjectValueChange();
                /*0xe7e450*/ bool get_CanObjectValueChange();
                /*0x3e3af0*/ int get_DirectlyDependentObjects();
                /*0xe7e5d0*/ int get_TotalDependentObjects();
                /*0xe7e580*/ bool get_Reachable();
                /*0xe7e640*/ void set_Reachable(bool value);
                /*0xe7e5e0*/ bool get_TypeLoadExceptionReachable();
                /*0xe643b0*/ System.Runtime.Serialization.TypeLoadExceptionHolder get_TypeLoadException();
                /*0xe643c0*/ void set_TypeLoadException(System.Runtime.Serialization.TypeLoadExceptionHolder value);
                /*0x73d3e0*/ object get_ObjectValue();
                /*0xe7dc60*/ void SetObjectValue(object obj, System.Runtime.Serialization.ObjectManager manager);
                /*0x79a150*/ System.Runtime.Serialization.SerializationInfo get_SerializationInfo();
                /*0x98b030*/ void set_SerializationInfo(System.Runtime.Serialization.SerializationInfo value);
                /*0x997630*/ System.Runtime.Serialization.ISerializationSurrogate get_Surrogate();
                /*0xb61870*/ System.Runtime.Serialization.LongList get_DependentObjects();
                /*0xcf6cd0*/ void set_DependentObjects(System.Runtime.Serialization.LongList value);
                /*0xe7e5a0*/ bool get_RequiresSerInfoFixup();
                /*0xe7e650*/ void set_RequiresSerInfoFixup(bool value);
                /*0xb61940*/ System.Runtime.Serialization.ValueTypeFixupInfo get_ValueFixup();
                /*0xe7e510*/ bool get_CompletelyFixed();
                /*0xe7e530*/ long get_ContainerID();
            }

            class FixupHolder
            {
                /*0x10*/ long m_id;
                /*0x18*/ object m_fixupInfo;
                /*0x20*/ int m_fixupType;

                /*0xe8da50*/ FixupHolder(long id, object fixupInfo, int fixupType);
            }

            class FixupHolderList
            {
                /*0x10*/ System.Runtime.Serialization.FixupHolder[] m_values;
                /*0x18*/ int m_count;

                /*0xe8d9f0*/ FixupHolderList();
                /*0xe8d980*/ FixupHolderList(int startingSize);
                /*0xe8d7e0*/ void Add(System.Runtime.Serialization.FixupHolder fixup);
                /*0xe8d8f0*/ void EnlargeArray();
            }

            class LongList
            {
                /*0x10*/ long[] m_values;
                /*0x18*/ int m_count;
                /*0x1c*/ int m_totalItems;
                /*0x20*/ int m_currentItem;

                /*0xe8ded0*/ LongList();
                /*0xe8df30*/ LongList(int startingSize);
                /*0xe8dca0*/ void Add(long value);
                /*0x8a5c20*/ int get_Count();
                /*0x8b4d70*/ void StartEnumeration();
                /*0xe8de00*/ bool MoveNext();
                /*0xe8dfa0*/ long get_Current();
                /*0xe8de50*/ bool RemoveElement(long value);
                /*0xe8dd70*/ void EnlargeArray();
            }

            class ObjectHolderList
            {
                /*0x10*/ System.Runtime.Serialization.ObjectHolder[] m_values;
                /*0x18*/ int m_count;

                /*0xe8e4e0*/ ObjectHolderList();
                /*0xe8e540*/ ObjectHolderList(int startingSize);
                /*0xe8e2f0*/ void Add(System.Runtime.Serialization.ObjectHolder value);
                /*0xe8e460*/ System.Runtime.Serialization.ObjectHolderListEnumerator GetFixupEnumerator();
                /*0xe8e3d0*/ void EnlargeArray();
                /*0x8a5c20*/ int get_Version();
                /*0x8a5c20*/ int get_Count();
            }

            class ObjectHolderListEnumerator
            {
                /*0x10*/ bool m_isFixupEnumerator;
                /*0x18*/ System.Runtime.Serialization.ObjectHolderList m_list;
                /*0x20*/ int m_startingVersion;
                /*0x24*/ int m_currPos;

                /*0xe8e250*/ ObjectHolderListEnumerator(System.Runtime.Serialization.ObjectHolderList list, bool isFixupEnumerator);
                /*0xe8e1c0*/ bool MoveNext();
                /*0xe8e2b0*/ System.Runtime.Serialization.ObjectHolder get_Current();
            }

            class TypeLoadExceptionHolder
            {
                /*0x10*/ string m_typeName;

                /*0x49b490*/ TypeLoadExceptionHolder(string typeName);
                /*0x73d3e0*/ string get_TypeName();
            }

            class SafeSerializationEventArgs : System.EventArgs
            {
                /*0x10*/ System.Runtime.Serialization.StreamingContext m_streamingContext;
                /*0x20*/ System.Collections.Generic.List<object> m_serializedStates;

                /*0xe99a30*/ SafeSerializationEventArgs(System.Runtime.Serialization.StreamingContext streamingContext);
                /*0xe99a00*/ SafeSerializationEventArgs();
                /*0x61a260*/ System.Collections.Generic.IList<object> get_SerializedStates();
            }

            interface ISafeSerializationData
            {
                /*0x17aec0*/ void CompleteDeserialization(object deserialized);
            }

            class SafeSerializationManager : System.Runtime.Serialization.IObjectReference, System.Runtime.Serialization.ISerializable
            {
                static string RealTypeSerializationName = "CLR_SafeSerializationManager_RealType";
                /*0x10*/ System.Collections.Generic.IList<object> m_serializedStates;
                /*0x18*/ System.Runtime.Serialization.SerializationInfo m_savedSerializationInfo;
                /*0x20*/ object m_realObject;
                /*0x28*/ System.RuntimeType m_realType;
                /*0x30*/ System.EventHandler<System.Runtime.Serialization.SafeSerializationEventArgs> SerializeObjectState;

                /*0x32f970*/ SafeSerializationManager();
                /*0xe9a5b0*/ SafeSerializationManager(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0xe9a800*/ bool get_IsActive();
                /*0xe99dd0*/ void CompleteSerialization(object serializedObject, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0xe99af0*/ void CompleteDeserialization(object deserializedObject);
                /*0xe9a460*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0xe9a120*/ object System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0xe9a070*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext context);
            }

            class OptionalFieldAttribute : System.Attribute
            {
                /*0x10*/ int versionAdded;

                /*0xe97b90*/ OptionalFieldAttribute();
                /*0xe97ba0*/ void set_VersionAdded(int value);
            }

            class OnSerializingAttribute : System.Attribute
            {
                /*0x534220*/ OnSerializingAttribute();
            }

            class OnSerializedAttribute : System.Attribute
            {
                /*0x534220*/ OnSerializedAttribute();
            }

            class OnDeserializingAttribute : System.Attribute
            {
                /*0x534220*/ OnDeserializingAttribute();
            }

            class OnDeserializedAttribute : System.Attribute
            {
                /*0x534220*/ OnDeserializedAttribute();
            }

            class SerializationFieldInfo : System.Reflection.FieldInfo
            {
                /*0x10*/ System.Reflection.RuntimeFieldInfo m_field;
                /*0x18*/ string m_serializationName;

                /*0xe9ac90*/ SerializationFieldInfo(System.Reflection.RuntimeFieldInfo field, string namePrefix);
                /*0xe9ae30*/ System.Reflection.Module get_Module();
                /*0xe9ae00*/ int get_MetadataToken();
                /*0x32f410*/ string get_Name();
                /*0xe9ad70*/ System.Type get_DeclaringType();
                /*0xe9ae60*/ System.Type get_ReflectedType();
                /*0xe9a9e0*/ object[] GetCustomAttributes(bool inherit);
                /*0xe9aa10*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0xe9ac20*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0xe9add0*/ System.Type get_FieldType();
                /*0xe9aa40*/ object GetValue(object obj);
                /*0xe9aa70*/ object InternalGetValue(object obj);
                /*0xe9ac50*/ void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
                /*0xe9ab20*/ void InternalSetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
                /*0x73d3e0*/ System.Reflection.RuntimeFieldInfo get_FieldInfo();
                /*0xe9ada0*/ System.RuntimeFieldHandle get_FieldHandle();
                /*0xe9ad40*/ System.Reflection.FieldAttributes get_Attributes();
            }

            class SerializationInfo
            {
                static int defaultSize = 4;
                static string s_mscorlibAssemblySimpleName = "mscorlib";
                static string s_mscorlibFileName = "mscorlib.dll";
                /*0x10*/ string[] m_members;
                /*0x18*/ object[] m_data;
                /*0x20*/ System.Type[] m_types;
                /*0x28*/ System.Collections.Generic.Dictionary<string, int> m_nameToIndex;
                /*0x30*/ int m_currMember;
                /*0x38*/ System.Runtime.Serialization.IFormatterConverter m_converter;
                /*0x40*/ string m_fullTypeName;
                /*0x48*/ string m_assemName;
                /*0x50*/ System.Type objectType;
                /*0x58*/ bool isFullTypeNameSetExplicit;
                /*0x59*/ bool isAssemblyNameSetExplicit;
                /*0x5a*/ bool requireSameTokenInPartialTrust;

                static /*0xe9c360*/ bool Compare(byte[] a, byte[] b);
                static /*0xe9c3e0*/ void DemandForUnsafeAssemblyNameAssignments(string originalAssemblyName, string newAssemblyName);
                static /*0xe9d470*/ bool IsAssemblyNameAssignmentSafe(string originalAssemblyName, string newAssemblyName);
                /*0xe9d990*/ SerializationInfo(System.Type type, System.Runtime.Serialization.IFormatterConverter converter);
                /*0xe9d9b0*/ SerializationInfo(System.Type type, System.Runtime.Serialization.IFormatterConverter converter, bool requireSameTokenInPartialTrust);
                /*0xb61870*/ string get_FullTypeName();
                /*0x4e40d0*/ string get_AssemblyName();
                /*0xe9d610*/ void SetType(System.Type type);
                /*0xa79cc0*/ int get_MemberCount();
                /*0x4e40e0*/ System.Type get_ObjectType();
                /*0xe9dc40*/ bool get_IsFullTypeNameSetExplicit();
                /*0xe9dc30*/ bool get_IsAssemblyNameSetExplicit();
                /*0xe9ca50*/ System.Runtime.Serialization.SerializationInfoEnumerator GetEnumerator();
                /*0xe9c3f0*/ void ExpandArrays();
                /*0xe9b590*/ void AddValue(string name, object value, System.Type type);
                /*0xe9b7b0*/ void AddValue(string name, object value);
                /*0xe9c200*/ void AddValue(string name, bool value);
                /*0xe9bb20*/ void AddValue(string name, byte value);
                /*0xe9bc80*/ void AddValue(string name, short value);
                /*0xe9bf40*/ void AddValue(string name, int value);
                /*0xe9b650*/ void AddValue(string name, long value);
                /*0xe9c0a0*/ void AddValue(string name, ulong value);
                /*0xe9b9b0*/ void AddValue(string name, float value);
                /*0xe9bde0*/ void AddValue(string name, System.DateTime value);
                /*0xe9b290*/ void AddValueInternal(string name, object value, System.Type type);
                /*0xe9d7d0*/ void UpdateValue(string name, object value, System.Type type);
                /*0xe9c500*/ int FindElement(string name);
                /*0xe9c880*/ object GetElement(string name, ref System.Type foundType);
                /*0xe9c730*/ object GetElementNoThrow(string name, ref System.Type foundType);
                /*0xe9d290*/ object GetValue(string name, System.Type type);
                /*0xe9d0b0*/ object GetValueNoThrow(string name, System.Type type);
                /*0xe9c5c0*/ bool GetBoolean(string name);
                /*0xe9caf0*/ int GetInt32(string name);
                /*0xe9cc60*/ long GetInt64(string name);
                /*0xe9cdd0*/ float GetSingle(string name);
                /*0xe9cf40*/ string GetString(string name);
            }

            struct StreamingContext
            {
                /*0x10*/ object m_additionalContext;
                /*0x18*/ System.Runtime.Serialization.StreamingContextStates m_state;

                /*0xe9dd00*/ StreamingContext(System.Runtime.Serialization.StreamingContextStates state);
                /*0xe9dd20*/ StreamingContext(System.Runtime.Serialization.StreamingContextStates state, object additional);
                /*0xe9dc50*/ bool Equals(object obj);
                /*0x834a60*/ int GetHashCode();
                /*0x834a60*/ System.Runtime.Serialization.StreamingContextStates get_State();
            }

            enum StreamingContextStates
            {
                CrossProcess = 1,
                CrossMachine = 2,
                File = 4,
                Persistence = 8,
                Remoting = 16,
                Other = 32,
                Clone = 64,
                CrossAppDomain = 128,
                All = 255,
            }

            namespace Formatters
            {
                enum FormatterTypeStyle
                {
                    TypesWhenNeeded = 0,
                    TypesAlways = 1,
                    XsdString = 2,
                }

                enum FormatterAssemblyStyle
                {
                    Simple = 0,
                    Full = 1,
                }

                enum TypeFilterLevel
                {
                    Low = 2,
                    Full = 3,
                }

                namespace Binary
                {
                    enum BinaryHeaderEnum
                    {
                        SerializedStreamHeader = 0,
                        Object = 1,
                        ObjectWithMap = 2,
                        ObjectWithMapAssemId = 3,
                        ObjectWithMapTyped = 4,
                        ObjectWithMapTypedAssemId = 5,
                        ObjectString = 6,
                        Array = 7,
                        MemberPrimitiveTyped = 8,
                        MemberReference = 9,
                        ObjectNull = 10,
                        MessageEnd = 11,
                        Assembly = 12,
                        ObjectNullMultiple256 = 13,
                        ObjectNullMultiple = 14,
                        ArraySinglePrimitive = 15,
                        ArraySingleObject = 16,
                        ArraySingleString = 17,
                        CrossAppDomainMap = 18,
                        CrossAppDomainString = 19,
                        CrossAppDomainAssembly = 20,
                        MethodCall = 21,
                        MethodReturn = 22,
                    }

                    enum BinaryTypeEnum
                    {
                        Primitive = 0,
                        String = 1,
                        Object = 2,
                        ObjectUrt = 3,
                        ObjectUser = 4,
                        ObjectArray = 5,
                        StringArray = 6,
                        PrimitiveArray = 7,
                    }

                    enum BinaryArrayTypeEnum
                    {
                        Single = 0,
                        Jagged = 1,
                        Rectangular = 2,
                        SingleOffset = 3,
                        JaggedOffset = 4,
                        RectangularOffset = 5,
                    }

                    enum InternalSerializerTypeE
                    {
                        Soap = 1,
                        Binary = 2,
                    }

                    enum InternalParseTypeE
                    {
                        Empty = 0,
                        SerializedStreamHeader = 1,
                        Object = 2,
                        Member = 3,
                        ObjectEnd = 4,
                        MemberEnd = 5,
                        Headers = 6,
                        HeadersEnd = 7,
                        SerializedStreamHeaderEnd = 8,
                        Envelope = 9,
                        EnvelopeEnd = 10,
                        Body = 11,
                        BodyEnd = 12,
                    }

                    enum InternalObjectTypeE
                    {
                        Empty = 0,
                        Object = 1,
                        Array = 2,
                    }

                    enum InternalObjectPositionE
                    {
                        Empty = 0,
                        Top = 1,
                        Child = 2,
                        Headers = 3,
                    }

                    enum InternalArrayTypeE
                    {
                        Empty = 0,
                        Single = 1,
                        Jagged = 2,
                        Rectangular = 3,
                        Base64 = 4,
                    }

                    enum InternalMemberTypeE
                    {
                        Empty = 0,
                        Header = 1,
                        Field = 2,
                        Item = 3,
                    }

                    enum InternalMemberValueE
                    {
                        Empty = 0,
                        InlineValue = 1,
                        Nested = 2,
                        Reference = 3,
                        Null = 4,
                    }

                    enum InternalPrimitiveTypeE
                    {
                        Invalid = 0,
                        Boolean = 1,
                        Byte = 2,
                        Char = 3,
                        Currency = 4,
                        Decimal = 5,
                        Double = 6,
                        Int16 = 7,
                        Int32 = 8,
                        Int64 = 9,
                        SByte = 10,
                        Single = 11,
                        TimeSpan = 12,
                        DateTime = 13,
                        UInt16 = 14,
                        UInt32 = 15,
                        UInt64 = 16,
                        Null = 17,
                        String = 18,
                    }

                    enum ValueFixupEnum
                    {
                        Empty = 0,
                        Array = 1,
                        Header = 2,
                        Member = 3,
                    }

                    class BinaryConverter
                    {
                        static /*0xe87b70*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum GetBinaryTypeInfo(System.Type type, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, string typeName, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, ref object typeInformation, ref int assemId);
                        static /*0xe87ef0*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum GetParserBinaryTypeInfo(System.Type type, ref object typeInformation);
                        static /*0xe88920*/ void WriteTypeInfo(System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, object typeInformation, int assemId, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        static /*0xe88170*/ object ReadTypeInfo(System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, System.Runtime.Serialization.Formatters.Binary.__BinaryParser input, ref int assemId);
                        static /*0xe88340*/ void TypeFromInfo(System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, object typeInformation, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, ref System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE primitiveTypeEnum, ref string typeString, ref System.Type type, ref bool isVariant);
                    }

                    class IOUtil
                    {
                        static /*0xe8dab0*/ bool FlagTest(System.Runtime.Serialization.Formatters.Binary.MessageEnum flag, System.Runtime.Serialization.Formatters.Binary.MessageEnum target);
                        static /*0xe8dac0*/ void WriteStringWithCode(string value, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        static /*0xe8db50*/ void WriteWithCode(System.Type type, object value, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                    }

                    class BinaryAssemblyInfo
                    {
                        /*0x10*/ string assemblyString;
                        /*0x18*/ System.Reflection.Assembly assembly;

                        /*0x49b490*/ BinaryAssemblyInfo(string assemblyString);
                        /*0xce3b90*/ BinaryAssemblyInfo(string assemblyString, System.Reflection.Assembly assembly);
                        /*0xe87940*/ System.Reflection.Assembly GetAssembly();
                    }

                    class SerializationHeaderRecord
                    {
                        /*0x10*/ int binaryFormatterMajorVersion;
                        /*0x14*/ int binaryFormatterMinorVersion;
                        /*0x18*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x1c*/ int topId;
                        /*0x20*/ int headerId;
                        /*0x24*/ int majorVersion;
                        /*0x28*/ int minorVersion;

                        static /*0xe9ae90*/ int GetInt32(byte[] buffer, int index);
                        /*0xe9b220*/ SerializationHeaderRecord();
                        /*0xe9b230*/ SerializationHeaderRecord(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum, int topId, int headerId, int majorVersion, int minorVersion);
                        /*0xe9b140*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0xe9af00*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x32d010*/ void Dump();
                    }

                    class BinaryAssembly
                    {
                        /*0x10*/ int assemId;
                        /*0x18*/ string assemblyString;

                        /*0x32f970*/ BinaryAssembly();
                        /*0xe87ac0*/ void Set(int assemId, string assemblyString);
                        /*0xe87ae0*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0xe87a70*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x32d010*/ void Dump();
                    }

                    class BinaryCrossAppDomainAssembly
                    {
                        /*0x10*/ int assemId;
                        /*0x14*/ int assemblyIndex;

                        /*0x32f970*/ BinaryCrossAppDomainAssembly();
                        /*0xe88ba0*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x32d010*/ void Dump();
                    }

                    class BinaryObject
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int mapId;

                        /*0x32f970*/ BinaryObject();
                        /*0xe8a800*/ void Set(int objectId, int mapId);
                        /*0xe8a810*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0xe88ba0*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x32d010*/ void Dump();
                    }

                    class BinaryMethodCall
                    {
                        /*0x10*/ string methodName;
                        /*0x18*/ string typeName;
                        /*0x20*/ object[] args;
                        /*0x28*/ object callContext;
                        /*0x30*/ System.Type[] argTypes;
                        /*0x38*/ bool bArgsPrimitive;
                        /*0x3c*/ System.Runtime.Serialization.Formatters.Binary.MessageEnum messageEnum;

                        /*0xe89ae0*/ BinaryMethodCall();
                        /*0xe89710*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x32d010*/ void Dump();
                    }

                    class BinaryMethodReturn
                    {
                        static /*0x0*/ object instanceOfVoid;
                        /*0x10*/ object returnValue;
                        /*0x18*/ object[] args;
                        /*0x20*/ object callContext;
                        /*0x28*/ System.Type[] argTypes;
                        /*0x30*/ bool bArgsPrimitive;
                        /*0x34*/ System.Runtime.Serialization.Formatters.Binary.MessageEnum messageEnum;
                        /*0x38*/ System.Type returnType;

                        static /*0xe89e00*/ BinaryMethodReturn();
                        /*0xe89ec0*/ BinaryMethodReturn();
                        /*0xe89af0*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x32d010*/ void Dump();
                    }

                    class BinaryObjectString
                    {
                        /*0x10*/ int objectId;
                        /*0x18*/ string value;

                        /*0x32f970*/ BinaryObjectString();
                        /*0xe87ac0*/ void Set(int objectId, string value);
                        /*0xe89ed0*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0xe87a70*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x32d010*/ void Dump();
                    }

                    class BinaryCrossAppDomainString
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int value;

                        /*0x32f970*/ BinaryCrossAppDomainString();
                        /*0xe88ba0*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x32d010*/ void Dump();
                    }

                    class BinaryCrossAppDomainMap
                    {
                        /*0x10*/ int crossAppDomainArrayIndex;

                        /*0x32f970*/ BinaryCrossAppDomainMap();
                        /*0xe88be0*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x32d010*/ void Dump();
                    }

                    class MemberPrimitiveTyped
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE primitiveTypeEnum;
                        /*0x18*/ object value;

                        /*0x32f970*/ MemberPrimitiveTyped();
                        /*0xe87ac0*/ void Set(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE primitiveTypeEnum, object value);
                        /*0xe8e020*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0xe8dfd0*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x32d010*/ void Dump();
                    }

                    class BinaryObjectWithMap
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x14*/ int objectId;
                        /*0x18*/ string name;
                        /*0x20*/ int numMembers;
                        /*0x28*/ string[] memberNames;
                        /*0x30*/ int assemId;

                        /*0x32f970*/ BinaryObjectWithMap();
                        /*0x32f460*/ BinaryObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0xe8a660*/ void Set(int objectId, string name, int numMembers, string[] memberNames, int assemId);
                        /*0xe8a6c0*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0xe8a530*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x32d010*/ void Dump();
                    }

                    class BinaryObjectWithMapTyped
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x14*/ int objectId;
                        /*0x18*/ string name;
                        /*0x20*/ int numMembers;
                        /*0x28*/ string[] memberNames;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA;
                        /*0x38*/ object[] typeInformationA;
                        /*0x40*/ int[] memberAssemIds;
                        /*0x48*/ int assemId;

                        /*0x32f970*/ BinaryObjectWithMapTyped();
                        /*0x32f460*/ BinaryObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0xe8a270*/ void Set(int objectId, string name, int numMembers, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, int assemId);
                        /*0xe8a310*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0xe89f60*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                    }

                    class BinaryArray
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int rank;
                        /*0x18*/ int[] lengthA;
                        /*0x20*/ int[] lowerBoundA;
                        /*0x28*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum;
                        /*0x30*/ object typeInformation;
                        /*0x38*/ int assemId;
                        /*0x3c*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.BinaryArrayTypeEnum binaryArrayTypeEnum;

                        /*0x32f970*/ BinaryArray();
                        /*0xe87910*/ BinaryArray(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0xe874e0*/ void Set(int objectId, int rank, int[] lengthA, int[] lowerBoundA, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, object typeInformation, System.Runtime.Serialization.Formatters.Binary.BinaryArrayTypeEnum binaryArrayTypeEnum, int assemId);
                        /*0xe875a0*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0xe86f90*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                    }

                    class MemberPrimitiveUnTyped
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE typeInformation;
                        /*0x18*/ object value;

                        /*0x32f970*/ MemberPrimitiveUnTyped();
                        /*0xe87ac0*/ void Set(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE typeInformation, object value);
                        /*0xdcd9c0*/ void Set(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE typeInformation);
                        /*0xe8e0e0*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0xe8e0a0*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x32d010*/ void Dump();
                    }

                    class MemberReference
                    {
                        /*0x10*/ int idRef;

                        /*0x32f970*/ MemberReference();
                        /*0xdcd9c0*/ void Set(int idRef);
                        /*0xe8e110*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0xe88be0*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x32d010*/ void Dump();
                    }

                    class ObjectNull
                    {
                        /*0x10*/ int nullCount;

                        /*0x32f970*/ ObjectNull();
                        /*0xdcd9c0*/ void SetNullCount(int nullCount);
                        /*0xe8f180*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0xe8f110*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input, System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x32d010*/ void Dump();
                    }

                    class MessageEnd
                    {
                        /*0x32f970*/ MessageEnd();
                        /*0xe8e180*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x32d010*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x32d010*/ void Dump();
                        /*0x32d010*/ void Dump(System.IO.Stream sout);
                    }

                    class ObjectMap
                    {
                        /*0x10*/ string objectName;
                        /*0x18*/ System.Type objectType;
                        /*0x20*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA;
                        /*0x28*/ object[] typeInformationA;
                        /*0x30*/ System.Type[] memberTypes;
                        /*0x38*/ string[] memberNames;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo objectInfo;
                        /*0x48*/ bool isInitObjectInfo;
                        /*0x50*/ System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader;
                        /*0x58*/ int objectId;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo;

                        static /*0xe8e7c0*/ System.Runtime.Serialization.Formatters.Binary.ObjectMap Create(string name, System.Type objectType, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo);
                        static /*0xe8e860*/ System.Runtime.Serialization.Formatters.Binary.ObjectMap Create(string name, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable);
                        /*0xe8ee50*/ ObjectMap(string objectName, System.Type objectType, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo);
                        /*0xe8e930*/ ObjectMap(string objectName, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable);
                        /*0xe8e770*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo CreateObjectInfo(ref System.Runtime.Serialization.SerializationInfo si, ref object[] memberData);
                    }

                    class ObjectProgress
                    {
                        static /*0x0*/ int opRecordIdCount;
                        /*0x10*/ bool isInitial;
                        /*0x14*/ int count;
                        /*0x18*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum expectedType;
                        /*0x20*/ object expectedTypeInformation;
                        /*0x28*/ string name;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.InternalObjectTypeE objectTypeEnum;
                        /*0x34*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberTypeE memberTypeEnum;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberValueE memberValueEnum;
                        /*0x40*/ System.Type dtType;
                        /*0x48*/ int numItems;
                        /*0x4c*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum;
                        /*0x50*/ object typeInformation;
                        /*0x58*/ int nullCount;
                        /*0x5c*/ int memberLength;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA;
                        /*0x68*/ object[] typeInformationA;
                        /*0x70*/ string[] memberNames;
                        /*0x78*/ System.Type[] memberTypes;
                        /*0x80*/ System.Runtime.Serialization.Formatters.Binary.ParseRecord pr;

                        static /*0xe8f4c0*/ ObjectProgress();
                        /*0xe8f500*/ ObjectProgress();
                        /*0xe8f3f0*/ void Init();
                        /*0xe8f280*/ void ArrayCountIncrement(int value);
                        /*0xe8f290*/ bool GetNext(ref System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum outBinaryTypeEnum, ref object outTypeInformation);
                    }

                    class Converter
                    {
                        static /*0x0*/ int primitiveTypeEnumLength;
                        static /*0x8*/ System.Type[] typeA;
                        static /*0x10*/ System.Type[] arrayTypeA;
                        static /*0x18*/ string[] valueA;
                        static /*0x20*/ System.TypeCode[] typeCodeA;
                        static /*0x28*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE[] codeA;
                        static /*0x30*/ System.Type typeofISerializable;
                        static /*0x38*/ System.Type typeofString;
                        static /*0x40*/ System.Type typeofConverter;
                        static /*0x48*/ System.Type typeofBoolean;
                        static /*0x50*/ System.Type typeofByte;
                        static /*0x58*/ System.Type typeofChar;
                        static /*0x60*/ System.Type typeofDecimal;
                        static /*0x68*/ System.Type typeofDouble;
                        static /*0x70*/ System.Type typeofInt16;
                        static /*0x78*/ System.Type typeofInt32;
                        static /*0x80*/ System.Type typeofInt64;
                        static /*0x88*/ System.Type typeofSByte;
                        static /*0x90*/ System.Type typeofSingle;
                        static /*0x98*/ System.Type typeofTimeSpan;
                        static /*0xa0*/ System.Type typeofDateTime;
                        static /*0xa8*/ System.Type typeofUInt16;
                        static /*0xb0*/ System.Type typeofUInt32;
                        static /*0xb8*/ System.Type typeofUInt64;
                        static /*0xc0*/ System.Type typeofObject;
                        static /*0xc8*/ System.Type typeofSystemVoid;
                        static /*0xd0*/ System.Reflection.Assembly urtAssembly;
                        static /*0xd8*/ string urtAssemblyString;
                        static /*0xe0*/ System.Type typeofTypeArray;
                        static /*0xe8*/ System.Type typeofObjectArray;
                        static /*0xf0*/ System.Type typeofStringArray;
                        static /*0xf8*/ System.Type typeofBooleanArray;
                        static /*0x100*/ System.Type typeofByteArray;
                        static /*0x108*/ System.Type typeofCharArray;
                        static /*0x110*/ System.Type typeofDecimalArray;
                        static /*0x118*/ System.Type typeofDoubleArray;
                        static /*0x120*/ System.Type typeofInt16Array;
                        static /*0x128*/ System.Type typeofInt32Array;
                        static /*0x130*/ System.Type typeofInt64Array;
                        static /*0x138*/ System.Type typeofSByteArray;
                        static /*0x140*/ System.Type typeofSingleArray;
                        static /*0x148*/ System.Type typeofTimeSpanArray;
                        static /*0x150*/ System.Type typeofDateTimeArray;
                        static /*0x158*/ System.Type typeofUInt16Array;
                        static /*0x160*/ System.Type typeofUInt32Array;
                        static /*0x168*/ System.Type typeofUInt64Array;
                        static /*0x170*/ System.Type typeofMarshalByRefObject;

                        static /*0xe8cb70*/ Converter();
                        static /*0xe8c310*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE ToCode(System.Type type);
                        static /*0xe8c1d0*/ bool IsWriteAsByteArray(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0xe8cae0*/ int TypeLength(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0xe8c240*/ System.Type ToArrayType(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0xe8b380*/ void InitTypeA();
                        static /*0xe8ab50*/ void InitArrayTypeA();
                        static /*0xe8ca10*/ System.Type ToType(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0xe8a8a0*/ System.Array CreatePrimitiveArray(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, int length);
                        static /*0xe8bee0*/ bool IsPrimitiveArray(System.Type type, ref object typeInformation);
                        static /*0xe8bb80*/ void InitValueA();
                        static /*0xe8c440*/ string ToComType(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0xe8b9d0*/ void InitTypeCodeA();
                        static /*0xe8c7a0*/ System.TypeCode ToTypeCode(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0xe8b1b0*/ void InitCodeA();
                        static /*0xe8c510*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE ToPrimitiveTypeEnum(System.TypeCode typeCode);
                        static /*0xe8aa80*/ object FromString(string value, System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                    }

                    class BinaryFormatter
                    {
                        static /*0x0*/ System.Collections.Generic.Dictionary<System.Type, System.Runtime.Serialization.Formatters.Binary.TypeInformation> typeNameCache;
                        /*0x10*/ System.Runtime.Serialization.ISurrogateSelector m_surrogates;
                        /*0x18*/ System.Runtime.Serialization.StreamingContext m_context;
                        /*0x28*/ System.Runtime.Serialization.SerializationBinder m_binder;
                        /*0x30*/ System.Runtime.Serialization.Formatters.FormatterTypeStyle m_typeFormat;
                        /*0x34*/ System.Runtime.Serialization.Formatters.FormatterAssemblyStyle m_assemblyFormat;
                        /*0x38*/ System.Runtime.Serialization.Formatters.TypeFilterLevel m_securityLevel;
                        /*0x40*/ object[] m_crossAppDomainArray;

                        static /*0xe895b0*/ BinaryFormatter();
                        static /*0xe88f80*/ System.Runtime.Serialization.Formatters.Binary.TypeInformation GetTypeInformation(System.Type type);
                        /*0xe89640*/ BinaryFormatter();
                        /*0xe896b0*/ BinaryFormatter(System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context);
                        /*0x9952f0*/ void set_AssemblyFormat(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle value);
                        /*0x9f12f0*/ void set_SurrogateSelector(System.Runtime.Serialization.ISurrogateSelector value);
                        /*0xe88f60*/ object Deserialize(System.IO.Stream serializationStream);
                        /*0xe88c10*/ object Deserialize(System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler, bool fCheck);
                        /*0xe88f40*/ object Deserialize(System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler);
                        /*0xe89590*/ void Serialize(System.IO.Stream serializationStream, object graph);
                        /*0xe891f0*/ void Serialize(System.IO.Stream serializationStream, object graph, System.Runtime.Remoting.Messaging.Header[] headers);
                        /*0xe89210*/ void Serialize(System.IO.Stream serializationStream, object graph, System.Runtime.Remoting.Messaging.Header[] headers, bool fCheck);
                    }

                    class __BinaryWriter
                    {
                        /*0x10*/ System.IO.Stream sout;
                        /*0x18*/ System.Runtime.Serialization.Formatters.FormatterTypeStyle formatterTypeStyle;
                        /*0x20*/ System.Collections.Hashtable objectMapTable;
                        /*0x28*/ System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter;
                        /*0x30*/ System.IO.BinaryWriter dataWriter;
                        /*0x38*/ int m_nestedObjectCount;
                        /*0x3c*/ int nullCount;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.BinaryMethodCall binaryMethodCall;
                        /*0x48*/ System.Runtime.Serialization.Formatters.Binary.BinaryMethodReturn binaryMethodReturn;
                        /*0x50*/ System.Runtime.Serialization.Formatters.Binary.BinaryObject binaryObject;
                        /*0x58*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap binaryObjectWithMap;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped binaryObjectWithMapTyped;
                        /*0x68*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectString binaryObjectString;
                        /*0x70*/ System.Runtime.Serialization.Formatters.Binary.BinaryArray binaryArray;
                        /*0x78*/ byte[] byteBuffer;
                        /*0x80*/ int chunkSize;
                        /*0x88*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveUnTyped memberPrimitiveUnTyped;
                        /*0x90*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveTyped memberPrimitiveTyped;
                        /*0x98*/ System.Runtime.Serialization.Formatters.Binary.ObjectNull objectNull;
                        /*0xa0*/ System.Runtime.Serialization.Formatters.Binary.MemberReference memberReference;
                        /*0xa8*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssembly binaryAssembly;

                        /*0xea29e0*/ __BinaryWriter(System.IO.Stream sout, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.Formatters.FormatterTypeStyle formatterTypeStyle);
                        /*0x32d010*/ void WriteBegin();
                        /*0xea03d0*/ void WriteEnd();
                        /*0xea0130*/ void WriteBoolean(bool value);
                        /*0xea0160*/ void WriteByte(byte value);
                        /*0xea0190*/ void WriteBytes(byte[] value);
                        /*0xea01c0*/ void WriteBytes(byte[] byteA, int offset, int size);
                        /*0xea01f0*/ void WriteChar(char value);
                        /*0xea0220*/ void WriteChars(char[] value);
                        /*0xea02d0*/ void WriteDecimal(decimal value);
                        /*0xea1fc0*/ void WriteSingle(float value);
                        /*0xea03a0*/ void WriteDouble(double value);
                        /*0xea0400*/ void WriteInt16(short value);
                        /*0xea0430*/ void WriteInt32(int value);
                        /*0xea0460*/ void WriteInt64(long value);
                        /*0xea0160*/ void WriteSByte(sbyte value);
                        /*0xea1ff0*/ void WriteString(string value);
                        /*0xea2020*/ void WriteTimeSpan(System.TimeSpan value);
                        /*0xea0250*/ void WriteDateTime(System.DateTime value);
                        /*0xea20a0*/ void WriteUInt16(ushort value);
                        /*0xea20d0*/ void WriteUInt32(uint value);
                        /*0xea2100*/ void WriteUInt64(ulong value);
                        /*0x32d010*/ void WriteObjectEnd(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0xea18d0*/ void WriteSerializationHeaderEnd();
                        /*0xea1950*/ void WriteSerializationHeader(int topId, int headerId, int minorVersion, int majorVersion);
                        /*0xea0aa0*/ void WriteMethodCall();
                        /*0xea0b30*/ void WriteMethodReturn();
                        /*0xea0e20*/ void WriteObject(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, int numMembers, string[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo[] memberObjectInfos);
                        /*0xea0d00*/ void WriteObjectString(int objectId, string value);
                        /*0xea1a90*/ void WriteSingleArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound, System.Array array);
                        /*0xe9fe70*/ void WriteArrayAsBytes(System.Array array, int typeLength);
                        /*0xea0540*/ void WriteJaggedArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound);
                        /*0xea1720*/ void WriteRectangleArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int rank, int[] lengthA, int[] lowerBoundA);
                        /*0xea0ca0*/ void WriteObjectByteArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound, byte[] byteA);
                        /*0xea08d0*/ void WriteMember(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object value);
                        /*0xea0bd0*/ void WriteNullMember(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0xea0770*/ void WriteMemberObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, int idRef);
                        /*0xea0740*/ void WriteMemberNested(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo);
                        /*0xea0870*/ void WriteMemberString(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string value);
                        /*0xea04e0*/ void WriteItem(System.Runtime.Serialization.Formatters.Binary.NameInfo itemNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object value);
                        /*0xea0bc0*/ void WriteNullItem(System.Runtime.Serialization.Formatters.Binary.NameInfo itemNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0xea0390*/ void WriteDelayedNullItem();
                        /*0xea0490*/ void WriteItemEnd();
                        /*0xe9fdc0*/ void InternalWriteItemNull();
                        /*0xea04a0*/ void WriteItemObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, int idRef);
                        /*0xe9ffd0*/ void WriteAssembly(System.Type type, string assemblyString, int assemId, bool isNew);
                        /*0xea2130*/ void WriteValue(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, object value);
                    }

                    class ObjectMapInfo
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int numMembers;
                        /*0x18*/ string[] memberNames;
                        /*0x20*/ System.Type[] memberTypes;

                        /*0xe8e5b0*/ ObjectMapInfo(int objectId, int numMembers, string[] memberNames, System.Type[] memberTypes);
                        /*0xe8e620*/ bool isCompatible(int numMembers, string[] memberNames, System.Type[] memberTypes);
                    }

                    class WriteObjectInfo
                    {
                        /*0x10*/ int objectInfoId;
                        /*0x18*/ object obj;
                        /*0x20*/ System.Type objectType;
                        /*0x28*/ bool isSi;
                        /*0x29*/ bool isNamed;
                        /*0x2a*/ bool isTyped;
                        /*0x2b*/ bool isArray;
                        /*0x30*/ System.Runtime.Serialization.SerializationInfo si;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache cache;
                        /*0x40*/ object[] memberData;
                        /*0x48*/ System.Runtime.Serialization.ISerializationSurrogate serializationSurrogate;
                        /*0x50*/ System.Runtime.Serialization.StreamingContext context;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x68*/ long objectId;
                        /*0x70*/ long assemId;
                        /*0x78*/ string binderTypeName;
                        /*0x80*/ string binderAssemblyString;

                        static /*0xe9fd10*/ System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo Serialize(object obj, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.SerializationBinder binder);
                        static /*0xe9fc70*/ System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo Serialize(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.SerializationBinder binder);
                        static /*0xe9ddb0*/ void CheckTypeForwardedFrom(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache cache, System.Type objectType, string binderAssemblyString);
                        static /*0xe9e220*/ System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo GetObjectInfo(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit);
                        static /*0xe9fc40*/ void PutObjectInfo(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x32f970*/ WriteObjectInfo();
                        /*0xe9fc10*/ void ObjectEnd();
                        /*0xe9fb30*/ void InternalInit();
                        /*0xe9ef00*/ void InitSerialize(object obj, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.SerializationBinder binder);
                        /*0xe9e8f0*/ void InitSerialize(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.SerializationBinder binder);
                        /*0xe9f7a0*/ void InitSiWrite();
                        /*0xe9e7a0*/ void InitNoMembers();
                        /*0xe9e3b0*/ void InitMemberInfo();
                        /*0xe9e380*/ string GetTypeFullName();
                        /*0xe9df30*/ string GetAssemblyString();
                        /*0xe9fbd0*/ void InvokeSerializationBinder(System.Runtime.Serialization.SerializationBinder binder);
                        /*0xe9e040*/ System.Type GetMemberType(System.Reflection.MemberInfo objMember);
                        /*0xe9df60*/ void GetMemberInfo(ref string[] outMemberNames, ref System.Type[] outMemberTypes, ref object[] outMemberData);
                    }

                    class ReadObjectInfo
                    {
                        static /*0x0*/ int readObjectInfoCounter;
                        /*0x10*/ int objectInfoId;
                        /*0x18*/ System.Type objectType;
                        /*0x20*/ System.Runtime.Serialization.ObjectManager objectManager;
                        /*0x28*/ int count;
                        /*0x2c*/ bool isSi;
                        /*0x2d*/ bool isNamed;
                        /*0x2e*/ bool isTyped;
                        /*0x2f*/ bool bSimpleAssembly;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache cache;
                        /*0x38*/ string[] wireMemberNames;
                        /*0x40*/ System.Type[] wireMemberTypes;
                        /*0x48*/ int lastPosition;
                        /*0x50*/ System.Runtime.Serialization.ISerializationSurrogate serializationSurrogate;
                        /*0x58*/ System.Runtime.Serialization.StreamingContext context;
                        /*0x68*/ System.Collections.Generic.List<System.Type> memberTypesList;
                        /*0x70*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x78*/ System.Runtime.Serialization.IFormatterConverter formatterConverter;

                        static /*0xe97eb0*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo Create(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        static /*0xe97fe0*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo Create(System.Type objectType, string[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        static /*0xe98c20*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo GetObjectInfo(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit);
                        /*0x32f970*/ ReadObjectInfo();
                        /*0x32d010*/ void ObjectEnd();
                        /*0xe99920*/ void PrepareForReuse();
                        /*0xe99550*/ void Init(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        /*0xe99610*/ void Init(System.Type objectType, string[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        /*0xe99250*/ void InitReadConstructor(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context);
                        /*0xe994d0*/ void InitSiRead();
                        /*0xe991e0*/ void InitNoMembers();
                        /*0xe98f30*/ void InitMemberInfo();
                        /*0xe98150*/ System.Reflection.MemberInfo GetMemberInfo(string name);
                        /*0xe98c90*/ System.Type GetType(string name);
                        /*0xe97c20*/ void AddValue(string name, object value, ref System.Runtime.Serialization.SerializationInfo si, ref object[] memberData);
                        /*0xe98e30*/ void InitDataStore(ref System.Runtime.Serialization.SerializationInfo si, ref object[] memberData);
                        /*0xe99930*/ void RecordFixup(long objectId, string name, long idRef);
                        /*0xe99720*/ void PopulateObjectMembers(object obj, object[] memberData);
                        /*0xe997b0*/ int Position(string name);
                        /*0xe985a0*/ System.Type[] GetMemberTypes(string[] inMemberNames, System.Type objectType);
                        /*0xe983c0*/ System.Type GetMemberType(System.Reflection.MemberInfo objMember);
                    }

                    class SerObjectInfoInit
                    {
                        /*0x10*/ System.Collections.Hashtable seenBeforeTable;
                        /*0x18*/ int objectInfoIdCount;
                        /*0x20*/ System.Runtime.Serialization.Formatters.Binary.SerStack oiPool;

                        /*0xe9a920*/ SerObjectInfoInit();
                    }

                    class SerObjectInfoCache
                    {
                        /*0x10*/ string fullTypeName;
                        /*0x18*/ string assemblyString;
                        /*0x20*/ bool hasTypeForwardedFrom;
                        /*0x28*/ System.Reflection.MemberInfo[] memberInfos;
                        /*0x30*/ string[] memberNames;
                        /*0x38*/ System.Type[] memberTypes;

                        /*0xe9a810*/ SerObjectInfoCache(string typeName, string assemblyName, bool hasTypeForwardedFrom);
                        /*0xe9a880*/ SerObjectInfoCache(System.Type type);
                    }

                    class TypeInformation
                    {
                        /*0x10*/ string fullTypeName;
                        /*0x18*/ string assemblyString;
                        /*0x20*/ bool hasTypeForwardedFrom;

                        /*0xe9a810*/ TypeInformation(string fullTypeName, string assemblyString, bool hasTypeForwardedFrom);
                        /*0x73d3e0*/ string get_FullTypeName();
                        /*0x32f410*/ string get_AssemblyString();
                        /*0x796120*/ bool get_HasTypeForwardedFrom();
                    }

                    class ObjectReader
                    {
                        /*0x10*/ System.IO.Stream m_stream;
                        /*0x18*/ System.Runtime.Serialization.ISurrogateSelector m_surrogates;
                        /*0x20*/ System.Runtime.Serialization.StreamingContext m_context;
                        /*0x30*/ System.Runtime.Serialization.ObjectManager m_objectManager;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums;
                        /*0x40*/ System.Runtime.Serialization.SerializationBinder m_binder;
                        /*0x48*/ long topId;
                        /*0x50*/ bool bSimpleAssembly;
                        /*0x58*/ object handlerObject;
                        /*0x60*/ object m_topObject;
                        /*0x68*/ System.Runtime.Remoting.Messaging.Header[] headers;
                        /*0x70*/ System.Runtime.Remoting.Messaging.HeaderHandler handler;
                        /*0x78*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x80*/ System.Runtime.Serialization.IFormatterConverter m_formatterConverter;
                        /*0x88*/ System.Runtime.Serialization.Formatters.Binary.SerStack stack;
                        /*0x90*/ System.Runtime.Serialization.Formatters.Binary.SerStack valueFixupStack;
                        /*0x98*/ object[] crossAppDomainArray;
                        /*0xa0*/ bool bFullDeserialization;
                        /*0xa1*/ bool bOldFormatDetected;
                        /*0xa8*/ System.Runtime.Serialization.Formatters.Binary.IntSizedArray valTypeObjectIdTable;
                        /*0xb0*/ System.Runtime.Serialization.Formatters.Binary.NameCache typeCache;
                        /*0xb8*/ string previousAssemblyString;
                        /*0xc0*/ string previousName;
                        /*0xc8*/ System.Type previousType;

                        static /*0xe93560*/ System.Reflection.Assembly ResolveSimpleAssemblyName(System.Reflection.AssemblyName assemblyName);
                        static /*0xe901e0*/ void GetSimplyNamedTypeFromAssembly(System.Reflection.Assembly assm, string typeName, ref System.Type type);
                        static /*0xe8f720*/ void CheckTypeForwardedTo(System.Reflection.Assembly sourceAssembly, System.Reflection.Assembly destAssembly, System.Type resolvedType);
                        /*0xe935d0*/ ObjectReader(System.IO.Stream stream, System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums, System.Runtime.Serialization.SerializationBinder binder);
                        /*0xe93730*/ System.Runtime.Serialization.Formatters.Binary.SerStack get_ValueFixupStack();
                        /*0xe643b0*/ object get_TopObject();
                        /*0xe937c0*/ void set_TopObject(object value);
                        /*0xe8f9f0*/ object Deserialize(System.Runtime.Remoting.Messaging.HeaderHandler handler, System.Runtime.Serialization.Formatters.Binary.__BinaryParser serParser, bool fCheck);
                        /*0xe906b0*/ bool HasSurrogate(System.Type t);
                        /*0xe8f5e0*/ void CheckSerializable(System.Type t);
                        /*0xe907a0*/ void InitFullDeserialization();
                        /*0xe8f9c0*/ object CrossAppDomainArray(int index);
                        /*0xe8f7e0*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo CreateReadObjectInfo(System.Type objectType);
                        /*0xe8f830*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo CreateReadObjectInfo(System.Type objectType, string[] memberNames, System.Type[] memberTypes);
                        /*0xe930f0*/ void Parse(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0xe91e40*/ void ParseError(System.Runtime.Serialization.Formatters.Binary.ParseRecord processing, System.Runtime.Serialization.Formatters.Binary.ParseRecord onStack);
                        /*0xe92f90*/ void ParseSerializedStreamHeader(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0xe92f60*/ void ParseSerializedStreamHeaderEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0xe92ba0*/ void ParseObject(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0xe92870*/ void ParseObjectEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0xe915b0*/ void ParseArray(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0xe908e0*/ void NextRectangleMap(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0xe90a10*/ void ParseArrayMember(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0xe909e0*/ void ParseArrayMemberEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0xe92160*/ void ParseMember(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0xe920a0*/ void ParseMemberEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0xe92fc0*/ void ParseString(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr, System.Runtime.Serialization.Formatters.Binary.ParseRecord parentPr);
                        /*0xe93470*/ void RegisterObject(object obj, System.Runtime.Serialization.Formatters.Binary.ParseRecord pr, System.Runtime.Serialization.Formatters.Binary.ParseRecord objectPr);
                        /*0xe93330*/ void RegisterObject(object obj, System.Runtime.Serialization.Formatters.Binary.ParseRecord pr, System.Runtime.Serialization.Formatters.Binary.ParseRecord objectPr, bool bIsString);
                        /*0xe900e0*/ long GetId(long objectId);
                        /*0xe8f580*/ System.Type Bind(string assemblyString, string typeString);
                        /*0xe8fe60*/ System.Type FastBindToType(string assemblyName, string typeName);
                        /*0xe90380*/ System.Type GetType(System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, string name);

                        class TypeNAssembly
                        {
                            /*0x10*/ System.Type type;
                            /*0x18*/ string assemblyName;

                            /*0x32f970*/ TypeNAssembly();
                        }

                        class TopLevelAssemblyTypeResolver
                        {
                            /*0x10*/ System.Reflection.Assembly m_topLevelAssembly;

                            /*0x49b490*/ TopLevelAssemblyTypeResolver(System.Reflection.Assembly topLevelAssembly);
                            /*0xe9dd30*/ System.Type ResolveType(System.Reflection.Assembly assembly, string simpleTypeName, bool ignoreCase);
                        }
                    }

                    class ObjectWriter
                    {
                        /*0x10*/ System.Collections.Queue m_objectQueue;
                        /*0x18*/ System.Runtime.Serialization.ObjectIDGenerator m_idGenerator;
                        /*0x20*/ int m_currentId;
                        /*0x28*/ System.Runtime.Serialization.ISurrogateSelector m_surrogates;
                        /*0x30*/ System.Runtime.Serialization.StreamingContext m_context;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.__BinaryWriter serWriter;
                        /*0x48*/ System.Runtime.Serialization.SerializationObjectManager m_objectManager;
                        /*0x50*/ long topId;
                        /*0x58*/ string topName;
                        /*0x60*/ System.Runtime.Remoting.Messaging.Header[] headers;
                        /*0x68*/ System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums;
                        /*0x70*/ System.Runtime.Serialization.SerializationBinder m_binder;
                        /*0x78*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x80*/ System.Runtime.Serialization.IFormatterConverter m_formatterConverter;
                        /*0x88*/ object[] crossAppDomainArray;
                        /*0x90*/ object previousObj;
                        /*0x98*/ long previousId;
                        /*0xa0*/ System.Type previousType;
                        /*0xa8*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE previousCode;
                        /*0xb0*/ System.Collections.Hashtable assemblyToIdTable;
                        /*0xb8*/ System.Runtime.Serialization.Formatters.Binary.SerStack niPool;

                        /*0xe97a50*/ ObjectWriter(System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums, System.Runtime.Serialization.SerializationBinder binder);
                        /*0xe942c0*/ void Serialize(object graph, System.Runtime.Remoting.Messaging.Header[] inHeaders, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter serWriter, bool fCheck);
                        /*0x4e40d0*/ System.Runtime.Serialization.SerializationObjectManager get_ObjectManager();
                        /*0xe97150*/ void Write(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0xe96ce0*/ void Write(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string[] memberNames, System.Type[] memberTypes, object[] memberData, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo[] memberObjectInfos);
                        /*0xe96020*/ void WriteMemberSetup(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string memberName, System.Type memberType, object memberData, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo memberObjectInfo);
                        /*0xe961a0*/ void WriteMembers(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberTypeNameInfo, object memberData, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo memberObjectInfo);
                        /*0xe94fb0*/ void WriteArray(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo memberObjectInfo);
                        /*0xe94c60*/ void WriteArrayMember(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, object data);
                        /*0xe967e0*/ void WriteRectangle(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, int rank, int[] maxA, System.Array array, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemNameTypeInfo, int[] lowerBoundA);
                        /*0xe93e30*/ object GetNext(ref long objID);
                        /*0xe94010*/ long InternalGetId(object obj, bool assignUniqueIdToValueType, System.Type type, ref bool isNew);
                        /*0xe94240*/ long Schedule(object obj, bool assignUniqueIdToValueType, System.Type type);
                        /*0xe94180*/ long Schedule(object obj, bool assignUniqueIdToValueType, System.Type type, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0xe95df0*/ bool WriteKnownValueClass(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object data);
                        /*0xe967c0*/ void WriteObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, long objectId);
                        /*0xe96b70*/ void WriteString(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object stringObject);
                        /*0xe93810*/ bool CheckForNull(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object data);
                        /*0xe96a30*/ void WriteSerializedStreamHeader(long topId, long headerId);
                        /*0xe94a20*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Type type, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                        /*0xe94ad0*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Type type);
                        /*0xe94b30*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0xe94950*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                        /*0xe94be0*/ void TypeToNameInfo(System.Type type, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                        /*0xe94110*/ System.Runtime.Serialization.Formatters.Binary.NameInfo MemberToNameInfo(string name);
                        /*0xe948b0*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE ToCode(System.Type type);
                        /*0xe939d0*/ long GetAssemblyId(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0xe93ff0*/ System.Type GetType(object obj);
                        /*0xe93d80*/ System.Runtime.Serialization.Formatters.Binary.NameInfo GetNameInfo();
                        /*0xe939c0*/ bool CheckTypeFormat(System.Runtime.Serialization.Formatters.FormatterTypeStyle test, System.Runtime.Serialization.Formatters.FormatterTypeStyle want);
                        /*0xe94150*/ void PutNameInfo(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                    }

                    class __BinaryParser
                    {
                        static /*0x0*/ System.Text.Encoding encoding;
                        static /*0x8*/ System.Runtime.Serialization.Formatters.Binary.MessageEnd messageEnd;
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader;
                        /*0x18*/ System.IO.Stream input;
                        /*0x20*/ long topId;
                        /*0x28*/ long headerId;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.SizedArray objectMapIdTable;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.SerStack stack;
                        /*0x48*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum expectedType;
                        /*0x50*/ object expectedTypeInformation;
                        /*0x58*/ System.Runtime.Serialization.Formatters.Binary.ParseRecord PRS;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo systemAssemblyInfo;
                        /*0x68*/ System.IO.BinaryReader dataReader;
                        /*0x70*/ System.Runtime.Serialization.Formatters.Binary.SerStack opPool;
                        /*0x78*/ System.Runtime.Serialization.Formatters.Binary.BinaryObject binaryObject;
                        /*0x80*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap bowm;
                        /*0x88*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped bowmt;
                        /*0x90*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectString objectString;
                        /*0x98*/ System.Runtime.Serialization.Formatters.Binary.BinaryCrossAppDomainString crossAppDomainString;
                        /*0xa0*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveTyped memberPrimitiveTyped;
                        /*0xa8*/ byte[] byteBuffer;
                        /*0xb0*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveUnTyped memberPrimitiveUnTyped;
                        /*0xb8*/ System.Runtime.Serialization.Formatters.Binary.MemberReference memberReference;
                        /*0xc0*/ System.Runtime.Serialization.Formatters.Binary.ObjectNull objectNull;

                        static /*0xebafd0*/ __BinaryParser();
                        /*0xebb050*/ __BinaryParser(System.IO.Stream stream, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader);
                        /*0xebb320*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo get_SystemAssemblyInfo();
                        /*0xebb250*/ System.Runtime.Serialization.Formatters.Binary.SizedArray get_ObjectMapIdTable();
                        /*0xebb180*/ System.Runtime.Serialization.Formatters.Binary.SizedArray get_AssemIdToAssemblyTable();
                        /*0xebb3f0*/ System.Runtime.Serialization.Formatters.Binary.ParseRecord get_prs();
                        /*0xeba9e0*/ void Run();
                        /*0x32d010*/ void ReadBegin();
                        /*0x32d010*/ void ReadEnd();
                        /*0xeb6b10*/ bool ReadBoolean();
                        /*0xeb6b40*/ byte ReadByte();
                        /*0xeb6b70*/ byte[] ReadBytes(int length);
                        /*0xeb6ba0*/ void ReadBytes(byte[] byteA, int offset, int size);
                        /*0xeb6c40*/ char ReadChar();
                        /*0xeb6c70*/ char[] ReadChars(int length);
                        /*0xeb6ef0*/ decimal ReadDecimal();
                        /*0xeba2e0*/ float ReadSingle();
                        /*0xeb6fc0*/ double ReadDouble();
                        /*0xeb6ff0*/ short ReadInt16();
                        /*0xeb7020*/ int ReadInt32();
                        /*0xeb7050*/ long ReadInt64();
                        /*0xeb6b40*/ sbyte ReadSByte();
                        /*0xeba310*/ string ReadString();
                        /*0xeb7050*/ System.TimeSpan ReadTimeSpan();
                        /*0xeb6e80*/ System.DateTime ReadDateTime();
                        /*0xeba340*/ ushort ReadUInt16();
                        /*0xeba370*/ uint ReadUInt32();
                        /*0xeba3a0*/ ulong ReadUInt64();
                        /*0xeba220*/ void ReadSerializationHeaderRecord();
                        /*0xeb6870*/ void ReadAssembly(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0xeb9cd0*/ void ReadObject();
                        /*0xeb6ca0*/ void ReadCrossAppDomainMap();
                        /*0xeb9640*/ void ReadObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0xeb9710*/ void ReadObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap record);
                        /*0xeb8f30*/ void ReadObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0xeb8ff0*/ void ReadObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped record);
                        /*0xeb8510*/ void ReadObjectString(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0xeb7080*/ void ReadMemberPrimitiveTyped();
                        /*0xeb6140*/ void ReadArray(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0xeb5e20*/ void ReadArrayAsBytes(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0xeb76b0*/ void ReadMemberPrimitiveUnTyped();
                        /*0xeb7c20*/ void ReadMemberReference();
                        /*0xeb8190*/ void ReadObjectNull(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0xeb7fe0*/ void ReadMessageEnd();
                        /*0xeba3d0*/ object ReadValue(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        /*0xeb5cd0*/ System.Runtime.Serialization.Formatters.Binary.ObjectProgress GetOp();
                        /*0xeb5d80*/ void PutOp(System.Runtime.Serialization.Formatters.Binary.ObjectProgress op);
                    }

                    class ParseRecord
                    {
                        static /*0x0*/ int parseRecordIdCount;
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalParseTypeE PRparseTypeEnum;
                        /*0x14*/ System.Runtime.Serialization.Formatters.Binary.InternalObjectTypeE PRobjectTypeEnum;
                        /*0x18*/ System.Runtime.Serialization.Formatters.Binary.InternalArrayTypeE PRarrayTypeEnum;
                        /*0x1c*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberTypeE PRmemberTypeEnum;
                        /*0x20*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberValueE PRmemberValueEnum;
                        /*0x24*/ System.Runtime.Serialization.Formatters.Binary.InternalObjectPositionE PRobjectPositionEnum;
                        /*0x28*/ string PRname;
                        /*0x30*/ string PRvalue;
                        /*0x38*/ object PRvarValue;
                        /*0x40*/ string PRkeyDt;
                        /*0x48*/ System.Type PRdtType;
                        /*0x50*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE PRdtTypeCode;
                        /*0x54*/ bool PRisEnum;
                        /*0x58*/ long PRobjectId;
                        /*0x60*/ long PRidRef;
                        /*0x68*/ string PRarrayElementTypeString;
                        /*0x70*/ System.Type PRarrayElementType;
                        /*0x78*/ bool PRisArrayVariant;
                        /*0x7c*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE PRarrayElementTypeCode;
                        /*0x80*/ int PRrank;
                        /*0x88*/ int[] PRlengthA;
                        /*0x90*/ int[] PRpositionA;
                        /*0x98*/ int[] PRlowerBoundA;
                        /*0xa0*/ int[] PRupperBoundA;
                        /*0xa8*/ int[] PRindexMap;
                        /*0xb0*/ int PRmemberIndex;
                        /*0xb4*/ int PRlinearlength;
                        /*0xb8*/ int[] PRrectangularMap;
                        /*0xc0*/ bool PRisLowerBound;
                        /*0xc8*/ long PRtopId;
                        /*0xd0*/ long PRheaderId;
                        /*0xd8*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo PRobjectInfo;
                        /*0xe0*/ bool PRisValueTypeFixup;
                        /*0xe8*/ object PRnewObj;
                        /*0xf0*/ object[] PRobjectA;
                        /*0xf8*/ System.Runtime.Serialization.Formatters.Binary.PrimitiveArray PRprimitiveArray;
                        /*0x100*/ bool PRisRegistered;
                        /*0x108*/ object[] PRmemberData;
                        /*0x110*/ System.Runtime.Serialization.SerializationInfo PRsi;
                        /*0x118*/ int PRnullCount;

                        static /*0xeab3b0*/ ParseRecord();
                        /*0x32f970*/ ParseRecord();
                        /*0xeab1e0*/ void Init();
                    }

                    class SerStack
                    {
                        /*0x10*/ object[] objects;
                        /*0x18*/ string stackId;
                        /*0x20*/ int top;

                        /*0xeb4540*/ SerStack(string stackId);
                        /*0xeb4410*/ void Push(object obj);
                        /*0xeb4390*/ object Pop();
                        /*0xeb4260*/ void IncreaseCapacity();
                        /*0xeb4350*/ object Peek();
                        /*0xeb4310*/ object PeekPeek();
                        /*0xeb4300*/ bool IsEmpty();
                    }

                    class SizedArray : System.ICloneable
                    {
                        /*0x10*/ object[] objects;
                        /*0x18*/ object[] negObjects;

                        /*0xeb4890*/ SizedArray();
                        /*0xeb4910*/ SizedArray(int length);
                        /*0xeb4990*/ SizedArray(System.Runtime.Serialization.Formatters.Binary.SizedArray sizedArray);
                        /*0xeb45c0*/ object Clone();
                        /*0xeb4a70*/ object get_Item(int index);
                        /*0xeb4ae0*/ void set_Item(int index, object value);
                        /*0xeb46c0*/ void IncreaseCapacity(int index);
                    }

                    class IntSizedArray : System.ICloneable
                    {
                        /*0x10*/ int[] objects;
                        /*0x18*/ int[] negObjects;

                        /*0xea6dd0*/ IntSizedArray();
                        /*0xea6cb0*/ IntSizedArray(System.Runtime.Serialization.Formatters.Binary.IntSizedArray sizedArray);
                        /*0xea6990*/ object Clone();
                        /*0xea6e50*/ int get_Item(int index);
                        /*0xea6ec0*/ void set_Item(int index, int value);
                        /*0xea6ae0*/ void IncreaseCapacity(int index);
                    }

                    class NameCache
                    {
                        static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<string, object> ht;
                        /*0x10*/ string name;

                        static /*0xeaa930*/ NameCache();
                        /*0x32f970*/ NameCache();
                        /*0xeaa7e0*/ object GetCachedValue(string name);
                        /*0xeaa8a0*/ void SetCachedValue(object value);
                    }

                    class ValueFixup
                    {
                        static /*0x0*/ System.Reflection.MemberInfo valueInfo;
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.ValueFixupEnum valueFixupEnum;
                        /*0x18*/ System.Array arrayObj;
                        /*0x20*/ int[] indexMap;
                        /*0x28*/ object header;
                        /*0x30*/ object memberObject;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo objectInfo;
                        /*0x40*/ string memberName;

                        /*0xeb5bf0*/ ValueFixup(System.Array arrayObj, int[] indexMap);
                        /*0xeb5c50*/ ValueFixup(object memberObject, string memberName, System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo objectInfo);
                        /*0xeb5860*/ void Fixup(System.Runtime.Serialization.Formatters.Binary.ParseRecord record, System.Runtime.Serialization.Formatters.Binary.ParseRecord parent);
                    }

                    class InternalFE
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.FormatterTypeStyle FEtypeFormat;
                        /*0x14*/ System.Runtime.Serialization.Formatters.FormatterAssemblyStyle FEassemblyFormat;
                        /*0x18*/ System.Runtime.Serialization.Formatters.TypeFilterLevel FEsecurityLevel;
                        /*0x1c*/ System.Runtime.Serialization.Formatters.Binary.InternalSerializerTypeE FEserializerTypeEnum;

                        /*0x32f970*/ InternalFE();
                    }

                    class NameInfo
                    {
                        /*0x10*/ string NIFullName;
                        /*0x18*/ long NIobjectId;
                        /*0x20*/ long NIassemId;
                        /*0x28*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE NIprimitiveTypeEnum;
                        /*0x30*/ System.Type NItype;
                        /*0x38*/ bool NIisSealed;
                        /*0x39*/ bool NIisArray;
                        /*0x3a*/ bool NIisArrayItem;
                        /*0x3b*/ bool NItransmitTypeOnObject;
                        /*0x3c*/ bool NItransmitTypeOnMember;
                        /*0x3d*/ bool NIisParentTypeOnObject;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.InternalArrayTypeE NIarrayEnum;
                        /*0x44*/ bool NIsealedStatusChecked;

                        /*0x32f970*/ NameInfo();
                        /*0xeaa9c0*/ void Init();
                        /*0xeaaa20*/ bool get_IsSealed();
                        /*0xeaaa60*/ string get_NIname();
                        /*0x9f12f0*/ void set_NIname(string value);
                    }

                    class PrimitiveArray
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code;
                        /*0x18*/ bool[] booleanA;
                        /*0x20*/ char[] charA;
                        /*0x28*/ double[] doubleA;
                        /*0x30*/ short[] int16A;
                        /*0x38*/ int[] int32A;
                        /*0x40*/ long[] int64A;
                        /*0x48*/ sbyte[] sbyteA;
                        /*0x50*/ float[] singleA;
                        /*0x58*/ ushort[] uint16A;
                        /*0x60*/ uint[] uint32A;
                        /*0x68*/ ulong[] uint64A;

                        /*0xeac040*/ PrimitiveArray(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Array array);
                        /*0xeab660*/ void Init(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Array array);
                        /*0xeabc20*/ void SetValue(string value, int index);
                    }

                    enum MessageEnum
                    {
                        NoArgs = 1,
                        ArgsInline = 2,
                        ArgsIsArray = 4,
                        ArgsInArray = 8,
                        NoContext = 16,
                        ContextInline = 32,
                        ContextInArray = 64,
                        MethodSignatureInArray = 128,
                        PropertyInArray = 256,
                        NoReturnValue = 512,
                        ReturnValueVoid = 1024,
                        ReturnValueInline = 2048,
                        ReturnValueInArray = 4096,
                        ExceptionInArray = 8192,
                        GenericMethod = 32768,
                    }
                }
            }
        }

        namespace InteropServices
        {
            enum CharSet
            {
                None = 1,
                Ansi = 2,
                Unicode = 3,
                Auto = 4,
            }

            class ExternalException : System.SystemException
            {
                /*0xea3ff0*/ ExternalException();
                /*0xea5130*/ ExternalException(string message);
                /*0xe291b0*/ ExternalException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0xea4f50*/ string ToString();
            }

            struct HandleRef
            {
                /*0x10*/ object _wrapper;
                /*0x18*/ nint _handle;

                /*0xea6960*/ HandleRef(object wrapper, nint handle);
                /*0xa5a7f0*/ nint get_Handle();
            }

            class MarshalDirectiveException : System.SystemException
            {
                /*0xea7610*/ MarshalDirectiveException();
                /*0xea7660*/ MarshalDirectiveException(string message);
                /*0xe291b0*/ MarshalDirectiveException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class MemoryMarshal
            {
                static /*0x2a5510*/ System.Span<byte> AsBytes<T>(System.Span<T> span);
                static /*0x2a5510*/ System.ReadOnlySpan<byte> AsBytes<T>(System.ReadOnlySpan<T> span);
                static /*0x2a5510*/ ref T GetReference<T>(System.Span<T> span);
                static /*0x2a5510*/ ref T GetReference<T>(System.ReadOnlySpan<T> span);
                static /*0x2a5510*/ ref T GetNonNullPinnableReference<T>(System.Span<T> span);
                static /*0x2a5510*/ ref T GetNonNullPinnableReference<T>(System.ReadOnlySpan<T> span);
                static /*0x2a5510*/ System.ReadOnlySpan<T> CreateReadOnlySpan<T>(ref T reference, int length);
            }

            enum GCHandleType
            {
                Weak = 0,
                WeakTrackResurrection = 1,
                Normal = 2,
                Pinned = 3,
            }

            class SafeBuffer : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                static /*0x0*/ nuint Uninitialized;
                /*0x20*/ nuint _numBytes;

                static /*0xeb3cf0*/ SafeBuffer();
                static /*0xeb3bd0*/ System.InvalidOperationException NotInitialized();
                /*0xeb3af0*/ void AcquirePointer(ref byte* pointer);
                /*0xeb3c30*/ void ReleasePointer();
            }

            class COMException : System.Runtime.InteropServices.ExternalException
            {
                /*0xea3ff0*/ COMException();
                /*0xe291b0*/ COMException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0xea3e20*/ string ToString();
            }

            class ErrorWrapper
            {
                /*0x10*/ int m_ErrorCode;
            }

            interface ICustomMarshaler
            {
                /*0x2a5510*/ object MarshalNativeToManaged(nint pNativeData);
                /*0x2a5510*/ nint MarshalManagedToNative(object ManagedObj);
                void CleanUpNativeData(nint pNativeData);
                /*0x17aec0*/ void CleanUpManagedData(object ManagedObj);
                /*0x180980*/ int GetNativeDataSize();
            }

            class UnmanagedFunctionPointerAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.CallingConvention m_callingConvention;

                /*0xea4040*/ UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention callingConvention);
                /*0x417e30*/ System.Runtime.InteropServices.CallingConvention get_CallingConvention();
            }

            enum ComInterfaceType
            {
                InterfaceIsDual = 0,
                InterfaceIsIUnknown = 1,
                InterfaceIsIDispatch = 2,
                InterfaceIsIInspectable = 3,
            }

            class InterfaceTypeAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.ComInterfaceType _val;

                /*0xea4040*/ InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType interfaceType);
            }

            class ComDefaultInterfaceAttribute : System.Attribute
            {
                /*0x10*/ System.Type _val;

                /*0xa32e30*/ ComDefaultInterfaceAttribute(System.Type defaultInterface);
            }

            enum ClassInterfaceType
            {
                None = 0,
                AutoDispatch = 1,
                AutoDual = 2,
            }

            class ClassInterfaceAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.ClassInterfaceType _val;

                /*0xea4040*/ ClassInterfaceAttribute(System.Runtime.InteropServices.ClassInterfaceType classInterfaceType);
            }

            class ComVisibleAttribute : System.Attribute
            {
                /*0x10*/ bool _val;

                /*0xe2bcb0*/ ComVisibleAttribute(bool visibility);
            }

            enum VarEnum
            {
                VT_EMPTY = 0,
                VT_NULL = 1,
                VT_I2 = 2,
                VT_I4 = 3,
                VT_R4 = 4,
                VT_R8 = 5,
                VT_CY = 6,
                VT_DATE = 7,
                VT_BSTR = 8,
                VT_DISPATCH = 9,
                VT_ERROR = 10,
                VT_BOOL = 11,
                VT_VARIANT = 12,
                VT_UNKNOWN = 13,
                VT_DECIMAL = 14,
                VT_I1 = 16,
                VT_UI1 = 17,
                VT_UI2 = 18,
                VT_UI4 = 19,
                VT_I8 = 20,
                VT_UI8 = 21,
                VT_INT = 22,
                VT_UINT = 23,
                VT_VOID = 24,
                VT_HRESULT = 25,
                VT_PTR = 26,
                VT_SAFEARRAY = 27,
                VT_CARRAY = 28,
                VT_USERDEFINED = 29,
                VT_LPSTR = 30,
                VT_LPWSTR = 31,
                VT_RECORD = 36,
                VT_FILETIME = 64,
                VT_BLOB = 65,
                VT_STREAM = 66,
                VT_STORAGE = 67,
                VT_STREAMED_OBJECT = 68,
                VT_STORED_OBJECT = 69,
                VT_BLOB_OBJECT = 70,
                VT_CF = 71,
                VT_CLSID = 72,
                VT_VECTOR = 4096,
                VT_ARRAY = 8192,
                VT_BYREF = 16384,
            }

            enum UnmanagedType
            {
                Bool = 2,
                I1 = 3,
                U1 = 4,
                I2 = 5,
                U2 = 6,
                I4 = 7,
                U4 = 8,
                I8 = 9,
                U8 = 10,
                R4 = 11,
                R8 = 12,
                Currency = 15,
                BStr = 19,
                LPStr = 20,
                LPWStr = 21,
                LPTStr = 22,
                ByValTStr = 23,
                IUnknown = 25,
                IDispatch = 26,
                Struct = 27,
                Interface = 28,
                SafeArray = 29,
                ByValArray = 30,
                SysInt = 31,
                SysUInt = 32,
                VBByRefStr = 34,
                AnsiBStr = 35,
                TBStr = 36,
                VariantBool = 37,
                FunctionPtr = 38,
                AsAny = 40,
                LPArray = 42,
                LPStruct = 43,
                CustomMarshaler = 44,
                Error = 45,
                IInspectable = 46,
                HString = 47,
                LPUTF8Str = 48,
            }

            class ComImportAttribute : System.Attribute
            {
                /*0x534220*/ ComImportAttribute();
            }

            class GuidAttribute : System.Attribute
            {
                /*0x10*/ string _val;

                /*0xa32e30*/ GuidAttribute(string guid);
            }

            class PreserveSigAttribute : System.Attribute
            {
                /*0x534220*/ PreserveSigAttribute();
            }

            class InAttribute : System.Attribute
            {
                /*0x534220*/ InAttribute();
            }

            class OutAttribute : System.Attribute
            {
                /*0x534220*/ OutAttribute();
            }

            class OptionalAttribute : System.Attribute
            {
                /*0x534220*/ OptionalAttribute();
            }

            enum DllImportSearchPath
            {
                UseDllDirectoryForDependencies = 256,
                ApplicationDirectory = 512,
                UserDirectories = 1024,
                System32 = 2048,
                SafeDirectories = 4096,
                AssemblyDirectory = 2,
                LegacyBehavior = 0,
            }

            class DefaultDllImportSearchPathsAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.DllImportSearchPath _paths;

                /*0xea4040*/ DefaultDllImportSearchPathsAttribute(System.Runtime.InteropServices.DllImportSearchPath paths);
            }

            class DllImportAttribute : System.Attribute
            {
                /*0x10*/ string _val;
                /*0x18*/ string EntryPoint;
                /*0x20*/ System.Runtime.InteropServices.CharSet CharSet;
                /*0x24*/ bool SetLastError;
                /*0x25*/ bool ExactSpelling;
                /*0x26*/ bool PreserveSig;
                /*0x28*/ System.Runtime.InteropServices.CallingConvention CallingConvention;
                /*0x2c*/ bool BestFitMapping;
                /*0x2d*/ bool ThrowOnUnmappableChar;

                static /*0xea4580*/ System.Attribute GetCustomAttribute(System.Reflection.RuntimeMethodInfo method);
                static /*0xea4800*/ bool IsDefined(System.Reflection.RuntimeMethodInfo method);
                /*0xea4830*/ DllImportAttribute(string dllName, string entryPoint, System.Runtime.InteropServices.CharSet charSet, bool exactSpelling, bool setLastError, bool preserveSig, System.Runtime.InteropServices.CallingConvention callingConvention, bool bestFitMapping, bool throwOnUnmappableChar);
                /*0xa32e30*/ DllImportAttribute(string dllName);
                /*0x73d3e0*/ string get_Value();
            }

            class FieldOffsetAttribute : System.Attribute
            {
                /*0x10*/ int _val;

                /*0xea4040*/ FieldOffsetAttribute(int offset);
            }

            class ComCompatibleVersionAttribute : System.Attribute
            {
                /*0x10*/ int _major;
                /*0x14*/ int _minor;
                /*0x18*/ int _build;
                /*0x1c*/ int _revision;

                /*0xea4070*/ ComCompatibleVersionAttribute(int major, int minor, int build, int revision);
            }

            enum CallingConvention
            {
                Winapi = 1,
                Cdecl = 2,
                StdCall = 3,
                ThisCall = 4,
                FastCall = 5,
            }

            class SafeHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.IDisposable
            {
                static int RefCount_Mask = 2147483644;
                static int RefCount_One = 4;
                /*0x10*/ nint handle;
                /*0x18*/ int _state;
                /*0x1c*/ bool _ownsHandle;
                /*0x1d*/ bool _fullyInitialized;

                /*0xeb40f0*/ SafeHandle(nint invalidHandleValue, bool ownsHandle);
                /*0xeb4180*/ SafeHandle();
                /*0xeb3f30*/ void Finalize();
                /*0xeb40e0*/ void SetHandle(nint handle);
                /*0x73d3e0*/ nint DangerousGetHandle();
                /*0xeb41d0*/ bool get_IsClosed();
                /*0x17cb40*/ bool get_IsInvalid();
                /*0xeb1a10*/ void Close();
                /*0xeb1a10*/ void Dispose();
                /*0xeb3e70*/ void Dispose(bool disposing);
                /*0x17cb40*/ bool ReleaseHandle();
                /*0xeb4060*/ void SetHandleAsInvalid();
                /*0xeb3d50*/ void DangerousAddRef(ref bool success);
                /*0xeb3e60*/ void DangerousRelease();
                /*0xeb3fa0*/ void InternalDispose();
                /*0xeb4040*/ void InternalFinalize();
                /*0xeb3dc0*/ void DangerousReleaseInternal(bool dispose);
            }

            struct GCHandle
            {
                /*0x10*/ nint handle;

                static /*0xea6610*/ System.Runtime.InteropServices.GCHandle Alloc(object value);
                static /*0xea65f0*/ System.Runtime.InteropServices.GCHandle Alloc(object value, System.Runtime.InteropServices.GCHandleType type);
                static /*0x621ca0*/ nint op_Explicit(System.Runtime.InteropServices.GCHandle value);
                static /*0xea6770*/ System.Runtime.InteropServices.GCHandle op_Explicit(nint value);
                static /*0xea6620*/ bool CheckCurrentDomain(nint handle);
                static /*0xea6850*/ object GetTarget(nint handle);
                static /*0xea6840*/ nint GetTargetHandle(object obj, nint handle, System.Runtime.InteropServices.GCHandleType type);
                static /*0xea66c0*/ void FreeHandle(nint handle);
                static /*0xea6830*/ nint GetAddrOfPinnedObject(nint handle);
                static /*0xea40c0*/ bool op_Equality(System.Runtime.InteropServices.GCHandle a, System.Runtime.InteropServices.GCHandle b);
                static /*0xea6770*/ System.Runtime.InteropServices.GCHandle FromIntPtr(nint value);
                static /*0x621ca0*/ nint ToIntPtr(System.Runtime.InteropServices.GCHandle value);
                /*0x9e29e0*/ GCHandle(nint h);
                /*0xea6890*/ GCHandle(object obj);
                /*0xea6860*/ GCHandle(object value, System.Runtime.InteropServices.GCHandleType type);
                /*0x9e2ba0*/ bool get_IsAllocated();
                /*0xea68c0*/ object get_Target();
                /*0xea6930*/ void set_Target(object value);
                /*0xea6500*/ nint AddrOfPinnedObject();
                /*0xea66d0*/ void Free();
                /*0xea6630*/ bool Equals(object o);
                /*0xe101c0*/ int GetHashCode();
            }

            class Marshal
            {
                static /*0x0*/ int SystemMaxDBCSCharSize;
                static /*0x4*/ int SystemDefaultCharSize;
                static /*0x8*/ System.Collections.Generic.Dictionary<System.ValueTuple<System.Type, string>, System.Runtime.InteropServices.ICustomMarshaler> MarshalerInstanceCache;
                static /*0x10*/ object MarshalerInstanceCacheLock;

                static /*0xea89a0*/ Marshal();
                static /*0xea7680*/ nint AllocHGlobal(nint cb);
                static /*0xea7690*/ nint AllocHGlobal(int cb);
                static /*0xea8ae0*/ bool skip_fixed(System.Array array, int startIndex);
                static /*0xea8a60*/ void copy_from_unmanaged(nint source, int startIndex, System.Array destination, int length);
                static /*0xea8a50*/ void copy_from_unmanaged_fixed(nint source, int startIndex, System.Array destination, int length, void* fixed_destination_element);
                static /*0xea78d0*/ void Copy(nint source, byte[] destination, int startIndex, int length);
                static /*0xea77d0*/ void Copy(nint source, char[] destination, int startIndex, int length);
                static /*0xea79d0*/ void FreeBSTR(nint ptr);
                static /*0xea79e0*/ void FreeHGlobal(nint hglobal);
                static /*0xea7700*/ void ClearBSTR(nint ptr);
                static /*0xea88a0*/ void ZeroFreeBSTR(nint s);
                static /*0xea85d0*/ int GetHRForException(System.Exception e);
                static /*0xea85e0*/ int GetLastWin32Error();
                static /*0xea85f0*/ nint OffsetOf(System.Type t, string fieldName);
                static /*0xea8600*/ int ReadInt32(nint ptr, int ofs);
                static /*0xea8650*/ int ReleaseInternal(nint pUnk);
                static /*0xea8660*/ int Release(nint pUnk);
                static /*0xea8850*/ int SizeOf(System.Type t);
                static /*0x1809b0*/ int SizeOf<T>();
                static /*0xea8710*/ nint SecureStringToBSTR(System.Security.SecureString s);
                static /*0xea8860*/ void StructureToPtr(object structure, nint ptr, bool fDeleteOld);
                static /*0x2a5510*/ void StructureToPtr<T>(T structure, nint ptr, bool fDeleteOld);
                static /*0xea76f0*/ nint BufferToBSTR(char* ptr, int slen);
                static /*0xea8870*/ void WriteByte(nint ptr, int ofs, byte val);
                static /*0xea8270*/ System.Delegate GetDelegateForFunctionPointerInternal(nint ptr, System.Type t);
                static /*0xea8280*/ System.Delegate GetDelegateForFunctionPointer(nint ptr, System.Type t);
                static /*0x2a5510*/ TDelegate GetDelegateForFunctionPointer<TDelegate>(nint ptr);
                static /*0xea8520*/ nint GetFunctionPointerForDelegateInternal(System.Delegate d);
                static /*0xea8530*/ nint GetFunctionPointerForDelegate(System.Delegate d);
                static /*0x2a5510*/ nint GetFunctionPointerForDelegate<TDelegate>(TDelegate d);
                static /*0xea79f0*/ System.Runtime.InteropServices.ICustomMarshaler GetCustomMarshalerInstance(System.Type type, string cookie);

                class MarshalerInstanceKeyComparer : System.Collections.Generic.IEqualityComparer<System.ValueTuple<System.Type, string>>
                {
                    /*0x32f970*/ MarshalerInstanceKeyComparer();
                    /*0xea8b20*/ bool Equals(System.ValueTuple<System.Type, string> lhs, System.ValueTuple<System.Type, string> rhs);
                    /*0xea8b80*/ int GetHashCode(System.ValueTuple<System.Type, string> key);
                }

                class <>c
                {
                    static /*0x0*/ System.Runtime.InteropServices.Marshal.<> <>9;
                    static /*0x8*/ System.Func<System.Collections.Generic.Dictionary<System.ValueTuple<System.Type, string>, System.Runtime.InteropServices.ICustomMarshaler>> <>9__201_0;

                    static /*0xeb5780*/ <>c();
                    /*0x32f970*/ <>c();
                    /*0xeb5450*/ System.Collections.Generic.Dictionary<System.ValueTuple<System.Type, string>, System.Runtime.InteropServices.ICustomMarshaler> <GetCustomMarshalerInstance>b__201_0();
                }
            }

            class MarshalAsAttribute : System.Attribute
            {
                /*0x10*/ string MarshalCookie;
                /*0x18*/ string MarshalType;
                /*0x20*/ System.Type MarshalTypeRef;
                /*0x28*/ System.Type SafeArrayUserDefinedSubType;
                /*0x30*/ System.Runtime.InteropServices.UnmanagedType utype;
                /*0x34*/ System.Runtime.InteropServices.UnmanagedType ArraySubType;
                /*0x38*/ System.Runtime.InteropServices.VarEnum SafeArraySubType;
                /*0x3c*/ int SizeConst;
                /*0x40*/ int IidParameterIndex;
                /*0x44*/ short SizeParamIndex;

                /*0xea75e0*/ MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType unmanagedType);
                /*0xa79cc0*/ System.Runtime.InteropServices.UnmanagedType get_Value();
                /*0xea7580*/ System.Runtime.InteropServices.MarshalAsAttribute Copy();
            }

            interface _Activator
            {
            }

            interface _Assembly
            {
            }

            interface _AssemblyName
            {
            }

            interface _Module
            {
            }

            interface _ParameterInfo
            {
            }
        }

        namespace ExceptionServices
        {
            class FirstChanceExceptionEventArgs : System.EventArgs
            {
            }

            class HandleProcessCorruptedStateExceptionsAttribute : System.Attribute
            {
                /*0x534220*/ HandleProcessCorruptedStateExceptionsAttribute();
            }

            class ExceptionDispatchInfo
            {
                /*0x10*/ System.Exception m_Exception;
                /*0x18*/ object m_stackTrace;

                static /*0xea4b20*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo Capture(System.Exception source);
                static /*0xea4d80*/ void Throw(System.Exception source);
                /*0xea4db0*/ ExceptionDispatchInfo(System.Exception exception);
                /*0xea4f20*/ ExceptionDispatchInfo();
                /*0x32f410*/ object get_BinaryStackTraceArray();
                /*0x73d3e0*/ System.Exception get_SourceException();
                /*0xea4d30*/ void Throw();
            }
        }

        namespace ConstrainedExecution
        {
            enum Cer
            {
                None = 0,
                MayFail = 1,
                Success = 2,
            }

            enum Consistency
            {
                MayCorruptProcess = 0,
                MayCorruptAppDomain = 1,
                MayCorruptInstance = 2,
                WillNotCorruptState = 3,
            }

            class ReliabilityContractAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.ConstrainedExecution.Consistency <ConsistencyGuarantee>k__BackingField;
                /*0x14*/ System.Runtime.ConstrainedExecution.Cer <Cer>k__BackingField;

                /*0xeac080*/ ReliabilityContractAttribute(System.Runtime.ConstrainedExecution.Consistency consistencyGuarantee, System.Runtime.ConstrainedExecution.Cer cer);
            }

            class PrePrepareMethodAttribute : System.Attribute
            {
                /*0x534220*/ PrePrepareMethodAttribute();
            }

            class CriticalFinalizerObject
            {
                /*0x32f970*/ CriticalFinalizerObject();
                /*0xea43a0*/ void Finalize();
            }
        }

        namespace CompilerServices
        {
            class AsyncStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute
            {
                /*0xa32e30*/ AsyncStateMachineAttribute(System.Type stateMachineType);
            }

            class CallerFilePathAttribute : System.Attribute
            {
                /*0x534220*/ CallerFilePathAttribute();
            }

            class CompilerGeneratedAttribute : System.Attribute
            {
                /*0x534220*/ CompilerGeneratedAttribute();
            }

            class CustomConstantAttribute : System.Attribute
            {
                /*0x534220*/ CustomConstantAttribute();
                /*0x1803b0*/ object get_Value();
            }

            class DateTimeConstantAttribute : System.Runtime.CompilerServices.CustomConstantAttribute
            {
                /*0x10*/ System.DateTime _date;

                /*0xea44a0*/ object get_Value();
            }

            class DecimalConstantAttribute : System.Attribute
            {
                /*0x10*/ decimal _dec;

                /*0xea44f0*/ DecimalConstantAttribute(byte scale, byte sign, uint hi, uint mid, uint low);
                /*0x8b2880*/ decimal get_Value();
            }

            class ExtensionAttribute : System.Attribute
            {
                /*0x534220*/ ExtensionAttribute();
            }

            class FixedBufferAttribute : System.Attribute
            {
                /*0x10*/ System.Type <ElementType>k__BackingField;
                /*0x18*/ int <Length>k__BackingField;

                /*0xea64b0*/ FixedBufferAttribute(System.Type elementType, int length);
                /*0x73d3e0*/ System.Type get_ElementType();
                /*0x8a5c20*/ int get_Length();
            }

            interface IAsyncStateMachine
            {
                /*0x180fc0*/ void MoveNext();
                /*0x17aec0*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            interface ICriticalNotifyCompletion
            {
                /*0x17aec0*/ void UnsafeOnCompleted(System.Action continuation);
            }

            interface ITuple
            {
                /*0x180980*/ int get_Length();
            }

            class IntrinsicAttribute : System.Attribute
            {
                /*0x534220*/ IntrinsicAttribute();
            }

            class IsByRefLikeAttribute : System.Attribute
            {
                /*0x534220*/ IsByRefLikeAttribute();
            }

            class IsReadOnlyAttribute : System.Attribute
            {
                /*0x534220*/ IsReadOnlyAttribute();
            }

            class IsVolatile
            {
            }

            class IteratorStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute
            {
                /*0xa32e30*/ IteratorStateMachineAttribute(System.Type stateMachineType);
            }

            class RuntimeCompatibilityAttribute : System.Attribute
            {
                /*0x10*/ bool <WrapNonExceptionThrows>k__BackingField;

                /*0x534220*/ RuntimeCompatibilityAttribute();
                /*0x793ec0*/ void set_WrapNonExceptionThrows(bool value);
            }

            class RuntimeFeature
            {
                static /*0x348b00*/ bool get_IsDynamicCodeSupported();
            }

            class RuntimeWrappedException : System.Exception
            {
                /*0x90*/ object _wrappedException;

                /*0xeb3a60*/ RuntimeWrappedException(object thrownObject);
                /*0xeb3960*/ RuntimeWrappedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0xeb3930*/ RuntimeWrappedException();
                /*0xeb3860*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x7378b0*/ object get_WrappedException();
            }

            class StateMachineAttribute : System.Attribute
            {
                /*0x10*/ System.Type <StateMachineType>k__BackingField;

                /*0xa32e30*/ StateMachineAttribute(System.Type stateMachineType);
                /*0x73d3e0*/ System.Type get_StateMachineType();
            }

            class StringFreezingAttribute : System.Attribute
            {
                /*0x534220*/ StringFreezingAttribute();
            }

            class TupleElementNamesAttribute : System.Attribute
            {
                /*0x10*/ string[] _transformNames;

                /*0xeb52c0*/ TupleElementNamesAttribute(string[] transformNames);
            }

            class TypeForwardedFromAttribute : System.Attribute
            {
                /*0x10*/ string <AssemblyFullName>k__BackingField;

                /*0xeb53c0*/ TypeForwardedFromAttribute(string assemblyFullName);
                /*0x73d3e0*/ string get_AssemblyFullName();
            }

            class UnsafeValueTypeAttribute : System.Attribute
            {
                /*0x534220*/ UnsafeValueTypeAttribute();
            }

            struct TaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion
            {
                /*0x10*/ System.Threading.Tasks.Task m_task;

                static /*0xeb5270*/ void ValidateEnd(System.Threading.Tasks.Task task);
                static /*0xeb4c10*/ void HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task task);
                static /*0xeb5060*/ void ThrowForNonSuccess(System.Threading.Tasks.Task task);
                static /*0xeb4da0*/ void OnCompletedInternal(System.Threading.Tasks.Task task, System.Action continuation, bool continueOnCapturedContext, bool flowExecutionContext);
                static /*0xeb4e70*/ System.Action OutputWaitEtwEvents(System.Threading.Tasks.Task task, System.Action continuation);
                /*0xeb51c0*/ void UnsafeOnCompleted(System.Action continuation);

                class <>c__DisplayClass11_0
                {
                    /*0x10*/ System.Threading.Tasks.Task task;
                    /*0x18*/ System.Action continuation;

                    /*0x32f970*/ <>c__DisplayClass11_0();
                    /*0xeb55a0*/ void <OutputWaitEtwEvents>b__0();
                }
            }

            struct TaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion
            {
                /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;

                /*0x17aec0*/ TaskAwaiter(System.Threading.Tasks.Task<TResult> task);
                /*0x17cb40*/ bool get_IsCompleted();
                /*0x17aec0*/ void UnsafeOnCompleted(System.Action continuation);
                /*0x2a5510*/ TResult GetResult();
            }

            struct ConfiguredTaskAwaitable<TResult>
            {
                /*0x0*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<TResult> m_configuredTaskAwaiter;

                ConfiguredTaskAwaitable(System.Threading.Tasks.Task<TResult> task, bool continueOnCapturedContext);
                /*0x2a5510*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<TResult> GetAwaiter();

                struct ConfiguredTaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion
                {
                    /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;
                    /*0x0*/ bool m_continueOnCapturedContext;

                    ConfiguredTaskAwaiter(System.Threading.Tasks.Task<TResult> task, bool continueOnCapturedContext);
                    /*0x17cb40*/ bool get_IsCompleted();
                    /*0x17aec0*/ void UnsafeOnCompleted(System.Action continuation);
                    /*0x2a5510*/ TResult GetResult();
                }
            }

            class ReflectionBlockedAttribute : System.Attribute
            {
                /*0x534220*/ ReflectionBlockedAttribute();
            }

            struct AsyncTaskMethodBuilder<TResult>
            {
                static /*0x0*/ System.Threading.Tasks.Task<TResult> s_defaultResultTask;
                /*0x0*/ System.Runtime.CompilerServices.AsyncMethodBuilderCore m_coreState;
                /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;

                static /*0x180ff0*/ AsyncTaskMethodBuilder();
                static /*0x2a5510*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult> Create();
                static /*0x2a5510*/ System.Threading.Tasks.Task<TResult> GetTaskForResult(TResult result);
                /*0x17aec0*/ void Start<TStateMachine>(ref TStateMachine stateMachine);
                /*0x17aec0*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0x183150*/ void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0x1803b0*/ System.Threading.Tasks.Task<TResult> get_Task();
                /*0x2a5510*/ void SetResult(TResult result);
                /*0x17aec0*/ void SetException(System.Exception exception);
            }

            class AsyncTaskCache
            {
                static /*0x0*/ System.Threading.Tasks.Task<bool> TrueTask;
                static /*0x8*/ System.Threading.Tasks.Task<bool> FalseTask;
                static /*0x10*/ System.Threading.Tasks.Task<int> Int32Tasks;

                static /*0xea3c50*/ AsyncTaskCache();
                static /*0xea3b40*/ System.Threading.Tasks.Task<int> CreateInt32Tasks();
                static /*0x2a5510*/ System.Threading.Tasks.Task<TResult> CreateCacheableTask<TResult>(TResult result);
            }

            struct AsyncMethodBuilderCore
            {
                /*0x10*/ System.Runtime.CompilerServices.IAsyncStateMachine m_stateMachine;
                /*0x18*/ System.Action m_defaultContextAction;

                static /*0xea37d0*/ void ThrowAsync(System.Exception exception, System.Threading.SynchronizationContext targetContext);
                static /*0xea2fe0*/ System.Action CreateContinuationWrapper(System.Action continuation, System.Action invokeAction, System.Threading.Tasks.Task innerTask);
                static /*0xea3ac0*/ System.Threading.Tasks.Task TryGetContinuationTask(System.Action action);
                /*0xea3700*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0xea3120*/ System.Action GetCompletionAction(System.Threading.Tasks.Task taskForTracing, ref System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner runnerToInitialize);
                /*0xea3340*/ System.Action OutputAsyncCausalityEvents(System.Threading.Tasks.Task innerTask, System.Action continuation);
                /*0xea3520*/ void PostBoxInitialization(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine, System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner runner, System.Threading.Tasks.Task builtTask);

                class MoveNextRunner
                {
                    static /*0x0*/ System.Threading.ContextCallback s_invokeMoveNext;
                    /*0x10*/ System.Threading.ExecutionContext m_context;
                    /*0x18*/ System.Runtime.CompilerServices.IAsyncStateMachine m_stateMachine;

                    static /*0xeaa5a0*/ void InvokeMoveNext(object stateMachine);
                    /*0xce3b90*/ MoveNextRunner(System.Threading.ExecutionContext context, System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                    /*0xeaa640*/ void Run();
                }

                class ContinuationWrapper
                {
                    /*0x10*/ System.Action m_continuation;
                    /*0x18*/ System.Action m_invokeAction;
                    /*0x20*/ System.Threading.Tasks.Task m_innerTask;

                    /*0xea42d0*/ ContinuationWrapper(System.Action continuation, System.Action invokeAction, System.Threading.Tasks.Task innerTask);
                    /*0xea42a0*/ void Invoke();
                }

                class <>c__DisplayClass5_0
                {
                    /*0x10*/ System.Threading.Tasks.Task innerTask;
                    /*0x18*/ System.Action continuation;

                    /*0x32f970*/ <>c__DisplayClass5_0();
                    /*0xeb5720*/ void <OutputAsyncCausalityEvents>b__0();
                }

                class <>c
                {
                    static /*0x0*/ System.Runtime.CompilerServices.AsyncMethodBuilderCore.<> <>9;
                    static /*0x8*/ System.Threading.SendOrPostCallback <>9__7_0;
                    static /*0x10*/ System.Threading.WaitCallback <>9__7_1;

                    static /*0xeb57f0*/ <>c();
                    /*0x32f970*/ <>c();
                    /*0xeb54e0*/ void <ThrowAsync>b__7_0(object state);
                    /*0xeb5540*/ void <ThrowAsync>b__7_1(object state);
                }
            }

            enum LoadHint
            {
                Default = 0,
                Always = 1,
                Sometimes = 2,
            }

            class DefaultDependencyAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.CompilerServices.LoadHint loadHint;

                /*0xea4040*/ DefaultDependencyAttribute(System.Runtime.CompilerServices.LoadHint loadHintArgument);
            }

            enum CompilationRelaxations
            {
                NoStringInterning = 8,
            }

            class CompilationRelaxationsAttribute : System.Attribute
            {
                /*0x10*/ int m_relaxations;

                /*0xea4040*/ CompilationRelaxationsAttribute(int relaxations);
                /*0xea4040*/ CompilationRelaxationsAttribute(System.Runtime.CompilerServices.CompilationRelaxations relaxations);
                /*0x417e30*/ int get_CompilationRelaxations();
            }

            class InternalsVisibleToAttribute : System.Attribute
            {
                /*0x10*/ string _assemblyName;
                /*0x18*/ bool _allInternalsVisible;

                /*0xea6f70*/ InternalsVisibleToAttribute(string assemblyName);
                /*0xdd5230*/ void set_AllInternalsVisible(bool value);
            }

            class FriendAccessAllowedAttribute : System.Attribute
            {
                /*0x534220*/ FriendAccessAllowedAttribute();
            }

            class TypeDependencyAttribute : System.Attribute
            {
                /*0x10*/ string typeName;

                /*0xeb5340*/ TypeDependencyAttribute(string typeName);
            }

            class JitHelpers
            {
                static /*0x2a5510*/ T UnsafeCast<T>(object o);
                static /*0x2a5510*/ int UnsafeEnumCast<T>(T val);
                static /*0x2a5510*/ long UnsafeEnumCastLong<T>(T val);
            }

            struct Ephemeron
            {
                /*0x10*/ object key;
                /*0x18*/ object value;
            }

            class ConditionalWeakTable<TKey, TValue> : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
            {
                static int INITIAL_SIZE = 13;
                static float LOAD_FACTOR = 0.699999988079071;
                static float COMPACT_FACTOR = 0.5;
                static float EXPAND_FACTOR = 1.100000023841858;
                /*0x0*/ System.Runtime.CompilerServices.Ephemeron[] data;
                /*0x0*/ object _lock;
                /*0x0*/ int size;

                /*0x180fc0*/ ConditionalWeakTable();
                /*0x180fc0*/ void Finalize();
                /*0x180fc0*/ void RehashWithoutResize();
                /*0x180fc0*/ void RecomputeSize();
                /*0x180fc0*/ void Rehash();
                /*0x2a5510*/ void Add(TKey key, TValue value);
                /*0x2a5510*/ bool Remove(TKey key);
                /*0x2a5510*/ bool TryGetValue(TKey key, ref TValue value);
                /*0x2a5510*/ TValue GetValue(TKey key, System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback<TKey, TValue> createValueCallback);
                /*0x1803b0*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
                /*0x1803b0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class CreateValueCallback<TKey, TValue> : System.MulticastDelegate
                {
                    CreateValueCallback(object object, nint method);
                    /*0x2a5510*/ TValue Invoke(TKey key);
                }

                class Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue> _table;
                    /*0x0*/ int _currentIndex;
                    /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> _current;

                    /*0x17aec0*/ Enumerator(System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue> table);
                    /*0x180fc0*/ void Finalize();
                    /*0x180fc0*/ void Dispose();
                    /*0x17cb40*/ bool MoveNext();
                    /*0x2a5510*/ System.Collections.Generic.KeyValuePair<TKey, TValue> get_Current();
                    /*0x1803b0*/ object System.Collections.IEnumerator.get_Current();
                    /*0x180fc0*/ void Reset();
                }
            }

            class RuntimeHelpers
            {
                static /*0xeb25e0*/ void InitializeArray(System.Array array, nint fldHandle);
                static /*0xeb2560*/ void InitializeArray(System.Array array, System.RuntimeFieldHandle fldHandle);
                static /*0xeb25f0*/ int get_OffsetToStringData();
                static /*0xea40d0*/ int GetHashCode(object o);
                static /*0xeb2550*/ object GetObjectValue(object obj);
                static /*0xea6620*/ bool SufficientExecutionStack();
                static /*0xea6620*/ bool TryEnsureSufficientExecutionStack();
                static /*0x32d010*/ void PrepareConstrainedRegions();
                static /*0x17cb70*/ bool IsReferenceOrContainsReferences<T>();
            }

            class Unsafe
            {
                static /*0x17baf0*/ ref T Add<T>(ref T source, int elementOffset);
                static /*0x2a5510*/ ref T Add<T>(ref T source, nint elementOffset);
                static /*0x2a5510*/ ref T AddByteOffset<T>(ref T source, nint byteOffset);
                static /*0x1794f0*/ bool AreSame<T>(ref T left, ref T right);
                static /*0x2a5510*/ T As<T>(object o);
                static /*0x17e030*/ ref TTo As<TFrom, TTo>(ref TFrom source);
                static /*0x2a5510*/ void* AsPointer<T>(ref T value);
                static /*0x2a5510*/ ref T AsRef<T>(void* source);
                static /*0x17e030*/ ref T AsRef<T>(ref T source);
                static /*0x2a5510*/ T Read<T>(void* source);
                static /*0x2a5510*/ T ReadUnaligned<T>(ref byte source);
                static /*0x1809b0*/ int SizeOf<T>();
                static /*0x2a5510*/ void WriteUnaligned<T>(ref byte destination, T value);
                static /*0x1794f0*/ bool IsAddressLessThan<T>(ref T left, ref T right);
                static /*0x17bea0*/ ref T AddByteOffset<T>(ref T source, ulong byteOffset);
            }
        }
    }

    namespace Resources
    {
        interface IResourceReader : System.Collections.IEnumerable, System.IDisposable
        {
            /*0x180fc0*/ void Close();
            /*0x1803b0*/ System.Collections.IDictionaryEnumerator GetEnumerator();
        }

        class NeutralResourcesLanguageAttribute : System.Attribute
        {
            /*0x10*/ string <CultureName>k__BackingField;
            /*0x18*/ System.Resources.UltimateResourceFallbackLocation <Location>k__BackingField;

            /*0xeaaab0*/ NeutralResourcesLanguageAttribute(string cultureName);
            /*0x73d3e0*/ string get_CultureName();
            /*0x8a5c20*/ System.Resources.UltimateResourceFallbackLocation get_Location();
        }

        enum ResourceTypeCode
        {
            Null = 0,
            String = 1,
            Boolean = 2,
            Char = 3,
            Byte = 4,
            SByte = 5,
            Int16 = 6,
            UInt16 = 7,
            Int32 = 8,
            UInt32 = 9,
            Int64 = 10,
            UInt64 = 11,
            Single = 12,
            Double = 13,
            Decimal = 14,
            DateTime = 15,
            TimeSpan = 16,
            LastPrimitive = 16,
            ByteArray = 32,
            Stream = 33,
            StartOfUserTypes = 64,
        }

        class RuntimeResourceSet : System.Resources.ResourceSet, System.Collections.IEnumerable
        {
            static int Version = 2;
            /*0x28*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> _resCache;
            /*0x30*/ System.Resources.ResourceReader _defaultReader;
            /*0x38*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> _caseInsensitiveTable;
            /*0x40*/ bool _haveReadFromReader;

            /*0xeb36f0*/ RuntimeResourceSet(string fileName);
            /*0xeb35d0*/ RuntimeResourceSet(System.IO.Stream stream);
            /*0xeb2600*/ void Dispose(bool disposing);
            /*0xeb27e0*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0xeb27e0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0xeb2740*/ System.Collections.IDictionaryEnumerator GetEnumeratorHelper();
            /*0xeb3370*/ string GetString(string key);
            /*0xeb32e0*/ string GetString(string key, bool ignoreCase);
            /*0xeb27f0*/ object GetObject(string key);
            /*0xeb32c0*/ object GetObject(string key, bool ignoreCase);
            /*0xeb2810*/ object GetObject(string key, bool ignoreCase, bool isString);
            /*0xeb33f0*/ object ResolveResourceLocator(System.Resources.ResourceLocator resLocation, string key, System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> copyOfCache, bool keyInWrongCase);
        }

        class SatelliteContractVersionAttribute : System.Attribute
        {
            /*0x10*/ string <Version>k__BackingField;

            /*0xeb41e0*/ SatelliteContractVersionAttribute(string version);
        }

        enum UltimateResourceFallbackLocation
        {
            MainAssembly = 0,
            Satellite = 1,
        }

        class FastResourceComparer : System.Collections.IComparer, System.Collections.IEqualityComparer, System.Collections.Generic.IComparer<string>, System.Collections.Generic.IEqualityComparer<string>
        {
            static /*0x0*/ System.Resources.FastResourceComparer Default;

            static /*0xea56f0*/ FastResourceComparer();
            static /*0xea5690*/ int HashFunction(string key);
            static /*0xea52f0*/ int CompareOrdinal(string a, byte[] bytes, int bCharLength);
            static /*0xea5150*/ int CompareOrdinal(byte[] bytes, int aCharLength, string b);
            static /*0xea5240*/ int CompareOrdinal(byte* a, int byteLen, string b);
            /*0x32f970*/ FastResourceComparer();
            /*0xea5540*/ int GetHashCode(object key);
            /*0xea5600*/ int GetHashCode(string key);
            /*0xea53e0*/ int Compare(object a, object b);
            /*0xea53c0*/ int Compare(string a, string b);
            /*0xea5520*/ bool Equals(string a, string b);
            /*0xea5480*/ bool Equals(object a, object b);
        }

        class FileBasedResourceGroveler : System.Resources.IResourceGroveler
        {
            /*0x10*/ System.Resources.ResourceManager.ResourceManagerMediator _mediator;

            /*0x49b490*/ FileBasedResourceGroveler(System.Resources.ResourceManager.ResourceManagerMediator mediator);
        }

        interface IResourceGroveler
        {
        }

        class ManifestBasedResourceGroveler : System.Resources.IResourceGroveler
        {
            /*0x10*/ System.Resources.ResourceManager.ResourceManagerMediator _mediator;

            static /*0xea7270*/ System.Globalization.CultureInfo GetNeutralResourcesLanguage(System.Reflection.Assembly a, ref System.Resources.UltimateResourceFallbackLocation fallbackLocation);
            static /*0xea71e0*/ bool GetNeutralResourcesLanguageAttribute(System.Reflection.Assembly assembly, ref string cultureName, ref short fallbackLocation);
            /*0x49b490*/ ManifestBasedResourceGroveler(System.Resources.ResourceManager.ResourceManagerMediator mediator);
        }

        class ResourceManager
        {
            static /*0x0*/ int MagicNumber;
            static /*0x4*/ int HeaderVersionNumber;
            static /*0x8*/ System.Type _minResourceSet;
            static /*0x10*/ string ResReaderTypeName;
            static /*0x18*/ string ResSetTypeName;
            static /*0x20*/ string MscorlibName;
            static /*0x28*/ int DEBUG;
            /*0x10*/ System.Collections.Hashtable ResourceSets;
            /*0x18*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> _resourceSets;
            /*0x20*/ System.Reflection.Assembly MainAssembly;
            /*0x28*/ System.Globalization.CultureInfo _neutralResourcesCulture;
            /*0x30*/ System.Resources.ResourceManager.CultureNameResourceSetPair _lastUsedResourceCache;
            /*0x38*/ bool UseManifest;
            /*0x39*/ bool UseSatelliteAssem;
            /*0x3c*/ System.Resources.UltimateResourceFallbackLocation _fallbackLoc;
            /*0x40*/ System.Reflection.Assembly _callingAssembly;
            /*0x48*/ System.Reflection.RuntimeAssembly m_callingAssembly;
            /*0x50*/ System.Resources.IResourceGroveler resourceGroveler;

            static /*0xeacfa0*/ ResourceManager();
            static /*0xeac990*/ bool CompareNames(string asmTypeName1, string typeName2, System.Reflection.AssemblyName asmName2);
            /*0xead1c0*/ ResourceManager();
            /*0xeacbe0*/ void Init();
            /*0xeaced0*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0xeacca0*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0xeacf20*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);

            class CultureNameResourceSetPair
            {
                /*0x32f970*/ CultureNameResourceSetPair();
            }

            class ResourceManagerMediator
            {
                /*0x10*/ System.Resources.ResourceManager _rm;

                /*0xeac910*/ ResourceManagerMediator(System.Resources.ResourceManager rm);
            }
        }

        struct ResourceLocator
        {
            /*0x10*/ object _value;
            /*0x18*/ int _dataPos;

            static /*0xeac900*/ bool CanCache(System.Resources.ResourceTypeCode value);
            /*0xe9dd20*/ ResourceLocator(int dataPos, object value);
            /*0x834a60*/ int get_DataPosition();
            /*0x6937d0*/ object get_Value();
            /*0x792990*/ void set_Value(object value);
        }

        class ResourceReader : System.Resources.IResourceReader, System.Collections.IEnumerable, System.IDisposable
        {
            /*0x10*/ System.IO.BinaryReader _store;
            /*0x18*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> _resCache;
            /*0x20*/ long _nameSectionOffset;
            /*0x28*/ long _dataSectionOffset;
            /*0x30*/ int[] _nameHashes;
            /*0x38*/ int* _nameHashesPtr;
            /*0x40*/ int[] _namePositions;
            /*0x48*/ int* _namePositionsPtr;
            /*0x50*/ System.RuntimeType[] _typeTable;
            /*0x58*/ int[] _typeNamePositions;
            /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _objFormatter;
            /*0x68*/ int _numResources;
            /*0x70*/ System.IO.UnmanagedMemoryStream _ums;
            /*0x78*/ int _version;

            static /*0xeaf6e0*/ int ReadUnalignedI4(int* p);
            /*0xeb17c0*/ ResourceReader(System.IO.Stream stream, System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> resCache);
            /*0xeada30*/ void Close();
            /*0xeae180*/ void Dispose();
            /*0xeae0c0*/ void Dispose(bool disposing);
            /*0xeaf700*/ void SkipString();
            /*0xeaeb30*/ int GetNameHash(int index);
            /*0xeaeba0*/ int GetNamePosition(int index);
            /*0xeaea60*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0xeaea60*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0xeae9f0*/ System.Resources.ResourceReader.ResourceEnumerator GetEnumeratorInternal();
            /*0xeae190*/ int FindPosForResource(string name);
            /*0xeadaf0*/ bool CompareStringEqualsName(string name);
            /*0xead2c0*/ string AllocateStringForNameIndex(int index, ref int dataOffset);
            /*0xeaece0*/ object GetValueForNameIndex(int index);
            /*0xeaf250*/ string LoadString(int pos);
            /*0xeaf180*/ object LoadObject(int pos);
            /*0xeaf1b0*/ object LoadObject(int pos, ref System.Resources.ResourceTypeCode typeCode);
            /*0xeaef80*/ object LoadObjectV1(int pos);
            /*0xeaf7d0*/ object _LoadObjectV1(int pos);
            /*0xeaf080*/ object LoadObjectV2(int pos, ref System.Resources.ResourceTypeCode typeCode);
            /*0xeb00d0*/ object _LoadObjectV2(int pos, ref System.Resources.ResourceTypeCode typeCode);
            /*0xeadee0*/ object DeserializeObject(int typeIndex);
            /*0xeaf560*/ void ReadResources();
            /*0xeb0ce0*/ void _ReadResources();
            /*0xeae660*/ System.RuntimeType FindType(int typeIndex);

            class ResourceEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
            {
                /*0x10*/ System.Resources.ResourceReader _reader;
                /*0x18*/ bool _currentIsValid;
                /*0x1c*/ int _currentName;
                /*0x20*/ int _dataPosition;

                /*0xeac1b0*/ ResourceEnumerator(System.Resources.ResourceReader reader);
                /*0xeac0c0*/ bool MoveNext();
                /*0xeac640*/ object get_Key();
                /*0xeac1f0*/ object get_Current();
                /*0x3e3af0*/ int get_DataPosition();
                /*0xeac250*/ System.Collections.DictionaryEntry get_Entry();
                /*0xeac7a0*/ object get_Value();
                /*0xeac110*/ void Reset();
            }
        }

        class ResourceSet : System.IDisposable, System.Collections.IEnumerable
        {
            /*0x10*/ System.Resources.IResourceReader Reader;
            /*0x18*/ System.Collections.Hashtable Table;
            /*0x20*/ System.Collections.Hashtable _caseInsensitiveTable;

            /*0xeb24e0*/ ResourceSet();
            /*0x32f970*/ ResourceSet(bool junk);
            /*0xeb1910*/ void CommonInit();
            /*0xeb1970*/ void Dispose(bool disposing);
            /*0xeb1a10*/ void Dispose();
            /*0xeb1e30*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0xeb1e30*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0xeb1da0*/ System.Collections.IDictionaryEnumerator GetEnumeratorHelper();
            /*0xeb2030*/ string GetString(string name);
            /*0xeb2210*/ string GetString(string name, bool ignoreCase);
            /*0xeb1e40*/ object GetObject(string name);
            /*0xeb1f20*/ object GetObject(string name, bool ignoreCase);
            /*0xeb1e40*/ object GetObjectInternal(string name);
            /*0xeb1a30*/ object GetCaseInsensitiveObjectInternal(string name);
        }
    }

    namespace Reflection
    {
        class AmbiguousMatchException : System.SystemException
        {
            /*0xea2ec0*/ AmbiguousMatchException();
            /*0xea2ea0*/ AmbiguousMatchException(string message);
            /*0xe291b0*/ AmbiguousMatchException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class AssemblyCompanyAttribute : System.Attribute
        {
            /*0x10*/ string <Company>k__BackingField;

            /*0xa32e30*/ AssemblyCompanyAttribute(string company);
        }

        class AssemblyConfigurationAttribute : System.Attribute
        {
            /*0x10*/ string <Configuration>k__BackingField;

            /*0xa32e30*/ AssemblyConfigurationAttribute(string configuration);
        }

        enum AssemblyContentType
        {
            Default = 0,
            WindowsRuntime = 1,
        }

        class AssemblyCopyrightAttribute : System.Attribute
        {
            /*0x10*/ string <Copyright>k__BackingField;

            /*0xa32e30*/ AssemblyCopyrightAttribute(string copyright);
        }

        class AssemblyDefaultAliasAttribute : System.Attribute
        {
            /*0x10*/ string <DefaultAlias>k__BackingField;

            /*0xa32e30*/ AssemblyDefaultAliasAttribute(string defaultAlias);
        }

        class AssemblyDelaySignAttribute : System.Attribute
        {
            /*0x10*/ bool <DelaySign>k__BackingField;

            /*0xe2bcb0*/ AssemblyDelaySignAttribute(bool delaySign);
        }

        class AssemblyDescriptionAttribute : System.Attribute
        {
            /*0x10*/ string <Description>k__BackingField;

            /*0xa32e30*/ AssemblyDescriptionAttribute(string description);
        }

        class AssemblyFileVersionAttribute : System.Attribute
        {
            /*0x10*/ string <Version>k__BackingField;

            /*0xea2f10*/ AssemblyFileVersionAttribute(string version);
        }

        class AssemblyInformationalVersionAttribute : System.Attribute
        {
            /*0x10*/ string <InformationalVersion>k__BackingField;

            /*0xa32e30*/ AssemblyInformationalVersionAttribute(string informationalVersion);
        }

        class AssemblyKeyFileAttribute : System.Attribute
        {
            /*0x10*/ string <KeyFile>k__BackingField;

            /*0xa32e30*/ AssemblyKeyFileAttribute(string keyFile);
        }

        class AssemblyMetadataAttribute : System.Attribute
        {
            /*0x10*/ string <Key>k__BackingField;
            /*0x18*/ string <Value>k__BackingField;

            /*0xea2f90*/ AssemblyMetadataAttribute(string key, string value);
        }

        enum AssemblyNameFlags
        {
            None = 0,
            PublicKey = 1,
            EnableJITcompileOptimizer = 16384,
            EnableJITcompileTracking = 32768,
            Retargetable = 256,
        }

        class AssemblyProductAttribute : System.Attribute
        {
            /*0x10*/ string <Product>k__BackingField;

            /*0xa32e30*/ AssemblyProductAttribute(string product);
        }

        class AssemblyTitleAttribute : System.Attribute
        {
            /*0x10*/ string <Title>k__BackingField;

            /*0xa32e30*/ AssemblyTitleAttribute(string title);
        }

        class AssemblyTrademarkAttribute : System.Attribute
        {
            /*0x10*/ string <Trademark>k__BackingField;

            /*0xa32e30*/ AssemblyTrademarkAttribute(string trademark);
        }

        class Binder
        {
            /*0x32f970*/ Binder();
            System.Reflection.FieldInfo BindToField(System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);
            System.Reflection.MethodBase BindToMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, ref object state);
            /*0x177dc0*/ object ChangeType(object value, System.Type type, System.Globalization.CultureInfo culture);
            /*0x183150*/ void ReorderArgumentArray(ref object[] args, object state);
            System.Reflection.MethodBase SelectMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            System.Reflection.PropertyInfo SelectProperty(System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, System.Type returnType, System.Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
        }

        enum BindingFlags
        {
            Default = 0,
            IgnoreCase = 1,
            DeclaredOnly = 2,
            Instance = 4,
            Static = 8,
            Public = 16,
            NonPublic = 32,
            FlattenHierarchy = 64,
            InvokeMethod = 256,
            CreateInstance = 512,
            GetField = 1024,
            SetField = 2048,
            GetProperty = 4096,
            SetProperty = 8192,
            PutDispProperty = 16384,
            PutRefDispProperty = 32768,
            ExactBinding = 65536,
            SuppressChangeType = 131072,
            OptionalParamBinding = 262144,
            IgnoreReturn = 16777216,
            DoNotWrapExceptions = 33554432,
        }

        enum CallingConventions
        {
            Standard = 1,
            VarArgs = 2,
            Any = 3,
            HasThis = 32,
            ExplicitThis = 64,
        }

        class ConstructorInfo : System.Reflection.MethodBase
        {
            static /*0x0*/ string ConstructorName;
            static /*0x8*/ string TypeConstructorName;

            static /*0xea4120*/ ConstructorInfo();
            static /*0xea41d0*/ bool op_Equality(System.Reflection.ConstructorInfo left, System.Reflection.ConstructorInfo right);
            static /*0xea4200*/ bool op_Inequality(System.Reflection.ConstructorInfo left, System.Reflection.ConstructorInfo right);
            /*0x32f970*/ ConstructorInfo();
            /*0x6bba80*/ System.Reflection.MemberTypes get_MemberType();
            /*0xea40e0*/ object Invoke(object[] parameters);
            object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0xea40c0*/ bool Equals(object obj);
            /*0xea40d0*/ int GetHashCode();
        }

        class CustomAttributeFormatException : System.FormatException
        {
            /*0xea4400*/ CustomAttributeFormatException();
            /*0xea4450*/ CustomAttributeFormatException(string message);
            /*0xea4480*/ CustomAttributeFormatException(string message, System.Exception inner);
            /*0xea43e0*/ CustomAttributeFormatException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class DefaultMemberAttribute : System.Attribute
        {
            /*0x10*/ string <MemberName>k__BackingField;

            /*0xa32e30*/ DefaultMemberAttribute(string memberName);
            /*0x73d3e0*/ string get_MemberName();
        }

        enum EventAttributes
        {
            None = 0,
            SpecialName = 512,
            RTSpecialName = 1024,
            ReservedMask = 1024,
        }

        class EventInfo : System.Reflection.MemberInfo
        {
            /*0x10*/ System.Reflection.EventInfo.AddEventAdapter cached_add_event;

            static /*0xea41d0*/ bool op_Equality(System.Reflection.EventInfo left, System.Reflection.EventInfo right);
            static /*0xea4ae0*/ bool op_Inequality(System.Reflection.EventInfo left, System.Reflection.EventInfo right);
            static /*0xea4ad0*/ System.Reflection.EventInfo internal_from_handle_type(nint event_handle, nint type_handle);
            static /*0xea48c0*/ System.Reflection.EventInfo GetEventFromHandle(Mono.RuntimeEventHandle handle, System.RuntimeTypeHandle reflectedType);
            /*0x32f970*/ EventInfo();
            /*0x6bba90*/ System.Reflection.MemberTypes get_MemberType();
            System.Reflection.MethodInfo GetAddMethod(bool nonPublic);
            System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic);
            System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic);
            /*0xea4990*/ System.Type get_EventHandlerType();
            /*0xea40c0*/ bool Equals(object obj);
            /*0xea40d0*/ int GetHashCode();

            class AddEventAdapter : System.MulticastDelegate
            {
                /*0x722be0*/ AddEventAdapter(object object, nint method);
                /*0x722200*/ void Invoke(object _this, System.Delegate dele);
            }
        }

        enum ExceptionHandlingClauseOptions
        {
            Clause = 0,
            Filter = 1,
            Finally = 2,
            Fault = 4,
        }

        enum FieldAttributes
        {
            FieldAccessMask = 7,
            PrivateScope = 0,
            Private = 1,
            FamANDAssem = 2,
            Assembly = 3,
            Family = 4,
            FamORAssem = 5,
            Public = 6,
            Static = 16,
            InitOnly = 32,
            Literal = 64,
            NotSerialized = 128,
            SpecialName = 512,
            PinvokeImpl = 8192,
            RTSpecialName = 1024,
            HasFieldMarshal = 4096,
            HasDefault = 32768,
            HasFieldRVA = 256,
            ReservedMask = 38144,
        }

        class FieldInfo : System.Reflection.MemberInfo
        {
            static /*0xea41d0*/ bool op_Equality(System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);
            static /*0xea4ae0*/ bool op_Inequality(System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);
            static /*0xea64a0*/ System.Reflection.FieldInfo internal_from_handle_type(nint field_handle, nint type_handle);
            static /*0xea5760*/ System.Reflection.FieldInfo GetFieldFromHandle(System.RuntimeFieldHandle handle);
            static /*0xea57d0*/ System.Reflection.FieldInfo GetFieldFromHandle(System.RuntimeFieldHandle handle, System.RuntimeTypeHandle declaringType);
            /*0x32f970*/ FieldInfo();
            /*0x6bbad0*/ System.Reflection.MemberTypes get_MemberType();
            /*0x180980*/ System.Reflection.FieldAttributes get_Attributes();
            /*0x1803b0*/ System.Type get_FieldType();
            /*0xea6370*/ bool get_IsInitOnly();
            /*0xea63a0*/ bool get_IsLiteral();
            /*0xea63d0*/ bool get_IsNotSerialized();
            /*0xea6430*/ bool get_IsSpecialName();
            /*0xea6460*/ bool get_IsStatic();
            /*0xea6400*/ bool get_IsPublic();
            System.RuntimeFieldHandle get_FieldHandle();
            /*0xea40c0*/ bool Equals(object obj);
            /*0xea40d0*/ int GetHashCode();
            /*0x1858d0*/ object GetValue(object obj);
            /*0xea62d0*/ void SetValue(object obj, object value);
            void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0xea6280*/ void SetValueDirect(System.TypedReference obj, object value);
            /*0xea6230*/ object GetRawConstantValue();
            /*0xea58a0*/ int GetFieldOffset();
            /*0xea6490*/ System.Runtime.InteropServices.MarshalAsAttribute get_marshal_info();
            /*0xea5fa0*/ object[] GetPseudoCustomAttributes();
            /*0xea58f0*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData();
        }

        enum GenericParameterAttributes
        {
            None = 0,
            VarianceMask = 3,
            Covariant = 1,
            Contravariant = 2,
            SpecialConstraintMask = 28,
            ReferenceTypeConstraint = 4,
            NotNullableValueTypeConstraint = 8,
            DefaultConstructorConstraint = 16,
        }

        interface ICustomAttributeProvider
        {
            /*0x185960*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            bool IsDefined(System.Type attributeType, bool inherit);
        }

        interface IReflectableType
        {
            /*0x1803b0*/ System.Reflection.TypeInfo GetTypeInfo();
        }

        class IntrospectionExtensions
        {
            static /*0xea6fb0*/ System.Reflection.TypeInfo GetTypeInfo(System.Type type);
        }

        class InvalidFilterCriteriaException : System.ApplicationException
        {
            /*0xea7190*/ InvalidFilterCriteriaException();
            /*0xea7120*/ InvalidFilterCriteriaException(string message);
            /*0xea7170*/ InvalidFilterCriteriaException(string message, System.Exception inner);
            /*0xea7150*/ InvalidFilterCriteriaException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class MemberFilter : System.MulticastDelegate
        {
            /*0x9deed0*/ MemberFilter(object object, nint method);
            /*0x722200*/ bool Invoke(System.Reflection.MemberInfo m, object filterCriteria);
        }

        class MemberInfo : System.Reflection.ICustomAttributeProvider
        {
            static /*0xea8ce0*/ bool op_Equality(System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);
            static /*0xea90c0*/ bool op_Inequality(System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);
            /*0x32f970*/ MemberInfo();
            /*0x180980*/ System.Reflection.MemberTypes get_MemberType();
            /*0x1803b0*/ string get_Name();
            /*0x1803b0*/ System.Type get_DeclaringType();
            /*0x1803b0*/ System.Type get_ReflectedType();
            /*0xea8c00*/ System.Reflection.Module get_Module();
            bool IsDefined(System.Type attributeType, bool inherit);
            object[] GetCustomAttributes(bool inherit);
            /*0x185960*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0xea8bc0*/ int get_MetadataToken();
            /*0xea40c0*/ bool Equals(object obj);
            /*0xea40d0*/ int GetHashCode();
        }

        enum MemberTypes
        {
            Constructor = 1,
            Event = 2,
            Field = 4,
            Method = 8,
            Property = 16,
            TypeInfo = 32,
            Custom = 64,
            NestedType = 128,
            All = 191,
        }

        enum MethodAttributes
        {
            MemberAccessMask = 7,
            PrivateScope = 0,
            Private = 1,
            FamANDAssem = 2,
            Assembly = 3,
            Family = 4,
            FamORAssem = 5,
            Public = 6,
            Static = 16,
            Final = 32,
            Virtual = 64,
            HideBySig = 128,
            CheckAccessOnOverride = 512,
            VtableLayoutMask = 256,
            ReuseSlot = 0,
            NewSlot = 256,
            Abstract = 1024,
            SpecialName = 2048,
            PinvokeImpl = 8192,
            UnmanagedExport = 8,
            RTSpecialName = 4096,
            HasSecurity = 16384,
            RequireSecObject = 32768,
            ReservedMask = 53248,
        }

        class MethodBase : System.Reflection.MemberInfo
        {
            static /*0xea9a90*/ bool op_Equality(System.Reflection.MethodBase left, System.Reflection.MethodBase right);
            static /*0xea9d00*/ bool op_Inequality(System.Reflection.MethodBase left, System.Reflection.MethodBase right);
            static /*0xea9470*/ System.Reflection.MethodBase GetMethodFromHandle(System.RuntimeMethodHandle handle);
            static /*0xea90e0*/ string ConstructParameters(System.Type[] parameterTypes, System.Reflection.CallingConventions callingConvention, bool serialization);
            /*0x32f970*/ MethodBase();
            /*0x1803b0*/ System.Reflection.ParameterInfo[] GetParameters();
            /*0x180980*/ System.Reflection.MethodAttributes get_Attributes();
            /*0x180980*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
            /*0x6bba80*/ System.Reflection.CallingConventions get_CallingConvention();
            /*0xea98a0*/ bool get_IsAbstract();
            /*0xea98d0*/ bool get_IsConstructor();
            /*0xea9970*/ bool get_IsFinal();
            /*0xea9a00*/ bool get_IsSpecialName();
            /*0xea9a30*/ bool get_IsStatic();
            /*0xea9a60*/ bool get_IsVirtual();
            /*0xea99a0*/ bool get_IsPublic();
            /*0x348b00*/ bool get_IsGenericMethod();
            /*0x348b00*/ bool get_IsGenericMethodDefinition();
            /*0xea9420*/ System.Type[] GetGenericArguments();
            /*0x348b00*/ bool get_ContainsGenericParameters();
            /*0xea9860*/ object Invoke(object obj, object[] parameters);
            object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            System.RuntimeMethodHandle get_MethodHandle();
            /*0xea99d0*/ bool get_IsSecurityCritical();
            /*0xea40c0*/ bool Equals(object obj);
            /*0xea40d0*/ int GetHashCode();
            /*0xea9840*/ System.Reflection.ParameterInfo[] GetParametersInternal();
            /*0xea9810*/ int GetParametersCount();
            /*0xea92e0*/ string FormatNameAndSig(bool serialization);
            /*0xea96d0*/ System.Type[] GetParameterTypes();
            /*0xea9840*/ System.Reflection.ParameterInfo[] GetParametersNoCopy();
        }

        enum MethodImplAttributes
        {
            CodeTypeMask = 3,
            IL = 0,
            Native = 1,
            OPTIL = 2,
            Runtime = 3,
            ManagedMask = 4,
            Unmanaged = 4,
            Managed = 0,
            ForwardRef = 16,
            PreserveSig = 128,
            InternalCall = 4096,
            Synchronized = 32,
            NoInlining = 8,
            AggressiveInlining = 256,
            NoOptimization = 64,
            MaxMethodImplVal = 65535,
            SecurityMitigations = 1024,
        }

        class MethodInfo : System.Reflection.MethodBase
        {
            static /*0xea41d0*/ bool op_Equality(System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);
            static /*0xea4ae0*/ bool op_Inequality(System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);
            /*0x32f970*/ MethodInfo();
            /*0x6bbae0*/ System.Reflection.MemberTypes get_MemberType();
            /*0xea9ee0*/ System.Reflection.ParameterInfo get_ReturnParameter();
            /*0xea9f10*/ System.Type get_ReturnType();
            /*0xea9dc0*/ System.Type[] GetGenericArguments();
            /*0xea9e10*/ System.Reflection.MethodInfo GetGenericMethodDefinition();
            /*0xea9e60*/ System.Reflection.MethodInfo MakeGenericMethod(System.Type[] typeArguments);
            /*0x1803b0*/ System.Reflection.MethodInfo GetBaseDefinition();
            /*0xea9d20*/ System.Delegate CreateDelegate(System.Type delegateType);
            /*0xea9d70*/ System.Delegate CreateDelegate(System.Type delegateType, object target);
            /*0xea40c0*/ bool Equals(object obj);
            /*0xea40d0*/ int GetHashCode();
            /*0xea9eb0*/ int get_GenericParameterCount();
        }

        class Missing : System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Reflection.Missing Value;

            static /*0xea9f80*/ Missing();
            /*0x32f970*/ Missing();
            /*0xea9f40*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Module : System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Module
        {
            static System.Reflection.BindingFlags DefaultLookup = 28;
            static /*0x0*/ System.Reflection.TypeFilter FilterTypeName;
            static /*0x8*/ System.Reflection.TypeFilter FilterTypeNameIgnoreCase;

            static /*0xeaa420*/ Module();
            static /*0xea41d0*/ bool op_Equality(System.Reflection.Module left, System.Reflection.Module right);
            static /*0xeaa1a0*/ bool FilterTypeNameImpl(System.Type cls, object filterCriteria);
            static /*0xea9ff0*/ bool FilterTypeNameIgnoreCaseImpl(System.Type cls, object filterCriteria);
            /*0x32f970*/ Module();
            /*0xeaa510*/ System.Reflection.Assembly get_Assembly();
            /*0xeaa540*/ System.Guid get_ModuleVersionId();
            /*0xeaa570*/ string get_ScopeName();
            /*0xeaa3f0*/ bool IsResource();
            /*0xeaa3c0*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0xeaa320*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0xeaa390*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xea40c0*/ bool Equals(object o);
            /*0xea40d0*/ int GetHashCode();
            /*0xbf9a40*/ string ToString();
            /*0xeaa350*/ System.Guid GetModuleVersionId();
        }

        enum ParameterAttributes
        {
            None = 0,
            In = 1,
            Out = 2,
            Lcid = 4,
            Retval = 8,
            Optional = 16,
            HasDefault = 4096,
            HasFieldMarshal = 8192,
            Reserved3 = 16384,
            Reserved4 = 32768,
            ReservedMask = 61440,
        }

        class ParameterInfo : System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.IObjectReference, System.Runtime.InteropServices._ParameterInfo
        {
            static int MetadataToken_ParamDef = 134217728;
            /*0x10*/ System.Reflection.ParameterAttributes AttrsImpl;
            /*0x18*/ System.Type ClassImpl;
            /*0x20*/ object DefaultValueImpl;
            /*0x28*/ System.Reflection.MemberInfo MemberImpl;
            /*0x30*/ string NameImpl;
            /*0x38*/ int PositionImpl;

            /*0x32f970*/ ParameterInfo();
            /*0x417e30*/ System.Reflection.ParameterAttributes get_Attributes();
            /*0x79a150*/ System.Reflection.MemberInfo get_Member();
            /*0x997630*/ string get_Name();
            /*0x32f410*/ System.Type get_ParameterType();
            /*0xeab1d0*/ int get_Position();
            /*0xeab150*/ bool get_IsIn();
            /*0xeab170*/ bool get_IsOptional();
            /*0xeab1a0*/ bool get_IsOut();
            /*0xeab120*/ object get_DefaultValue();
            /*0xeaaff0*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0xeaab40*/ object[] GetCustomAttributes(bool inherit);
            /*0xeaab70*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0xeaac30*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
            /*0xeab090*/ string ToString();
        }

        struct ParameterModifier
        {
            /*0x10*/ bool[] _byRef;
        }

        class Pointer : System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ void* _ptr;
            /*0x18*/ System.Type _ptrType;

            static /*0xeab3f0*/ object Box(void* ptr, System.Type type);
            /*0xeab610*/ Pointer(void* ptr, System.Type ptrType);
            /*0xeab5d0*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum ProcessorArchitecture
        {
            None = 0,
            MSIL = 1,
            X86 = 2,
            IA64 = 3,
            Amd64 = 4,
            Arm = 5,
        }

        enum PropertyAttributes
        {
            None = 0,
            SpecialName = 512,
            RTSpecialName = 1024,
            HasDefault = 4096,
            Reserved2 = 8192,
            Reserved3 = 16384,
            Reserved4 = 32768,
            ReservedMask = 62464,
        }

        class PropertyInfo : System.Reflection.MemberInfo
        {
            static /*0xea41d0*/ bool op_Equality(System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);
            static /*0xea4ae0*/ bool op_Inequality(System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);
            /*0x534220*/ PropertyInfo();
            /*0x6bbaf0*/ System.Reflection.MemberTypes get_MemberType();
            /*0x1803b0*/ System.Type get_PropertyType();
            /*0x1803b0*/ System.Reflection.ParameterInfo[] GetIndexParameters();
            /*0x180980*/ System.Reflection.PropertyAttributes get_Attributes();
            /*0xed0f50*/ bool get_IsSpecialName();
            /*0x17cb40*/ bool get_CanRead();
            /*0x17cb40*/ bool get_CanWrite();
            /*0xed0f30*/ System.Reflection.MethodInfo get_GetMethod();
            /*0xed0e20*/ System.Reflection.MethodInfo GetGetMethod();
            System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
            /*0xed0e40*/ System.Reflection.MethodInfo GetSetMethod();
            System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
            /*0xed0e60*/ object GetValue(object obj);
            /*0xed0e80*/ object GetValue(object obj, object[] index);
            object GetValue(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0xed0ec0*/ void SetValue(object obj, object value);
            /*0xed0ef0*/ void SetValue(object obj, object value, object[] index);
            void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0xed0e10*/ bool Equals(object obj);
            /*0xc44ca0*/ int GetHashCode();
        }

        class ReflectionTypeLoadException : System.SystemException, System.Runtime.Serialization.ISerializable
        {
            /*0x90*/ System.Type[] <Types>k__BackingField;
            /*0x98*/ System.Exception[] <LoaderExceptions>k__BackingField;

            /*0xed1350*/ ReflectionTypeLoadException(System.Type[] classes, System.Exception[] exceptions);
            /*0xed1210*/ ReflectionTypeLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xed10e0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x7378b0*/ System.Type[] get_Types();
            /*0x9c7a50*/ System.Exception[] get_LoaderExceptions();
            /*0xed13c0*/ string get_Message();
            /*0xed1200*/ string ToString();
            /*0xed0f80*/ string CreateString(bool isMessage);
        }

        class SignatureArrayType : System.Reflection.SignatureHasElementType
        {
            /*0x20*/ int _rank;
            /*0x24*/ bool _isMultiDim;

            /*0xed9060*/ SignatureArrayType(System.Reflection.SignatureType elementType, int rank, bool isMultiDim);
            /*0x3ce290*/ bool IsArrayImpl();
            /*0x348b00*/ bool IsByRefImpl();
            /*0x348b00*/ bool IsPointerImpl();
            /*0xed90f0*/ bool get_IsSZArray();
            /*0xed9100*/ bool get_IsVariableBoundArray();
            /*0x3e3af0*/ int GetArrayRank();
            /*0xed9110*/ string get_Suffix();
        }

        class SignatureByRefType : System.Reflection.SignatureHasElementType
        {
            /*0xed9210*/ SignatureByRefType(System.Reflection.SignatureType elementType);
            /*0x348b00*/ bool IsArrayImpl();
            /*0x3ce290*/ bool IsByRefImpl();
            /*0x348b00*/ bool IsPointerImpl();
            /*0x348b00*/ bool get_IsSZArray();
            /*0x348b00*/ bool get_IsVariableBoundArray();
            /*0xed91c0*/ int GetArrayRank();
            /*0xed9280*/ string get_Suffix();
        }

        class SignatureConstructedGenericType : System.Reflection.SignatureType
        {
            /*0x18*/ System.Type _genericTypeDefinition;
            /*0x20*/ System.Type[] _genericTypeArguments;

            /*0xed9480*/ SignatureConstructedGenericType(System.Type genericTypeDefinition, System.Type[] typeArguments);
            /*0x348b00*/ bool get_IsGenericTypeDefinition();
            /*0x348b00*/ bool HasElementTypeImpl();
            /*0x348b00*/ bool IsArrayImpl();
            /*0x348b00*/ bool IsByRefImpl();
            /*0xed9860*/ bool get_IsByRefLike();
            /*0x348b00*/ bool IsPointerImpl();
            /*0x348b00*/ bool get_IsSZArray();
            /*0x348b00*/ bool get_IsVariableBoundArray();
            /*0x3ce290*/ bool get_IsConstructedGenericType();
            /*0x348b00*/ bool get_IsGenericParameter();
            /*0x348b00*/ bool get_IsGenericMethodParameter();
            /*0xed96f0*/ bool get_ContainsGenericParameters();
            /*0x388e90*/ System.Reflection.SignatureType get_ElementType();
            /*0xed92b0*/ int GetArrayRank();
            /*0x32f410*/ System.Type GetGenericTypeDefinition();
            /*0xed9300*/ System.Type[] GetGenericArguments();
            /*0xed97e0*/ System.Type[] get_GenericTypeArguments();
            /*0xed9790*/ int get_GenericParameterPosition();
            /*0xed9890*/ string get_Name();
            /*0xed98c0*/ string get_Namespace();
            /*0xed9320*/ string ToString();
        }

        class SignatureHasElementType : System.Reflection.SignatureType
        {
            /*0x18*/ System.Reflection.SignatureType _elementType;

            /*0xed9210*/ SignatureHasElementType(System.Reflection.SignatureType elementType);
            /*0x348b00*/ bool get_IsGenericTypeDefinition();
            /*0x3ce290*/ bool HasElementTypeImpl();
            /*0x17cb40*/ bool IsArrayImpl();
            /*0x17cb40*/ bool IsByRefImpl();
            /*0x348b00*/ bool get_IsByRefLike();
            /*0x17cb40*/ bool IsPointerImpl();
            /*0x17cb40*/ bool get_IsSZArray();
            /*0x17cb40*/ bool get_IsVariableBoundArray();
            /*0x348b00*/ bool get_IsConstructedGenericType();
            /*0x348b00*/ bool get_IsGenericParameter();
            /*0x348b00*/ bool get_IsGenericMethodParameter();
            /*0xed99e0*/ bool get_ContainsGenericParameters();
            /*0x32f410*/ System.Reflection.SignatureType get_ElementType();
            /*0x180980*/ int GetArrayRank();
            /*0xed9920*/ System.Type GetGenericTypeDefinition();
            /*0xed98f0*/ System.Type[] GetGenericArguments();
            /*0xed9a60*/ System.Type[] get_GenericTypeArguments();
            /*0xed9a10*/ int get_GenericParameterPosition();
            /*0xed9a90*/ string get_Name();
            /*0xed98c0*/ string get_Namespace();
            /*0xed9970*/ string ToString();
            /*0x1803b0*/ string get_Suffix();
        }

        class SignaturePointerType : System.Reflection.SignatureHasElementType
        {
            /*0xed9210*/ SignaturePointerType(System.Reflection.SignatureType elementType);
            /*0x348b00*/ bool IsArrayImpl();
            /*0x348b00*/ bool IsByRefImpl();
            /*0x3ce290*/ bool IsPointerImpl();
            /*0x348b00*/ bool get_IsSZArray();
            /*0x348b00*/ bool get_IsVariableBoundArray();
            /*0xed9b00*/ int GetArrayRank();
            /*0xed9b50*/ string get_Suffix();
        }

        class SignatureType : System.Type
        {
            /*0xedb3a0*/ SignatureType();
            /*0x3ce290*/ bool get_IsSignatureType();
            /*0x17cb40*/ bool HasElementTypeImpl();
            /*0x17cb40*/ bool IsArrayImpl();
            /*0x17cb40*/ bool get_IsSZArray();
            /*0x17cb40*/ bool get_IsVariableBoundArray();
            /*0x17cb40*/ bool IsByRefImpl();
            /*0x17cb40*/ bool get_IsByRefLike();
            /*0x17cb40*/ bool IsPointerImpl();
            /*0xedb5d0*/ bool get_IsGenericType();
            /*0x17cb40*/ bool get_IsGenericTypeDefinition();
            /*0x17cb40*/ bool get_IsConstructedGenericType();
            /*0x17cb40*/ bool get_IsGenericParameter();
            /*0x17cb40*/ bool get_IsGenericMethodParameter();
            /*0x17cb40*/ bool get_ContainsGenericParameters();
            /*0x6d5de0*/ System.Reflection.MemberTypes get_MemberType();
            /*0xedb0f0*/ System.Type MakeArrayType();
            /*0xedb160*/ System.Type MakeArrayType(int rank);
            /*0xedb210*/ System.Type MakeByRefType();
            /*0xedb300*/ System.Type MakePointerType();
            /*0xedb2b0*/ System.Type MakeGenericType(System.Type[] typeArguments);
            /*0xeda770*/ System.Type GetElementType();
            /*0x180980*/ int GetArrayRank();
            /*0x1803b0*/ System.Type GetGenericTypeDefinition();
            /*0x1803b0*/ System.Type[] get_GenericTypeArguments();
            /*0x1803b0*/ System.Type[] GetGenericArguments();
            /*0x180980*/ int get_GenericParameterPosition();
            /*0x1803b0*/ System.Reflection.SignatureType get_ElementType();
            /*0x621ca0*/ System.Type get_UnderlyingSystemType();
            /*0x1803b0*/ string get_Name();
            /*0x1803b0*/ string get_Namespace();
            /*0x388e90*/ string get_FullName();
            /*0x388e90*/ string get_AssemblyQualifiedName();
            /*0x1803b0*/ string ToString();
            /*0xedb3f0*/ System.Reflection.Assembly get_Assembly();
            /*0xedb6c0*/ System.Reflection.Module get_Module();
            /*0xedb710*/ System.Type get_ReflectedType();
            /*0xedb440*/ System.Type get_BaseType();
            /*0xedaa10*/ System.Type[] GetInterfaces();
            /*0xedad80*/ bool IsAssignableFrom(System.Type c);
            /*0xedb670*/ int get_MetadataToken();
            /*0xedb4e0*/ System.Type get_DeclaringType();
            /*0xedb490*/ System.Reflection.MethodBase get_DeclaringMethod();
            /*0xeda9c0*/ System.Type[] GetGenericParameterConstraints();
            /*0xedb530*/ System.Reflection.GenericParameterAttributes get_GenericParameterAttributes();
            /*0xedaec0*/ bool IsEnumDefined(object value);
            /*0xeda790*/ string GetEnumName(object value);
            /*0xeda7e0*/ string[] GetEnumNames();
            /*0xeda830*/ System.Type GetEnumUnderlyingType();
            /*0xeda880*/ System.Array GetEnumValues();
            /*0xedace0*/ System.TypeCode GetTypeCodeImpl();
            /*0xeda5e0*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
            /*0xeda680*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
            /*0xeda8d0*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
            /*0xeda920*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
            /*0xeda970*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
            /*0xedab00*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
            /*0xedaba0*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
            /*0xedabf0*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
            /*0xedac40*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
            /*0xedad30*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
            /*0xedab50*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0xedac90*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0xedaab0*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.BindingFlags bindingAttr);
            /*0xedaa60*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
            /*0xeda6d0*/ object[] GetCustomAttributes(bool inherit);
            /*0xeda720*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0xedae70*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0xeda630*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0xedadd0*/ bool IsCOMObjectImpl();
            /*0xedb000*/ bool IsPrimitiveImpl();
            /*0xedae20*/ bool IsContextfulImpl();
            /*0xedb580*/ bool get_IsEnum();
            /*0xedaf10*/ bool IsEquivalentTo(System.Type other);
            /*0xedaf60*/ bool IsInstanceOfType(object o);
            /*0xedafb0*/ bool IsMarshalByRefImpl();
            /*0xedb620*/ bool get_IsSerializable();
            /*0xedb050*/ bool IsSubclassOf(System.Type c);
            /*0xedb0a0*/ bool IsValueTypeImpl();
            /*0xedb760*/ System.RuntimeTypeHandle get_TypeHandle();
        }

        class SignatureTypeExtensions
        {
            static /*0xed9fa0*/ bool MatchesParameterTypeExactly(System.Type pattern, System.Reflection.ParameterInfo parameter);
            static /*0xed9b80*/ bool MatchesExactly(System.Reflection.SignatureType pattern, System.Type actual);
            static /*0xeda160*/ System.Type TryResolveAgainstGenericMethod(System.Reflection.SignatureType signatureType, System.Reflection.MethodInfo genericMethod);
            static /*0xeda1a0*/ System.Type TryResolve(System.Reflection.SignatureType signatureType, System.Type[] genericMethodParameters);
            static /*0xeda0a0*/ System.Type TryMakeArrayType(System.Type type);
            static /*0xeda070*/ System.Type TryMakeArrayType(System.Type type, int rank);
            static /*0xeda0d0*/ System.Type TryMakeByRefType(System.Type type);
            static /*0xeda130*/ System.Type TryMakePointerType(System.Type type);
            static /*0xeda100*/ System.Type TryMakeGenericType(System.Type type, System.Type[] instantiation);
        }

        class TargetException : System.ApplicationException
        {
            /*0xedbb30*/ TargetException();
            /*0xedbb60*/ TargetException(string message);
            /*0xedbb10*/ TargetException(string message, System.Exception inner);
            /*0xea7150*/ TargetException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class TargetInvocationException : System.ApplicationException
        {
            /*0xedbb90*/ TargetInvocationException(System.Exception inner);
            /*0xedbbf0*/ TargetInvocationException(string message, System.Exception inner);
            /*0xea7150*/ TargetInvocationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class TargetParameterCountException : System.ApplicationException
        {
            /*0xedbc30*/ TargetParameterCountException();
            /*0xedbc10*/ TargetParameterCountException(string message);
            /*0xea7150*/ TargetParameterCountException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum TypeAttributes
        {
            VisibilityMask = 7,
            NotPublic = 0,
            Public = 1,
            NestedPublic = 2,
            NestedPrivate = 3,
            NestedFamily = 4,
            NestedAssembly = 5,
            NestedFamANDAssem = 6,
            NestedFamORAssem = 7,
            LayoutMask = 24,
            AutoLayout = 0,
            SequentialLayout = 8,
            ExplicitLayout = 16,
            ClassSemanticsMask = 32,
            Class = 0,
            Interface = 32,
            Abstract = 128,
            Sealed = 256,
            SpecialName = 1024,
            Import = 4096,
            Serializable = 8192,
            WindowsRuntime = 16384,
            StringFormatMask = 196608,
            AnsiClass = 0,
            UnicodeClass = 65536,
            AutoClass = 131072,
            CustomFormatClass = 196608,
            CustomFormatMask = 12582912,
            BeforeFieldInit = 1048576,
            RTSpecialName = 2048,
            HasSecurity = 262144,
            ReservedMask = 264192,
        }

        class TypeDelegator : System.Reflection.TypeInfo
        {
            /*0x18*/ System.Type typeImpl;

            /*0xedc9c0*/ TypeDelegator(System.Type delegatingType);
            /*0xedcc30*/ int get_MetadataToken();
            /*0xedc890*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
            /*0xedcc60*/ System.Reflection.Module get_Module();
            /*0xedcae0*/ System.Reflection.Assembly get_Assembly();
            /*0xedcc90*/ System.RuntimeTypeHandle get_TypeHandle();
            /*0xed9890*/ string get_Name();
            /*0xedcb40*/ string get_FullName();
            /*0xed98c0*/ string get_Namespace();
            /*0xedcab0*/ string get_AssemblyQualifiedName();
            /*0xedcb10*/ System.Type get_BaseType();
            /*0xedc4a0*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0xedc4d0*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
            /*0xedc6b0*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0xedc6f0*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
            /*0xedc5c0*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
            /*0xedc5f0*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
            /*0xedc620*/ System.Type[] GetInterfaces();
            /*0xedc590*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
            /*0xedc780*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            /*0xedc750*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
            /*0xedc720*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
            /*0xedc650*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
            /*0xedc680*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
            /*0xedc480*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
            /*0xedcc00*/ bool get_IsSZArray();
            /*0xedc8d0*/ bool IsArrayImpl();
            /*0xedc980*/ bool IsPrimitiveImpl();
            /*0xedc8f0*/ bool IsByRefImpl();
            /*0xedcbd0*/ bool get_IsGenericMethodParameter();
            /*0xedc960*/ bool IsPointerImpl();
            /*0xedc9a0*/ bool IsValueTypeImpl();
            /*0xedc910*/ bool IsCOMObjectImpl();
            /*0xed9860*/ bool get_IsByRefLike();
            /*0xedcba0*/ bool get_IsConstructedGenericType();
            /*0xedcb70*/ bool get_IsCollectible();
            /*0xedc560*/ System.Type GetElementType();
            /*0xedc870*/ bool HasElementTypeImpl();
            /*0xedccc0*/ System.Type get_UnderlyingSystemType();
            /*0xedc530*/ object[] GetCustomAttributes(bool inherit);
            /*0xedc500*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0xedc930*/ bool IsDefined(System.Type attributeType, bool inherit);
        }

        class TypeFilter : System.MulticastDelegate
        {
            /*0x9deed0*/ TypeFilter(object object, nint method);
            /*0x722200*/ bool Invoke(System.Type m, object filterCriteria);
        }

        class TypeInfo : System.Type, System.Reflection.IReflectableType
        {
            static System.Reflection.BindingFlags DeclaredOnlyLookup = 62;

            /*0xedccf0*/ TypeInfo();
            /*0x621ca0*/ System.Reflection.TypeInfo System.Reflection.IReflectableType.GetTypeInfo();
            /*0xedcd40*/ System.Collections.Generic.IEnumerable<System.Type> get_ImplementedInterfaces();
        }

        struct CustomAttributeNamedArgument
        {
            /*0x10*/ System.Reflection.CustomAttributeTypedArgument <TypedValue>k__BackingField;
            /*0x20*/ bool <IsField>k__BackingField;
            /*0x28*/ string <MemberName>k__BackingField;
            /*0x30*/ System.Type _attributeType;
            /*0x38*/ System.Reflection.MemberInfo _lazyMemberInfo;

            static /*0xec52d0*/ bool op_Equality(System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right);
            static /*0xec5390*/ bool op_Inequality(System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right);
            /*0xec4d10*/ CustomAttributeNamedArgument(System.Type attributeType, string memberName, bool isField, System.Reflection.CustomAttributeTypedArgument typedValue);
            /*0xec4d80*/ CustomAttributeNamedArgument(System.Reflection.MemberInfo memberInfo, object value);
            /*0xec5050*/ CustomAttributeNamedArgument(System.Reflection.MemberInfo memberInfo, System.Reflection.CustomAttributeTypedArgument typedArgument);
            /*0x6bba70*/ System.Reflection.CustomAttributeTypedArgument get_TypedValue();
            /*0x793eb0*/ bool get_IsField();
            /*0x32f410*/ string get_MemberName();
            /*0xec51c0*/ System.Reflection.MemberInfo get_MemberInfo();
            /*0xec4970*/ bool Equals(object obj);
            /*0xec49e0*/ int GetHashCode();
            /*0xec4a40*/ string ToString();
        }

        struct CustomAttributeTypedArgument
        {
            /*0x10*/ System.Type <ArgumentType>k__BackingField;
            /*0x18*/ object <Value>k__BackingField;

            static /*0xec6040*/ bool op_Equality(System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);
            static /*0xec60d0*/ bool op_Inequality(System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);
            static /*0xec5450*/ object CanonicalizeValue(object value);
            /*0xec5fa0*/ CustomAttributeTypedArgument(object value);
            /*0xec5cb0*/ CustomAttributeTypedArgument(System.Type argumentType, object value);
            /*0x6937d0*/ System.Type get_ArgumentType();
            /*0xa5a7f0*/ object get_Value();
            /*0xec5500*/ bool Equals(object obj);
            /*0xec5560*/ int GetHashCode();
            /*0xec5ca0*/ string ToString();
            /*0xec55b0*/ string ToString(bool typed);
        }

        class MissingMetadataException : System.TypeAccessException
        {
            /*0xed0830*/ MissingMetadataException();
        }

        class CustomAttributeExtensions
        {
            static /*0xec48f0*/ System.Attribute GetCustomAttribute(System.Reflection.Assembly element, System.Type attributeType);
            static /*0xec4900*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType);
            static /*0x2a5510*/ T GetCustomAttribute<T>(System.Reflection.Assembly element);
            static /*0x2a5510*/ T GetCustomAttribute<T>(System.Reflection.MemberInfo element);
            static /*0xec4910*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
            static /*0x2a5510*/ T GetCustomAttribute<T>(System.Reflection.MemberInfo element, bool inherit);
            static /*0xec4930*/ System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(System.Reflection.Assembly element);
            static /*0xec4920*/ System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(System.Reflection.MemberInfo element);
            static /*0xec4950*/ System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(System.Reflection.Assembly element, System.Type attributeType);
            static /*0xec4940*/ System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(System.Reflection.MemberInfo element, System.Type attributeType);
            static /*0x17e030*/ System.Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(System.Reflection.MemberInfo element);
            static /*0xec4960*/ bool IsDefined(System.Reflection.MemberInfo element, System.Type attributeType);
        }

        enum CorElementType
        {
            End = 0,
            Void = 1,
            Boolean = 2,
            Char = 3,
            I1 = 4,
            U1 = 5,
            I2 = 6,
            U2 = 7,
            I4 = 8,
            U4 = 9,
            I8 = 10,
            U8 = 11,
            R4 = 12,
            R8 = 13,
            String = 14,
            Ptr = 15,
            ByRef = 16,
            ValueType = 17,
            Class = 18,
            Var = 19,
            Array = 20,
            GenericInst = 21,
            TypedByRef = 22,
            I = 24,
            U = 25,
            FnPtr = 27,
            Object = 28,
            SzArray = 29,
            MVar = 30,
            CModReqd = 31,
            CModOpt = 32,
            Internal = 33,
            Max = 34,
            Modifier = 64,
            Sentinel = 65,
            Pinned = 69,
            ELEMENT_TYPE_END = 0,
            ELEMENT_TYPE_VOID = 1,
            ELEMENT_TYPE_BOOLEAN = 2,
            ELEMENT_TYPE_CHAR = 3,
            ELEMENT_TYPE_I1 = 4,
            ELEMENT_TYPE_U1 = 5,
            ELEMENT_TYPE_I2 = 6,
            ELEMENT_TYPE_U2 = 7,
            ELEMENT_TYPE_I4 = 8,
            ELEMENT_TYPE_U4 = 9,
            ELEMENT_TYPE_I8 = 10,
            ELEMENT_TYPE_U8 = 11,
            ELEMENT_TYPE_R4 = 12,
            ELEMENT_TYPE_R8 = 13,
            ELEMENT_TYPE_STRING = 14,
            ELEMENT_TYPE_PTR = 15,
            ELEMENT_TYPE_BYREF = 16,
            ELEMENT_TYPE_VALUETYPE = 17,
            ELEMENT_TYPE_CLASS = 18,
            ELEMENT_TYPE_VAR = 19,
            ELEMENT_TYPE_ARRAY = 20,
            ELEMENT_TYPE_GENERICINST = 21,
            ELEMENT_TYPE_TYPEDBYREF = 22,
            ELEMENT_TYPE_I = 24,
            ELEMENT_TYPE_U = 25,
            ELEMENT_TYPE_FNPTR = 27,
            ELEMENT_TYPE_OBJECT = 28,
            ELEMENT_TYPE_SZARRAY = 29,
            ELEMENT_TYPE_MVAR = 30,
            ELEMENT_TYPE_CMOD_REQD = 31,
            ELEMENT_TYPE_CMOD_OPT = 32,
            ELEMENT_TYPE_INTERNAL = 33,
            ELEMENT_TYPE_MAX = 34,
            ELEMENT_TYPE_MODIFIER = 64,
            ELEMENT_TYPE_SENTINEL = 65,
            ELEMENT_TYPE_PINNED = 69,
        }

        enum PInvokeAttributes
        {
            NoMangle = 1,
            CharSetMask = 6,
            CharSetNotSpec = 0,
            CharSetAnsi = 2,
            CharSetUnicode = 4,
            CharSetAuto = 6,
            BestFitUseAssem = 0,
            BestFitEnabled = 16,
            BestFitDisabled = 32,
            BestFitMask = 48,
            ThrowOnUnmappableCharUseAssem = 0,
            ThrowOnUnmappableCharEnabled = 4096,
            ThrowOnUnmappableCharDisabled = 8192,
            ThrowOnUnmappableCharMask = 12288,
            SupportsLastError = 64,
            CallConvMask = 1792,
            CallConvWinapi = 256,
            CallConvCdecl = 512,
            CallConvStdcall = 768,
            CallConvThiscall = 1024,
            CallConvFastcall = 1280,
            MaxValue = 65535,
        }

        class MemberInfoSerializationHolder : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
        {
            /*0x10*/ string m_memberName;
            /*0x18*/ System.RuntimeType m_reflectedType;
            /*0x20*/ string m_signature;
            /*0x28*/ string m_signature2;
            /*0x30*/ System.Reflection.MemberTypes m_memberType;
            /*0x38*/ System.Runtime.Serialization.SerializationInfo m_info;

            static /*0xed0150*/ void GetSerializationInfo(System.Runtime.Serialization.SerializationInfo info, string name, System.RuntimeType reflectedClass, string signature, System.Reflection.MemberTypes type);
            static /*0xecfe60*/ void GetSerializationInfo(System.Runtime.Serialization.SerializationInfo info, string name, System.RuntimeType reflectedClass, string signature, string signature2, System.Reflection.MemberTypes type, System.Type[] genericArguments);
            /*0xed0180*/ MemberInfoSerializationHolder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xecf0d0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xecf130*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
        }

        class Assembly : System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Assembly
        {
            static /*0xebce30*/ System.Reflection.Assembly GetAssembly(System.Type type);
            static /*0xebd260*/ System.Reflection.Assembly Load(string assemblyString);
            static /*0xebd290*/ System.Reflection.Assembly ReflectionOnlyLoad(string assemblyString);
            static /*0xebd3f0*/ System.Reflection.Assembly load_with_partial_name(string name, System.Security.Policy.Evidence e);
            static /*0xebd200*/ System.Reflection.Assembly LoadWithPartialName(string partialName, System.Security.Policy.Evidence securityEvidence);
            static /*0xebd170*/ System.Reflection.Assembly LoadWithPartialName(string partialName, System.Security.Policy.Evidence securityEvidence, bool oldBehavior);
            static /*0xebcf40*/ System.Reflection.Assembly GetExecutingAssembly();
            static /*0xebcef0*/ System.Reflection.Assembly GetCallingAssembly();
            static /*0xebcdd0*/ System.Exception CreateNIE();
            static /*0xebd400*/ bool op_Equality(System.Reflection.Assembly left, System.Reflection.Assembly right);
            static /*0xebd460*/ bool op_Inequality(System.Reflection.Assembly left, System.Reflection.Assembly right);
            /*0x32f970*/ Assembly();
            /*0xebd2f0*/ string get_CodeBase();
            /*0xebd330*/ string get_FullName();
            /*0xebd3b0*/ nint get_MonoAssembly();
            /*0xebd370*/ string get_Location();
            /*0xebd070*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xebd130*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0xebcf00*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0xebd110*/ System.Type[] GetTypes(bool exportedOnly);
            /*0x3f7c80*/ System.Type[] GetTypes();
            /*0xebd0b0*/ System.Type GetType(string name);
            /*0xebd120*/ System.Type InternalGetType(System.Reflection.Module module, string name, bool throwOnError, bool ignoreCase);
            /*0xebd010*/ System.Reflection.AssemblyName GetName(bool copiedName);
            /*0xebd050*/ System.Reflection.AssemblyName GetName();
            /*0xebd2e0*/ string ToString();
            /*0xebcfa0*/ System.Reflection.Module[] GetModulesInternal();
            /*0xea40d0*/ int GetHashCode();
            /*0xea40c0*/ bool Equals(object o);
            /*0x3ce290*/ bool get_IsFullyTrusted();
            /*0xebd0e0*/ System.Type GetType(string name, bool throwOnError, bool ignoreCase);
            /*0xebcf70*/ System.Reflection.Module GetModule(string name);
            /*0xebcfe0*/ System.Reflection.Module[] GetModules(bool getResourceModules);

            class ResolveEventHolder
            {
                /*0x32f970*/ ResolveEventHolder();
            }
        }

        class AssemblyName : System.ICloneable, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.InteropServices._AssemblyName
        {
            /*0x10*/ string name;
            /*0x18*/ string codebase;
            /*0x20*/ int major;
            /*0x24*/ int minor;
            /*0x28*/ int build;
            /*0x2c*/ int revision;
            /*0x30*/ System.Globalization.CultureInfo cultureinfo;
            /*0x38*/ System.Reflection.AssemblyNameFlags flags;
            /*0x3c*/ System.Configuration.Assemblies.AssemblyHashAlgorithm hashalg;
            /*0x40*/ System.Reflection.StrongNameKeyPair keypair;
            /*0x48*/ byte[] publicKey;
            /*0x50*/ byte[] keyToken;
            /*0x58*/ System.Configuration.Assemblies.AssemblyVersionCompatibility versioncompat;
            /*0x60*/ System.Version version;
            /*0x68*/ System.Reflection.ProcessorArchitecture processor_architecture;
            /*0x6c*/ System.Reflection.AssemblyContentType contentType;

            static /*0xebc000*/ bool ParseAssemblyName(nint name, ref Mono.MonoAssemblyName aname, ref bool is_version_definited, ref bool is_token_defined);
            static /*0xebcd40*/ void get_public_token(byte* token, byte* pubkey, int len);
            static /*0xebbac0*/ Mono.MonoAssemblyName* GetNativeName(nint assembly_ptr);
            static /*0xebb6f0*/ System.Reflection.AssemblyName Create(System.Reflection.Assembly assembly, bool fillCodebase);
            /*0xebc290*/ AssemblyName();
            /*0xebc040*/ AssemblyName(string assemblyName);
            /*0xebc2b0*/ AssemblyName(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc);
            /*0x73d3e0*/ string get_Name();
            /*0x997630*/ System.Globalization.CultureInfo get_CultureInfo();
            /*0xeab1d0*/ System.Reflection.AssemblyNameFlags get_Flags();
            /*0xebc870*/ string get_FullName();
            /*0xe643b0*/ System.Version get_Version();
            /*0xebcd50*/ void set_Version(System.Version value);
            /*0xebc010*/ string ToString();
            /*0xebbda0*/ byte[] GetPublicKeyToken();
            /*0xebcc80*/ bool get_IsPublicKeyValid();
            /*0xebbe90*/ byte[] InternalGetPublicKeyToken();
            /*0xebb650*/ byte[] ComputePublicKeyToken();
            /*0xebbad0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xebb550*/ object Clone();
            /*0xebbf80*/ void OnDeserialization(object sender);
            /*0xebc840*/ string get_CultureName();
            /*0xebb7e0*/ void FillName(Mono.MonoAssemblyName* native, string codeBase, bool addVersion, bool addPublickey, bool defaultToken, bool assemblyRef);
        }

        class CustomAttributeData
        {
            /*0x10*/ System.Reflection.ConstructorInfo ctorInfo;
            /*0x18*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> ctorArgs;
            /*0x20*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> namedArgs;
            /*0x28*/ System.Reflection.CustomAttributeData.LazyCAttrData lazyData;

            static /*0xec3fd0*/ void ResolveArgumentsInternal(System.Reflection.ConstructorInfo ctor, System.Reflection.Assembly assembly, nint data, uint data_length, ref object[] ctorArgs, ref object[] namedArgs);
            static /*0xec3b00*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.Assembly target);
            static /*0xec3ab0*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.MemberInfo target);
            static /*0xec39c0*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesInternal(System.RuntimeType target);
            static /*0xec3a10*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.Module target);
            static /*0xec3a60*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.ParameterInfo target);
            static /*0x17e030*/ T[] UnboxValues<T>(object[] values);
            /*0x32f970*/ CustomAttributeData();
            /*0xec4730*/ CustomAttributeData(System.Reflection.ConstructorInfo ctorInfo, System.Reflection.Assembly assembly, nint data, uint data_length);
            /*0xec4800*/ CustomAttributeData(System.Reflection.ConstructorInfo ctorInfo);
            /*0xce5250*/ CustomAttributeData(System.Reflection.ConstructorInfo ctorInfo, System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> ctorArgs, System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> namedArgs);
            /*0xec3fe0*/ void ResolveArguments();
            /*0x73d3e0*/ System.Reflection.ConstructorInfo get_Constructor();
            /*0xec48b0*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> get_ConstructorArguments();
            /*0xec48d0*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> get_NamedArguments();
            /*0xe9ad70*/ System.Type get_AttributeType();
            /*0xec4130*/ string ToString();
            /*0xec3490*/ bool Equals(object obj);
            /*0xec3b50*/ int GetHashCode();

            class LazyCAttrData
            {
                /*0x10*/ System.Reflection.Assembly assembly;
                /*0x18*/ nint data;
                /*0x20*/ uint data_length;

                /*0x32f970*/ LazyCAttrData();
            }
        }

        class ExceptionHandlingClause
        {
            /*0x10*/ System.Type catch_type;
            /*0x18*/ int filter_offset;
            /*0x1c*/ System.Reflection.ExceptionHandlingClauseOptions flags;
            /*0x20*/ int try_offset;
            /*0x24*/ int try_length;
            /*0x28*/ int handler_offset;
            /*0x2c*/ int handler_length;

            /*0x32f970*/ ExceptionHandlingClause();
            /*0xece410*/ string ToString();
        }

        class LocalVariableInfo
        {
            /*0x10*/ System.Type type;
            /*0x18*/ bool is_pinned;
            /*0x1a*/ ushort position;

            /*0x32f970*/ LocalVariableInfo();
            /*0xecf030*/ string ToString();
        }

        class RuntimeAssembly : System.Reflection.Assembly
        {
            /*0x10*/ nint _mono_assembly;
            /*0x18*/ object _evidence;
            /*0x20*/ System.Reflection.Assembly.ResolveEventHolder resolve_event_holder;
            /*0x28*/ object _minimum;
            /*0x30*/ object _optional;
            /*0x38*/ object _refuse;
            /*0x40*/ object _granted;
            /*0x48*/ object _denied;
            /*0x50*/ bool fromByteArray;
            /*0x58*/ string assemblyName;

            static /*0xed1be0*/ System.Reflection.RuntimeAssembly LoadWithPartialNameInternal(string partialName, System.Security.Policy.Evidence securityEvidence, ref System.Threading.StackCrawlMark stackMark);
            static /*0xed1af0*/ System.Reflection.RuntimeAssembly LoadWithPartialNameInternal(System.Reflection.AssemblyName an, System.Security.Policy.Evidence securityEvidence, ref System.Threading.StackCrawlMark stackMark);
            static /*0xed14a0*/ byte[] GetAotId();
            static /*0xed14f0*/ string get_code_base(System.Reflection.Assembly a, bool escaped);
            static /*0xed1d70*/ string get_fullname(System.Reflection.Assembly a);
            static /*0xed1490*/ bool GetAotIdInternal(byte[] aotid);
            static /*0xed14f0*/ string GetCodeBase(System.Reflection.Assembly a, bool escaped);
            /*0xed1cf0*/ RuntimeAssembly();
            /*0xed1910*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xed1840*/ System.Reflection.AssemblyName GetName(bool copiedName);
            /*0xed19b0*/ System.Type GetType(string name, bool throwOnError, bool ignoreCase);
            /*0xed1580*/ System.Reflection.Module GetModule(string name);
            /*0xed1700*/ System.Reflection.Module[] GetModules(bool getResourceModules);
            /*0xed1dd0*/ string get_location();
            /*0xed1d60*/ string get_CodeBase();
            /*0xed1d70*/ string get_FullName();
            /*0x73d3e0*/ nint get_MonoAssembly();
            /*0xed1d80*/ string get_Location();
            /*0xed1570*/ nint GetManifestResourceInternal(string name, ref int size, ref System.Reflection.Module module);
            /*0xed1a80*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0xed1500*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0xed16f0*/ System.Reflection.Module[] GetModulesInternal();
            /*0xea40d0*/ int GetHashCode();
            /*0xed13d0*/ bool Equals(object o);
            /*0xed1ca0*/ string ToString();
        }

        struct MonoEventInfo
        {
            /*0x10*/ System.Type declaring_type;
            /*0x18*/ System.Type reflected_type;
            /*0x20*/ string name;
            /*0x28*/ System.Reflection.MethodInfo add_method;
            /*0x30*/ System.Reflection.MethodInfo remove_method;
            /*0x38*/ System.Reflection.MethodInfo raise_method;
            /*0x40*/ System.Reflection.EventAttributes attrs;
            /*0x48*/ System.Reflection.MethodInfo[] other_methods;
        }

        class RuntimeEventInfo : System.Reflection.EventInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x18*/ nint klass;
            /*0x20*/ nint handle;

            static /*0xed31f0*/ void get_event_info(System.Reflection.RuntimeEventInfo ev, ref System.Reflection.MonoEventInfo info);
            static /*0xed2d30*/ System.Reflection.MonoEventInfo GetEventInfo(System.Reflection.RuntimeEventInfo ev);
            static /*0xed2940*/ int get_metadata_token(System.Reflection.RuntimeEventInfo monoEvent);
            /*0x534220*/ RuntimeEventInfo();
            /*0xed2fa0*/ System.Reflection.Module get_Module();
            /*0xed2a60*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0xed2cb0*/ System.RuntimeType GetDeclaringTypeInternal();
            /*0xed3140*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0xed2fa0*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0xed2d70*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xed2a60*/ System.Reflection.BindingFlags GetBindingFlags();
            /*0xed29e0*/ System.Reflection.MethodInfo GetAddMethod(bool nonPublic);
            /*0xed2ea0*/ System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic);
            /*0xed2f20*/ System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic);
            /*0xed30e0*/ System.Type get_DeclaringType();
            /*0xed31c0*/ System.Type get_ReflectedType();
            /*0xed3110*/ string get_Name();
            /*0xed3040*/ string ToString();
            /*0xed2fd0*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0xed2c50*/ object[] GetCustomAttributes(bool inherit);
            /*0xed2be0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0xed2940*/ int get_MetadataToken();
        }

        class RtFieldInfo : System.Reflection.FieldInfo
        {
            /*0x534220*/ RtFieldInfo();
            /*0x1858d0*/ object UnsafeGetValue(object obj);
            void UnsafeSetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0x17aec0*/ void CheckConsistency(object target);
        }

        class RuntimeFieldInfo : System.Reflection.RtFieldInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint klass;
            /*0x18*/ System.RuntimeFieldHandle fhandle;
            /*0x20*/ string name;
            /*0x28*/ System.Type type;
            /*0x30*/ System.Reflection.FieldAttributes attrs;

            static /*0xed3ba0*/ void SetValueInternal(System.Reflection.FieldInfo fi, object obj, object value);
            static /*0xed2940*/ int get_metadata_token(System.Reflection.RuntimeFieldInfo monoField);
            /*0x534220*/ RuntimeFieldInfo();
            /*0x388e90*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0xed3740*/ System.Reflection.Module get_Module();
            /*0xed3530*/ System.RuntimeType GetDeclaringTypeInternal();
            /*0xed4000*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0xed3740*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0xed35c0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xed37d0*/ object UnsafeGetValue(object obj);
            /*0xed3200*/ void CheckConsistency(object target);
            /*0xed3f00*/ void UnsafeSetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0xed3a10*/ void SetValueDirect(System.TypedReference obj, object value);
            /*0xa79cc0*/ System.Reflection.FieldAttributes get_Attributes();
            /*0x32f410*/ System.RuntimeFieldHandle get_FieldHandle();
            /*0xed3a00*/ System.Type ResolveType();
            /*0xed3f80*/ System.Type get_FieldType();
            /*0xed3720*/ System.Type GetParentType(bool declaring);
            /*0xed4080*/ System.Type get_ReflectedType();
            /*0xed3f70*/ System.Type get_DeclaringType();
            /*0x61a260*/ string get_Name();
            /*0xed3990*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0xed3460*/ object[] GetCustomAttributes(bool inherit);
            /*0xed34c0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0xed35b0*/ int GetFieldOffset();
            /*0xed37d0*/ object GetValueInternal(object obj);
            /*0xed37e0*/ object GetValue(object obj);
            /*0xed3ea0*/ string ToString();
            /*0xed3bb0*/ void SetValue(object obj, object val, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0xed3730*/ object GetRawConstantValue();
            /*0xed33c0*/ void CheckGeneric();
            /*0xed2940*/ int get_MetadataToken();
        }

        struct MonoMethodInfo
        {
            /*0x10*/ System.Type parent;
            /*0x18*/ System.Type ret;
            /*0x20*/ System.Reflection.MethodAttributes attrs;
            /*0x24*/ System.Reflection.MethodImplAttributes iattrs;
            /*0x28*/ System.Reflection.CallingConventions callconv;

            static /*0xed0a40*/ void get_method_info(nint handle, ref System.Reflection.MonoMethodInfo info);
            static /*0xed0840*/ int get_method_attributes(nint handle);
            static /*0xed08e0*/ System.Reflection.MonoMethodInfo GetMethodInfo(nint handle);
            static /*0xed0880*/ System.Type GetDeclaringType(nint handle);
            static /*0xed0a10*/ System.Type GetReturnType(nint handle);
            static /*0xed0840*/ System.Reflection.MethodAttributes GetAttributes(nint handle);
            static /*0xed0850*/ System.Reflection.CallingConventions GetCallingConvention(nint handle);
            static /*0xed08b0*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags(nint handle);
            static /*0xed0910*/ System.Reflection.ParameterInfo[] get_parameter_info(nint handle, System.Reflection.MemberInfo member);
            static /*0xed0910*/ System.Reflection.ParameterInfo[] GetParametersInfo(nint handle, System.Reflection.MemberInfo member);
            static /*0xea6490*/ System.Runtime.InteropServices.MarshalAsAttribute get_retval_marshal(nint handle);
            static /*0xed0920*/ System.Reflection.ParameterInfo GetReturnParameterInfo(System.Reflection.RuntimeMethodInfo method);
        }

        class RuntimeMethodInfo : System.Reflection.MethodInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint mhandle;
            /*0x18*/ string name;
            /*0x20*/ System.Type reftype;

            static /*0xed54f0*/ System.Reflection.MethodBase GetMethodFromHandleNoGenericCheck(System.RuntimeMethodHandle handle);
            static /*0xed5500*/ System.Reflection.MethodBase GetMethodFromHandleNoGenericCheck(System.RuntimeMethodHandle handle, System.RuntimeTypeHandle reflectedType);
            static /*0xed54d0*/ System.Reflection.MethodBase GetMethodFromHandleInternalType(nint method_handle, nint type_handle);
            static /*0xed54e0*/ System.Reflection.MethodBase GetMethodFromHandleInternalType_native(nint method_handle, nint type_handle, bool genericCheck);
            static /*0xed6630*/ string get_name(System.Reflection.MethodBase method);
            static /*0xed6620*/ System.Reflection.RuntimeMethodInfo get_base_method(System.Reflection.RuntimeMethodInfo method, bool definition);
            static /*0xed2940*/ int get_metadata_token(System.Reflection.RuntimeMethodInfo method);
            static /*0xed4090*/ void ConvertValues(System.Reflection.Binder binder, object[] args, System.Reflection.ParameterInfo[] pinfo, System.Globalization.CultureInfo culture, System.Reflection.BindingFlags invokeAttr);
            static /*0x6bba80*/ int get_core_clr_security_level();
            /*0x534220*/ RuntimeMethodInfo();
            /*0x388e90*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0xed5b80*/ System.Reflection.Module get_Module();
            /*0xed6570*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0xed4450*/ string FormatNameAndSig(bool serialization);
            /*0xed4410*/ System.Delegate CreateDelegate(System.Type delegateType);
            /*0xed4430*/ System.Delegate CreateDelegate(System.Type delegateType, object target);
            /*0xed63d0*/ string ToString();
            /*0xed5b80*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0xed5510*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xed6330*/ string SerializationToString();
            /*0xed4760*/ System.Reflection.MethodInfo GetBaseDefinition();
            /*0xed4770*/ System.Reflection.MethodInfo GetBaseMethod();
            /*0xed0920*/ System.Reflection.ParameterInfo get_ReturnParameter();
            /*0xed65f0*/ System.Type get_ReturnType();
            /*0xed2940*/ int get_MetadataToken();
            /*0xed2110*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
            /*0xed5720*/ System.Reflection.ParameterInfo[] GetParameters();
            /*0xed22f0*/ System.Reflection.ParameterInfo[] GetParametersInternal();
            /*0xed56f0*/ int GetParametersCount();
            /*0xed5c10*/ object InternalInvoke(object obj, object[] parameters, ref System.Exception exc);
            /*0xed5c20*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x73d3e0*/ System.RuntimeMethodHandle get_MethodHandle();
            /*0xed2890*/ System.Reflection.MethodAttributes get_Attributes();
            /*0xed28a0*/ System.Reflection.CallingConventions get_CallingConvention();
            /*0x61a260*/ System.Type get_ReflectedType();
            /*0xed2910*/ System.Type get_DeclaringType();
            /*0xed2950*/ string get_Name();
            /*0xed5f10*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0xed47f0*/ object[] GetCustomAttributes(bool inherit);
            /*0xed4780*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0xed56e0*/ void GetPInvoke(ref System.Reflection.PInvokeAttributes flags, ref string entryPoint, ref string dllName);
            /*0xed59d0*/ object[] GetPseudoCustomAttributes();
            /*0xed57b0*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData();
            /*0xed4850*/ System.Reflection.CustomAttributeData GetDllImportAttributeData();
            /*0xed5f90*/ System.Reflection.MethodInfo MakeGenericMethod(System.Type[] methodInstantiation);
            /*0xed5f80*/ System.Reflection.MethodInfo MakeGenericMethod_impl(System.Type[] types);
            /*0xed5440*/ System.Type[] GetGenericArguments();
            /*0xed5450*/ System.Reflection.MethodInfo GetGenericMethodDefinition_impl();
            /*0xed5460*/ System.Reflection.MethodInfo GetGenericMethodDefinition();
            /*0xed6550*/ bool get_IsGenericMethodDefinition();
            /*0xed6560*/ bool get_IsGenericMethod();
            /*0xed6460*/ bool get_ContainsGenericParameters();
            /*0x3ce290*/ bool get_IsSecurityCritical();
        }

        class RuntimeConstructorInfo : System.Reflection.ConstructorInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint mhandle;
            /*0x18*/ string name;
            /*0x20*/ System.Type reftype;

            static /*0x6bba80*/ int get_core_clr_security_level();
            static /*0xed2940*/ int get_metadata_token(System.Reflection.RuntimeConstructorInfo method);
            /*0xed2840*/ RuntimeConstructorInfo();
            /*0xed2300*/ System.Reflection.Module get_Module();
            /*0xed2300*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x388e90*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0xed2960*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0xed2140*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xed27c0*/ string SerializationToString();
            /*0xed2670*/ void SerializationInvoke(object target, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xed2110*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
            /*0xed22f0*/ System.Reflection.ParameterInfo[] GetParameters();
            /*0xed22f0*/ System.Reflection.ParameterInfo[] GetParametersInternal();
            /*0xed22c0*/ int GetParametersCount();
            /*0xed2390*/ object InternalInvoke(object obj, object[] parameters, ref System.Exception exc);
            /*0xed24c0*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0xed1de0*/ object DoInvoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0xed23a0*/ object InternalInvoke(object obj, object[] parameters, bool wrapExceptions);
            /*0xed2490*/ object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x73d3e0*/ System.RuntimeMethodHandle get_MethodHandle();
            /*0xed2890*/ System.Reflection.MethodAttributes get_Attributes();
            /*0xed28a0*/ System.Reflection.CallingConventions get_CallingConvention();
            /*0xed28d0*/ bool get_ContainsGenericParameters();
            /*0x61a260*/ System.Type get_ReflectedType();
            /*0xed2910*/ System.Type get_DeclaringType();
            /*0xed2950*/ string get_Name();
            /*0xed2600*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0xed2040*/ object[] GetCustomAttributes(bool inherit);
            /*0xed20a0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0xed27e0*/ string ToString();
            /*0x3ce290*/ bool get_IsSecurityCritical();
            /*0xed2940*/ int get_MetadataToken();
        }

        class RuntimeModule : System.Reflection.Module
        {
            /*0x10*/ nint _impl;
            /*0x18*/ System.Reflection.Assembly assembly;
            /*0x20*/ string fqname;
            /*0x28*/ string name;
            /*0x30*/ string scopename;
            /*0x38*/ bool is_resource;
            /*0x3c*/ int token;

            static /*0xed66b0*/ void GetGuidInternal(nint module, byte[] guid);
            /*0xed6930*/ RuntimeModule();
            /*0x32f410*/ System.Reflection.Assembly get_Assembly();
            /*0x997630*/ string get_ScopeName();
            /*0xed6980*/ System.Guid get_ModuleVersionId();
            /*0xd180c0*/ bool IsResource();
            /*0xed6640*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0xed68c0*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0xed6740*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xed6850*/ System.Reflection.RuntimeAssembly GetRuntimeAssembly();
            /*0xed66c0*/ System.Guid GetModuleVersionId();
        }

        class RuntimeParameterInfo : System.Reflection.ParameterInfo
        {
            /*0x40*/ System.Runtime.InteropServices.MarshalAsAttribute marshalAs;

            static /*0xed69b0*/ void FormatParameters(System.Text.StringBuilder sb, System.Reflection.ParameterInfo[] p, System.Reflection.CallingConventions callingConvention, bool serialization);
            static /*0xed7640*/ System.Reflection.ParameterInfo New(System.Reflection.ParameterInfo pinfo, System.Reflection.MemberInfo member);
            static /*0xed77f0*/ System.Reflection.ParameterInfo New(System.Type type, System.Reflection.MemberInfo member, System.Runtime.InteropServices.MarshalAsAttribute marshalAs);
            /*0xed78b0*/ RuntimeParameterInfo(string name, System.Type type, int position, int attrs, object defaultValue, System.Reflection.MemberInfo member, System.Runtime.InteropServices.MarshalAsAttribute marshalAs);
            /*0xed79e0*/ RuntimeParameterInfo(System.Reflection.ParameterInfo pinfo, System.Reflection.MemberInfo member);
            /*0xed7950*/ RuntimeParameterInfo(System.Type type, System.Reflection.MemberInfo member, System.Runtime.InteropServices.MarshalAsAttribute marshalAs);
            /*0xed7b60*/ object get_DefaultValue();
            /*0xed6c00*/ object[] GetCustomAttributes(bool inherit);
            /*0xed6ba0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0xed6c50*/ object GetDefaultValueImpl(System.Reflection.ParameterInfo pinfo);
            /*0xed75d0*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0xed72f0*/ object[] GetPseudoCustomAttributes();
            /*0xed6d10*/ System.Reflection.CustomAttributeData[] GetPseudoCustomAttributesData();
        }

        struct MonoPropertyInfo
        {
            /*0x10*/ System.Type parent;
            /*0x18*/ System.Type declaring_type;
            /*0x20*/ string name;
            /*0x28*/ System.Reflection.MethodInfo get_method;
            /*0x30*/ System.Reflection.MethodInfo set_method;
            /*0x38*/ System.Reflection.PropertyAttributes attrs;
        }

        enum PInfo
        {
            Attributes = 1,
            GetMethod = 2,
            SetMethod = 4,
            ReflectedType = 8,
            DeclaringType = 16,
            Name = 32,
        }

        class RuntimePropertyInfo : System.Reflection.PropertyInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ nint klass;
            /*0x18*/ nint prop;
            /*0x20*/ System.Reflection.MonoPropertyInfo info;
            /*0x50*/ System.Reflection.PInfo cached;
            /*0x58*/ System.Reflection.RuntimePropertyInfo.GetterAdapter cached_getter;

            static /*0xed9040*/ void get_property_info(System.Reflection.RuntimePropertyInfo prop, ref System.Reflection.MonoPropertyInfo info, System.Reflection.PInfo req_info);
            static /*0x177800*/ object GetterAdapterFrame<T, R>(System.Reflection.RuntimePropertyInfo.Getter<T, R> getter, object obj);
            static /*0x177800*/ object StaticGetterAdapterFrame<R>(System.Reflection.RuntimePropertyInfo.StaticGetter<R> getter, object obj);
            static /*0xed2940*/ int get_metadata_token(System.Reflection.RuntimePropertyInfo monoProperty);
            static /*0xed9050*/ System.Reflection.PropertyInfo internal_from_handle_type(nint event_handle, nint type_handle);
            static /*0xed86f0*/ System.Reflection.PropertyInfo GetPropertyFromHandle(Mono.RuntimePropertyHandle handle, System.RuntimeTypeHandle reflectedType);
            /*0x534220*/ RuntimePropertyInfo();
            /*0x388e90*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0xed87c0*/ System.Reflection.Module get_Module();
            /*0xed8270*/ System.RuntimeType GetDeclaringTypeInternal();
            /*0xed8f80*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0xed87c0*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0xed8d70*/ string ToString();
            /*0xed7ed0*/ string FormatNameAndSig(bool serialization);
            /*0xed8580*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xed8b10*/ string SerializationToString();
            /*0xed7e90*/ void CachePropertyInfo(System.Reflection.PInfo flags);
            /*0xed8d80*/ System.Reflection.PropertyAttributes get_Attributes();
            /*0xed8dc0*/ bool get_CanRead();
            /*0xed8e00*/ bool get_CanWrite();
            /*0xed8ec0*/ System.Type get_PropertyType();
            /*0xed9000*/ System.Type get_ReflectedType();
            /*0xed8e40*/ System.Type get_DeclaringType();
            /*0xed8e80*/ string get_Name();
            /*0xed82f0*/ System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
            /*0xed8370*/ System.Reflection.ParameterInfo[] GetIndexParameters();
            /*0xed8850*/ System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
            /*0xed8ab0*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0xed81c0*/ object[] GetCustomAttributes(bool inherit);
            /*0xed8210*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0xed0e80*/ object GetValue(object obj, object[] index);
            /*0xed88d0*/ object GetValue(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0xed8b20*/ void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0xed2940*/ int get_MetadataToken();

            class GetterAdapter : System.MulticastDelegate
            {
                /*0x9dc850*/ GetterAdapter(object object, nint method);
                /*0x720980*/ object Invoke(object _this);
            }

            class Getter<T, R> : System.MulticastDelegate
            {
                Getter(object object, nint method);
                /*0x2a5510*/ R Invoke(T _this);
            }

            class StaticGetter<R> : System.MulticastDelegate
            {
                StaticGetter(object object, nint method);
                /*0x2a5510*/ R Invoke();
            }
        }

        class StrongNameKeyPair : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
        {
            /*0x10*/ byte[] _publicKey;
            /*0x18*/ string _keyPairContainer;
            /*0x20*/ bool _keyPairExported;
            /*0x28*/ byte[] _keyPairArray;

            /*0xedb8f0*/ StrongNameKeyPair(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xedb7b0*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x32d010*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        }

        namespace Emit
        {
            class AssemblyBuilder : System.Reflection.Assembly
            {
            }

            class ConstructorBuilder : System.Reflection.ConstructorInfo
            {
                /*0xec2cc0*/ System.Reflection.MethodAttributes get_Attributes();
                /*0xec2d00*/ System.Type get_DeclaringType();
                /*0xec2d80*/ string get_Name();
                /*0xec2bc0*/ System.Reflection.ParameterInfo[] GetParameters();
                /*0xec2b80*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
                /*0xec2d40*/ System.RuntimeMethodHandle get_MethodHandle();
                /*0xec2c40*/ object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0xec2c80*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0xec2b00*/ object[] GetCustomAttributes(bool inherit);
                /*0xec2b40*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0xec2dc0*/ System.Type get_ReflectedType();
                /*0xec2c00*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            }

            class DynamicMethod : System.Reflection.MethodInfo
            {
                /*0xecdad0*/ System.Reflection.MethodAttributes get_Attributes();
                /*0xecdb10*/ System.Type get_DeclaringType();
                /*0xecdb90*/ string get_Name();
                /*0xecda10*/ System.Reflection.ParameterInfo[] GetParameters();
                /*0xecdb50*/ System.RuntimeMethodHandle get_MethodHandle();
                /*0xecdbd0*/ System.Type get_ReflectedType();
                /*0xecd990*/ object[] GetCustomAttributes(bool inherit);
                /*0xecd950*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0xecd9d0*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
                /*0xecd910*/ System.Reflection.MethodInfo GetBaseDefinition();
                /*0xecda50*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0xecda90*/ bool IsDefined(System.Type attributeType, bool inherit);
            }

            class EnumBuilder : System.Reflection.TypeInfo
            {
                /*0xece250*/ System.Reflection.Assembly get_Assembly();
                /*0xece210*/ string get_AssemblyQualifiedName();
                /*0xece290*/ System.Type get_BaseType();
                /*0xece2d0*/ string get_FullName();
                /*0xece310*/ System.Reflection.Module get_Module();
                /*0xece350*/ string get_Name();
                /*0xece390*/ string get_Namespace();
                /*0xece3d0*/ System.Type get_UnderlyingSystemType();
                /*0xecdc10*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
                /*0xecdc50*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0xecdc90*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
                /*0xecdd10*/ object[] GetCustomAttributes(bool inherit);
                /*0xecdcd0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0xecdd50*/ System.Type GetElementType();
                /*0xecdd90*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
                /*0xecddd0*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
                /*0xecde10*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
                /*0xecde50*/ System.Type[] GetInterfaces();
                /*0xecde90*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
                /*0xecded0*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0xecdf10*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
                /*0xecdf50*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
                /*0xecdf90*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
                /*0xecdfd0*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0xece010*/ bool HasElementTypeImpl();
                /*0xece050*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
                /*0xece090*/ bool IsArrayImpl();
                /*0xece0d0*/ bool IsByRefImpl();
                /*0xece110*/ bool IsCOMObjectImpl();
                /*0xece150*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0xece190*/ bool IsPointerImpl();
                /*0xece1d0*/ bool IsPrimitiveImpl();
            }

            class EventBuilder
            {
            }

            class FieldBuilder : System.Reflection.FieldInfo
            {
                /*0xece730*/ System.Reflection.FieldAttributes get_Attributes();
                /*0xece730*/ System.Type get_DeclaringType();
                /*0xece730*/ System.RuntimeFieldHandle get_FieldHandle();
                /*0xece730*/ System.Type get_FieldType();
                /*0xece730*/ string get_Name();
                /*0xece730*/ System.Type get_ReflectedType();
                /*0xece730*/ object[] GetCustomAttributes(bool inherit);
                /*0xece730*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0xece730*/ object GetValue(object obj);
                /*0xece730*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0xece740*/ void SetValue(object obj, object val, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            }

            class GenericTypeParameterBuilder : System.Reflection.TypeInfo
            {
                /*0xecedc0*/ System.Reflection.Assembly get_Assembly();
                /*0xeced80*/ string get_AssemblyQualifiedName();
                /*0xecee00*/ System.Type get_BaseType();
                /*0xecee40*/ string get_FullName();
                /*0xecee80*/ System.Reflection.Module get_Module();
                /*0xeceec0*/ string get_Name();
                /*0xecef00*/ string get_Namespace();
                /*0xecef40*/ System.Type get_UnderlyingSystemType();
                /*0xece780*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
                /*0xece7c0*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0xece800*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
                /*0xece880*/ object[] GetCustomAttributes(bool inherit);
                /*0xece840*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0xece8c0*/ System.Type GetElementType();
                /*0xece900*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
                /*0xece940*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
                /*0xece980*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
                /*0xece9c0*/ System.Type[] GetInterfaces();
                /*0xecea00*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
                /*0xecea40*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0xecea80*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
                /*0xeceac0*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
                /*0xeceb00*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
                /*0xeceb40*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0xeceb80*/ bool HasElementTypeImpl();
                /*0xecebc0*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
                /*0xecec00*/ bool IsArrayImpl();
                /*0xecec40*/ bool IsByRefImpl();
                /*0xecec80*/ bool IsCOMObjectImpl();
                /*0xececc0*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0xeced00*/ bool IsPointerImpl();
                /*0xeced40*/ bool IsPrimitiveImpl();
            }

            class ILGenerator
            {
            }

            class LocalBuilder : System.Reflection.LocalVariableInfo
            {
                /*0x20*/ string name;
                /*0x28*/ System.Reflection.Emit.ILGenerator ilgen;
                /*0x30*/ int startOffset;
                /*0x34*/ int endOffset;
            }

            class MethodBuilder : System.Reflection.MethodInfo
            {
                /*0xed06f0*/ System.Reflection.MethodAttributes get_Attributes();
                /*0xed0730*/ System.Type get_DeclaringType();
                /*0xed0770*/ System.RuntimeMethodHandle get_MethodHandle();
                /*0xed07b0*/ string get_Name();
                /*0xed07f0*/ System.Type get_ReflectedType();
                /*0xed0530*/ System.Reflection.MethodInfo GetBaseDefinition();
                /*0xed0570*/ object[] GetCustomAttributes(bool inherit);
                /*0xed05b0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0xed05f0*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
                /*0xed0630*/ System.Reflection.ParameterInfo[] GetParameters();
                /*0xed0670*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0xed06b0*/ bool IsDefined(System.Type attributeType, bool inherit);
            }

            class ModuleBuilder : System.Reflection.Module
            {
            }

            class ParameterBuilder
            {
            }

            class PropertyBuilder : System.Reflection.PropertyInfo
            {
                /*0xed0c50*/ System.Reflection.PropertyAttributes get_Attributes();
                /*0xed0c90*/ bool get_CanRead();
                /*0xed0cd0*/ bool get_CanWrite();
                /*0xed0d10*/ System.Type get_DeclaringType();
                /*0xed0d50*/ string get_Name();
                /*0xed0d90*/ System.Type get_PropertyType();
                /*0xed0dd0*/ System.Type get_ReflectedType();
                /*0xed0a90*/ object[] GetCustomAttributes(bool inherit);
                /*0xed0a50*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0xed0ad0*/ System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
                /*0xed0b10*/ System.Reflection.ParameterInfo[] GetIndexParameters();
                /*0xed0b50*/ System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
                /*0xed0b90*/ object GetValue(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
                /*0xed0bd0*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0xed0c10*/ void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            }

            class SignatureHelper
            {
            }

            class TypeBuilder : System.Reflection.TypeInfo
            {
                static int UnspecifiedTypeSize = 0;

                /*0xedc2c0*/ System.Reflection.Assembly get_Assembly();
                /*0xedc280*/ string get_AssemblyQualifiedName();
                /*0xedc300*/ System.Type get_BaseType();
                /*0xedc340*/ string get_FullName();
                /*0xedc380*/ System.Reflection.Module get_Module();
                /*0xedc3c0*/ string get_Name();
                /*0xedc400*/ string get_Namespace();
                /*0xedc440*/ System.Type get_UnderlyingSystemType();
                /*0xedbc80*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
                /*0xedbcc0*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0xedbd00*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
                /*0xedbd40*/ object[] GetCustomAttributes(bool inherit);
                /*0xedbd80*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0xedbdc0*/ System.Type GetElementType();
                /*0xedbe00*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
                /*0xedbe40*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
                /*0xedbe80*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
                /*0xedbec0*/ System.Type[] GetInterfaces();
                /*0xedbf00*/ System.Reflection.MemberInfo[] GetMembers(System.Reflection.BindingFlags bindingAttr);
                /*0xedbf40*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0xedbf80*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
                /*0xedbfc0*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
                /*0xedc000*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
                /*0xedc040*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0xedc080*/ bool HasElementTypeImpl();
                /*0xedc0c0*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
                /*0xedc100*/ bool IsArrayImpl();
                /*0xedc140*/ bool IsByRefImpl();
                /*0xedc180*/ bool IsCOMObjectImpl();
                /*0xedc1c0*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0xedc200*/ bool IsPointerImpl();
                /*0xedc240*/ bool IsPrimitiveImpl();
            }

            class UnmanagedMarshal
            {
                /*0x32f970*/ UnmanagedMarshal();
            }
        }
    }

    namespace Numerics
    {
        class ConstantHelper
        {
            static /*0xec2aa0*/ byte GetByteWithAllBitsSet();
            static /*0xec2aa0*/ sbyte GetSByteWithAllBitsSet();
            static /*0xec2af0*/ ushort GetUInt16WithAllBitsSet();
            static /*0xec2ac0*/ short GetInt16WithAllBitsSet();
            static /*0xec2ac0*/ uint GetUInt32WithAllBitsSet();
            static /*0xec2ac0*/ int GetInt32WithAllBitsSet();
            static /*0xec2ad0*/ ulong GetUInt64WithAllBitsSet();
            static /*0xec2ad0*/ long GetInt64WithAllBitsSet();
            static /*0xec2ae0*/ float GetSingleWithAllBitsSet();
            static /*0xec2ab0*/ double GetDoubleWithAllBitsSet();
        }

        struct Register
        {
            /*0x10*/ byte byte_0;
            /*0x11*/ byte byte_1;
            /*0x12*/ byte byte_2;
            /*0x13*/ byte byte_3;
            /*0x14*/ byte byte_4;
            /*0x15*/ byte byte_5;
            /*0x16*/ byte byte_6;
            /*0x17*/ byte byte_7;
            /*0x18*/ byte byte_8;
            /*0x19*/ byte byte_9;
            /*0x1a*/ byte byte_10;
            /*0x1b*/ byte byte_11;
            /*0x1c*/ byte byte_12;
            /*0x1d*/ byte byte_13;
            /*0x1e*/ byte byte_14;
            /*0x1f*/ byte byte_15;
            /*0x10*/ sbyte sbyte_0;
            /*0x11*/ sbyte sbyte_1;
            /*0x12*/ sbyte sbyte_2;
            /*0x13*/ sbyte sbyte_3;
            /*0x14*/ sbyte sbyte_4;
            /*0x15*/ sbyte sbyte_5;
            /*0x16*/ sbyte sbyte_6;
            /*0x17*/ sbyte sbyte_7;
            /*0x18*/ sbyte sbyte_8;
            /*0x19*/ sbyte sbyte_9;
            /*0x1a*/ sbyte sbyte_10;
            /*0x1b*/ sbyte sbyte_11;
            /*0x1c*/ sbyte sbyte_12;
            /*0x1d*/ sbyte sbyte_13;
            /*0x1e*/ sbyte sbyte_14;
            /*0x1f*/ sbyte sbyte_15;
            /*0x10*/ ushort uint16_0;
            /*0x12*/ ushort uint16_1;
            /*0x14*/ ushort uint16_2;
            /*0x16*/ ushort uint16_3;
            /*0x18*/ ushort uint16_4;
            /*0x1a*/ ushort uint16_5;
            /*0x1c*/ ushort uint16_6;
            /*0x1e*/ ushort uint16_7;
            /*0x10*/ short int16_0;
            /*0x12*/ short int16_1;
            /*0x14*/ short int16_2;
            /*0x16*/ short int16_3;
            /*0x18*/ short int16_4;
            /*0x1a*/ short int16_5;
            /*0x1c*/ short int16_6;
            /*0x1e*/ short int16_7;
            /*0x10*/ uint uint32_0;
            /*0x14*/ uint uint32_1;
            /*0x18*/ uint uint32_2;
            /*0x1c*/ uint uint32_3;
            /*0x10*/ int int32_0;
            /*0x14*/ int int32_1;
            /*0x18*/ int int32_2;
            /*0x1c*/ int int32_3;
            /*0x10*/ ulong uint64_0;
            /*0x18*/ ulong uint64_1;
            /*0x10*/ long int64_0;
            /*0x18*/ long int64_1;
            /*0x10*/ float single_0;
            /*0x14*/ float single_1;
            /*0x18*/ float single_2;
            /*0x1c*/ float single_3;
            /*0x10*/ double double_0;
            /*0x18*/ double double_1;
        }

        struct Vector<T> : System.IEquatable<System.Numerics.Vector<T>>, System.IFormattable
        {
            static /*0x0*/ int s_count;
            static /*0x0*/ System.Numerics.Vector<T> s_zero;
            static /*0x0*/ System.Numerics.Vector<T> s_one;
            static /*0x0*/ System.Numerics.Vector<T> s_allOnes;
            /*0x0*/ System.Numerics.Register register;

            static /*0x180ff0*/ Vector();
            static /*0x1809b0*/ int get_Count();
            static /*0x2a5510*/ System.Numerics.Vector<T> get_Zero();
            static /*0x1809b0*/ int InitializeCount();
            static /*0x2a5510*/ bool op_Equality(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static /*0x2a5510*/ bool op_Inequality(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static /*0x2a5510*/ System.Numerics.Vector<ulong> op_Explicit(System.Numerics.Vector<T> value);
            static /*0x2a5510*/ System.Numerics.Vector<T> Equals(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static /*0x2a5510*/ bool ScalarEquals(T left, T right);
            static /*0x2a5510*/ T GetOneValue();
            static /*0x2a5510*/ T GetAllBitsSetValue();
            /*0x2a5510*/ Vector(T value);
            /*0x2a5510*/ Vector(void* dataPointer);
            /*0x2a5510*/ Vector(void* dataPointer, int offset);
            /*0x17aec0*/ Vector(ref System.Numerics.Register existingRegister);
            /*0x2a5510*/ T get_Item(int index);
            /*0x17e620*/ bool Equals(object obj);
            /*0x2a5510*/ bool Equals(System.Numerics.Vector<T> other);
            /*0x180980*/ int GetHashCode();
            /*0x1803b0*/ string ToString();
            /*0x177730*/ string ToString(string format, System.IFormatProvider formatProvider);

            struct VectorSizeHelper<T>
            {
                /*0x0*/ System.Numerics.Vector<T> _placeholder;
                /*0x0*/ byte _byte;
            }
        }

        class Vector
        {
            static /*0x2a5510*/ System.Numerics.Vector<T> Equals<T>(System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
            static /*0x348b00*/ bool get_IsHardwareAccelerated();
            static /*0x2a5510*/ System.Numerics.Vector<ulong> AsVectorUInt64<T>(System.Numerics.Vector<T> value);
        }

        namespace Hashing
        {
            class HashHelpers
            {
                static /*0x0*/ int RandomSeed;

                static /*0xecefa0*/ HashHelpers();
                static /*0xecef80*/ int Combine(int h1, int h2);
            }
        }
    }

    namespace Globalization
    {
        class CharUnicodeInfo
        {
            static /*0xebd760*/ int InternalConvertToUtf32(string s, int index);
            static /*0xebd750*/ System.Globalization.UnicodeCategory GetUnicodeCategory(char ch);
            static /*0xebd620*/ System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int index);
            static /*0xebd4c0*/ System.Globalization.UnicodeCategory GetUnicodeCategory(int codePoint);
            static /*0xebd800*/ byte InternalGetCategoryValue(int ch, int offset);
            static /*0xebd970*/ System.Globalization.UnicodeCategory InternalGetUnicodeCategory(string value, int index);
            static /*0xebda00*/ bool IsWhiteSpace(char c);
            static /*0xebda70*/ System.ReadOnlySpan<byte> get_CategoryLevel1Index();
            static /*0xebdac0*/ System.ReadOnlySpan<byte> get_CategoryLevel2Index();
            static /*0xebdb10*/ System.ReadOnlySpan<byte> get_CategoryLevel3Index();
            static /*0xebda20*/ System.ReadOnlySpan<byte> get_CategoriesValue();
        }

        class CompareInfo : System.Runtime.Serialization.IDeserializationCallback
        {
            static System.Globalization.CompareOptions ValidIndexMaskOffFlags = -32;
            static System.Globalization.CompareOptions ValidCompareMaskOffFlags = -536870944;
            static System.Globalization.CompareOptions ValidHashCodeOfStringMaskOffFlags = -32;
            static System.Globalization.CompareOptions ValidSortkeyCtorMaskOffFlags = -536870944;
            static /*0x0*/ System.Globalization.CompareInfo Invariant;
            static /*0x8*/ System.Collections.Generic.Dictionary<string, System.Globalization.ISimpleCollator> collators;
            static /*0x10*/ bool managedCollation;
            static /*0x11*/ bool managedCollationChecked;
            /*0x10*/ string m_name;
            /*0x18*/ string _sortName;
            /*0x20*/ System.Globalization.SortVersion m_SortVersion;
            /*0x28*/ int culture;
            /*0x30*/ System.Globalization.ISimpleCollator collator;

            static /*0xec2050*/ CompareInfo();
            static /*0xec1090*/ int InvariantIndexOf(string source, string value, int startIndex, int count, bool ignoreCase);
            static /*0xec1170*/ int InvariantLastIndexOf(string source, string value, int startIndex, int count, bool ignoreCase);
            static /*0xec0cb0*/ int InvariantFindString(char* source, int sourceCount, char* value, int valueCount, bool ignoreCase, bool start);
            static /*0xec1260*/ char InvariantToUpper(char c);
            static /*0xebfad0*/ System.Globalization.CompareInfo GetCompareInfo(string name);
            static /*0xebe0b0*/ int CompareOrdinalIgnoreCase(string strA, int indexA, int lengthA, string strB, int indexB, int lengthB);
            static /*0xebdd90*/ int CompareOrdinalIgnoreCase(System.ReadOnlySpan<char> strA, System.ReadOnlySpan<char> strB);
            static /*0xebff20*/ int GetIgnoreCaseHash(string source);
            static /*0xec21f0*/ bool get_UseManagedCollation();
            static /*0xec2370*/ int internal_compare_icall(char* str1, int length1, char* str2, int length2, System.Globalization.CompareOptions options);
            static /*0xec2380*/ int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, System.Globalization.CompareOptions options);
            static /*0xec2720*/ int internal_index_icall(char* source, int sindex, int count, char* value, int value_length, bool first);
            static /*0xec2730*/ int internal_index(string source, int sindex, int count, string value, bool first);
            static /*0xebe260*/ int CompareStringOrdinalIgnoreCase(char* pString1, int length1, char* pString2, int length2);
            static /*0xec0450*/ int IndexOfOrdinalCore(string source, string value, int startIndex, int count, bool ignoreCase);
            static /*0xec1720*/ int LastIndexOfOrdinalCore(string source, string value, int startIndex, int count, bool ignoreCase);
            /*0xec2120*/ CompareInfo(System.Globalization.CultureInfo culture);
            /*0xec20f0*/ CompareInfo();
            /*0xec09f0*/ System.Globalization.SortKey InvariantCreateSortKey(string source, System.Globalization.CompareOptions options);
            /*0xec1e10*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0xec1e00*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0xec1e00*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0xec1d40*/ void OnDeserialized();
            /*0xec1e30*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0xec2170*/ string get_Name();
            /*0xebed80*/ int Compare(string string1, string string2);
            /*0xebe570*/ int Compare(string string1, string string2, System.Globalization.CompareOptions options);
            /*0xebedb0*/ int Compare(System.ReadOnlySpan<char> string1, string string2, System.Globalization.CompareOptions options);
            /*0xebdb60*/ int CompareOptionIgnoreCase(System.ReadOnlySpan<char> string1, System.ReadOnlySpan<char> string2);
            /*0xebe810*/ int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0xec1280*/ bool IsPrefix(string source, string prefix, System.Globalization.CompareOptions options);
            /*0xec1510*/ bool IsSuffix(string source, string suffix, System.Globalization.CompareOptions options);
            /*0xebf690*/ bool IsSuffix(System.ReadOnlySpan<char> source, System.ReadOnlySpan<char> suffix, System.Globalization.CompareOptions options);
            /*0xec0650*/ int IndexOf(string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0xec0490*/ int IndexOfOrdinal(string source, string value, int startIndex, int count, bool ignoreCase);
            /*0xec18a0*/ int LastIndexOf(string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0xec1760*/ int LastIndexOfOrdinal(string source, string value, int startIndex, int count, bool ignoreCase);
            /*0xec0300*/ System.Globalization.SortKey GetSortKey(string source, System.Globalization.CompareOptions options);
            /*0xebf710*/ bool Equals(object value);
            /*0xebfee0*/ int GetHashCode();
            /*0xebfbd0*/ int GetHashCodeOfString(string source, System.Globalization.CompareOptions options);
            /*0xebfdd0*/ int GetHashCode(string source, System.Globalization.CompareOptions options);
            /*0xec1ff0*/ string ToString();
            /*0xebf7d0*/ System.Globalization.ISimpleCollator GetCollator();
            /*0xebf210*/ System.Globalization.SortKey CreateSortKeyCore(string source, System.Globalization.CompareOptions options);
            /*0xec28a0*/ int internal_index_switch(string s1, int sindex, int count, string s2, System.Globalization.CompareOptions opt, bool first);
            /*0xec2520*/ int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0xec2430*/ int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0xec27f0*/ int internal_index_managed(string s1, int sindex, int count, string s2, System.Globalization.CompareOptions opt, bool first);
            /*0xec09c0*/ void InitSort(System.Globalization.CultureInfo culture);
            /*0xec16e0*/ int LastIndexOfCore(string source, string target, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0xec03d0*/ int IndexOfCore(string source, string target, int startIndex, int count, System.Globalization.CompareOptions options, int* matchLengthPtr);
            /*0xebe4f0*/ int CompareString(System.ReadOnlySpan<char> string1, string string2, System.Globalization.CompareOptions options);
            /*0xebe3d0*/ int CompareString(System.ReadOnlySpan<char> string1, System.ReadOnlySpan<char> string2, System.Globalization.CompareOptions options);
            /*0xebf360*/ System.Globalization.SortKey CreateSortKey(string source, System.Globalization.CompareOptions options);
            /*0xec1ed0*/ bool StartsWith(string source, string prefix, System.Globalization.CompareOptions options);
            /*0xebf570*/ bool EndsWith(string source, string suffix, System.Globalization.CompareOptions options);
            /*0xebf690*/ bool EndsWith(System.ReadOnlySpan<char> source, System.ReadOnlySpan<char> suffix, System.Globalization.CompareOptions options);
            /*0xebfb90*/ int GetHashCodeOfStringCore(string source, System.Globalization.CompareOptions options);
        }

        enum CompareOptions
        {
            None = 0,
            IgnoreCase = 1,
            IgnoreNonSpace = 2,
            IgnoreSymbols = 4,
            IgnoreKanaType = 8,
            IgnoreWidth = 16,
            OrdinalIgnoreCase = 268435456,
            StringSort = 536870912,
            Ordinal = 1073741824,
        }

        class CultureNotFoundException : System.ArgumentException
        {
            /*0x98*/ string _invalidCultureName;
            /*0xa0*/ System.Nullable<int> _invalidCultureId;

            static /*0xec3190*/ string get_DefaultMessage();
            /*0xec2f70*/ CultureNotFoundException();
            /*0xec2f50*/ CultureNotFoundException(string paramName, string message);
            /*0xec2fb0*/ CultureNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xec2e00*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xec32e0*/ System.Nullable<int> get_InvalidCultureId();
            /*0x9c7a50*/ string get_InvalidCultureName();
            /*0xec31c0*/ string get_FormatedInvalidCultureId();
            /*0xec32f0*/ string get_Message();
        }

        enum MonthNameStyles
        {
            Regular = 0,
            Genitive = 1,
            LeapYear = 2,
        }

        enum DateTimeFormatFlags
        {
            None = 0,
            UseGenitiveMonth = 1,
            UseLeapYearMonth = 2,
            UseSpacesInMonthNames = 4,
            UseHebrewRule = 8,
            UseSpacesInDayNames = 16,
            UseDigitPrefixInTokens = 32,
            NotInitialized = -1,
        }

        class DateTimeFormatInfo : System.IFormatProvider, System.ICloneable
        {
            static string rfc1123Pattern = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
            static string sortableDateTimePattern = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
            static string universalSortableDateTimePattern = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
            static int DEFAULT_ALL_DATETIMES_SIZE = 132;
            static string RoundtripFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK";
            static string RoundtripDateTimeUnfixed = "yyyy'-'MM'-'ddTHH':'mm':'ss zzz";
            static System.Globalization.DateTimeStyles InvalidDateTimeStyles = -256;
            static int TOKEN_HASH_SIZE = 199;
            static int SECOND_PRIME = 197;
            static string dateSeparatorOrTimeZoneOffset = "-";
            static string invariantDateSeparator = "/";
            static string invariantTimeSeparator = ":";
            static string IgnorablePeriod = ".";
            static string IgnorableComma = ",";
            static string CJKYearSuff = "年";
            static string CJKMonthSuff = "月";
            static string CJKDaySuff = "日";
            static string KoreanYearSuff = "년";
            static string KoreanMonthSuff = "월";
            static string KoreanDaySuff = "일";
            static string KoreanHourSuff = "시";
            static string KoreanMinuteSuff = "분";
            static string KoreanSecondSuff = "초";
            static string CJKHourSuff = "時";
            static string ChineseHourSuff = "时";
            static string CJKMinuteSuff = "分";
            static string CJKSecondSuff = "秒";
            static string JapaneseEraStart = "元";
            static string LocalTimeMark = "T";
            static string GMTName = "GMT";
            static string ZuluName = "Z";
            static string KoreanLangName = "ko";
            static string JapaneseLangName = "ja";
            static string EnglishLangName = "en";
            static /*0x0*/ System.Globalization.DateTimeFormatInfo s_invariantInfo;
            static /*0x8*/ char[] s_monthSpaces;
            static /*0x10*/ System.Globalization.DateTimeFormatInfo s_jajpDTFI;
            static /*0x18*/ System.Globalization.DateTimeFormatInfo s_zhtwDTFI;
            /*0x10*/ System.Globalization.CultureData _cultureData;
            /*0x18*/ string _name;
            /*0x20*/ string _langName;
            /*0x28*/ System.Globalization.CompareInfo _compareInfo;
            /*0x30*/ System.Globalization.CultureInfo _cultureInfo;
            /*0x38*/ string amDesignator;
            /*0x40*/ string pmDesignator;
            /*0x48*/ string dateSeparator;
            /*0x50*/ string generalShortTimePattern;
            /*0x58*/ string generalLongTimePattern;
            /*0x60*/ string timeSeparator;
            /*0x68*/ string monthDayPattern;
            /*0x70*/ string dateTimeOffsetPattern;
            /*0x78*/ System.Globalization.Calendar calendar;
            /*0x80*/ int firstDayOfWeek;
            /*0x84*/ int calendarWeekRule;
            /*0x88*/ string fullDateTimePattern;
            /*0x90*/ string[] abbreviatedDayNames;
            /*0x98*/ string[] m_superShortDayNames;
            /*0xa0*/ string[] dayNames;
            /*0xa8*/ string[] abbreviatedMonthNames;
            /*0xb0*/ string[] monthNames;
            /*0xb8*/ string[] genitiveMonthNames;
            /*0xc0*/ string[] m_genitiveAbbreviatedMonthNames;
            /*0xc8*/ string[] leapYearMonthNames;
            /*0xd0*/ string longDatePattern;
            /*0xd8*/ string shortDatePattern;
            /*0xe0*/ string yearMonthPattern;
            /*0xe8*/ string longTimePattern;
            /*0xf0*/ string shortTimePattern;
            /*0xf8*/ string[] allYearMonthPatterns;
            /*0x100*/ string[] allShortDatePatterns;
            /*0x108*/ string[] allLongDatePatterns;
            /*0x110*/ string[] allShortTimePatterns;
            /*0x118*/ string[] allLongTimePatterns;
            /*0x120*/ string[] m_eraNames;
            /*0x128*/ string[] m_abbrevEraNames;
            /*0x130*/ string[] m_abbrevEnglishEraNames;
            /*0x138*/ System.Globalization.CalendarId[] optionalCalendars;
            /*0x140*/ bool _isReadOnly;
            /*0x144*/ System.Globalization.DateTimeFormatFlags formatFlags;
            /*0x148*/ string _fullTimeSpanPositivePattern;
            /*0x150*/ string _fullTimeSpanNegativePattern;
            /*0x158*/ System.Globalization.DateTimeFormatInfo.TokenHashValue[] _dtfiTokenHash;

            static /*0xecae40*/ DateTimeFormatInfo();
            static /*0xecc410*/ System.Globalization.DateTimeFormatInfo get_InvariantInfo();
            static /*0xecb9d0*/ System.Globalization.DateTimeFormatInfo get_CurrentInfo();
            static /*0xec7cf0*/ System.Globalization.DateTimeFormatInfo GetInstance(System.IFormatProvider provider);
            static /*0xec7890*/ string[] GetCombinedPatterns(string[] patterns1, string[] patterns2, string connectString);
            static /*0xec8070*/ string[] GetMergedPatterns(string[] patterns, string defaultPattern);
            static /*0xecabd0*/ void ValidateStyles(System.Globalization.DateTimeStyles style, string parameterName);
            static /*0xec7ec0*/ System.Globalization.DateTimeFormatInfo GetJapaneseCalendarDTFI();
            static /*0xec8360*/ System.Globalization.DateTimeFormatInfo GetTaiwanCalendarDTFI();
            static /*0xec9200*/ bool IsJapaneseCalendar(System.Globalization.Calendar calendar);
            static /*0xecaa70*/ bool TryParseHebrewNumber(ref System.__DTString str, ref bool badFormat, ref int number);
            static /*0xec91e0*/ bool IsHebrewChar(char ch);
            /*0xecaee0*/ DateTimeFormatInfo();
            /*0xecb170*/ DateTimeFormatInfo(System.Globalization.CultureData cultureData, System.Globalization.Calendar cal);
            /*0xecb8f0*/ string get_CultureName();
            /*0xecb930*/ System.Globalization.CultureInfo get_Culture();
            /*0xecc5b0*/ string get_LanguageName();
            /*0xeccd20*/ string[] internalGetAbbreviatedDayOfWeekNames();
            /*0xecccb0*/ string[] internalGetAbbreviatedDayOfWeekNamesCore();
            /*0xecce40*/ string[] internalGetDayOfWeekNames();
            /*0xeccdd0*/ string[] internalGetDayOfWeekNamesCore();
            /*0xeccdb0*/ string[] internalGetAbbreviatedMonthNames();
            /*0xeccd40*/ string[] internalGetAbbreviatedMonthNamesCore();
            /*0xecd210*/ string[] internalGetMonthNames();
            /*0xecd1a0*/ string[] internalGetMonthNamesCore();
            /*0xec8870*/ void InitializeOverridableProperties(System.Globalization.CultureData cultureData, int calendarId);
            /*0xec7c60*/ object GetFormat(System.Type formatType);
            /*0xec6270*/ object Clone();
            /*0xecb1e0*/ string get_AMDesignator();
            /*0xecb7b0*/ System.Globalization.Calendar get_Calendar();
            /*0xecd230*/ void set_Calendar(System.Globalization.Calendar value);
            /*0xecc7e0*/ System.Globalization.CalendarId[] get_OptionalCalendars();
            /*0xecbe40*/ string[] get_EraNames();
            /*0xec7b20*/ string GetEraName(int era);
            /*0xecb330*/ string[] get_AbbreviatedEraNames();
            /*0xec7110*/ string GetAbbreviatedEraName(int era);
            /*0xecb2b0*/ string[] get_AbbreviatedEnglishEraNames();
            /*0xecbae0*/ string get_DateSeparator();
            /*0xecbee0*/ string get_FullDateTimePattern();
            /*0xecc5f0*/ string get_LongDatePattern();
            /*0xecc650*/ string get_LongTimePattern();
            /*0xecc6e0*/ string get_MonthDayPattern();
            /*0xecc830*/ string get_PMDesignator();
            /*0xecc870*/ string get_RFC1123Pattern();
            /*0xecc8a0*/ string get_ShortDatePattern();
            /*0xecc900*/ string get_ShortTimePattern();
            /*0xecc990*/ string get_SortableDateTimePattern();
            /*0xecc2b0*/ string get_GeneralShortTimePattern();
            /*0xecc1f0*/ string get_GeneralLongTimePattern();
            /*0xecbb50*/ string get_DateTimeOffsetPattern();
            /*0xecc9c0*/ string get_TimeSeparator();
            /*0xeccc20*/ string get_UniversalSortableDateTimePattern();
            /*0xeccc50*/ string get_YearMonthPattern();
            /*0xecb220*/ string[] get_AbbreviatedDayNames();
            /*0xecbdb0*/ string[] get_DayNames();
            /*0xecb3b0*/ string[] get_AbbreviatedMonthNames();
            /*0xecc750*/ string[] get_MonthNames();
            /*0xecc3e0*/ bool get_HasSpacesInMonthNames();
            /*0xecc3b0*/ bool get_HasSpacesInDayNames();
            /*0xeccfd0*/ string internalGetMonthName(int month, System.Globalization.MonthNameStyles style, bool abbreviated);
            /*0xecce60*/ string[] internalGetGenitiveMonthNames(bool abbreviated);
            /*0xeccf50*/ string[] internalGetLeapYearMonthNames();
            /*0xec7000*/ string GetAbbreviatedDayName(System.DayOfWeek dayofweek);
            /*0xec73a0*/ string[] GetAllDateTimePatterns(char format);
            /*0xec7a10*/ string GetDayName(System.DayOfWeek dayofweek);
            /*0xec7280*/ string GetAbbreviatedMonthName(int month);
            /*0xec8240*/ string GetMonthName(int month);
            /*0xecb700*/ string[] get_AllYearMonthPatterns();
            /*0xecb5a0*/ string[] get_AllShortDatePatterns();
            /*0xecb650*/ string[] get_AllShortTimePatterns();
            /*0xecb440*/ string[] get_AllLongDatePatterns();
            /*0xecb4f0*/ string[] get_AllLongTimePatterns();
            /*0xeccba0*/ string[] get_UnclonedYearMonthPatterns();
            /*0xeccad0*/ string[] get_UnclonedShortDatePatterns();
            /*0xecca00*/ string[] get_UnclonedLongDatePatterns();
            /*0xeccb50*/ string[] get_UnclonedShortTimePatterns();
            /*0xecca80*/ string[] get_UnclonedLongTimePatterns();
            /*0xecc520*/ bool get_IsReadOnly();
            /*0xecc100*/ string get_FullTimeSpanPositivePattern();
            /*0xecbfb0*/ string get_FullTimeSpanNegativePattern();
            /*0xecb7c0*/ System.Globalization.CompareInfo get_CompareInfo();
            /*0xecbec0*/ System.Globalization.DateTimeFormatFlags get_FormatFlags();
            /*0xec8510*/ System.Globalization.DateTimeFormatFlags InitializeFormatFlags();
            /*0xecc370*/ bool get_HasForceTwoDigitYears();
            /*0xecad00*/ bool YearMonthAdjustment(ref int year, ref int month, bool parsedMonthName);
            /*0xec6230*/ void ClearTokenHashTable();
            /*0xec64e0*/ System.Globalization.DateTimeFormatInfo.TokenHashValue[] CreateTokenHashTable();
            /*0xec9330*/ void PopulateSpecialTokenHashTable(System.Globalization.DateTimeFormatInfo.TokenHashValue[] temp, ref bool useDateSepAsIgnorableSymbol);
            /*0xec6160*/ void AddMonthNames(System.Globalization.DateTimeFormatInfo.TokenHashValue[] temp, string monthPostfix);
            /*0xec90c0*/ bool IsAllowedJapaneseTokenFollowedByNonSpaceLetter(string tokenString, char nextCh);
            /*0xeca260*/ bool Tokenize(System.TokenType TokenMask, ref System.TokenType tokenType, ref int tokenValue, ref System.__DTString str);
            /*0xec8a30*/ void InsertAtCurrentHashNode(System.Globalization.DateTimeFormatInfo.TokenHashValue[] hashTable, string str, char ch, System.TokenType tokenType, int tokenValue, int pos, int hashcode, int hashProbe);
            /*0xec8c90*/ void InsertHash(System.Globalization.DateTimeFormatInfo.TokenHashValue[] hashTable, string str, System.TokenType tokenType, int tokenValue);
            /*0xec63c0*/ bool CompareStringIgnoreCaseOptimized(string string1, int offset1, int length1, string string2, int offset2, int length2);

            class TokenHashValue
            {
                /*0x10*/ string tokenString;
                /*0x18*/ System.TokenType tokenType;
                /*0x1c*/ int tokenValue;

                /*0xef6590*/ TokenHashValue(string tokenString, System.TokenType tokenType, int tokenValue);
            }
        }

        enum FORMATFLAGS
        {
            None = 0,
            UseGenitiveMonth = 1,
            UseLeapYearMonth = 2,
            UseSpacesInMonthNames = 4,
            UseHebrewParsing = 8,
            UseSpacesInDayNames = 16,
            UseDigitPrefixInTokens = 32,
        }

        enum CalendarId
        {
            UNINITIALIZED_VALUE = 0,
            GREGORIAN = 1,
            GREGORIAN_US = 2,
            JAPAN = 3,
            TAIWAN = 4,
            KOREA = 5,
            HIJRI = 6,
            THAI = 7,
            HEBREW = 8,
            GREGORIAN_ME_FRENCH = 9,
            GREGORIAN_ARABIC = 10,
            GREGORIAN_XLIT_ENGLISH = 11,
            GREGORIAN_XLIT_FRENCH = 12,
            JULIAN = 13,
            JAPANESELUNISOLAR = 14,
            CHINESELUNISOLAR = 15,
            SAKA = 16,
            LUNAR_ETO_CHN = 17,
            LUNAR_ETO_KOR = 18,
            LUNAR_ETO_ROKUYOU = 19,
            KOREANLUNISOLAR = 20,
            TAIWANLUNISOLAR = 21,
            PERSIAN = 22,
            UMALQURA = 23,
            LAST_CALENDAR = 23,
        }

        class DateTimeFormatInfoScanner
        {
            static /*0x0*/ System.Collections.Generic.Dictionary<string, string> s_knownWords;
            /*0x10*/ System.Collections.Generic.List<string> m_dateWords;
            /*0x18*/ System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern _ymdFlags;

            static /*0xee2dd0*/ System.Collections.Generic.Dictionary<string, string> get_KnownWords();
            static /*0xee2c80*/ int SkipWhiteSpacesAndNonLetter(string pattern, int currentIndex);
            static /*0xee2c10*/ int ScanRepeatChar(string pattern, char ch, int index, ref int count);
            static /*0xee27b0*/ System.Globalization.FORMATFLAGS GetFormatFlagGenitiveMonth(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames);
            static /*0xee2930*/ System.Globalization.FORMATFLAGS GetFormatFlagUseSpaceInMonthNames(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames);
            static /*0xee28f0*/ System.Globalization.FORMATFLAGS GetFormatFlagUseSpaceInDayNames(string[] dayNames, string[] abbrevDayNames);
            static /*0xee28e0*/ System.Globalization.FORMATFLAGS GetFormatFlagUseHebrewCalendar(int calID);
            static /*0xee2450*/ bool EqualStringArrays(string[] array1, string[] array2);
            static /*0xee2370*/ bool ArrayElementsHaveSpace(string[] array);
            static /*0xee2120*/ bool ArrayElementsBeginWithDigit(string[] array);
            /*0xee2d50*/ DateTimeFormatInfoScanner();
            /*0xee1bc0*/ void AddDateWordOrPostfix(string formatPostfix, string str);
            /*0xee1df0*/ int AddDateWords(string pattern, int index, string formatPostfix);
            /*0xee2020*/ void AddIgnorableSymbols(string text);
            /*0xee29f0*/ void ScanDateWord(string pattern);
            /*0xee2500*/ string[] GetDateWordsOfDTFI(System.Globalization.DateTimeFormatInfo dtfi);

            enum FoundDatePattern
            {
                None = 0,
                FoundYearPatternFlag = 1,
                FoundMonthPatternFlag = 2,
                FoundDayPatternFlag = 4,
                FoundYMDPatternFlag = 7,
            }
        }

        enum DateTimeStyles
        {
            None = 0,
            AllowLeadingWhite = 1,
            AllowTrailingWhite = 2,
            AllowInnerWhite = 4,
            AllowWhiteSpaces = 7,
            NoCurrentDateDefault = 8,
            AdjustToUniversal = 16,
            AssumeLocal = 32,
            AssumeUniversal = 64,
            RoundtripKind = 128,
        }

        struct DaylightTimeStruct
        {
            /*0x10*/ System.DateTime Start;
            /*0x18*/ System.DateTime End;
            /*0x20*/ System.TimeSpan Delta;

            /*0xee31f0*/ DaylightTimeStruct(System.DateTime start, System.DateTime end, System.TimeSpan delta);
        }

        struct HebrewNumberParsingContext
        {
            /*0x10*/ System.Globalization.HebrewNumber.HS state;
            /*0x14*/ int result;

            /*0xee6bd0*/ HebrewNumberParsingContext(int result);
        }

        enum HebrewNumberParsingState
        {
            InvalidHebrewNumber = 0,
            NotHebrewDigit = 1,
            FoundEndOfHebrewNumber = 2,
            ContinueParsing = 3,
        }

        class HebrewNumber
        {
            static /*0x0*/ System.Globalization.HebrewNumber.HebrewValue[] s_hebrewValues;
            static /*0x8*/ char s_maxHebrewNumberCh;
            static /*0x10*/ System.Globalization.HebrewNumber.HS[] s_numberPasingState;

            static /*0xee7100*/ HebrewNumber();
            static /*0xee6e50*/ string ToString(int Number);
            static /*0xee6ca0*/ System.Globalization.HebrewNumberParsingState ParseByChar(char ch, ref System.Globalization.HebrewNumberParsingContext context);
            static /*0xee6be0*/ bool IsDigit(char ch);

            enum HebrewToken
            {
                Invalid = -1,
                Digit400 = 0,
                Digit200_300 = 1,
                Digit100 = 2,
                Digit10 = 3,
                Digit1 = 4,
                Digit6_7 = 5,
                Digit7 = 6,
                Digit9 = 7,
                SingleQuote = 8,
                DoubleQuote = 9,
            }

            struct HebrewValue
            {
                /*0x10*/ System.Globalization.HebrewNumber.HebrewToken token;
                /*0x12*/ short value;

                /*0xee74d0*/ HebrewValue(System.Globalization.HebrewNumber.HebrewToken token, short value);
            }

            enum HS
            {
                _err = -1,
                Start = 0,
                S400 = 1,
                S400_400 = 2,
                S400_X00 = 3,
                S400_X0 = 4,
                X00_DQ = 5,
                S400_X00_X0 = 6,
                X0_DQ = 7,
                X = 8,
                X0 = 9,
                X00 = 10,
                S400_DQ = 11,
                S400_400_DQ = 12,
                S400_400_100 = 13,
                S9 = 14,
                X00_S9 = 15,
                S9_DQ = 16,
                END = 100,
            }
        }

        enum NumberStyles
        {
            None = 0,
            AllowLeadingWhite = 1,
            AllowTrailingWhite = 2,
            AllowLeadingSign = 4,
            AllowTrailingSign = 8,
            AllowParentheses = 16,
            AllowDecimalPoint = 32,
            AllowThousands = 64,
            AllowExponent = 128,
            AllowCurrencySymbol = 256,
            AllowHexSpecifier = 512,
            Integer = 7,
            HexNumber = 515,
            Number = 111,
            Float = 167,
            Currency = 383,
            Any = 511,
        }

        class SortVersion : System.IEquatable<System.Globalization.SortVersion>
        {
            /*0x10*/ int m_NlsVersion;
            /*0x14*/ System.Guid m_SortId;

            static /*0xeeb560*/ bool op_Equality(System.Globalization.SortVersion left, System.Globalization.SortVersion right);
            static /*0xeeb580*/ bool op_Inequality(System.Globalization.SortVersion left, System.Globalization.SortVersion right);
            /*0xeeb480*/ bool Equals(object obj);
            /*0xeeb410*/ bool Equals(System.Globalization.SortVersion other);
            /*0xeeb540*/ int GetHashCode();
        }

        class TimeSpanFormat
        {
            static /*0x0*/ System.Globalization.TimeSpanFormat.FormatLiterals PositiveInvariantFormatLiterals;
            static /*0x28*/ System.Globalization.TimeSpanFormat.FormatLiterals NegativeInvariantFormatLiterals;

            static /*0xeeec40*/ TimeSpanFormat();
            static /*0xeed950*/ void AppendNonNegativeInt32(System.Text.StringBuilder sb, int n, int digits);
            static /*0xeeea60*/ string Format(System.TimeSpan value, string format, System.IFormatProvider formatProvider);
            static /*0xeeeb30*/ bool TryFormat(System.TimeSpan value, System.Span<char> destination, ref int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
            static /*0xeee760*/ System.Text.StringBuilder FormatToBuilder(System.TimeSpan value, System.ReadOnlySpan<char> format, System.IFormatProvider formatProvider);
            static /*0xeee210*/ System.Text.StringBuilder FormatStandard(System.TimeSpan value, bool isInvariant, System.ReadOnlySpan<char> format, System.Globalization.TimeSpanFormat.Pattern pattern);
            static /*0xeeda40*/ System.Text.StringBuilder FormatCustomized(System.TimeSpan value, System.ReadOnlySpan<char> format, System.Globalization.DateTimeFormatInfo dtfi, System.Text.StringBuilder result);

            enum Pattern
            {
                None = 0,
                Minimum = 1,
                Full = 2,
            }

            struct FormatLiterals
            {
                /*0x10*/ string AppCompatLiteral;
                /*0x18*/ int dd;
                /*0x1c*/ int hh;
                /*0x20*/ int mm;
                /*0x24*/ int ss;
                /*0x28*/ int ff;
                /*0x30*/ string[] _literals;

                static /*0xee33e0*/ System.Globalization.TimeSpanFormat.FormatLiterals InitInvariant(bool isNegative);
                /*0xee3b10*/ string get_Start();
                /*0xee3a20*/ string get_DayHourSep();
                /*0xee3a80*/ string get_HourMinuteSep();
                /*0xee3ab0*/ string get_MinuteSecondSep();
                /*0xee3ae0*/ string get_SecondFractionSep();
                /*0xee3a50*/ string get_End();
                /*0xee3640*/ void Init(System.ReadOnlySpan<char> format, bool useInvariantFieldLengths);
            }
        }

        class TimeSpanParse
        {
            static /*0xeeed00*/ long Pow10(int pow);
            static /*0xef4010*/ bool TryTimeToTicks(bool positive, System.Globalization.TimeSpanParse.TimeSpanToken days, System.Globalization.TimeSpanParse.TimeSpanToken hours, System.Globalization.TimeSpanParse.TimeSpanToken minutes, System.Globalization.TimeSpanParse.TimeSpanToken seconds, System.Globalization.TimeSpanParse.TimeSpanToken fraction, ref long result);
            static /*0xef3fb0*/ bool TryParse(System.ReadOnlySpan<char> input, System.IFormatProvider formatProvider, ref System.TimeSpan result);
            static /*0xef2d50*/ bool TryParseTimeSpan(System.ReadOnlySpan<char> input, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, System.IFormatProvider formatProvider, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0xeeedf0*/ bool ProcessTerminalState(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0xeeef50*/ bool ProcessTerminal_DHMSF(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0xeef6c0*/ bool ProcessTerminal_HMS_F_D(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0xef1280*/ bool ProcessTerminal_HM_S_D(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0xef29f0*/ bool ProcessTerminal_HM(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0xeef390*/ bool ProcessTerminal_D(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);

            enum ParseFailureKind
            {
                None = 0,
                ArgumentNull = 1,
                Format = 2,
                FormatWithParameter = 3,
                Overflow = 4,
            }

            enum TimeSpanStandardStyles
            {
                None = 0,
                Invariant = 1,
                Localized = 2,
                RequireFull = 4,
                Any = 3,
            }

            enum TTT
            {
                None = 0,
                End = 1,
                Num = 2,
                Sep = 3,
                NumOverflow = 4,
            }

            struct TimeSpanToken
            {
                /*0x10*/ System.Globalization.TimeSpanParse.TTT _ttt;
                /*0x14*/ int _num;
                /*0x18*/ int _zeroes;
                /*0x20*/ System.ReadOnlySpan<char> _sep;

                /*0xef62e0*/ TimeSpanToken(System.Globalization.TimeSpanParse.TTT type);
                /*0xef6310*/ TimeSpanToken(int number);
                /*0xef62f0*/ TimeSpanToken(System.Globalization.TimeSpanParse.TTT type, int number, int leadingZeroes, System.ReadOnlySpan<char> separator);
                /*0xef6280*/ bool IsInvalidFraction();
            }

            struct TimeSpanTokenizer
            {
                /*0x10*/ System.ReadOnlySpan<char> _value;
                /*0x20*/ int _pos;

                /*0xef6580*/ TimeSpanTokenizer(System.ReadOnlySpan<char> input);
                /*0xa5a310*/ TimeSpanTokenizer(System.ReadOnlySpan<char> input, int startPosition);
                /*0xef6330*/ System.Globalization.TimeSpanParse.TimeSpanToken GetNextToken();
            }

            struct TimeSpanRawInfo
            {
                /*0x10*/ System.Globalization.TimeSpanParse.TTT _lastSeenTTT;
                /*0x14*/ int _tokenCount;
                /*0x18*/ int _sepCount;
                /*0x1c*/ int _numCount;
                /*0x20*/ System.Globalization.TimeSpanFormat.FormatLiterals _posLoc;
                /*0x48*/ System.Globalization.TimeSpanFormat.FormatLiterals _negLoc;
                /*0x70*/ bool _posLocInit;
                /*0x71*/ bool _negLocInit;
                /*0x78*/ string _fullPosPattern;
                /*0x80*/ string _fullNegPattern;
                /*0x88*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers0;
                /*0xa8*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers1;
                /*0xc8*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers2;
                /*0xe8*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers3;
                /*0x108*/ System.Globalization.TimeSpanParse.TimeSpanToken _numbers4;
                /*0x128*/ System.ReadOnlySpan<char> _literals0;
                /*0x138*/ System.ReadOnlySpan<char> _literals1;
                /*0x148*/ System.ReadOnlySpan<char> _literals2;
                /*0x158*/ System.ReadOnlySpan<char> _literals3;
                /*0x168*/ System.ReadOnlySpan<char> _literals4;
                /*0x178*/ System.ReadOnlySpan<char> _literals5;

                /*0xef5fc0*/ System.Globalization.TimeSpanFormat.FormatLiterals get_PositiveInvariant();
                /*0xef5e80*/ System.Globalization.TimeSpanFormat.FormatLiterals get_NegativeInvariant();
                /*0xef6030*/ System.Globalization.TimeSpanFormat.FormatLiterals get_PositiveLocalized();
                /*0xef5ef0*/ System.Globalization.TimeSpanFormat.FormatLiterals get_NegativeLocalized();
                /*0xef4470*/ bool FullAppCompatMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xef5a00*/ bool PartialAppCompatMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xef5610*/ bool FullMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xef4d00*/ bool FullDMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xef4e80*/ bool FullHMMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xef4770*/ bool FullDHMMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xef5390*/ bool FullHMSMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xef49f0*/ bool FullDHMSMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xef5080*/ bool FullHMSFMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xef59a0*/ void Init(System.Globalization.DateTimeFormatInfo dtfi);
                /*0xef5c80*/ bool ProcessToken(ref System.Globalization.TimeSpanParse.TimeSpanToken tok, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0xef4320*/ bool AddSep(System.ReadOnlySpan<char> sep, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0xef41d0*/ bool AddNum(System.Globalization.TimeSpanParse.TimeSpanToken num, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            }

            struct TimeSpanResult
            {
                /*0x10*/ System.TimeSpan parsedTimeSpan;
                /*0x18*/ bool _throwOnFailure;

                /*0xef6270*/ TimeSpanResult(bool throwOnFailure);
                /*0xef6100*/ bool SetFailure(System.Globalization.TimeSpanParse.ParseFailureKind kind, string resourceKey, object messageArgument, string argumentName);
            }
        }

        enum UnicodeCategory
        {
            UppercaseLetter = 0,
            LowercaseLetter = 1,
            TitlecaseLetter = 2,
            ModifierLetter = 3,
            OtherLetter = 4,
            NonSpacingMark = 5,
            SpacingCombiningMark = 6,
            EnclosingMark = 7,
            DecimalDigitNumber = 8,
            LetterNumber = 9,
            OtherNumber = 10,
            SpaceSeparator = 11,
            LineSeparator = 12,
            ParagraphSeparator = 13,
            Control = 14,
            Format = 15,
            Surrogate = 16,
            PrivateUse = 17,
            ConnectorPunctuation = 18,
            DashPunctuation = 19,
            OpenPunctuation = 20,
            ClosePunctuation = 21,
            InitialQuotePunctuation = 22,
            FinalQuotePunctuation = 23,
            OtherPunctuation = 24,
            MathSymbol = 25,
            CurrencySymbol = 26,
            ModifierSymbol = 27,
            OtherSymbol = 28,
            OtherNotAssigned = 29,
        }

        class GlobalizationMode
        {
            static /*0x0*/ bool <Invariant>k__BackingField;

            static /*0xee3b40*/ GlobalizationMode();
            static /*0xee3b80*/ bool get_Invariant();
            static /*0x348b00*/ bool GetGlobalizationInvariantMode();
        }

        class Calendar : System.ICloneable
        {
            static long TicksPerMillisecond = 10000;
            static long TicksPerSecond = 10000000;
            static long TicksPerMinute = 600000000;
            static long TicksPerHour = 36000000000;
            static long TicksPerDay = 864000000000;
            static int MillisPerSecond = 1000;
            static int MillisPerMinute = 60000;
            static int MillisPerHour = 3600000;
            static int MillisPerDay = 86400000;
            static int DaysPerYear = 365;
            static int DaysPer4Years = 1461;
            static int DaysPer100Years = 36524;
            static int DaysPer400Years = 146097;
            static int DaysTo10000 = 3652059;
            static long MaxMillis = 315537897600000;
            static int CAL_GREGORIAN = 1;
            static int CAL_GREGORIAN_US = 2;
            static int CAL_JAPAN = 3;
            static int CAL_TAIWAN = 4;
            static int CAL_KOREA = 5;
            static int CAL_HIJRI = 6;
            static int CAL_THAI = 7;
            static int CAL_HEBREW = 8;
            static int CAL_GREGORIAN_ME_FRENCH = 9;
            static int CAL_GREGORIAN_ARABIC = 10;
            static int CAL_GREGORIAN_XLIT_ENGLISH = 11;
            static int CAL_GREGORIAN_XLIT_FRENCH = 12;
            static int CAL_JULIAN = 13;
            static int CAL_JAPANESELUNISOLAR = 14;
            static int CAL_CHINESELUNISOLAR = 15;
            static int CAL_SAKA = 16;
            static int CAL_LUNAR_ETO_CHN = 17;
            static int CAL_LUNAR_ETO_KOR = 18;
            static int CAL_LUNAR_ETO_ROKUYOU = 19;
            static int CAL_KOREANLUNISOLAR = 20;
            static int CAL_TAIWANLUNISOLAR = 21;
            static int CAL_PERSIAN = 22;
            static int CAL_UMALQURA = 23;
            static int CurrentEra = 0;
            /*0x10*/ int m_currentEraValue;
            /*0x14*/ bool m_isReadOnly;
            /*0x18*/ int twoDigitYearMax;

            static /*0xedf970*/ long TimeToTicks(int hour, int minute, int second, int millisecond);
            static /*0xedf760*/ int GetSystemTwoDigitYearSetting(int CalID, int defaultYearValue);
            /*0xedfd50*/ Calendar();
            /*0xee0040*/ System.DateTime get_MinSupportedDateTime();
            /*0xedfff0*/ System.DateTime get_MaxSupportedDateTime();
            /*0xec2ac0*/ int get_ID();
            /*0xedfd70*/ int get_BaseCalendarID();
            /*0xedf6e0*/ object Clone();
            /*0xe29380*/ void SetReadOnlyState(bool readOnly);
            /*0xedfd90*/ int get_CurrentEraValue();
            int GetDayOfMonth(System.DateTime time);
            System.DayOfWeek GetDayOfWeek(System.DateTime time);
            int GetDaysInMonth(int year, int month, int era);
            /*0x17a4a0*/ int GetDaysInYear(int year, int era);
            int GetEra(System.DateTime time);
            /*0x1803b0*/ int[] get_Eras();
            int GetMonth(System.DateTime time);
            /*0x17a4a0*/ int GetMonthsInYear(int year, int era);
            int GetYear(System.DateTime time);
            /*0xedf7b0*/ bool IsLeapYear(int year);
            bool IsLeapYear(int year, int era);
            System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0xedfc50*/ bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, ref System.DateTime result);
            /*0xedf8e0*/ bool IsValidYear(int year, int era);
            /*0xedf860*/ bool IsValidMonth(int year, int month, int era);
            /*0xedf7d0*/ bool IsValidDay(int year, int month, int day, int era);
            /*0x8a5c20*/ int get_TwoDigitYearMax();
            /*0xedfb40*/ int ToFourDigitYear(int year);
        }

        class CalendarData
        {
            static int MAX_CALENDARS = 23;
            static /*0x0*/ System.Globalization.CalendarData Invariant;
            static /*0x8*/ string[] HEBREW_MONTH_NAMES;
            static /*0x10*/ string[] HEBREW_LEAP_MONTH_NAMES;
            /*0x10*/ string sNativeName;
            /*0x18*/ string[] saShortDates;
            /*0x20*/ string[] saYearMonths;
            /*0x28*/ string[] saLongDates;
            /*0x30*/ string sMonthDay;
            /*0x38*/ string[] saEraNames;
            /*0x40*/ string[] saAbbrevEraNames;
            /*0x48*/ string[] saAbbrevEnglishEraNames;
            /*0x50*/ string[] saDayNames;
            /*0x58*/ string[] saAbbrevDayNames;
            /*0x60*/ string[] saSuperShortDayNames;
            /*0x68*/ string[] saMonthNames;
            /*0x70*/ string[] saAbbrevMonthNames;
            /*0x78*/ string[] saMonthGenitiveNames;
            /*0x80*/ string[] saAbbrevMonthGenitiveNames;
            /*0x88*/ string[] saLeapYearMonthNames;
            /*0x90*/ int iTwoDigitYearMax;
            /*0x94*/ int iCurrentEra;
            /*0x98*/ bool bUseUserOverrides;

            static /*0xedddf0*/ CalendarData();
            static /*0xedd440*/ string[] GetJapaneseEraNames();
            static /*0xedd270*/ string[] GetJapaneseEnglishEraNames();
            static /*0xedd080*/ System.Globalization.CalendarData GetCalendarData(int calendarId);
            static /*0xedcef0*/ string CalendarIdToCultureName(int calendarId);
            static /*0xec2ac0*/ int nativeGetTwoDigitYearMax(int calID);
            static /*0xedf5f0*/ bool nativeGetCalendarData(System.Globalization.CalendarData data, string localeName, int calendarId);
            /*0xedf5c0*/ CalendarData();
            /*0xedee50*/ CalendarData(string localeName, int calendarId, bool bUseUserOverrides);
            /*0xedd990*/ void InitializeEraNames(string localeName, int calendarId);
            /*0xedd610*/ void InitializeAbbreviatedEraNames(string localeName, int calendarId);
            /*0xedf5e0*/ bool fill_calendar_data(string localeName, int datetimeIndex);
        }

        class GregorianCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ int[] DaysToMonth365;
            static /*0x8*/ int[] DaysToMonth366;
            static /*0x10*/ System.Globalization.Calendar s_defaultInstance;
            /*0x20*/ System.Globalization.GregorianCalendarTypes m_type;

            static /*0xee67f0*/ GregorianCalendar();
            static /*0xee5e50*/ System.Globalization.Calendar GetDefaultInstance();
            static /*0xee54a0*/ long GetAbsoluteDate(int year, int month, int day);
            /*0xee68e0*/ GregorianCalendar();
            /*0xee6910*/ GregorianCalendar(System.Globalization.GregorianCalendarTypes type);
            /*0xee63a0*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0xee6b10*/ System.DateTime get_MinSupportedDateTime();
            /*0xee6ac0*/ System.DateTime get_MaxSupportedDateTime();
            /*0x3e3af0*/ int get_ID();
            /*0xee5690*/ int GetDatePart(long ticks, int part);
            /*0xee5860*/ int GetDayOfMonth(System.DateTime time);
            /*0xee58d0*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0xee5950*/ int GetDaysInMonth(int year, int month, int era);
            /*0xee5c70*/ int GetDaysInYear(int year, int era);
            /*0x6bba80*/ int GetEra(System.DateTime time);
            /*0xee6a60*/ int[] get_Eras();
            /*0xee5f60*/ int GetMonth(System.DateTime time);
            /*0xee5fd0*/ int GetMonthsInYear(int year, int era);
            /*0xee6160*/ int GetYear(System.DateTime time);
            /*0xee61d0*/ bool IsLeapYear(int year, int era);
            /*0xee6490*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0xee66f0*/ bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, ref System.DateTime result);
            /*0xee6b60*/ int get_TwoDigitYearMax();
            /*0xee6570*/ int ToFourDigitYear(int year);
        }

        class EraInfo
        {
            /*0x10*/ int era;
            /*0x18*/ long ticks;
            /*0x20*/ int yearOffset;
            /*0x24*/ int minEraYear;
            /*0x28*/ int maxEraYear;
            /*0x30*/ string eraName;
            /*0x38*/ string abbrevEraName;
            /*0x40*/ string englishEraName;

            /*0xee3310*/ EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear);
            /*0xee3200*/ EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear, string eraName, string abbrevEraName, string englishEraName);
        }

        class GregorianCalendarHelper
        {
            static /*0x0*/ int[] DaysToMonth365;
            static /*0x8*/ int[] DaysToMonth366;
            /*0x10*/ int m_maxYear;
            /*0x14*/ int m_minYear;
            /*0x18*/ System.Globalization.Calendar m_Cal;
            /*0x20*/ System.Globalization.EraInfo[] m_EraInfo;
            /*0x28*/ int[] m_eras;
            /*0x30*/ System.DateTime m_minDate;

            static /*0xee51b0*/ GregorianCalendarHelper();
            static /*0xee3e50*/ long GetAbsoluteDate(int year, int month, int day);
            static /*0xee3dd0*/ long DateToTicks(int year, int month, int day);
            static /*0xee4ca0*/ long TimeToTicks(int hour, int minute, int second, int millisecond);
            /*0xee52a0*/ GregorianCalendarHelper(System.Globalization.Calendar cal, System.Globalization.EraInfo[] eraInfo);
            /*0x417e30*/ int get_MaxYear();
            /*0xee4750*/ int GetYearOffset(int year, int era, bool throwOnError);
            /*0xee4690*/ int GetGregorianYear(int year, int era);
            /*0xee4c80*/ bool IsValidYear(int year, int era);
            /*0xee4040*/ int GetDatePart(long ticks, int part);
            /*0xee3bd0*/ void CheckTicksRange(long ticks);
            /*0xee4230*/ int GetDayOfMonth(System.DateTime time);
            /*0xee42a0*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0xee4340*/ int GetDaysInMonth(int year, int month, int era);
            /*0xee44f0*/ int GetDaysInYear(int year, int era);
            /*0xee4580*/ int GetEra(System.DateTime time);
            /*0xee5360*/ int[] get_Eras();
            /*0xee46c0*/ int GetMonth(System.DateTime time);
            /*0xee4730*/ int GetMonthsInYear(int year, int era);
            /*0xee4ad0*/ int GetYear(System.DateTime time);
            /*0xee4c00*/ bool IsLeapYear(int year, int era);
            /*0xee4e70*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0xee4fb0*/ int ToFourDigitYear(int year, int twoDigitYearMax);
        }

        enum GregorianCalendarTypes
        {
            Localized = 1,
            USEnglish = 2,
            MiddleEastFrench = 9,
            Arabic = 10,
            TransliteratedEnglish = 11,
            TransliteratedFrench = 12,
        }

        class HijriCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ int HijriEra;
            static /*0x8*/ int[] HijriMonthDays;
            static /*0x10*/ System.DateTime calendarMinValue;
            static /*0x18*/ System.DateTime calendarMaxValue;
            /*0x20*/ int m_HijriAdvance;

            static /*0xee8a80*/ HijriCalendar();
            static /*0x388e90*/ int GetAdvanceHijriDate();
            static /*0xee75b0*/ void CheckTicksRange(long ticks);
            static /*0xee74e0*/ void CheckEraRange(int era);
            static /*0xee7980*/ void CheckYearRange(int year, int era);
            static /*0xee77b0*/ void CheckYearMonthRange(int year, int month, int era);
            /*0xee8bb0*/ HijriCalendar();
            /*0xee8d10*/ System.DateTime get_MinSupportedDateTime();
            /*0xee8cc0*/ System.DateTime get_MaxSupportedDateTime();
            /*0x448120*/ int get_ID();
            /*0xee7c30*/ long GetAbsoluteDateHijri(int y, int m, int d);
            /*0xee7b70*/ long DaysUpToHijriYear(int HijriYear);
            /*0xee8c60*/ int get_HijriAdjustment();
            /*0xee7d40*/ int GetDatePart(long ticks, int part);
            /*0xee7fe0*/ int GetDayOfMonth(System.DateTime time);
            /*0xee8050*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0xee80d0*/ int GetDaysInMonth(int year, int month, int era);
            /*0xee8330*/ int GetDaysInYear(int year, int era);
            /*0xee83c0*/ int GetEra(System.DateTime time);
            /*0xee8bd0*/ int[] get_Eras();
            /*0xee8450*/ int GetMonth(System.DateTime time);
            /*0xee84c0*/ int GetMonthsInYear(int year, int era);
            /*0xee8520*/ int GetYear(System.DateTime time);
            /*0xee8590*/ bool IsLeapYear(int year, int era);
            /*0xee8610*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0xee8d60*/ int get_TwoDigitYearMax();
            /*0xee88e0*/ int ToFourDigitYear(int year);
        }

        class JapaneseCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.DateTime calendarMinValue;
            static /*0x8*/ System.Globalization.EraInfo[] japaneseEraInfo;
            static /*0x10*/ System.Globalization.Calendar s_defaultInstance;
            /*0x20*/ System.Globalization.GregorianCalendarHelper helper;

            static /*0xee99c0*/ JapaneseCalendar();
            static /*0xee9130*/ System.Globalization.EraInfo[] GetEraInfo();
            static /*0x388e90*/ System.Globalization.EraInfo[] GetErasFromRegistry();
            static /*0xee9040*/ System.Globalization.Calendar GetDefaultInstance();
            static /*0xee8ec0*/ string[] EraNames();
            static /*0xee8dd0*/ string[] EnglishEraNames();
            /*0xee9a30*/ JapaneseCalendar();
            /*0xee9c10*/ System.DateTime get_MinSupportedDateTime();
            /*0xee9bc0*/ System.DateTime get_MaxSupportedDateTime();
            /*0x408450*/ int get_ID();
            /*0xee8ff0*/ int GetDaysInMonth(int year, int month, int era);
            /*0xee9020*/ int GetDaysInYear(int year, int era);
            /*0xee8fb0*/ int GetDayOfMonth(System.DateTime time);
            /*0xee8fd0*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0xee9750*/ int GetMonthsInYear(int year, int era);
            /*0xee9710*/ int GetEra(System.DateTime time);
            /*0xee9730*/ int GetMonth(System.DateTime time);
            /*0xee9780*/ int GetYear(System.DateTime time);
            /*0xee97a0*/ bool IsLeapYear(int year, int era);
            /*0xee97f0*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0xee9820*/ int ToFourDigitYear(int year);
            /*0xee9ba0*/ int[] get_Eras();
            /*0xee97c0*/ bool IsValidYear(int year, int era);
            /*0xee9c60*/ int get_TwoDigitYearMax();
        }

        class NumberFormatInfo : System.ICloneable, System.IFormatProvider
        {
            static System.Globalization.NumberStyles InvalidNumberStyles = -1024;
            static /*0x0*/ System.Globalization.NumberFormatInfo invariantInfo;
            /*0x10*/ int[] numberGroupSizes;
            /*0x18*/ int[] currencyGroupSizes;
            /*0x20*/ int[] percentGroupSizes;
            /*0x28*/ string positiveSign;
            /*0x30*/ string negativeSign;
            /*0x38*/ string numberDecimalSeparator;
            /*0x40*/ string numberGroupSeparator;
            /*0x48*/ string currencyGroupSeparator;
            /*0x50*/ string currencyDecimalSeparator;
            /*0x58*/ string currencySymbol;
            /*0x60*/ string ansiCurrencySymbol;
            /*0x68*/ string nanSymbol;
            /*0x70*/ string positiveInfinitySymbol;
            /*0x78*/ string negativeInfinitySymbol;
            /*0x80*/ string percentDecimalSeparator;
            /*0x88*/ string percentGroupSeparator;
            /*0x90*/ string percentSymbol;
            /*0x98*/ string perMilleSymbol;
            /*0xa0*/ string[] nativeDigits;
            /*0xa8*/ int m_dataItem;
            /*0xac*/ int numberDecimalDigits;
            /*0xb0*/ int currencyDecimalDigits;
            /*0xb4*/ int currencyPositivePattern;
            /*0xb8*/ int currencyNegativePattern;
            /*0xbc*/ int numberNegativePattern;
            /*0xc0*/ int percentPositivePattern;
            /*0xc4*/ int percentNegativePattern;
            /*0xc8*/ int percentDecimalDigits;
            /*0xcc*/ int digitSubstitution;
            /*0xd0*/ bool isReadOnly;
            /*0xd1*/ bool m_useUserOverride;
            /*0xd2*/ bool m_isInvariant;
            /*0xd3*/ bool validForParseAsNumber;
            /*0xd4*/ bool validForParseAsCurrency;

            static /*0xeeab40*/ System.Globalization.NumberFormatInfo get_InvariantInfo();
            static /*0xee9dd0*/ System.Globalization.NumberFormatInfo GetInstance(System.IFormatProvider formatProvider);
            static /*0xeeaa30*/ System.Globalization.NumberFormatInfo get_CurrentInfo();
            static /*0xeea120*/ System.Globalization.NumberFormatInfo ReadOnly(System.Globalization.NumberFormatInfo nfi);
            static /*0xeea2d0*/ void ValidateParseStyleInteger(System.Globalization.NumberStyles style);
            static /*0xeea1f0*/ void ValidateParseStyleFloatingPoint(System.Globalization.NumberStyles style);
            /*0xeea440*/ NumberFormatInfo();
            /*0xeea450*/ NumberFormatInfo(System.Globalization.CultureData cultureData);
            /*0xeea090*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x32d010*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x32d010*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0xeea3c0*/ void VerifyWritable();
            /*0xee9cd0*/ object Clone();
            /*0xeeaa20*/ int get_CurrencyDecimalDigits();
            /*0x4e40e0*/ string get_CurrencyDecimalSeparator();
            /*0xeeac60*/ bool get_IsReadOnly();
            /*0x4e40d0*/ string get_CurrencyGroupSeparator();
            /*0xb61940*/ string get_CurrencySymbol();
            /*0x8af030*/ string get_NaNSymbol();
            /*0xeeacc0*/ void set_NaNSymbol(string value);
            /*0x54b1d0*/ int get_CurrencyNegativePattern();
            /*0xeeac70*/ int get_NumberNegativePattern();
            /*0xeeacb0*/ int get_PercentPositivePattern();
            /*0xeeaca0*/ int get_PercentNegativePattern();
            /*0xecb7b0*/ string get_NegativeInfinitySymbol();
            /*0x997630*/ string get_NegativeSign();
            /*0xb69b00*/ int get_NumberDecimalDigits();
            /*0x995140*/ string get_NumberDecimalSeparator();
            /*0xb61870*/ string get_NumberGroupSeparator();
            /*0xbf2be0*/ int get_CurrencyPositivePattern();
            /*0xd184b0*/ string get_PositiveInfinitySymbol();
            /*0x79a150*/ string get_PositiveSign();
            /*0xeeac80*/ int get_PercentDecimalDigits();
            /*0xeeac90*/ string get_PercentDecimalSeparator();
            /*0x7379f0*/ string get_PercentGroupSeparator();
            /*0x7378b0*/ string get_PercentSymbol();
            /*0x9c7a50*/ string get_PerMilleSymbol();
            /*0xee9d40*/ object GetFormat(System.Type formatType);
        }

        class TaiwanCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.Globalization.EraInfo[] taiwanEraInfo;
            static /*0x8*/ System.Globalization.Calendar s_defaultInstance;
            static /*0x10*/ System.DateTime calendarMinValue;
            /*0x20*/ System.Globalization.GregorianCalendarHelper helper;

            static /*0xeeb840*/ TaiwanCalendar();
            static /*0xeeb5b0*/ System.Globalization.Calendar GetDefaultInstance();
            /*0xeeba00*/ TaiwanCalendar();
            /*0xeebbd0*/ System.DateTime get_MinSupportedDateTime();
            /*0xeebb80*/ System.DateTime get_MaxSupportedDateTime();
            /*0x6bbad0*/ int get_ID();
            /*0xee8ff0*/ int GetDaysInMonth(int year, int month, int era);
            /*0xee9020*/ int GetDaysInYear(int year, int era);
            /*0xee8fb0*/ int GetDayOfMonth(System.DateTime time);
            /*0xee8fd0*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0xee9750*/ int GetMonthsInYear(int year, int era);
            /*0xee9710*/ int GetEra(System.DateTime time);
            /*0xee9730*/ int GetMonth(System.DateTime time);
            /*0xee9780*/ int GetYear(System.DateTime time);
            /*0xee97a0*/ bool IsLeapYear(int year, int era);
            /*0xee97f0*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0xee9ba0*/ int[] get_Eras();
            /*0xee9c60*/ int get_TwoDigitYearMax();
            /*0xeeb6a0*/ int ToFourDigitYear(int year);
        }

        class TextInfo : System.ICloneable, System.Runtime.Serialization.IDeserializationCallback
        {
            static int wordSeparatorMask = 536672256;
            static /*0x0*/ System.Globalization.TextInfo s_Invariant;
            /*0x10*/ string m_listSeparator;
            /*0x18*/ bool m_isReadOnly;
            /*0x20*/ string m_cultureName;
            /*0x28*/ System.Globalization.CultureData m_cultureData;
            /*0x30*/ string m_textInfoName;
            /*0x38*/ System.Nullable<bool> m_IsAsciiCasingSameAsInvariant;
            /*0x40*/ string customCultureName;
            /*0x48*/ int m_nDataItem;
            /*0x4c*/ bool m_useUserOverride;
            /*0x50*/ int m_win32LangID;

            static /*0xeed360*/ System.Globalization.TextInfo get_Invariant();
            static /*0xeec0e0*/ char ToLowerAsciiInvariant(char c);
            static /*0xeec9e0*/ char ToUpperAsciiInvariant(char c);
            static /*0xeebeb0*/ bool IsAscii(char c);
            /*0xeed2c0*/ TextInfo(System.Globalization.CultureData cultureData);
            /*0xeed330*/ TextInfo();
            /*0xeec000*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0xeebec0*/ void OnDeserialized();
            /*0xeebff0*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0xeec040*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x997630*/ string get_CultureName();
            /*0xeebd70*/ object Clone();
            /*0xdd5230*/ void SetReadOnlyState(bool readOnly);
            /*0xeec730*/ char ToLower(char c);
            /*0xeec790*/ string ToLower(string str);
            /*0xeed260*/ char ToUpper(char c);
            /*0xeed120*/ string ToUpper(string str);
            /*0xeed470*/ bool get_IsAsciiCasingSameAsInvariant();
            /*0xeebdf0*/ bool Equals(object obj);
            /*0xeebe80*/ int GetHashCode();
            /*0xeec8d0*/ string ToString();
            /*0xeebff0*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0xeed030*/ string ToUpperInternal(string str);
            /*0xeec640*/ string ToLowerInternal(string str);
            /*0xeeca00*/ char ToUpperInternal(char c);
            /*0xeec100*/ char ToLowerInternal(char c);
            /*0xeec920*/ void ToUpperAsciiInvariant(System.ReadOnlySpan<char> source, System.Span<char> destination);
            /*0xeebc20*/ void ChangeCase(System.ReadOnlySpan<char> source, System.Span<char> destination, bool toUpper);
        }

        class ThaiBuddhistCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.Globalization.EraInfo[] thaiBuddhistEraInfo;
            /*0x20*/ System.Globalization.GregorianCalendarHelper helper;

            static /*0xeed610*/ ThaiBuddhistCalendar();
            /*0xeed780*/ ThaiBuddhistCalendar();
            /*0xeed890*/ System.DateTime get_MinSupportedDateTime();
            /*0xeed840*/ System.DateTime get_MaxSupportedDateTime();
            /*0x3b8e20*/ int get_ID();
            /*0xee8ff0*/ int GetDaysInMonth(int year, int month, int era);
            /*0xee9020*/ int GetDaysInYear(int year, int era);
            /*0xee8fb0*/ int GetDayOfMonth(System.DateTime time);
            /*0xee8fd0*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0xee9750*/ int GetMonthsInYear(int year, int era);
            /*0xee9710*/ int GetEra(System.DateTime time);
            /*0xee9730*/ int GetMonth(System.DateTime time);
            /*0xee9780*/ int GetYear(System.DateTime time);
            /*0xee97a0*/ bool IsLeapYear(int year, int era);
            /*0xee97f0*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0xee9ba0*/ int[] get_Eras();
            /*0xeed8e0*/ int get_TwoDigitYearMax();
            /*0xeed550*/ int ToFourDigitYear(int year);
        }

        class UmAlQuraCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.Globalization.UmAlQuraCalendar.DateMapping[] HijriYearInfo;
            static /*0x8*/ System.DateTime minDate;
            static /*0x10*/ System.DateTime maxDate;

            static /*0xef7ca0*/ UmAlQuraCalendar();
            static /*0xef75f0*/ System.Globalization.UmAlQuraCalendar.DateMapping[] InitDateMapping();
            static /*0xef6e30*/ void ConvertHijriToGregorian(int HijriYear, int HijriMonth, int HijriDay, ref int yg, ref int mg, ref int dg);
            static /*0xef6fa0*/ long GetAbsoluteDateUmAlQura(int year, int month, int day);
            static /*0xef6680*/ void CheckTicksRange(long ticks);
            static /*0xef65f0*/ void CheckEraRange(int era);
            static /*0xef6950*/ void CheckYearRange(int year, int era);
            static /*0xef6880*/ void CheckYearMonthRange(int year, int month, int era);
            static /*0xef6b10*/ void ConvertGregorianToHijri(System.DateTime time, ref int HijriYear, ref int HijriMonth, ref int HijriDay);
            static /*0xef77f0*/ int RealGetDaysInYear(int year);
            /*0xedfd50*/ UmAlQuraCalendar();
            /*0xef8050*/ System.DateTime get_MinSupportedDateTime();
            /*0xef8000*/ System.DateTime get_MaxSupportedDateTime();
            /*0x448120*/ int get_BaseCalendarID();
            /*0xef7ff0*/ int get_ID();
            /*0xef7160*/ int GetDatePart(System.DateTime time, int part);
            /*0xef7310*/ int GetDayOfMonth(System.DateTime time);
            /*0xef7330*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0xef73b0*/ int GetDaysInMonth(int year, int month, int era);
            /*0xef7470*/ int GetDaysInYear(int year, int era);
            /*0xef74d0*/ int GetEra(System.DateTime time);
            /*0xef7f90*/ int[] get_Eras();
            /*0xef7550*/ int GetMonth(System.DateTime time);
            /*0xef7570*/ int GetMonthsInYear(int year, int era);
            /*0xef75d0*/ int GetYear(System.DateTime time);
            /*0xef7780*/ bool IsLeapYear(int year, int era);
            /*0xef7890*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0xee8d60*/ int get_TwoDigitYearMax();
            /*0xef7b00*/ int ToFourDigitYear(int year);

            struct DateMapping
            {
                /*0x10*/ int HijriMonthsLengthFlags;
                /*0x18*/ System.DateTime GregorianDate;

                /*0xee1b70*/ DateMapping(int MonthsLengthFlags, int GYear, int GMonth, int GDay);
            }
        }

        class SortKey
        {
            /*0x10*/ string source;
            /*0x18*/ byte[] key;
            /*0x20*/ System.Globalization.CompareOptions options;
            /*0x24*/ int lcid;

            static /*0xeeadb0*/ int Compare(System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);
            /*0xeeb300*/ SortKey(int lcid, string source, System.Globalization.CompareOptions opt);
            /*0xeeb240*/ SortKey(int lcid, string source, byte[] buffer, System.Globalization.CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength);
            /*0xeeb2b0*/ SortKey(string localeName, string str, System.Globalization.CompareOptions options, byte[] keyData);
            /*0xeeb3e0*/ SortKey();
            /*0x73d3e0*/ string get_OriginalString();
            /*0x32f410*/ byte[] get_KeyData();
            /*0xeeafd0*/ bool Equals(object value);
            /*0xeeb070*/ int GetHashCode();
            /*0xeeb0e0*/ string ToString();
        }

        interface ISimpleCollator
        {
            System.Globalization.SortKey GetSortKey(string source, System.Globalization.CompareOptions options);
            int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, System.Globalization.CompareOptions options);
            bool IsPrefix(string src, string target, System.Globalization.CompareOptions opt);
            bool IsSuffix(string src, string target, System.Globalization.CompareOptions opt);
            int IndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
            int LastIndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
        }

        class CultureData
        {
            static /*0x0*/ System.Globalization.CultureData s_Invariant;
            /*0x10*/ string sAM1159;
            /*0x18*/ string sPM2359;
            /*0x20*/ string sTimeSeparator;
            /*0x28*/ string[] saLongTimes;
            /*0x30*/ string[] saShortTimes;
            /*0x38*/ int iFirstDayOfWeek;
            /*0x3c*/ int iFirstWeekOfYear;
            /*0x40*/ int[] waCalendars;
            /*0x48*/ System.Globalization.CalendarData[] calendars;
            /*0x50*/ string sISO639Language;
            /*0x58*/ string sRealName;
            /*0x60*/ bool bUseOverrides;
            /*0x64*/ int calendarId;
            /*0x68*/ int numberIndex;
            /*0x6c*/ int iDefaultAnsiCodePage;
            /*0x70*/ int iDefaultOemCodePage;
            /*0x74*/ int iDefaultMacCodePage;
            /*0x78*/ int iDefaultEbcdicCodePage;
            /*0x7c*/ bool isRightToLeft;
            /*0x80*/ string sListSeparator;

            static /*0xee1690*/ System.Globalization.CultureData get_Invariant();
            static /*0xee0770*/ System.Globalization.CultureData GetCultureData(string cultureName, bool useUserOverride);
            static /*0xee0650*/ System.Globalization.CultureData GetCultureData(string cultureName, bool useUserOverride, int datetimeIndex, int calendarId, int numberIndex, string iso2lang, int ansiCodePage, int oemCodePage, int macCodePage, int ebcdicCodePage, bool rightToLeft, string listSeparator);
            static /*0xee07f0*/ string GetDateSeparator(string format);
            static /*0xee0e60*/ string GetSeparator(string format, string timeParts);
            static /*0xee1060*/ int IndexOfTimePart(string format, int startIndex, string timeParts);
            static /*0xee1200*/ string UnescapeNlsString(string str, int start, int end);
            static /*0x621ca0*/ string[] ReescapeWin32Strings(string[] array);
            static /*0x621ca0*/ string ReescapeWin32String(string str);
            static /*0xee1b50*/ int strlen(byte* s);
            static /*0xee1af0*/ string idx2string(byte* data, int idx);
            static /*0xee14c0*/ byte* fill_number_data(int index, ref System.Globalization.CultureData.NumberFormatEntryManaged nfe);
            /*0xee13c0*/ CultureData(string name);
            /*0xee14b0*/ void fill_culture_data(int datetimeIndex);
            /*0xee0510*/ System.Globalization.CalendarData GetCalendar(int calendarId);
            /*0xc5bf40*/ string[] get_LongTimes();
            /*0xee1ad0*/ string[] get_ShortTimes();
            /*0x4e40e0*/ string get_SISO639LANGNAME();
            /*0xeab1d0*/ int get_IFIRSTDAYOFWEEK();
            /*0xee1680*/ int get_IFIRSTWEEKOFYEAR();
            /*0x73d3e0*/ string get_SAM1159();
            /*0x32f410*/ string get_SPM2359();
            /*0x61a260*/ string get_TimeSeparator();
            /*0xee14d0*/ int[] get_CalendarIds();
            /*0xee0270*/ System.Globalization.CalendarId[] GetCalendarIds();
            /*0xee1a90*/ bool get_IsInvariantCulture();
            /*0xb61940*/ string get_CultureName();
            /*0xee1aa0*/ string get_SCOMPAREINFO();
            /*0xb61940*/ string get_STEXTINFO();
            /*0xe27510*/ bool get_UseUserOverride();
            /*0xee0230*/ string[] EraNames(int calendarId);
            /*0xee0090*/ string[] AbbrevEraNames(int calendarId);
            /*0xee00d0*/ string[] AbbreviatedEnglishEraNames(int calendarId);
            /*0xee11e0*/ string[] ShortDates(int calendarId);
            /*0xee1180*/ string[] LongDates(int calendarId);
            /*0xee13a0*/ string[] YearMonths(int calendarId);
            /*0xee0210*/ string[] DayNames(int calendarId);
            /*0xee00b0*/ string[] AbbreviatedDayNames(int calendarId);
            /*0xee11c0*/ string[] MonthNames(int calendarId);
            /*0xee0250*/ string[] GenitiveMonthNames(int calendarId);
            /*0xee0120*/ string[] AbbreviatedMonthNames(int calendarId);
            /*0xee00f0*/ string[] AbbreviatedGenitiveMonthNames(int calendarId);
            /*0xee1150*/ string[] LeapYearMonthNames(int calendarId);
            /*0xee11a0*/ string MonthDay(int calendarId);
            /*0xee0140*/ string DateSeparator(int calendarId);
            /*0xee1400*/ int[] create_group_sizes_array(int gs0, int gs1);
            /*0xee0830*/ void GetNFIValues(System.Globalization.NumberFormatInfo nfi);

            struct NumberFormatEntryManaged
            {
                /*0x10*/ int currency_decimal_digits;
                /*0x14*/ int currency_decimal_separator;
                /*0x18*/ int currency_group_separator;
                /*0x1c*/ int currency_group_sizes0;
                /*0x20*/ int currency_group_sizes1;
                /*0x24*/ int currency_negative_pattern;
                /*0x28*/ int currency_positive_pattern;
                /*0x2c*/ int currency_symbol;
                /*0x30*/ int nan_symbol;
                /*0x34*/ int negative_infinity_symbol;
                /*0x38*/ int negative_sign;
                /*0x3c*/ int number_decimal_digits;
                /*0x40*/ int number_decimal_separator;
                /*0x44*/ int number_group_separator;
                /*0x48*/ int number_group_sizes0;
                /*0x4c*/ int number_group_sizes1;
                /*0x50*/ int number_negative_pattern;
                /*0x54*/ int per_mille_symbol;
                /*0x58*/ int percent_negative_pattern;
                /*0x5c*/ int percent_positive_pattern;
                /*0x60*/ int percent_symbol;
                /*0x64*/ int positive_infinity_symbol;
                /*0x68*/ int positive_sign;
            }
        }

        class CodePageDataItem
        {
            static /*0x0*/ char[] sep;
            /*0x10*/ int m_dataIndex;
            /*0x14*/ int m_uiFamilyCodePage;
            /*0x18*/ uint m_flags;

            static /*0xef88a0*/ CodePageDataItem();
            /*0xef8930*/ CodePageDataItem(int dataIndex);
        }

        class EncodingTable
        {
            static /*0x0*/ System.Globalization.InternalEncodingDataItem[] encodingDataPtr;
            static /*0x8*/ System.Globalization.InternalCodePageDataItem[] codePageDataPtr;
            static /*0x10*/ int lastEncodingItem;
            static /*0x18*/ System.Collections.Generic.Dictionary<string, int> hashByName;
            static /*0x20*/ System.Collections.Generic.Dictionary<int, System.Globalization.CodePageDataItem> hashByCodePage;

            static /*0xefe6b0*/ EncodingTable();
            static /*0xefe610*/ int GetNumEncodingItems();
            static /*0xefe0d0*/ System.Globalization.InternalEncodingDataItem ENC(string name, ushort cp);
            static /*0xefe670*/ System.Globalization.InternalCodePageDataItem MapCodePageDataItem(ushort cp, ushort fcp, string names, uint flags);
            static /*0xf08e20*/ int internalGetCodePageFromName(string name);
            static /*0xefe3d0*/ int GetCodePageFromName(string name);
            static /*0xefe110*/ System.Globalization.CodePageDataItem GetCodePageDataItem(int codepage);
        }

        struct InternalEncodingDataItem
        {
            /*0x10*/ string webName;
            /*0x18*/ ushort codePage;
        }

        struct InternalCodePageDataItem
        {
            /*0x10*/ ushort codePage;
            /*0x12*/ ushort uiFamilyCodePage;
            /*0x14*/ uint flags;
            /*0x18*/ string Names;
        }

        class TextInfoToUpperData
        {
            static /*0x0*/ char[] range_00e0_0586;
            static /*0x8*/ char[] range_1e01_1ff3;
            static /*0x10*/ char[] range_2170_2184;
            static /*0x18*/ char[] range_24d0_24e9;
            static /*0x20*/ char[] range_2c30_2ce3;
            static /*0x28*/ char[] range_2d00_2d25;
            static /*0x30*/ char[] range_a641_a697;
            static /*0x38*/ char[] range_a723_a78c;

            static /*0xf0a860*/ TextInfoToUpperData();
        }

        class TextInfoToLowerData
        {
            static /*0x0*/ char[] range_00c0_0556;
            static /*0x8*/ char[] range_10a0_10c5;
            static /*0x10*/ char[] range_1e00_1ffc;
            static /*0x18*/ char[] range_2160_216f;
            static /*0x20*/ char[] range_24b6_24cf;
            static /*0x28*/ char[] range_2c00_2c2e;
            static /*0x30*/ char[] range_2c60_2ce2;
            static /*0x38*/ char[] range_a640_a696;
            static /*0x40*/ char[] range_a722_a78b;

            static /*0xf0a4e0*/ TextInfoToLowerData();
        }

        class CultureInfo : System.ICloneable, System.IFormatProvider
        {
            static int InvariantCultureId = 127;
            static int CalendarTypeBits = 8;
            static int LOCALE_INVARIANT = 127;
            static string MSG_READONLY = "This instance is read only";
            static /*0x0*/ System.Globalization.CultureInfo invariant_culture_info;
            static /*0x8*/ object shared_table_lock;
            static /*0x10*/ System.Globalization.CultureInfo default_current_culture;
            static /*0x18*/ System.Globalization.CultureInfo s_DefaultThreadCurrentUICulture;
            static /*0x20*/ System.Globalization.CultureInfo s_DefaultThreadCurrentCulture;
            static /*0x28*/ System.Collections.Generic.Dictionary<int, System.Globalization.CultureInfo> shared_by_number;
            static /*0x30*/ System.Collections.Generic.Dictionary<string, System.Globalization.CultureInfo> shared_by_name;
            static /*0x38*/ System.Globalization.CultureInfo s_UserPreferredCultureInfoInAppX;
            static /*0x40*/ bool IsTaiwanSku;
            /*0x10*/ bool m_isReadOnly;
            /*0x14*/ int cultureID;
            /*0x18*/ int parent_lcid;
            /*0x1c*/ int datetime_index;
            /*0x20*/ int number_index;
            /*0x24*/ int default_calendar_type;
            /*0x28*/ bool m_useUserOverride;
            /*0x30*/ System.Globalization.NumberFormatInfo numInfo;
            /*0x38*/ System.Globalization.DateTimeFormatInfo dateTimeInfo;
            /*0x40*/ System.Globalization.TextInfo textInfo;
            /*0x48*/ string m_name;
            /*0x50*/ string englishname;
            /*0x58*/ string nativename;
            /*0x60*/ string iso3lang;
            /*0x68*/ string iso2lang;
            /*0x70*/ string win3lang;
            /*0x78*/ string territory;
            /*0x80*/ string[] native_calendar_names;
            /*0x88*/ System.Globalization.CompareInfo compareInfo;
            /*0x90*/ void* textinfo_data;
            /*0x98*/ int m_dataItem;
            /*0xa0*/ System.Globalization.Calendar calendar;
            /*0xa8*/ System.Globalization.CultureInfo parent_culture;
            /*0xb0*/ bool constructed;
            /*0xb8*/ byte[] cached_serialized_form;
            /*0xc0*/ System.Globalization.CultureData m_cultureData;
            /*0xc8*/ bool m_isInherited;

            static /*0xefc650*/ CultureInfo();
            static /*0xefd6c0*/ System.Globalization.CultureInfo get_InvariantCulture();
            static /*0xefd3d0*/ System.Globalization.CultureInfo get_CurrentCulture();
            static /*0xefd400*/ System.Globalization.CultureInfo get_CurrentUICulture();
            static /*0xef8bc0*/ System.Globalization.CultureInfo ConstructCurrentCulture();
            static /*0xef8db0*/ System.Globalization.CultureInfo ConstructCurrentUICulture();
            static /*0xefdd10*/ string get_current_locale_name();
            static /*0xefdd20*/ void insert_into_shared_tables(System.Globalization.CultureInfo c);
            static /*0xefbae0*/ System.Globalization.CultureInfo GetCultureInfo(int culture);
            static /*0xefbd40*/ System.Globalization.CultureInfo GetCultureInfo(string name);
            static /*0xef92b0*/ System.Globalization.CultureInfo CreateCulture(string name, bool reference);
            static /*0xefb5c0*/ System.Globalization.CultureInfo CreateSpecificCulture(string name);
            static /*0xef93e0*/ System.Globalization.CultureInfo CreateSpecificCultureFromNeutral(string name);
            static /*0xef90a0*/ System.Globalization.Calendar CreateCalendar(int calendarType);
            static /*0xef9340*/ System.Exception CreateNotFoundException(string name);
            static /*0xefd5c0*/ System.Globalization.CultureInfo get_DefaultThreadCurrentCulture();
            static /*0xefd620*/ System.Globalization.CultureInfo get_DefaultThreadCurrentUICulture();
            static /*0xefdc70*/ System.Globalization.CultureInfo get_UserDefaultUICulture();
            static /*0xefdc30*/ System.Globalization.CultureInfo get_UserDefaultCulture();
            static /*0xefc0e0*/ void InitializeUserPreferredCultureInfoInAppX(System.Globalization.CultureInfo.OnCultureInfoChangedDelegate onCultureInfoChangedInAppX);
            static /*0xefc320*/ void SetUserPreferredCultureInfoInAppX(string name);
            static /*0xefc100*/ void OnCultureInfoChangedInAppX(string language);
            static /*0xefb9f0*/ System.Globalization.CultureInfo GetCultureInfoForUserPreferredLanguageInAppX();
            static /*0xefc1e0*/ void SetCultureInfoForUserPreferredLanguageInAppX(System.Globalization.CultureInfo cultureInfo);
            static /*0xefc500*/ bool VerifyCultureName(string cultureName, bool throwException);
            static /*0xefc340*/ bool VerifyCultureName(System.Globalization.CultureInfo culture, bool throwException);
            /*0xefd110*/ CultureInfo(int culture);
            /*0xefcd80*/ CultureInfo(int culture, bool useUserOverride);
            /*0xefcda0*/ CultureInfo(int culture, bool useUserOverride, bool read_only);
            /*0xefcd40*/ CultureInfo(string name);
            /*0xefd0f0*/ CultureInfo(string name, bool useUserOverride);
            /*0xefca50*/ CultureInfo(string name, bool useUserOverride, bool read_only);
            /*0xefcd60*/ CultureInfo();
            /*0xefdcf0*/ System.Globalization.CultureData get__cultureData();
            /*0xefdd00*/ bool get__isInherited();
            /*0xecb7b0*/ string get_Territory();
            /*0x4e40d0*/ string get__name();
            /*0x70a440*/ int get_LCID();
            /*0x4e40d0*/ string get_Name();
            /*0xefd1f0*/ System.Globalization.Calendar get_Calendar();
            /*0xefd810*/ System.Globalization.CultureInfo get_Parent();
            /*0xefdae0*/ System.Globalization.TextInfo get_TextInfo();
            /*0xef89f0*/ object Clone();
            /*0xefb960*/ bool Equals(object value);
            /*0xefc0c0*/ System.Globalization.CultureInfo.Data GetTextInfoData();
            /*0xefc0b0*/ int GetHashCode();
            /*0x4e40d0*/ string ToString();
            /*0xefd290*/ System.Globalization.CompareInfo get_CompareInfo();
            /*0xefd720*/ bool get_IsNeutralCulture();
            /*0x32d010*/ void CheckNeutral();
            /*0xefd760*/ System.Globalization.NumberFormatInfo get_NumberFormat();
            /*0xefdfe0*/ void set_NumberFormat(System.Globalization.NumberFormatInfo value);
            /*0xefd430*/ System.Globalization.DateTimeFormatInfo get_DateTimeFormat();
            /*0xefdef0*/ void set_DateTimeFormat(System.Globalization.DateTimeFormatInfo value);
            /*0xefd680*/ string get_EnglishName();
            /*0xefbfa0*/ object GetFormat(System.Type formatType);
            /*0xef9080*/ void Construct();
            /*0xefd130*/ bool construct_internal_locale_from_lcid(int lcid);
            /*0xefd140*/ bool construct_internal_locale_from_name(string name);
            /*0xef8df0*/ void ConstructInvariant(bool read_only);
            /*0xefb8e0*/ System.Globalization.TextInfo CreateTextInfo(bool readOnly);
            /*0xef8fe0*/ bool ConstructLocaleFromName(string name);
            /*0xefd150*/ int get_CalendarType();
            /*0x4e40d0*/ string get_SortName();

            struct Data
            {
                /*0x10*/ int ansi;
                /*0x14*/ int ebcdic;
                /*0x18*/ int mac;
                /*0x1c*/ int oem;
                /*0x20*/ bool right_to_left;
                /*0x21*/ byte list_sep;
            }

            class OnCultureInfoChangedDelegate : System.MulticastDelegate
            {
                /*0xf0a420*/ OnCultureInfoChangedDelegate(object object, nint method);
                /*0x720980*/ void Invoke(string language);
            }
        }

        class IdnMapping
        {
            /*0x10*/ bool allow_unassigned;
            /*0x11*/ bool use_std3;
            /*0x18*/ System.Globalization.Punycode puny;

            /*0xf0a3b0*/ IdnMapping();
            /*0xf092c0*/ bool Equals(object obj);
            /*0xf09530*/ int GetHashCode();
            /*0xf09340*/ string GetAscii(string unicode);
            /*0xf09410*/ string GetAscii(string unicode, int index, int count);
            /*0xf090c0*/ string Convert(string input, int index, int count, bool toAscii);
            /*0xf09890*/ string ToAscii(string s, int offset);
            /*0xf09de0*/ void VerifyLength(string s, int offset);
            /*0xf09740*/ string NamePrep(string s, int offset);
            /*0xf09f20*/ void VerifyProhibitedCharacters(string s, int offset);
            /*0xf0a140*/ void VerifyStd3AsciiRules(string s, int offset);
            /*0xf09670*/ string GetUnicode(string ascii);
            /*0xf09550*/ string GetUnicode(string ascii, int index, int count);
            /*0xf09c10*/ string ToUnicode(string s, int offset);
        }

        class Bootstring
        {
            /*0x10*/ char delimiter;
            /*0x14*/ int base_num;
            /*0x18*/ int tmin;
            /*0x1c*/ int tmax;
            /*0x20*/ int skew;
            /*0x24*/ int damp;
            /*0x28*/ int initial_bias;
            /*0x2c*/ int initial_n;

            /*0xef8830*/ Bootstring(char delimiter, int baseNum, int tmin, int tmax, int skew, int damp, int initialBias, int initialN);
            /*0xef8420*/ string Encode(string s, int offset);
            /*0xef8400*/ char EncodeDigit(int d);
            /*0xef8120*/ int DecodeDigit(char c);
            /*0xef80a0*/ int Adapt(int delta, int numPoints, bool firstTime);
            /*0xef8150*/ string Decode(string s, int offset);
        }

        class Punycode : System.Globalization.Bootstring
        {
            /*0xf1a2d0*/ Punycode();
        }

        class RegionInfo
        {
            static /*0x0*/ System.Globalization.RegionInfo currentRegion;
            /*0x10*/ int regionId;
            /*0x18*/ string iso2Name;
            /*0x20*/ string iso3Name;
            /*0x28*/ string win3Name;
            /*0x30*/ string englishName;
            /*0x38*/ string nativeName;
            /*0x40*/ string currencySymbol;
            /*0x48*/ string isoCurrencySymbol;
            /*0x50*/ string currencyEnglishName;
            /*0x58*/ string currencyNativeName;

            static /*0xf1bcd0*/ System.Globalization.RegionInfo get_CurrentRegion();
            static /*0xf1b560*/ void ClearCachedData();
            /*0xf1bb30*/ RegionInfo(int culture);
            /*0xf1b760*/ RegionInfo(string name);
            /*0xf1b920*/ RegionInfo(System.Globalization.CultureInfo ci);
            /*0xf1b670*/ bool GetByTerritory(System.Globalization.CultureInfo ci);
            /*0xf1bcc0*/ bool construct_internal_region_from_name(string name);
            /*0x4e40e0*/ string get_CurrencyEnglishName();
            /*0xb61870*/ string get_CurrencySymbol();
            /*0x997630*/ string get_DisplayName();
            /*0x997630*/ string get_EnglishName();
            /*0x417e30*/ int get_GeoId();
            /*0xf1bda0*/ bool get_IsMetric();
            /*0x4e40d0*/ string get_ISOCurrencySymbol();
            /*0x995140*/ string get_NativeName();
            /*0xb61940*/ string get_CurrencyNativeName();
            /*0x32f410*/ string get_Name();
            /*0x61a260*/ string get_ThreeLetterISORegionName();
            /*0x79a150*/ string get_ThreeLetterWindowsRegionName();
            /*0x32f410*/ string get_TwoLetterISORegionName();
            /*0xf1b5b0*/ bool Equals(object value);
            /*0xf1b720*/ int GetHashCode();
            /*0x542e60*/ string ToString();
        }
    }

    namespace Diagnostics
    {
        class ConditionalAttribute : System.Attribute
        {
            /*0x10*/ string <ConditionString>k__BackingField;

            /*0xa32e30*/ ConditionalAttribute(string conditionString);
        }

        class StackTraceHiddenAttribute : System.Attribute
        {
            /*0x534220*/ StackTraceHiddenAttribute();
        }

        class DebuggerStepThroughAttribute : System.Attribute
        {
            /*0x534220*/ DebuggerStepThroughAttribute();
        }

        class DebuggerHiddenAttribute : System.Attribute
        {
            /*0x534220*/ DebuggerHiddenAttribute();
        }

        class DebuggerNonUserCodeAttribute : System.Attribute
        {
            /*0x534220*/ DebuggerNonUserCodeAttribute();
        }

        class DebuggableAttribute : System.Attribute
        {
            /*0x10*/ System.Diagnostics.DebuggableAttribute.DebuggingModes m_debuggingModes;

            /*0xea4040*/ DebuggableAttribute(System.Diagnostics.DebuggableAttribute.DebuggingModes modes);

            enum DebuggingModes
            {
                None = 0,
                Default = 1,
                DisableOptimizations = 256,
                IgnoreSymbolStoreSequencePoints = 2,
                EnableEditAndContinue = 4,
            }
        }

        enum DebuggerBrowsableState
        {
            Never = 0,
            Collapsed = 2,
            RootHidden = 3,
        }

        class DebuggerBrowsableAttribute : System.Attribute
        {
            /*0x10*/ System.Diagnostics.DebuggerBrowsableState state;

            /*0xf0f640*/ DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState state);
        }

        class DebuggerTypeProxyAttribute : System.Attribute
        {
            /*0x10*/ string typeName;

            /*0xf0f760*/ DebuggerTypeProxyAttribute(System.Type type);
        }

        class DebuggerDisplayAttribute : System.Attribute
        {
            /*0x10*/ string name;
            /*0x18*/ string value;
            /*0x20*/ string type;

            /*0xf0f6c0*/ DebuggerDisplayAttribute(string value);
            /*0x9f12f0*/ void set_Name(string value);
            /*0x7965a0*/ void set_Type(string value);
        }

        class Debugger
        {
            static /*0x0*/ string DefaultCategory;

            static /*0xf0f840*/ Debugger();
            static /*0x32d010*/ void NotifyOfCrossThreadDependency();
        }

        class StackFrame
        {
            static int OFFSET_UNKNOWN = -1;
            /*0x10*/ int ilOffset;
            /*0x14*/ int nativeOffset;
            /*0x18*/ long methodAddress;
            /*0x20*/ uint methodIndex;
            /*0x28*/ System.Reflection.MethodBase methodBase;
            /*0x30*/ string fileName;
            /*0x38*/ int lineNumber;
            /*0x3c*/ int columnNumber;
            /*0x40*/ string internalMethodName;

            static /*0xf1c440*/ bool get_frame_info(int skip, bool needFileInfo, ref System.Reflection.MethodBase method, ref int iloffset, ref int native_offset, ref string file, ref int line, ref int column);
            /*0xf1c3e0*/ StackFrame();
            /*0xf1c360*/ StackFrame(int skipFrames, bool fNeedFileInfo);
            /*0xeab1d0*/ int GetFileLineNumber();
            /*0x997630*/ string GetFileName();
            /*0xf1c0f0*/ string GetSecureFileName();
            /*0x417e30*/ int GetILOffset();
            /*0x79a150*/ System.Reflection.MethodBase GetMethod();
            /*0x70a440*/ int GetNativeOffset();
            /*0x32f410*/ long GetMethodAddress();
            /*0x3e3af0*/ uint GetMethodIndex();
            /*0xb61870*/ string GetInternalMethodName();
            /*0xf1c150*/ string ToString();
        }

        class StackTrace
        {
            static int METHODS_TO_SKIP = 0;
            static string prefix = "  at ";
            static /*0x0*/ bool isAotidSet;
            static /*0x8*/ string aotid;
            /*0x10*/ System.Diagnostics.StackFrame[] frames;
            /*0x18*/ System.Diagnostics.StackTrace[] captured_traces;
            /*0x20*/ bool debug_info;

            static /*0xf1d8e0*/ System.Diagnostics.StackFrame[] get_trace(System.Exception e, int skipFrames, bool fNeedFileInfo);
            static /*0xf1cc60*/ string GetAotId();
            static /*0xf1c980*/ void ConvertAsyncStateMachineMethod(ref System.Reflection.MethodBase method, ref System.Type declaringType);
            /*0xf1d890*/ StackTrace();
            /*0xf1d640*/ StackTrace(bool fNeedFileInfo);
            /*0xf1d7a0*/ StackTrace(int skipFrames, bool fNeedFileInfo);
            /*0xf1d7e0*/ StackTrace(System.Exception e, bool fNeedFileInfo);
            /*0xf1d680*/ StackTrace(System.Exception e, int skipFrames, bool fNeedFileInfo);
            /*0xf1d8f0*/ void init_frames(int skipFrames, bool fNeedFileInfo);
            /*0xf1d8c0*/ int get_FrameCount();
            /*0xf1cd50*/ System.Diagnostics.StackFrame GetFrame(int index);
            /*0xf1c450*/ bool AddFrames(System.Text.StringBuilder sb, bool separator, ref bool isAsync);
            /*0xf1cdc0*/ void GetFullNameForStackTrace(System.Text.StringBuilder sb, System.Reflection.MethodBase mi, bool needsNewLine, ref bool skipped, ref bool isAsync);
            /*0xf1d4a0*/ string ToString();
            /*0xf1d620*/ string ToString(System.Diagnostics.StackTrace.TraceFormat traceFormat);

            enum TraceFormat
            {
                Normal = 0,
                TrailingNewLine = 1,
                NoResourceLookup = 2,
            }
        }

        namespace Contracts
        {
            class Contract
            {
                static /*0x1794f0*/ bool ForAll<T>(System.Collections.Generic.IEnumerable<T> collection, System.Predicate<T> predicate);
            }
        }

        namespace Tracing
        {
            enum EventLevel
            {
                LogAlways = 0,
                Critical = 1,
                Error = 2,
                Warning = 3,
                Informational = 4,
                Verbose = 5,
            }

            enum EventKeywords
            {
                None = 0,
                All = -1,
                MicrosoftTelemetry = 562949953421312,
                WdiContext = 562949953421312,
                WdiDiagnostic = 1125899906842624,
                Sqm = 2251799813685248,
                AuditFailure = 4503599627370496,
                AuditSuccess = 9007199254740992,
                CorrelationHint = 4503599627370496,
                EventLogClassic = 36028797018963968,
            }

            class EventAttribute : System.Attribute
            {
                /*0x10*/ int <EventId>k__BackingField;
                /*0x14*/ System.Diagnostics.Tracing.EventLevel <Level>k__BackingField;

                /*0xea4040*/ EventAttribute(int eventId);
                /*0xdcd9c0*/ void set_EventId(int value);
                /*0xc70b20*/ void set_Level(System.Diagnostics.Tracing.EventLevel value);
            }

            class EventSource : System.IDisposable
            {
                /*0x10*/ string <Name>k__BackingField;

                /*0xf0e4c0*/ EventSource();
                /*0x49b490*/ EventSource(string eventSourceName);
                /*0xf0ffe0*/ EventSource(System.Guid eventSourceGuid, string eventSourceName);
                /*0xe61b70*/ void Finalize();
                /*0x9f12f0*/ void set_Name(string value);
                /*0x348b00*/ bool IsEnabled();
                /*0x348b00*/ bool IsEnabled(System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords);
                /*0xf0fbe0*/ void Dispose();
                /*0x32d010*/ void Dispose(bool disposing);
                /*0xf0fdf0*/ void WriteEvent(int eventId, int arg1);
                /*0xf0feb0*/ void WriteEvent(int eventId, int arg1, int arg2);
                /*0xf0fc50*/ void WriteEvent(int eventId, int arg1, int arg2, int arg3);
                /*0x32d010*/ void WriteEvent(int eventId, object[] args);
                /*0x32d010*/ void WriteEventCore(int eventId, int eventDataCount, System.Diagnostics.Tracing.EventSource.EventData* data);

                struct EventData
                {
                    /*0x10*/ nint <DataPointer>k__BackingField;
                    /*0x18*/ int <Size>k__BackingField;
                    /*0x1c*/ int <Reserved>k__BackingField;

                    /*0x9e29e0*/ void set_DataPointer(nint value);
                    /*0xf0fbd0*/ void set_Size(int value);
                    /*0xf0fbc0*/ void set_Reserved(int value);
                }
            }

            class EventSourceAttribute : System.Attribute
            {
                /*0x10*/ string <Guid>k__BackingField;
                /*0x18*/ string <Name>k__BackingField;

                /*0x534220*/ EventSourceAttribute();
                /*0x9f12f0*/ void set_Guid(string value);
                /*0x7963c0*/ void set_Name(string value);
            }
        }

        namespace CodeAnalysis
        {
            class DisallowNullAttribute : System.Attribute
            {
                /*0x534220*/ DisallowNullAttribute();
            }

            class NotNullWhenAttribute : System.Attribute
            {
                /*0x10*/ bool <ReturnValue>k__BackingField;

                /*0xe2bcb0*/ NotNullWhenAttribute(bool returnValue);
            }
        }
    }

    namespace Configuration
    {
        namespace Assemblies
        {
            enum AssemblyHashAlgorithm
            {
                None = 0,
                MD5 = 32771,
                SHA1 = 32772,
                SHA256 = 32780,
                SHA384 = 32781,
                SHA512 = 32782,
            }

            enum AssemblyVersionCompatibility
            {
                SameMachine = 1,
                SameProcess = 2,
                SameDomain = 3,
            }
        }
    }

    namespace Collections
    {
        class Comparer : System.Collections.IComparer, System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Collections.Comparer Default;
            static /*0x8*/ System.Collections.Comparer DefaultInvariant;
            /*0x10*/ System.Globalization.CompareInfo _compareInfo;

            static /*0xf0ee10*/ Comparer();
            /*0xf0f180*/ Comparer(System.Globalization.CultureInfo culture);
            /*0xf0eff0*/ Comparer(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xf0ed70*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xf0ebc0*/ int Compare(object a, object b);
        }

        struct DictionaryEntry
        {
            /*0x10*/ object _key;
            /*0x18*/ object _value;

            /*0xa59de0*/ DictionaryEntry(object key, object value);
            /*0x6937d0*/ object get_Key();
            /*0xa5a7f0*/ object get_Value();
        }

        class HashHelpers
        {
            static /*0x0*/ int[] primes;
            static /*0x8*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> s_serializationInfoTable;

            static /*0xf12150*/ HashHelpers();
            static /*0xf120a0*/ bool IsPrime(int candidate);
            static /*0xf11e90*/ int GetPrime(int min);
            static /*0xf11e10*/ int ExpandPrime(int oldSize);
            static /*0xf121e0*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> get_SerializationInfoTable();
        }

        interface ICollection : System.Collections.IEnumerable
        {
            /*0x182a70*/ void CopyTo(System.Array array, int index);
            /*0x180980*/ int get_Count();
            /*0x1803b0*/ object get_SyncRoot();
            /*0x17cb40*/ bool get_IsSynchronized();
        }

        interface IComparer
        {
            int Compare(object x, object y);
        }

        interface IDictionary : System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x1858d0*/ object get_Item(object key);
            /*0x183150*/ void set_Item(object key, object value);
            /*0x1803b0*/ System.Collections.ICollection get_Keys();
            /*0x1803b0*/ System.Collections.ICollection get_Values();
            /*0x17e620*/ bool Contains(object key);
            /*0x183150*/ void Add(object key, object value);
            /*0x17cb40*/ bool get_IsReadOnly();
            /*0x17cb40*/ bool get_IsFixedSize();
            /*0x1803b0*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x17aec0*/ void Remove(object key);
        }

        interface IDictionaryEnumerator : System.Collections.IEnumerator
        {
            /*0x1803b0*/ object get_Key();
            /*0x1803b0*/ object get_Value();
            System.Collections.DictionaryEntry get_Entry();
        }

        interface IEnumerable
        {
            /*0x1803b0*/ System.Collections.IEnumerator GetEnumerator();
        }

        interface IEnumerator
        {
            /*0x17cb40*/ bool MoveNext();
            /*0x1803b0*/ object get_Current();
            /*0x180fc0*/ void Reset();
        }

        interface IEqualityComparer
        {
            bool Equals(object x, object y);
            /*0x17b580*/ int GetHashCode(object obj);
        }

        interface IList : System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x184ab0*/ object get_Item(int index);
            void set_Item(int index, object value);
            /*0x17b580*/ int Add(object value);
            /*0x17e620*/ bool Contains(object value);
            /*0x180fc0*/ void Clear();
            /*0x17cb40*/ bool get_IsReadOnly();
            /*0x17cb40*/ bool get_IsFixedSize();
            /*0x17b580*/ int IndexOf(object value);
            void Insert(int index, object value);
            /*0x17aec0*/ void Remove(object value);
            /*0x17aa40*/ void RemoveAt(int index);
        }

        interface IStructuralComparable
        {
            int CompareTo(object other, System.Collections.IComparer comparer);
        }

        interface IStructuralEquatable
        {
            bool Equals(object other, System.Collections.IEqualityComparer comparer);
            /*0x17b580*/ int GetHashCode(System.Collections.IEqualityComparer comparer);
        }

        class ListDictionaryInternal : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x10*/ System.Collections.ListDictionaryInternal.DictionaryNode head;
            /*0x18*/ int version;
            /*0x1c*/ int count;
            /*0x20*/ object _syncRoot;

            /*0x32f970*/ ListDictionaryInternal();
            /*0xf16750*/ object get_Item(object key);
            /*0xf16970*/ void set_Item(object key, object value);
            /*0xc70b00*/ int get_Count();
            /*0xf16820*/ System.Collections.ICollection get_Keys();
            /*0x348b00*/ bool get_IsReadOnly();
            /*0x348b00*/ bool get_IsFixedSize();
            /*0x348b00*/ bool get_IsSynchronized();
            /*0xf16890*/ object get_SyncRoot();
            /*0xf16900*/ System.Collections.ICollection get_Values();
            /*0xf16010*/ void Add(object key, object value);
            /*0xf161f0*/ bool Contains(object key);
            /*0xf162c0*/ void CopyTo(System.Array array, int index);
            /*0xf16510*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0xf166c0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0xf165a0*/ void Remove(object key);

            class NodeEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
            {
                /*0x10*/ System.Collections.ListDictionaryInternal list;
                /*0x18*/ System.Collections.ListDictionaryInternal.DictionaryNode current;
                /*0x20*/ int version;
                /*0x24*/ bool start;

                /*0xf18400*/ NodeEnumerator(System.Collections.ListDictionaryInternal list);
                /*0xf18460*/ object get_Current();
                /*0xf18530*/ System.Collections.DictionaryEntry get_Entry();
                /*0xf185d0*/ object get_Key();
                /*0xf18640*/ object get_Value();
                /*0xf182a0*/ bool MoveNext();
                /*0xf18370*/ void Reset();
            }

            class NodeKeyValueCollection : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.ListDictionaryInternal list;
                /*0x18*/ bool isKeys;

                /*0xf18a30*/ NodeKeyValueCollection(System.Collections.ListDictionaryInternal list, bool isKeys);
                /*0xf186b0*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0xf188d0*/ int System.Collections.ICollection.get_Count();
                /*0x348b00*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0xf18910*/ object System.Collections.ICollection.get_SyncRoot();
                /*0xf18990*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class NodeKeyValueEnumerator : System.Collections.IEnumerator
                {
                    /*0x10*/ System.Collections.ListDictionaryInternal list;
                    /*0x18*/ System.Collections.ListDictionaryInternal.DictionaryNode current;
                    /*0x20*/ int version;
                    /*0x24*/ bool isKeys;
                    /*0x25*/ bool start;

                    /*0xf18be0*/ NodeKeyValueEnumerator(System.Collections.ListDictionaryInternal list, bool isKeys);
                    /*0xf18c50*/ object get_Current();
                    /*0xf18a80*/ bool MoveNext();
                    /*0xf18b50*/ void Reset();
                }
            }

            class DictionaryNode
            {
                /*0x10*/ object key;
                /*0x18*/ object value;
                /*0x20*/ System.Collections.ListDictionaryInternal.DictionaryNode next;

                /*0x32f970*/ DictionaryNode();
            }
        }

        class CompatibleComparer : System.Collections.IEqualityComparer
        {
            /*0x10*/ System.Collections.IHashCodeProvider _hcp;
            /*0x18*/ System.Collections.IComparer _comparer;

            /*0xce3b90*/ CompatibleComparer(System.Collections.IHashCodeProvider hashCodeProvider, System.Collections.IComparer comparer);
            /*0x73d3e0*/ System.Collections.IHashCodeProvider get_HashCodeProvider();
            /*0x32f410*/ System.Collections.IComparer get_Comparer();
            /*0xf0f3e0*/ bool Equals(object a, object b);
            /*0xf0f220*/ int Compare(object a, object b);
            /*0xf0f570*/ int GetHashCode(object obj);
        }

        class CaseInsensitiveComparer : System.Collections.IComparer
        {
            /*0x10*/ System.Globalization.CompareInfo _compareInfo;

            static /*0xf0e8a0*/ System.Collections.CaseInsensitiveComparer get_Default();
            /*0xf0e770*/ CaseInsensitiveComparer();
            /*0xf0e800*/ CaseInsensitiveComparer(System.Globalization.CultureInfo culture);
            /*0xf0e520*/ int Compare(object a, object b);
        }

        class CaseInsensitiveHashCodeProvider : System.Collections.IHashCodeProvider
        {
            /*0x10*/ System.Globalization.CompareInfo _compareInfo;

            static /*0xf0eb10*/ System.Collections.CaseInsensitiveHashCodeProvider get_Default();
            /*0xf0ea80*/ CaseInsensitiveHashCodeProvider();
            /*0xf0e990*/ int GetHashCode(object obj);
        }

        class Queue : System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ object[] _array;
            /*0x18*/ int _head;
            /*0x1c*/ int _tail;
            /*0x20*/ int _size;
            /*0x24*/ int _growFactor;
            /*0x28*/ int _version;
            /*0x30*/ object _syncRoot;

            /*0xf1b2d0*/ Queue();
            /*0xf1b2c0*/ Queue(int capacity);
            /*0xf1aec0*/ Queue(int capacity, float growFactor);
            /*0xf1b080*/ Queue(System.Collections.ICollection col);
            /*0x3e3af0*/ int get_Count();
            /*0xf1a600*/ object Clone();
            /*0x348b00*/ bool get_IsSynchronized();
            /*0xf1b2f0*/ object get_SyncRoot();
            /*0xf1a710*/ void CopyTo(System.Array array, int index);
            /*0xf1aa50*/ void Enqueue(object obj);
            /*0xf1ac70*/ System.Collections.IEnumerator GetEnumerator();
            /*0xf1a960*/ object Dequeue();
            /*0xf1ad20*/ object Peek();
            /*0xf1ac30*/ object GetElement(int i);
            /*0xf1adc0*/ void SetCapacity(int capacity);

            class QueueEnumerator : System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.Queue _q;
                /*0x18*/ int _index;
                /*0x1c*/ int _version;
                /*0x20*/ object _currentElement;

                /*0xf1a4c0*/ QueueEnumerator(System.Collections.Queue q);
                /*0xe2c220*/ object Clone();
                /*0xf1a320*/ bool MoveNext();
                /*0xf1a540*/ object get_Current();
                /*0xf1a410*/ void Reset();
            }

            class QueueDebugView
            {
            }
        }

        class ReadOnlyCollectionBase : System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x10*/ System.Collections.ArrayList _list;

            /*0x32f970*/ ReadOnlyCollectionBase();
            /*0xf1b4b0*/ System.Collections.ArrayList get_InnerList();
            /*0xf1b470*/ int get_Count();
            /*0xf1b3f0*/ bool System.Collections.ICollection.get_IsSynchronized();
            /*0xf1b430*/ object System.Collections.ICollection.get_SyncRoot();
            /*0xf1b3a0*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
            /*0xf1b360*/ System.Collections.IEnumerator GetEnumerator();
        }

        class Stack : System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            static int _defaultCapacity = 10;
            /*0x10*/ object[] _array;
            /*0x18*/ int _size;
            /*0x1c*/ int _version;
            /*0x20*/ object _syncRoot;

            /*0xf1e2f0*/ Stack();
            /*0xf1e220*/ Stack(int initialCapacity);
            /*0x8a5c20*/ int get_Count();
            /*0x348b00*/ bool get_IsSynchronized();
            /*0xf1e350*/ object get_SyncRoot();
            /*0xc5ca60*/ void Clear();
            /*0xf1db30*/ object Clone();
            /*0xf1dc60*/ void CopyTo(System.Array array, int index);
            /*0xf1df30*/ System.Collections.IEnumerator GetEnumerator();
            /*0xf1dfc0*/ object Peek();
            /*0xf1e050*/ object Pop();
            /*0xf1e110*/ void Push(object obj);

            class StackEnumerator : System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.Stack _stack;
                /*0x18*/ int _index;
                /*0x1c*/ int _version;
                /*0x20*/ object _currentElement;

                /*0xf1bfe0*/ StackEnumerator(System.Collections.Stack stack);
                /*0xe2c220*/ object Clone();
                /*0xf1be10*/ bool MoveNext();
                /*0xf1c040*/ object get_Current();
                /*0xf1bf50*/ void Reset();
            }

            class StackDebugView
            {
            }
        }

        class BitArray : System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ int[] m_array;
            /*0x18*/ int m_length;
            /*0x1c*/ int _version;
            /*0x20*/ object _syncRoot;

            static /*0xf0d790*/ int GetArrayLength(int n, int div);
            /*0xf0dc60*/ BitArray(int length);
            /*0xf0dae0*/ BitArray(int length, bool defaultValue);
            /*0xf0dde0*/ BitArray(System.Collections.BitArray bits);
            /*0xf0dee0*/ bool get_Item(int index);
            /*0xf0df60*/ void set_Item(int index, bool value);
            /*0xf0d830*/ bool Get(int index);
            /*0xf0d9b0*/ void Set(int index, bool value);
            /*0xf0d930*/ void SetAll(bool value);
            /*0x8a5c20*/ int get_Length();
            /*0xf0d190*/ void CopyTo(System.Array array, int index);
            /*0x8a5c20*/ int get_Count();
            /*0xf0def0*/ object get_SyncRoot();
            /*0x348b00*/ bool get_IsSynchronized();
            /*0xf0d060*/ object Clone();
            /*0xf0d7b0*/ System.Collections.IEnumerator GetEnumerator();

            class BitArrayEnumeratorSimple : System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.BitArray bitarray;
                /*0x18*/ int index;
                /*0x1c*/ int version;
                /*0x20*/ bool currentElement;

                /*0xf0cef0*/ BitArrayEnumeratorSimple(System.Collections.BitArray bitarray);
                /*0xe2c220*/ object Clone();
                /*0xf0cd60*/ bool MoveNext();
                /*0xf0cf40*/ object get_Current();
                /*0xf0ce70*/ void Reset();
            }
        }

        class ArrayList : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ object[] _items;
            /*0x18*/ int _size;
            /*0x1c*/ int _version;
            /*0x20*/ object _syncRoot;

            /*0xf0c250*/ ArrayList();
            /*0xf0c2a0*/ ArrayList(int capacity);
            /*0xf0c3a0*/ ArrayList(System.Collections.ICollection c);
            /*0xf0c610*/ void set_Capacity(int value);
            /*0x8a5c20*/ int get_Count();
            /*0x348b00*/ bool get_IsFixedSize();
            /*0x348b00*/ bool get_IsReadOnly();
            /*0x348b00*/ bool get_IsSynchronized();
            /*0xf0c5a0*/ object get_SyncRoot();
            /*0xf0c4f0*/ object get_Item(int index);
            /*0xf0c740*/ void set_Item(int index, object value);
            /*0xf0b610*/ int Add(object value);
            /*0xf0b5f0*/ void AddRange(System.Collections.ICollection c);
            /*0xb5ed10*/ void Clear();
            /*0xf0b710*/ object Clone();
            /*0xf0b880*/ bool Contains(object item);
            /*0xf0ba20*/ void CopyTo(System.Array array);
            /*0xf0b960*/ void CopyTo(System.Array array, int arrayIndex);
            /*0xf0ba40*/ void EnsureCapacity(int min);
            /*0xf0baa0*/ System.Collections.IEnumerator GetEnumerator();
            /*0xf0bbe0*/ int IndexOf(object value);
            /*0xf0be50*/ void Insert(int index, object value);
            /*0xf0bc10*/ void InsertRange(int index, System.Collections.ICollection c);
            /*0xf0c090*/ void Remove(object obj);
            /*0xf0bfb0*/ void RemoveAt(int index);
            /*0xf0c0e0*/ object[] ToArray();
            /*0xf0c170*/ System.Array ToArray(System.Type type);

            class ArrayListEnumeratorSimple : System.Collections.IEnumerator, System.ICloneable
            {
                static /*0x0*/ object s_dummyObject;
                /*0x10*/ System.Collections.ArrayList _list;
                /*0x18*/ int _index;
                /*0x1c*/ int _version;
                /*0x20*/ object _currentElement;
                /*0x28*/ bool _isArrayList;

                static /*0xf0b360*/ ArrayListEnumeratorSimple();
                /*0xf0b3e0*/ ArrayListEnumeratorSimple(System.Collections.ArrayList list);
                /*0xe2c220*/ object Clone();
                /*0xf0b080*/ bool MoveNext();
                /*0xf0b4f0*/ object get_Current();
                /*0xf0b290*/ void Reset();
            }

            class ArrayListDebugView
            {
            }
        }

        class Hashtable : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.ICloneable
        {
            static int HashPrime = 101;
            static int InitialSize = 3;
            static string LoadFactorName = "LoadFactor";
            static string VersionName = "Version";
            static string ComparerName = "Comparer";
            static string HashCodeProviderName = "HashCodeProvider";
            static string HashSizeName = "HashSize";
            static string KeysName = "Keys";
            static string ValuesName = "Values";
            static string KeyComparerName = "KeyComparer";
            static /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> s_serializationInfoTable;
            /*0x10*/ System.Collections.Hashtable.bucket[] _buckets;
            /*0x18*/ int _count;
            /*0x1c*/ int _occupancy;
            /*0x20*/ int _loadsize;
            /*0x24*/ float _loadFactor;
            /*0x28*/ int _version;
            /*0x2c*/ bool _isWriterInProgress;
            /*0x30*/ System.Collections.ICollection _keys;
            /*0x38*/ System.Collections.ICollection _values;
            /*0x40*/ System.Collections.IEqualityComparer _keycomparer;
            /*0x48*/ object _syncRoot;

            static /*0xf15510*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> get_SerializationInfoTable();
            /*0xf14e60*/ Hashtable();
            /*0xf14da0*/ Hashtable(int capacity);
            /*0xf14f00*/ Hashtable(int capacity, float loadFactor);
            /*0xf14e80*/ Hashtable(int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer);
            /*0xf14c10*/ Hashtable(System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
            /*0xf14bd0*/ Hashtable(System.Collections.IEqualityComparer equalityComparer);
            /*0xf14ec0*/ Hashtable(int capacity, System.Collections.IEqualityComparer equalityComparer);
            /*0xf14cd0*/ Hashtable(int capacity, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
            /*0xf14db0*/ Hashtable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xf137d0*/ uint InitHash(object key, int hashsize, ref uint seed, ref uint incr);
            /*0xf127e0*/ void Add(object key, object value);
            /*0xf12800*/ void Clear();
            /*0xf12930*/ object Clone();
            /*0xf12bf0*/ bool Contains(object key);
            /*0xf12a60*/ bool ContainsKey(object key);
            /*0xf12d30*/ void CopyKeys(System.Array array, int arrayIndex);
            /*0xf12c10*/ void CopyEntries(System.Array array, int arrayIndex);
            /*0xf12dd0*/ void CopyTo(System.Array array, int arrayIndex);
            /*0xf13090*/ void CopyValues(System.Array array, int arrayIndex);
            /*0xf15250*/ object get_Item(object key);
            /*0xf15940*/ void set_Item(object key, object value);
            /*0xf15190*/ void expand();
            /*0xf15910*/ void rehash();
            /*0xf14ba0*/ void UpdateVersion();
            /*0xf157a0*/ void rehash(int newsize);
            /*0xf14b10*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0xf13130*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0xf131c0*/ int GetHash(object key);
            /*0x348b00*/ bool get_IsReadOnly();
            /*0x348b00*/ bool get_IsFixedSize();
            /*0x348b00*/ bool get_IsSynchronized();
            /*0xf13d70*/ bool KeyEquals(object item, object key);
            /*0xf15490*/ System.Collections.ICollection get_Keys();
            /*0xf155d0*/ System.Collections.ICollection get_Values();
            /*0xf13820*/ void Insert(object key, object nvalue, bool add);
            /*0xf15650*/ void putEntry(System.Collections.Hashtable.bucket[] newBuckets, object key, object nvalue, int hashcode);
            /*0xf14840*/ void Remove(object key);
            /*0xf15560*/ object get_SyncRoot();
            /*0x8a5c20*/ int get_Count();
            /*0xf13250*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xf13eb0*/ void OnDeserialization(object sender);

            struct bucket
            {
                /*0x10*/ object key;
                /*0x18*/ object val;
                /*0x20*/ int hash_coll;
            }

            class KeyCollection : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.Hashtable _hashtable;

                /*0x49b490*/ KeyCollection(System.Collections.Hashtable hashtable);
                /*0xf15bb0*/ void CopyTo(System.Array array, int arrayIndex);
                /*0xf15de0*/ System.Collections.IEnumerator GetEnumerator();
                /*0xf15e80*/ bool get_IsSynchronized();
                /*0xf15eb0*/ object get_SyncRoot();
                /*0x8a5c00*/ int get_Count();
            }

            class ValueCollection : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.Hashtable _hashtable;

                /*0x49b490*/ ValueCollection(System.Collections.Hashtable hashtable);
                /*0xf22130*/ void CopyTo(System.Array array, int arrayIndex);
                /*0xf22370*/ System.Collections.IEnumerator GetEnumerator();
                /*0xf15e80*/ bool get_IsSynchronized();
                /*0xf15eb0*/ object get_SyncRoot();
                /*0x8a5c00*/ int get_Count();
            }

            class HashtableEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.Hashtable _hashtable;
                /*0x18*/ int _bucket;
                /*0x1c*/ int _version;
                /*0x20*/ bool _current;
                /*0x24*/ int _getObjectRetType;
                /*0x28*/ object _currentKey;
                /*0x30*/ object _currentValue;

                /*0xf124f0*/ HashtableEnumerator(System.Collections.Hashtable hashtable, int getObjRetType);
                /*0xe2c220*/ object Clone();
                /*0xf12700*/ object get_Key();
                /*0xf122e0*/ bool MoveNext();
                /*0xf12660*/ System.Collections.DictionaryEntry get_Entry();
                /*0xf12560*/ object get_Current();
                /*0xf12770*/ object get_Value();
                /*0xf12420*/ void Reset();
            }

            class HashtableDebugView
            {
            }
        }

        interface IHashCodeProvider
        {
            /*0x17b580*/ int GetHashCode(object obj);
        }

        namespace Concurrent
        {
            class ConcurrentQueue<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ object _crossSegmentLock;
                /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> _tail;
                /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> _head;

                static /*0x17c550*/ int GetCount(System.Collections.Concurrent.ConcurrentQueue.Segment<T> s, int head, int tail);
                static /*0x2a5510*/ long GetCount(System.Collections.Concurrent.ConcurrentQueue.Segment<T> head, int headHead, System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail, int tailTail);
                /*0x180fc0*/ ConcurrentQueue();
                /*0x182a70*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x17cb40*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x1803b0*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x1803b0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x1803b0*/ T[] ToArray();
                /*0x180980*/ int get_Count();
                /*0x182a70*/ void CopyTo(T[] array, int index);
                /*0x1803b0*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                /*0x183b40*/ void SnapForObservation(ref System.Collections.Concurrent.ConcurrentQueue.Segment<T> head, ref int headHead, ref System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail, ref int tailTail);
                /*0x2a5510*/ T GetItemWhenAvailable(System.Collections.Concurrent.ConcurrentQueue.Segment<T> segment, int i);
                /*0x2a5510*/ System.Collections.Generic.IEnumerator<T> Enumerate(System.Collections.Concurrent.ConcurrentQueue.Segment<T> head, int headHead, System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail, int tailTail);
                /*0x2a5510*/ void Enqueue(T item);
                /*0x2a5510*/ void EnqueueSlow(T item);

                class Segment<T>
                {
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment.Slot<T> _slots;
                    /*0x0*/ int _slotsMask;
                    /*0x0*/ System.Collections.Concurrent.PaddedHeadAndTail _headAndTail;
                    /*0x0*/ bool _preservedForObservation;
                    /*0x0*/ bool _frozenForEnqueues;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> _nextSegment;

                    /*0x17aa40*/ Segment(int boundedLength);
                    /*0x180980*/ int get_Capacity();
                    /*0x180980*/ int get_FreezeOffset();
                    /*0x180fc0*/ void EnsureFrozenForEnqueues();
                    /*0x2a5510*/ bool TryEnqueue(T item);

                    struct Slot<T>
                    {
                        /*0x0*/ T Item;
                        /*0x0*/ int SequenceNumber;
                    }
                }

                class <Enumerate>d__28<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ int <>1__state;
                    /*0x0*/ T <>2__current;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> head;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail;
                    /*0x0*/ int tailTail;
                    /*0x0*/ int headHead;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue<T> <>4__this;
                    /*0x0*/ int <headTail>5__2;
                    /*0x0*/ int <i>5__3;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> <s>5__4;
                    /*0x0*/ int <i>5__5;

                    /*0x17aa40*/ <Enumerate>d__28(int <>1__state);
                    /*0x180fc0*/ void System.IDisposable.Dispose();
                    /*0x17cb40*/ bool MoveNext();
                    /*0x2a5510*/ T System.Collections.Generic.IEnumerator<T>.get_Current();
                    /*0x180fc0*/ void System.Collections.IEnumerator.Reset();
                    /*0x1803b0*/ object System.Collections.IEnumerator.get_Current();
                }
            }

            struct PaddedHeadAndTail
            {
                /*0x90*/ int Head;
                /*0x110*/ int Tail;
            }

            class CDSCollectionETWBCLProvider : System.Diagnostics.Tracing.EventSource
            {
                static /*0x0*/ System.Collections.Concurrent.CDSCollectionETWBCLProvider Log;

                static /*0xf0e410*/ CDSCollectionETWBCLProvider();
                /*0xf0e4c0*/ CDSCollectionETWBCLProvider();
                /*0x6b4390*/ void ConcurrentDictionary_AcquiringAllLocks(int numOfBuckets);
            }

            class ConcurrentDictionary<TKey, TValue> : System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
            {
                static /*0x0*/ bool s_isValueWriteAtomic;
                /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Tables<TKey, TValue> _tables;
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> _comparer;
                /*0x0*/ bool _growLockArray;
                /*0x0*/ int _budget;
                /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> _serializationArray;
                /*0x0*/ int _serializationConcurrencyLevel;
                /*0x0*/ int _serializationCapacity;

                static /*0x180ff0*/ ConcurrentDictionary();
                static /*0x17cb70*/ bool IsValueWriteAtomic();
                static /*0x180ff0*/ void ThrowKeyNullException();
                static /*0x178bd0*/ int GetBucket(int hashcode, int bucketCount);
                static /*0x2a5510*/ void GetBucketAndLockNo(int hashcode, ref int bucketNo, ref int lockNo, int bucketCount, int lockCount);
                static /*0x1809b0*/ int get_DefaultConcurrencyLevel();
                /*0x180fc0*/ ConcurrentDictionary();
                /*0x17aec0*/ ConcurrentDictionary(System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x2a5510*/ ConcurrentDictionary(int concurrencyLevel, int capacity, bool growLockArray, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x17aec0*/ void InitializeFromCollection(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>> collection);
                /*0x2a5510*/ bool TryAdd(TKey key, TValue value);
                /*0x2a5510*/ bool ContainsKey(TKey key);
                /*0x2a5510*/ bool TryRemove(TKey key, ref TValue value);
                /*0x2a5510*/ bool TryRemoveInternal(TKey key, ref TValue value, bool matchValue, TValue oldValue);
                /*0x2a5510*/ bool TryGetValue(TKey key, ref TValue value);
                /*0x2a5510*/ bool TryGetValueInternal(TKey key, int hashcode, ref TValue value);
                /*0x180fc0*/ void Clear();
                /*0x182a70*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                /*0x1803b0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> ToArray();
                /*0x182a70*/ void CopyToPairs(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                /*0x182a70*/ void CopyToEntries(System.Collections.DictionaryEntry[] array, int index);
                /*0x182a70*/ void CopyToObjects(object[] array, int index);
                /*0x1803b0*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator();
                /*0x2a5510*/ bool TryAddInternal(TKey key, int hashcode, TValue value, bool updateIfExists, bool acquireLock, ref TValue resultingValue);
                /*0x2a5510*/ void set_Item(TKey key, TValue value);
                /*0x180980*/ int get_Count();
                /*0x180980*/ int GetCountInternal();
                /*0x2a5510*/ TValue GetOrAdd(TKey key, System.Func<TKey, TValue> valueFactory);
                /*0x2a5510*/ void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
                /*0x2a5510*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x2a5510*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x17cb40*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
                /*0x2a5510*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x1803b0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x183150*/ void System.Collections.IDictionary.Add(object key, object value);
                /*0x17e620*/ bool System.Collections.IDictionary.Contains(object key);
                /*0x1803b0*/ System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
                /*0x17cb40*/ bool System.Collections.IDictionary.get_IsFixedSize();
                /*0x17cb40*/ bool System.Collections.IDictionary.get_IsReadOnly();
                /*0x1803b0*/ System.Collections.ICollection System.Collections.IDictionary.get_Keys();
                /*0x17aec0*/ void System.Collections.IDictionary.Remove(object key);
                /*0x1803b0*/ System.Collections.ICollection System.Collections.IDictionary.get_Values();
                /*0x1858d0*/ object System.Collections.IDictionary.get_Item(object key);
                /*0x183150*/ void System.Collections.IDictionary.set_Item(object key, object value);
                /*0x182a70*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x17cb40*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x1803b0*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x17aec0*/ void GrowTable(System.Collections.Concurrent.ConcurrentDictionary.Tables<TKey, TValue> tables);
                /*0x17aec0*/ void AcquireAllLocks(ref int locksAcquired);
                void AcquireLocks(int fromInclusive, int toExclusive, ref int locksAcquired);
                /*0x1817d0*/ void ReleaseLocks(int fromInclusive, int toExclusive);
                /*0x1803b0*/ System.Collections.ObjectModel.ReadOnlyCollection<TKey> GetKeys();
                /*0x1803b0*/ System.Collections.ObjectModel.ReadOnlyCollection<TValue> GetValues();
                void OnSerializing(System.Runtime.Serialization.StreamingContext context);
                void OnSerialized(System.Runtime.Serialization.StreamingContext context);
                void OnDeserialized(System.Runtime.Serialization.StreamingContext context);

                class Tables<TKey, TValue>
                {
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> _buckets;
                    /*0x0*/ object[] _locks;
                    /*0x0*/ int[] _countPerLock;

                    /*0x183830*/ Tables(System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> buckets, object[] locks, int[] countPerLock);
                }

                class Node<TKey, TValue>
                {
                    /*0x0*/ TKey _key;
                    /*0x0*/ TValue _value;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> _next;
                    /*0x0*/ int _hashcode;

                    /*0x2a5510*/ Node(TKey key, TValue value, int hashcode, System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> next);
                }

                class DictionaryEnumerator<TKey, TValue> : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> _enumerator;

                    /*0x17aec0*/ DictionaryEnumerator(System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> dictionary);
                    System.Collections.DictionaryEntry get_Entry();
                    /*0x1803b0*/ object get_Key();
                    /*0x1803b0*/ object get_Value();
                    /*0x1803b0*/ object get_Current();
                    /*0x17cb40*/ bool MoveNext();
                    /*0x180fc0*/ void Reset();
                }

                class <GetEnumerator>d__35<TKey, TValue> : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ int <>1__state;
                    /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> <>2__current;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> <>4__this;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> <buckets>5__2;
                    /*0x0*/ int <i>5__3;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> <current>5__4;

                    /*0x17aa40*/ <GetEnumerator>d__35(int <>1__state);
                    /*0x180fc0*/ void System.IDisposable.Dispose();
                    /*0x17cb40*/ bool MoveNext();
                    /*0x2a5510*/ System.Collections.Generic.KeyValuePair<TKey, TValue> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current();
                    /*0x180fc0*/ void System.Collections.IEnumerator.Reset();
                    /*0x1803b0*/ object System.Collections.IEnumerator.get_Current();
                }
            }

            class IDictionaryDebugView<K, V>
            {
            }

            class IProducerConsumerCollectionDebugView<T>
            {
            }
        }

        namespace ObjectModel
        {
            class Collection<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ System.Collections.Generic.IList<T> items;

                static /*0x177700*/ bool IsCompatibleObject(object value);
                /*0x180fc0*/ Collection();
                /*0x17aec0*/ Collection(System.Collections.Generic.IList<T> list);
                /*0x180980*/ int get_Count();
                /*0x1803b0*/ System.Collections.Generic.IList<T> get_Items();
                /*0x2a5510*/ T get_Item(int index);
                /*0x2a5510*/ void set_Item(int index, T value);
                /*0x2a5510*/ void Add(T item);
                /*0x180fc0*/ void Clear();
                /*0x182a70*/ void CopyTo(T[] array, int index);
                /*0x2a5510*/ bool Contains(T item);
                /*0x1803b0*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                /*0x2a5510*/ int IndexOf(T item);
                /*0x2a5510*/ void Insert(int index, T item);
                /*0x2a5510*/ bool Remove(T item);
                /*0x17aa40*/ void RemoveAt(int index);
                /*0x180fc0*/ void ClearItems();
                /*0x2a5510*/ void InsertItem(int index, T item);
                /*0x17aa40*/ void RemoveItem(int index);
                /*0x2a5510*/ void SetItem(int index, T item);
                /*0x17cb40*/ bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                /*0x1803b0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x17cb40*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x1803b0*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x182a70*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x184ab0*/ object System.Collections.IList.get_Item(int index);
                void System.Collections.IList.set_Item(int index, object value);
                /*0x17cb40*/ bool System.Collections.IList.get_IsReadOnly();
                /*0x17cb40*/ bool System.Collections.IList.get_IsFixedSize();
                /*0x17b580*/ int System.Collections.IList.Add(object value);
                /*0x17e620*/ bool System.Collections.IList.Contains(object value);
                /*0x17b580*/ int System.Collections.IList.IndexOf(object value);
                void System.Collections.IList.Insert(int index, object value);
                /*0x17aec0*/ void System.Collections.IList.Remove(object value);
            }

            class ReadOnlyCollection<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ System.Collections.Generic.IList<T> list;
                /*0x0*/ object _syncRoot;

                static /*0x177700*/ bool IsCompatibleObject(object value);
                /*0x17aec0*/ ReadOnlyCollection(System.Collections.Generic.IList<T> list);
                /*0x180980*/ int get_Count();
                /*0x2a5510*/ T get_Item(int index);
                /*0x2a5510*/ bool Contains(T value);
                /*0x182a70*/ void CopyTo(T[] array, int index);
                /*0x1803b0*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
                /*0x2a5510*/ int IndexOf(T value);
                /*0x17cb40*/ bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                /*0x2a5510*/ T System.Collections.Generic.IList<T>.get_Item(int index);
                /*0x2a5510*/ void System.Collections.Generic.IList<T>.set_Item(int index, T value);
                /*0x2a5510*/ void System.Collections.Generic.ICollection<T>.Add(T value);
                /*0x180fc0*/ void System.Collections.Generic.ICollection<T>.Clear();
                /*0x2a5510*/ void System.Collections.Generic.IList<T>.Insert(int index, T value);
                /*0x2a5510*/ bool System.Collections.Generic.ICollection<T>.Remove(T value);
                /*0x17aa40*/ void System.Collections.Generic.IList<T>.RemoveAt(int index);
                /*0x1803b0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x17cb40*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x1803b0*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x182a70*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x17cb40*/ bool System.Collections.IList.get_IsFixedSize();
                /*0x17cb40*/ bool System.Collections.IList.get_IsReadOnly();
                /*0x184ab0*/ object System.Collections.IList.get_Item(int index);
                void System.Collections.IList.set_Item(int index, object value);
                /*0x17b580*/ int System.Collections.IList.Add(object value);
                /*0x180fc0*/ void System.Collections.IList.Clear();
                /*0x17e620*/ bool System.Collections.IList.Contains(object value);
                /*0x17b580*/ int System.Collections.IList.IndexOf(object value);
                void System.Collections.IList.Insert(int index, object value);
                /*0x17aec0*/ void System.Collections.IList.Remove(object value);
                /*0x17aa40*/ void System.Collections.IList.RemoveAt(int index);
            }

            class KeyedCollection<TKey, TItem> : System.Collections.ObjectModel.Collection<TItem>
            {
                static int defaultThreshold = 0;
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> comparer;
                /*0x0*/ System.Collections.Generic.Dictionary<TKey, TItem> dict;
                /*0x0*/ int keyCount;
                /*0x0*/ int threshold;

                /*0x180fc0*/ KeyedCollection();
                /*0x182a70*/ KeyedCollection(System.Collections.Generic.IEqualityComparer<TKey> comparer, int dictionaryCreationThreshold);
                /*0x1803b0*/ System.Collections.Generic.List<TItem> get_Items();
                /*0x2a5510*/ TItem get_Item(TKey key);
                /*0x2a5510*/ bool Contains(TKey key);
                /*0x2a5510*/ bool TryGetValue(TKey key, ref TItem item);
                /*0x2a5510*/ bool ContainsItem(TItem item);
                /*0x2a5510*/ bool Remove(TKey key);
                /*0x1803b0*/ System.Collections.Generic.IDictionary<TKey, TItem> get_Dictionary();
                /*0x2a5510*/ void ChangeItemKey(TItem item, TKey newKey);
                /*0x180fc0*/ void ClearItems();
                /*0x2a5510*/ TKey GetKeyForItem(TItem item);
                /*0x2a5510*/ void InsertItem(int index, TItem item);
                /*0x17aa40*/ void RemoveItem(int index);
                /*0x2a5510*/ void SetItem(int index, TItem item);
                /*0x2a5510*/ void AddKey(TKey key, TItem item);
                /*0x180fc0*/ void CreateDictionary();
                /*0x2a5510*/ void RemoveKey(TKey key);
            }
        }

        namespace Generic
        {
            enum InsertionBehavior
            {
                None = 0,
                OverwriteExisting = 1,
                ThrowOnExisting = 2,
            }

            class Dictionary<TKey, TValue> : System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
            {
                static string VersionName = "Version";
                static string HashSizeName = "HashSize";
                static string KeyValuePairsName = "KeyValuePairs";
                static string ComparerName = "Comparer";
                /*0x0*/ int[] _buckets;
                /*0x0*/ System.Collections.Generic.Dictionary.Entry<TKey, TValue> _entries;
                /*0x0*/ int _count;
                /*0x0*/ int _freeList;
                /*0x0*/ int _freeCount;
                /*0x0*/ int _version;
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> _comparer;
                /*0x0*/ System.Collections.Generic.Dictionary.KeyCollection<TKey, TValue> _keys;
                /*0x0*/ System.Collections.Generic.Dictionary.ValueCollection<TKey, TValue> _values;
                /*0x0*/ object _syncRoot;

                static /*0x177700*/ bool IsCompatibleKey(object key);
                /*0x180fc0*/ Dictionary();
                /*0x17aa40*/ Dictionary(int capacity);
                /*0x17aec0*/ Dictionary(System.Collections.Generic.IEqualityComparer<TKey> comparer);
                Dictionary(int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x17aec0*/ Dictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary);
                /*0x183150*/ Dictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                Dictionary(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x180980*/ int get_Count();
                /*0x1803b0*/ System.Collections.Generic.Dictionary.KeyCollection<TKey, TValue> get_Keys();
                /*0x1803b0*/ System.Collections.Generic.Dictionary.ValueCollection<TKey, TValue> get_Values();
                /*0x2a5510*/ TValue get_Item(TKey key);
                /*0x2a5510*/ void set_Item(TKey key, TValue value);
                /*0x2a5510*/ void Add(TKey key, TValue value);
                /*0x2a5510*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x2a5510*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x2a5510*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                /*0x180fc0*/ void Clear();
                /*0x2a5510*/ bool ContainsKey(TKey key);
                /*0x2a5510*/ bool ContainsValue(TValue value);
                /*0x182a70*/ void CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                /*0x2a5510*/ System.Collections.Generic.Dictionary.Enumerator<TKey, TValue> GetEnumerator();
                /*0x1803b0*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x2a5510*/ int FindEntry(TKey key);
                /*0x17a330*/ int Initialize(int capacity);
                /*0x2a5510*/ bool TryInsert(TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior);
                /*0x17aec0*/ void OnDeserialization(object sender);
                /*0x180fc0*/ void Resize();
                void Resize(int newSize, bool forceNewHashCodes);
                /*0x2a5510*/ bool Remove(TKey key);
                /*0x2a5510*/ bool Remove(TKey key, ref TValue value);
                /*0x2a5510*/ bool TryGetValue(TKey key, ref TValue value);
                /*0x2a5510*/ bool TryAdd(TKey key, TValue value);
                /*0x17cb40*/ bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
                /*0x182a70*/ void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                /*0x182a70*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x1803b0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x17a330*/ int EnsureCapacity(int capacity);
                /*0x17cb40*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x1803b0*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x17cb40*/ bool System.Collections.IDictionary.get_IsFixedSize();
                /*0x17cb40*/ bool System.Collections.IDictionary.get_IsReadOnly();
                /*0x1803b0*/ System.Collections.ICollection System.Collections.IDictionary.get_Keys();
                /*0x1803b0*/ System.Collections.ICollection System.Collections.IDictionary.get_Values();
                /*0x1858d0*/ object System.Collections.IDictionary.get_Item(object key);
                /*0x183150*/ void System.Collections.IDictionary.set_Item(object key, object value);
                /*0x183150*/ void System.Collections.IDictionary.Add(object key, object value);
                /*0x17e620*/ bool System.Collections.IDictionary.Contains(object key);
                /*0x1803b0*/ System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
                /*0x17aec0*/ void System.Collections.IDictionary.Remove(object key);

                struct Entry<TKey, TValue>
                {
                    /*0x0*/ int hashCode;
                    /*0x0*/ int next;
                    /*0x0*/ TKey key;
                    /*0x0*/ TValue value;
                }

                struct Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.IDisposable, System.Collections.IEnumerator, System.Collections.IDictionaryEnumerator
                {
                    /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;
                    /*0x0*/ int _version;
                    /*0x0*/ int _index;
                    /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> _current;
                    /*0x0*/ int _getEnumeratorRetType;

                    /*0x182a70*/ Enumerator(System.Collections.Generic.Dictionary<TKey, TValue> dictionary, int getEnumeratorRetType);
                    /*0x17cb40*/ bool MoveNext();
                    /*0x2a5510*/ System.Collections.Generic.KeyValuePair<TKey, TValue> get_Current();
                    /*0x180fc0*/ void Dispose();
                    /*0x1803b0*/ object System.Collections.IEnumerator.get_Current();
                    /*0x180fc0*/ void System.Collections.IEnumerator.Reset();
                    System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.get_Entry();
                    /*0x1803b0*/ object System.Collections.IDictionaryEnumerator.get_Key();
                    /*0x1803b0*/ object System.Collections.IDictionaryEnumerator.get_Value();
                }

                class KeyCollection<TKey, TValue> : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TKey>
                {
                    /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;

                    /*0x17aec0*/ KeyCollection(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                    /*0x2a5510*/ System.Collections.Generic.Dictionary.KeyCollection.Enumerator<TKey, TValue> GetEnumerator();
                    /*0x182a70*/ void CopyTo(TKey[] array, int index);
                    /*0x180980*/ int get_Count();
                    /*0x17cb40*/ bool System.Collections.Generic.ICollection<TKey>.get_IsReadOnly();
                    /*0x2a5510*/ void System.Collections.Generic.ICollection<TKey>.Add(TKey item);
                    /*0x180fc0*/ void System.Collections.Generic.ICollection<TKey>.Clear();
                    /*0x2a5510*/ bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item);
                    /*0x2a5510*/ bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item);
                    /*0x1803b0*/ System.Collections.Generic.IEnumerator<TKey> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator();
                    /*0x1803b0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    /*0x182a70*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    /*0x17cb40*/ bool System.Collections.ICollection.get_IsSynchronized();
                    /*0x1803b0*/ object System.Collections.ICollection.get_SyncRoot();

                    struct Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<TKey>, System.IDisposable, System.Collections.IEnumerator
                    {
                        /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;
                        /*0x0*/ int _index;
                        /*0x0*/ int _version;
                        /*0x0*/ TKey _currentKey;

                        /*0x17aec0*/ Enumerator(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                        /*0x180fc0*/ void Dispose();
                        /*0x17cb40*/ bool MoveNext();
                        /*0x2a5510*/ TKey get_Current();
                        /*0x1803b0*/ object System.Collections.IEnumerator.get_Current();
                        /*0x180fc0*/ void System.Collections.IEnumerator.Reset();
                    }
                }

                class ValueCollection<TKey, TValue> : System.Collections.Generic.ICollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TValue>
                {
                    /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;

                    /*0x17aec0*/ ValueCollection(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                    /*0x2a5510*/ System.Collections.Generic.Dictionary.ValueCollection.Enumerator<TKey, TValue> GetEnumerator();
                    /*0x182a70*/ void CopyTo(TValue[] array, int index);
                    /*0x180980*/ int get_Count();
                    /*0x17cb40*/ bool System.Collections.Generic.ICollection<TValue>.get_IsReadOnly();
                    /*0x2a5510*/ void System.Collections.Generic.ICollection<TValue>.Add(TValue item);
                    /*0x2a5510*/ bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item);
                    /*0x180fc0*/ void System.Collections.Generic.ICollection<TValue>.Clear();
                    /*0x2a5510*/ bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item);
                    /*0x1803b0*/ System.Collections.Generic.IEnumerator<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator();
                    /*0x1803b0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    /*0x182a70*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    /*0x17cb40*/ bool System.Collections.ICollection.get_IsSynchronized();
                    /*0x1803b0*/ object System.Collections.ICollection.get_SyncRoot();

                    struct Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<TValue>, System.IDisposable, System.Collections.IEnumerator
                    {
                        /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> _dictionary;
                        /*0x0*/ int _index;
                        /*0x0*/ int _version;
                        /*0x0*/ TValue _currentValue;

                        /*0x17aec0*/ Enumerator(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                        /*0x180fc0*/ void Dispose();
                        /*0x17cb40*/ bool MoveNext();
                        /*0x2a5510*/ TValue get_Current();
                        /*0x1803b0*/ object System.Collections.IEnumerator.get_Current();
                        /*0x180fc0*/ void System.Collections.IEnumerator.Reset();
                    }
                }
            }

            interface ICollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x180980*/ int get_Count();
                /*0x17cb40*/ bool get_IsReadOnly();
                /*0x2a5510*/ void Add(T item);
                /*0x180fc0*/ void Clear();
                /*0x2a5510*/ bool Contains(T item);
                /*0x182a70*/ void CopyTo(T[] array, int arrayIndex);
                /*0x2a5510*/ bool Remove(T item);
            }

            class ICollectionDebugView<T>
            {
            }

            interface IComparer<T>
            {
                /*0x2a5510*/ int Compare(T x, T y);
            }

            interface IDictionary<TKey, TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
            {
                /*0x2a5510*/ void set_Item(TKey key, TValue value);
                /*0x2a5510*/ bool ContainsKey(TKey key);
                /*0x2a5510*/ void Add(TKey key, TValue value);
                /*0x2a5510*/ bool TryGetValue(TKey key, ref TValue value);
            }

            class IDictionaryDebugView<K, V>
            {
            }

            class DictionaryKeyCollectionDebugView<TKey, TValue>
            {
            }

            class DictionaryValueCollectionDebugView<TKey, TValue>
            {
            }

            interface IEnumerable<T> : System.Collections.IEnumerable
            {
                /*0x1803b0*/ System.Collections.Generic.IEnumerator<T> GetEnumerator();
            }

            interface IEnumerator<T> : System.IDisposable, System.Collections.IEnumerator
            {
                /*0x2a5510*/ T get_Current();
            }

            interface IEqualityComparer<T>
            {
                /*0x2a5510*/ bool Equals(T x, T y);
                /*0x2a5510*/ int GetHashCode(T obj);
            }

            interface IList<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x2a5510*/ T get_Item(int index);
                /*0x2a5510*/ void set_Item(int index, T value);
                /*0x2a5510*/ int IndexOf(T item);
                /*0x2a5510*/ void Insert(int index, T item);
                /*0x17aa40*/ void RemoveAt(int index);
            }

            interface IReadOnlyCollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x180980*/ int get_Count();
            }

            interface IReadOnlyDictionary<TKey, TValue> : System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
            {
                /*0x2a5510*/ bool TryGetValue(TKey key, ref TValue value);
            }

            interface IReadOnlyList<T> : System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x2a5510*/ T get_Item(int index);
            }

            class KeyNotFoundException : System.SystemException
            {
                /*0xf15ee0*/ KeyNotFoundException();
                /*0xf15f30*/ KeyNotFoundException(string message);
                /*0xe291b0*/ KeyNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class KeyValuePair
            {
                static /*0xf15f50*/ string PairToString(object key, object value);
            }

            struct KeyValuePair<TKey, TValue>
            {
                /*0x0*/ TKey key;
                /*0x0*/ TValue value;

                /*0x2a5510*/ KeyValuePair(TKey key, TValue value);
                /*0x2a5510*/ TKey get_Key();
                /*0x2a5510*/ TValue get_Value();
                /*0x1803b0*/ string ToString();
                /*0x183150*/ void Deconstruct(ref TKey key, ref TValue value);
            }

            class List<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
            {
                static int DefaultCapacity = 4;
                static /*0x0*/ T[] s_emptyArray;
                /*0x0*/ T[] _items;
                /*0x0*/ int _size;
                /*0x0*/ int _version;
                /*0x0*/ object _syncRoot;

                static /*0x180ff0*/ List();
                static /*0x177700*/ bool IsCompatibleObject(object value);
                /*0x180fc0*/ List();
                /*0x17aa40*/ List(int capacity);
                /*0x17aec0*/ List(System.Collections.Generic.IEnumerable<T> collection);
                /*0x180980*/ int get_Capacity();
                /*0x17aa40*/ void set_Capacity(int value);
                /*0x180980*/ int get_Count();
                /*0x17cb40*/ bool System.Collections.IList.get_IsFixedSize();
                /*0x17cb40*/ bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                /*0x17cb40*/ bool System.Collections.IList.get_IsReadOnly();
                /*0x17cb40*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x1803b0*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x2a5510*/ T get_Item(int index);
                /*0x2a5510*/ void set_Item(int index, T value);
                /*0x184ab0*/ object System.Collections.IList.get_Item(int index);
                void System.Collections.IList.set_Item(int index, object value);
                /*0x2a5510*/ void Add(T item);
                /*0x2a5510*/ void AddWithResize(T item);
                /*0x17b580*/ int System.Collections.IList.Add(object item);
                /*0x17aec0*/ void AddRange(System.Collections.Generic.IEnumerable<T> collection);
                /*0x1803b0*/ System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly();
                /*0x2a5510*/ int BinarySearch(int index, int count, T item, System.Collections.Generic.IComparer<T> comparer);
                /*0x2a5510*/ int BinarySearch(T item);
                /*0x2a5510*/ int BinarySearch(T item, System.Collections.Generic.IComparer<T> comparer);
                /*0x180fc0*/ void Clear();
                /*0x2a5510*/ bool Contains(T item);
                /*0x17e620*/ bool System.Collections.IList.Contains(object item);
                /*0x17aec0*/ void CopyTo(T[] array);
                /*0x182a70*/ void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex);
                /*0x182a70*/ void CopyTo(T[] array, int arrayIndex);
                /*0x17aa40*/ void EnsureCapacity(int min);
                /*0x17e620*/ bool Exists(System.Predicate<T> match);
                /*0x2a5510*/ T Find(System.Predicate<T> match);
                /*0x1858d0*/ System.Collections.Generic.List<T> FindAll(System.Predicate<T> match);
                /*0x17b580*/ int FindIndex(System.Predicate<T> match);
                /*0x2a5510*/ int FindIndex(int startIndex, int count, System.Predicate<T> match);
                /*0x17aec0*/ void ForEach(System.Action<T> action);
                /*0x2a5510*/ System.Collections.Generic.List.Enumerator<T> GetEnumerator();
                /*0x1803b0*/ System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                /*0x1803b0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                System.Collections.Generic.List<T> GetRange(int index, int count);
                /*0x2a5510*/ int IndexOf(T item);
                /*0x17b580*/ int System.Collections.IList.IndexOf(object item);
                /*0x2a5510*/ void Insert(int index, T item);
                void System.Collections.IList.Insert(int index, object item);
                void InsertRange(int index, System.Collections.Generic.IEnumerable<T> collection);
                /*0x2a5510*/ bool Remove(T item);
                /*0x17aec0*/ void System.Collections.IList.Remove(object item);
                /*0x17b580*/ int RemoveAll(System.Predicate<T> match);
                /*0x17aa40*/ void RemoveAt(int index);
                /*0x1817d0*/ void RemoveRange(int index, int count);
                /*0x180fc0*/ void Reverse();
                /*0x1817d0*/ void Reverse(int index, int count);
                /*0x180fc0*/ void Sort();
                /*0x17aec0*/ void Sort(System.Collections.Generic.IComparer<T> comparer);
                void Sort(int index, int count, System.Collections.Generic.IComparer<T> comparer);
                /*0x17aec0*/ void Sort(System.Comparison<T> comparison);
                /*0x1803b0*/ T[] ToArray();
                /*0x17aec0*/ void AddEnumerable(System.Collections.Generic.IEnumerable<T> enumerable);

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.List<T> _list;
                    /*0x0*/ int _index;
                    /*0x0*/ int _version;
                    /*0x0*/ T _current;

                    /*0x17aec0*/ Enumerator(System.Collections.Generic.List<T> list);
                    /*0x180fc0*/ void Dispose();
                    /*0x17cb40*/ bool MoveNext();
                    /*0x17cb40*/ bool MoveNextRare();
                    /*0x2a5510*/ T get_Current();
                    /*0x1803b0*/ object System.Collections.IEnumerator.get_Current();
                    /*0x180fc0*/ void System.Collections.IEnumerator.Reset();
                }
            }

            struct ValueListBuilder<T>
            {
                /*0x0*/ System.Span<T> _span;
                /*0x0*/ T[] _arrayFromPool;
                /*0x0*/ int _pos;

                /*0x2a5510*/ ValueListBuilder(System.Span<T> initialSpan);
                /*0x180980*/ int get_Length();
                /*0x2a5510*/ void Append(T item);
                /*0x2a5510*/ System.ReadOnlySpan<T> AsSpan();
                /*0x180fc0*/ void Dispose();
                /*0x180fc0*/ void Grow();
            }

            struct ArrayBuilder<T>
            {
                /*0x0*/ T[] _array;
                /*0x0*/ int _count;

                /*0x180980*/ int get_Capacity();
                /*0x180980*/ int get_Count();
                /*0x2a5510*/ T get_Item(int index);
                /*0x2a5510*/ void Add(T item);
                /*0x2a5510*/ void UncheckedAdd(T item);
                /*0x17aa40*/ void EnsureCapacity(int minimum);
            }

            class EnumerableHelpers
            {
                static /*0x17e030*/ T[] ToArray<T>(System.Collections.Generic.IEnumerable<T> source);
                static /*0x177800*/ T[] ToArray<T>(System.Collections.Generic.IEnumerable<T> source, ref int length);
            }

            struct LargeArrayBuilder<T>
            {
                /*0x0*/ int _maxCapacity;
                /*0x0*/ T[] _first;
                /*0x0*/ System.Collections.Generic.ArrayBuilder<T[]> _buffers;
                /*0x0*/ T[] _current;
                /*0x0*/ int _index;
                /*0x0*/ int _count;

                /*0x181190*/ LargeArrayBuilder(bool initialize);
                /*0x17aa40*/ LargeArrayBuilder(int maxCapacity);
                /*0x17aec0*/ void AddRange(System.Collections.Generic.IEnumerable<T> items);
                /*0x2a5510*/ void AddWithBufferAllocation(T item, ref T[] destination, ref int index);
                void CopyTo(T[] array, int arrayIndex, int count);
                /*0x184ab0*/ T[] GetBuffer(int index);
                /*0x1803b0*/ T[] ToArray();
                /*0x17e620*/ bool TryMove(ref T[] array);
                /*0x180fc0*/ void AllocateBuffer();
            }

            class LowLevelDictionary<TKey, TValue>
            {
                /*0x0*/ System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> _buckets;
                /*0x0*/ int _numEntries;
                /*0x0*/ int _version;
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> _comparer;

                /*0x180fc0*/ LowLevelDictionary();
                LowLevelDictionary(int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                /*0x2a5510*/ void set_Item(TKey key, TValue value);
                /*0x17aa40*/ void Clear(int capacity);
                /*0x2a5510*/ bool Remove(TKey key);
                /*0x2a5510*/ System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> Find(TKey key);
                /*0x2a5510*/ System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> UncheckedAdd(TKey key, TValue value);
                /*0x180fc0*/ void ExpandBuckets();
                /*0x2a5510*/ int GetBucket(TKey key, int numBuckets);

                class Entry<TKey, TValue>
                {
                    /*0x0*/ TKey _key;
                    /*0x0*/ TValue _value;
                    /*0x0*/ System.Collections.Generic.LowLevelDictionary.Entry<TKey, TValue> _next;

                    /*0x180fc0*/ Entry();
                }

                class DefaultComparer`1<TKey, TValue, T> : System.Collections.Generic.IEqualityComparer<T>
                {
                    /*0x180fc0*/ DefaultComparer`1();
                    /*0x2a5510*/ bool Equals(T x, T y);
                    /*0x2a5510*/ int GetHashCode(T obj);
                }
            }

            class CollectionExtensions
            {
                static /*0x2a5510*/ TValue GetValueOrDefault<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> dictionary, TKey key);
                static /*0x2a5510*/ TValue GetValueOrDefault<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue);
            }

            class Queue<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                static int MinimumGrow = 4;
                static int GrowFactor = 200;
                /*0x0*/ T[] _array;
                /*0x0*/ int _head;
                /*0x0*/ int _tail;
                /*0x0*/ int _size;
                /*0x0*/ int _version;
                /*0x0*/ object _syncRoot;

                /*0x180fc0*/ Queue();
                /*0x17aa40*/ Queue(int capacity);
                /*0x17aec0*/ Queue(System.Collections.Generic.IEnumerable<T> collection);
                /*0x180980*/ int get_Count();
                /*0x17cb40*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x1803b0*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x180fc0*/ void Clear();
                /*0x182a70*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x2a5510*/ void Enqueue(T item);
                /*0x2a5510*/ System.Collections.Generic.Queue.Enumerator<T> GetEnumerator();
                /*0x1803b0*/ System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                /*0x1803b0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x2a5510*/ T Dequeue();
                /*0x2a5510*/ T Peek();
                /*0x17e620*/ bool TryPeek(ref T result);
                /*0x1803b0*/ T[] ToArray();
                /*0x17aa40*/ void SetCapacity(int capacity);
                /*0x17aec0*/ void MoveNext(ref int index);
                /*0x180fc0*/ void ThrowForEmptyQueue();

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.Queue<T> _q;
                    /*0x0*/ int _version;
                    /*0x0*/ int _index;
                    /*0x0*/ T _currentElement;

                    /*0x17aec0*/ Enumerator(System.Collections.Generic.Queue<T> q);
                    /*0x180fc0*/ void Dispose();
                    /*0x17cb40*/ bool MoveNext();
                    /*0x2a5510*/ T get_Current();
                    /*0x180fc0*/ void ThrowEnumerationNotStartedOrEnded();
                    /*0x1803b0*/ object System.Collections.IEnumerator.get_Current();
                    /*0x180fc0*/ void System.Collections.IEnumerator.Reset();
                }
            }

            class QueueDebugView<T>
            {
            }

            class Stack<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                static int DefaultCapacity = 4;
                /*0x0*/ T[] _array;
                /*0x0*/ int _size;
                /*0x0*/ int _version;
                /*0x0*/ object _syncRoot;

                /*0x180fc0*/ Stack();
                /*0x17aa40*/ Stack(int capacity);
                /*0x180980*/ int get_Count();
                /*0x17cb40*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x1803b0*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x180fc0*/ void Clear();
                /*0x2a5510*/ bool Contains(T item);
                /*0x182a70*/ void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex);
                /*0x1803b0*/ System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                /*0x1803b0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x2a5510*/ T Peek();
                /*0x2a5510*/ T Pop();
                /*0x2a5510*/ void Push(T item);
                /*0x2a5510*/ void PushWithResize(T item);
                /*0x180fc0*/ void ThrowForEmptyStack();

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.Stack<T> _stack;
                    /*0x0*/ int _version;
                    /*0x0*/ int _index;
                    /*0x0*/ T _currentElement;

                    /*0x17aec0*/ Enumerator(System.Collections.Generic.Stack<T> stack);
                    /*0x180fc0*/ void Dispose();
                    /*0x17cb40*/ bool MoveNext();
                    /*0x2a5510*/ T get_Current();
                    /*0x180fc0*/ void ThrowEnumerationNotStartedOrEnded();
                    /*0x1803b0*/ object System.Collections.IEnumerator.get_Current();
                    /*0x180fc0*/ void System.Collections.IEnumerator.Reset();
                }
            }

            class StackDebugView<T>
            {
            }

            class CollectionDebugView<T>
            {
            }

            class LowLevelList<T>
            {
                static /*0x0*/ T[] s_emptyArray;
                /*0x0*/ T[] _items;
                /*0x0*/ int _size;
                /*0x0*/ int _version;

                static /*0x180ff0*/ LowLevelList();
                /*0x180fc0*/ LowLevelList();
                /*0x17aa40*/ LowLevelList(int capacity);
                /*0x180980*/ int get_Capacity();
                /*0x17aa40*/ void set_Capacity(int value);
                /*0x180980*/ int get_Count();
                /*0x2a5510*/ T get_Item(int index);
                /*0x2a5510*/ void set_Item(int index, T value);
                /*0x2a5510*/ void Add(T item);
                /*0x17aa40*/ void EnsureCapacity(int min);
                /*0x17aec0*/ void AddRange(System.Collections.Generic.IEnumerable<T> collection);
                /*0x180fc0*/ void Clear();
                /*0x2a5510*/ bool Contains(T item);
                /*0x182a70*/ void CopyTo(T[] array, int arrayIndex);
                /*0x2a5510*/ int IndexOf(T item);
                /*0x2a5510*/ void Insert(int index, T item);
                void InsertRange(int index, System.Collections.Generic.IEnumerable<T> collection);
                /*0x2a5510*/ bool Remove(T item);
                /*0x17b580*/ int RemoveAll(System.Predicate<T> match);
                /*0x17aa40*/ void RemoveAt(int index);
            }

            class LowLevelListWithIList<T> : System.Collections.Generic.LowLevelList<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                /*0x180fc0*/ LowLevelListWithIList();
                /*0x17aa40*/ LowLevelListWithIList(int capacity);
                /*0x17cb40*/ bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                /*0x1803b0*/ System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                /*0x1803b0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.LowLevelListWithIList<T> _list;
                    /*0x0*/ int _index;
                    /*0x0*/ int _version;
                    /*0x0*/ T _current;

                    /*0x17aec0*/ Enumerator(System.Collections.Generic.LowLevelListWithIList<T> list);
                    /*0x180fc0*/ void Dispose();
                    /*0x17cb40*/ bool MoveNext();
                    /*0x17cb40*/ bool MoveNextRare();
                    /*0x2a5510*/ T get_Current();
                    /*0x1803b0*/ object System.Collections.IEnumerator.get_Current();
                    /*0x180fc0*/ void System.Collections.IEnumerator.Reset();
                }
            }

            class IntrospectiveSortUtilities
            {
                static /*0xf15b20*/ int FloorLog2PlusOne(int n);
                static /*0xf15b40*/ void ThrowOrIgnoreBadComparer(object comparer);
            }

            class ArraySortHelper<T>
            {
                static /*0x0*/ System.Collections.Generic.ArraySortHelper<T> s_defaultArraySortHelper;

                static /*0x180ff0*/ ArraySortHelper();
                static /*0x2a5510*/ void Sort(T[] keys, int index, int length, System.Comparison<T> comparer);
                static /*0x2a5510*/ int InternalBinarySearch(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
                static /*0x1832b0*/ void SwapIfGreater(T[] keys, System.Comparison<T> comparer, int a, int b);
                static /*0x182b00*/ void Swap(T[] a, int i, int j);
                static /*0x2a5510*/ void IntrospectiveSort(T[] keys, int left, int length, System.Comparison<T> comparer);
                static /*0x2a5510*/ void IntroSort(T[] keys, int lo, int hi, int depthLimit, System.Comparison<T> comparer);
                static /*0x2a5510*/ int PickPivotAndPartition(T[] keys, int lo, int hi, System.Comparison<T> comparer);
                static /*0x2a5510*/ void Heapsort(T[] keys, int lo, int hi, System.Comparison<T> comparer);
                static /*0x2a5510*/ void DownHeap(T[] keys, int i, int n, int lo, System.Comparison<T> comparer);
                static /*0x2a5510*/ void InsertionSort(T[] keys, int lo, int hi, System.Comparison<T> comparer);
                static /*0x180cf0*/ System.Collections.Generic.ArraySortHelper<T> get_Default();
                /*0x180fc0*/ ArraySortHelper();
                /*0x2a5510*/ void Sort(T[] keys, int index, int length, System.Collections.Generic.IComparer<T> comparer);
                /*0x2a5510*/ int BinarySearch(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
            }

            class ArraySortHelper<TKey, TValue>
            {
                static /*0x0*/ System.Collections.Generic.ArraySortHelper<TKey, TValue> s_defaultArraySortHelper;

                static /*0x180ff0*/ ArraySortHelper();
                static /*0x2a5510*/ void SwapIfGreaterWithItems(TKey[] keys, TValue[] values, System.Collections.Generic.IComparer<TKey> comparer, int a, int b);
                static /*0x1832b0*/ void Swap(TKey[] keys, TValue[] values, int i, int j);
                static /*0x2a5510*/ void IntrospectiveSort(TKey[] keys, TValue[] values, int left, int length, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x2a5510*/ void IntroSort(TKey[] keys, TValue[] values, int lo, int hi, int depthLimit, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x2a5510*/ int PickPivotAndPartition(TKey[] keys, TValue[] values, int lo, int hi, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x2a5510*/ void Heapsort(TKey[] keys, TValue[] values, int lo, int hi, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x2a5510*/ void DownHeap(TKey[] keys, TValue[] values, int i, int n, int lo, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x2a5510*/ void InsertionSort(TKey[] keys, TValue[] values, int lo, int hi, System.Collections.Generic.IComparer<TKey> comparer);
                static /*0x180cf0*/ System.Collections.Generic.ArraySortHelper<TKey, TValue> get_Default();
                /*0x180fc0*/ ArraySortHelper();
                /*0x2a5510*/ void Sort(TKey[] keys, TValue[] values, int index, int length, System.Collections.Generic.IComparer<TKey> comparer);
            }

            class Comparer<T> : System.Collections.IComparer, System.Collections.Generic.IComparer<T>
            {
                static /*0x0*/ System.Collections.Generic.Comparer<T> defaultComparer;

                static /*0x180cf0*/ System.Collections.Generic.Comparer<T> get_Default();
                static /*0x180cf0*/ System.Collections.Generic.Comparer<T> CreateComparer();
                /*0x180fc0*/ Comparer();
                /*0x2a5510*/ int Compare(T x, T y);
                int System.Collections.IComparer.Compare(object x, object y);
            }

            class GenericComparer<T> : System.Collections.Generic.Comparer<T>
            {
                /*0x180fc0*/ GenericComparer();
                /*0x2a5510*/ int Compare(T x, T y);
                /*0x17e620*/ bool Equals(object obj);
                /*0x180980*/ int GetHashCode();
            }

            class NullableComparer<T> : System.Collections.Generic.Comparer<System.Nullable<T>>
            {
                /*0x180fc0*/ NullableComparer();
                /*0x2a5510*/ int Compare(System.Nullable<T> x, System.Nullable<T> y);
                /*0x17e620*/ bool Equals(object obj);
                /*0x180980*/ int GetHashCode();
            }

            class ObjectComparer<T> : System.Collections.Generic.Comparer<T>
            {
                /*0x180fc0*/ ObjectComparer();
                /*0x2a5510*/ int Compare(T x, T y);
                /*0x17e620*/ bool Equals(object obj);
                /*0x180980*/ int GetHashCode();
            }

            class EqualityComparer<T> : System.Collections.IEqualityComparer, System.Collections.Generic.IEqualityComparer<T>
            {
                static /*0x0*/ System.Collections.Generic.EqualityComparer<T> defaultComparer;

                static /*0x180cf0*/ System.Collections.Generic.EqualityComparer<T> get_Default();
                static /*0x180cf0*/ System.Collections.Generic.EqualityComparer<T> CreateComparer();
                /*0x180fc0*/ EqualityComparer();
                /*0x2a5510*/ bool Equals(T x, T y);
                /*0x2a5510*/ int GetHashCode(T obj);
                /*0x2a5510*/ int IndexOf(T[] array, T value, int startIndex, int count);
                /*0x2a5510*/ int LastIndexOf(T[] array, T value, int startIndex, int count);
                /*0x17b580*/ int System.Collections.IEqualityComparer.GetHashCode(object obj);
                bool System.Collections.IEqualityComparer.Equals(object x, object y);
            }

            class GenericEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>
            {
                /*0x180fc0*/ GenericEqualityComparer();
                /*0x2a5510*/ bool Equals(T x, T y);
                /*0x2a5510*/ int GetHashCode(T obj);
                /*0x2a5510*/ int IndexOf(T[] array, T value, int startIndex, int count);
                /*0x2a5510*/ int LastIndexOf(T[] array, T value, int startIndex, int count);
                /*0x17e620*/ bool Equals(object obj);
                /*0x180980*/ int GetHashCode();
            }

            class NullableEqualityComparer<T> : System.Collections.Generic.EqualityComparer<System.Nullable<T>>
            {
                /*0x180fc0*/ NullableEqualityComparer();
                /*0x2a5510*/ bool Equals(System.Nullable<T> x, System.Nullable<T> y);
                /*0x2a5510*/ int GetHashCode(System.Nullable<T> obj);
                /*0x2a5510*/ int IndexOf(System.Nullable<T> array, System.Nullable<T> value, int startIndex, int count);
                /*0x2a5510*/ int LastIndexOf(System.Nullable<T> array, System.Nullable<T> value, int startIndex, int count);
                /*0x17e620*/ bool Equals(object obj);
                /*0x180980*/ int GetHashCode();
            }

            class ObjectEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>
            {
                /*0x180fc0*/ ObjectEqualityComparer();
                /*0x2a5510*/ bool Equals(T x, T y);
                /*0x2a5510*/ int GetHashCode(T obj);
                /*0x2a5510*/ int IndexOf(T[] array, T value, int startIndex, int count);
                /*0x2a5510*/ int LastIndexOf(T[] array, T value, int startIndex, int count);
                /*0x17e620*/ bool Equals(object obj);
                /*0x180980*/ int GetHashCode();
            }

            class ByteEqualityComparer : System.Collections.Generic.EqualityComparer<byte>
            {
                /*0xf0e3d0*/ ByteEqualityComparer();
                /*0xf0e090*/ bool Equals(byte x, byte y);
                /*0xbbba80*/ int GetHashCode(byte b);
                /*0xf0e170*/ int IndexOf(byte[] array, byte value, int startIndex, int count);
                /*0xf0e370*/ int LastIndexOf(byte[] array, byte value, int startIndex, int count);
                /*0xf0e0a0*/ bool Equals(object obj);
                /*0xf0e120*/ int GetHashCode();
            }

            class EnumEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                /*0x180fc0*/ EnumEqualityComparer();
                EnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                /*0x2a5510*/ bool Equals(T x, T y);
                /*0x2a5510*/ int GetHashCode(T obj);
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x17e620*/ bool Equals(object obj);
                /*0x180980*/ int GetHashCode();
            }

            class SByteEnumEqualityComparer<T> : System.Collections.Generic.EnumEqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                /*0x180fc0*/ SByteEnumEqualityComparer();
                SByteEnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                /*0x2a5510*/ int GetHashCode(T obj);
            }

            class ShortEnumEqualityComparer<T> : System.Collections.Generic.EnumEqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                /*0x180fc0*/ ShortEnumEqualityComparer();
                ShortEnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                /*0x2a5510*/ int GetHashCode(T obj);
            }

            class LongEnumEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                /*0x180fc0*/ LongEnumEqualityComparer();
                LongEnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                /*0x2a5510*/ bool Equals(T x, T y);
                /*0x2a5510*/ int GetHashCode(T obj);
                /*0x17e620*/ bool Equals(object obj);
                /*0x180980*/ int GetHashCode();
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class InternalStringComparer : System.Collections.Generic.EqualityComparer<string>
            {
                /*0xf15ae0*/ InternalStringComparer();
                /*0x9e5880*/ int GetHashCode(string obj);
                /*0xf15a20*/ bool Equals(string x, string y);
                /*0xf15a50*/ int IndexOf(string[] array, string value, int startIndex, int count);
            }
        }
    }

    namespace Buffers
    {
        class SpanAction<T, TArg> : System.MulticastDelegate
        {
            SpanAction(object object, nint method);
            /*0x2a5510*/ void Invoke(System.Span<T> span, TArg arg);
        }

        class ArrayPool<T>
        {
            static /*0x0*/ System.Buffers.ArrayPool<T> <Shared>k__BackingField;

            static /*0x180ff0*/ ArrayPool();
            static /*0x180cf0*/ System.Buffers.ArrayPool<T> get_Shared();
            /*0x180fc0*/ ArrayPool();
            /*0x184ab0*/ T[] Rent(int minimumLength);
            void Return(T[] array, bool clearArray);
        }

        class ArrayPoolEventSource : System.Diagnostics.Tracing.EventSource
        {
            static /*0x0*/ System.Buffers.ArrayPoolEventSource Log;

            static /*0xf0cb80*/ ArrayPoolEventSource();
            /*0xf0cc80*/ ArrayPoolEventSource();
            /*0xf0c920*/ void BufferRented(int bufferId, int bufferSize, int poolId, int bucketId);
            /*0xf0c840*/ void BufferAllocated(int bufferId, int bufferSize, int poolId, int bucketId, System.Buffers.ArrayPoolEventSource.BufferAllocatedReason reason);
            /*0xf0c9f0*/ void BufferReturned(int bufferId, int bufferSize, int poolId);
            /*0xf0cb50*/ void BufferTrimmed(int bufferId, int bufferSize, int poolId);
            /*0xf0ca20*/ void BufferTrimPoll(int milliseconds, int pressure);

            enum BufferAllocatedReason
            {
                Pooled = 0,
                OverMaximumSize = 1,
                PoolExhausted = 2,
            }
        }

        class TlsOverPerCoreLockedStacksArrayPool<T> : System.Buffers.ArrayPool<T>
        {
            static /*0x0*/ bool s_trimBuffers;
            static /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<T[][], object> s_allTlsBuckets;
            [ThreadStatic] static T[][] t_tlsBuckets;
            /*0x0*/ int[] _bucketArraySizes;
            /*0x0*/ System.Buffers.TlsOverPerCoreLockedStacksArrayPool.PerCoreLockedStacks<T> _buckets;
            /*0x0*/ int _callbackCreated;

            static /*0x180ff0*/ TlsOverPerCoreLockedStacksArrayPool();
            static /*0x177700*/ bool Gen2GcCallbackFunc(object target);
            static /*0x2a5510*/ System.Buffers.TlsOverPerCoreLockedStacksArrayPool.MemoryPressure<T> GetMemoryPressure();
            static /*0x17cb70*/ bool GetTrimBuffers();
            /*0x180fc0*/ TlsOverPerCoreLockedStacksArrayPool();
            /*0x184ab0*/ System.Buffers.TlsOverPerCoreLockedStacksArrayPool.PerCoreLockedStacks<T> CreatePerCoreLockedStacks(int bucketIndex);
            /*0x180980*/ int get_Id();
            /*0x184ab0*/ T[] Rent(int minimumLength);
            void Return(T[] array, bool clearArray);
            /*0x17cb40*/ bool Trim();

            enum MemoryPressure<T>
            {
                Low = 0,
                Medium = 1,
                High = 2,
            }

            class PerCoreLockedStacks<T>
            {
                /*0x0*/ System.Buffers.TlsOverPerCoreLockedStacksArrayPool.LockedStack<T> _perCoreStacks;

                /*0x180fc0*/ PerCoreLockedStacks();
                /*0x17aec0*/ void TryPush(T[] array);
                /*0x1803b0*/ T[] TryPop();
                /*0x2a5510*/ bool Trim(uint tickCount, int id, System.Buffers.TlsOverPerCoreLockedStacksArrayPool.MemoryPressure<T> pressure, int[] bucketSizes);
            }

            class LockedStack<T>
            {
                /*0x0*/ T[][] _arrays;
                /*0x0*/ int _count;
                /*0x0*/ uint _firstStackItemMS;

                /*0x180fc0*/ LockedStack();
                /*0x17e620*/ bool TryPush(T[] array);
                /*0x1803b0*/ T[] TryPop();
                /*0x2a5510*/ void Trim(uint tickCount, int id, System.Buffers.TlsOverPerCoreLockedStacksArrayPool.MemoryPressure<T> pressure, int bucketSize);
            }
        }

        class Utilities
        {
            static /*0xcc4fd0*/ int SelectBucketIndex(int bufferSize);
            static /*0xf22120*/ int GetMaxSizeForBucket(int binIndex);
        }

        namespace Binary
        {
            class BinaryPrimitives
            {
                static /*0xf0cd40*/ int ReverseEndianness(int value);
                static /*0xf0cd50*/ ushort ReverseEndianness(ushort value);
                static /*0xf0cd40*/ uint ReverseEndianness(uint value);
            }
        }

        namespace Text
        {
            class FormattingHelpers
            {
                static /*0xf11cb0*/ int CountDigits(ulong value);
                static /*0xf11d50*/ int CountDigits(uint value);
                static /*0xf11db0*/ int CountHexDigits(ulong value);
            }
        }
    }

    namespace IO
    {
        struct DisableMediaInsertionPrompt : System.IDisposable
        {
            static /*0x0*/ bool useUWPFallback;
            /*0x10*/ bool _disableSuccess;
            /*0x14*/ uint _oldMode;

            static /*0xf0f920*/ System.IO.DisableMediaInsertionPrompt Create();
            /*0xf0f9a0*/ void Dispose();
        }

        class FileSystem
        {
            static /*0xf10bf0*/ void CreateDirectory(string fullPath);
            static /*0xf11100*/ bool DirectoryExists(string fullPath);
            static /*0xf11150*/ bool DirectoryExists(string path, ref int lastError);
            static /*0xf111f0*/ int FillAttributeInfo(string path, ref Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA data, bool returnErrorOnNotFound);
            static /*0xf111a0*/ bool FileExists(string fullPath);
            static /*0xf11810*/ bool UnityCreateDirectory(string name);
            static /*0xf11b50*/ bool UnityGetFileAttributesEx(string path, ref Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA data);
            static /*0xf118b0*/ nint UnityCreateFile_IntPtr(string lpFileName, int dwDesiredAccess, System.IO.FileShare dwShareMode, System.IO.FileMode dwCreationDisposition, int dwFlagsAndAttributes);
            static /*0xf119a0*/ Microsoft.Win32.SafeHandles.SafeFindHandle UnityFindFirstFile(string path, ref Interop.Kernel32.WIN32_FIND_DATA findData);
            static /*0xf10ba0*/ bool BrokeredCreateDirectory(string path);
            static /*0xf10bc0*/ bool BrokeredGetFileAttributes(string path, ref Interop.Kernel32.WIN32_FILE_ATTRIBUTE_DATA data);
            static /*0xf10bd0*/ nint BrokeredOpenFile(string lpFileName, int dwDesiredAccess, int dwShareMode, int dwCreationDisposition, int dwFlagsAndAttributes);
            static /*0xf10bb0*/ nint BrokeredFindFirstFile(string searchPath, ref string resultFilePath, ref uint attributes);
            static /*0xf10be0*/ int BrokeredSafeFindHandleDispose(nint handle);
            static /*0xf117a0*/ string RemoveExtendedPathPrefix(string path);

            class UnitySafeFindHandle : Microsoft.Win32.SafeHandles.SafeFindHandle
            {
                /*0x20*/ nint m_Handle;

                /*0xf220e0*/ UnitySafeFindHandle(nint handle);
                /*0xf22110*/ bool get_IsInvalid();
                /*0xf220b0*/ void Dispose(bool disposing);
            }
        }

        class DirectoryNotFoundException : System.IO.IOException
        {
            /*0xf0f8b0*/ DirectoryNotFoundException();
            /*0xf0f900*/ DirectoryNotFoundException(string message);
            /*0xe291b0*/ DirectoryNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class EndOfStreamException : System.IO.IOException
        {
            /*0xf0f9d0*/ EndOfStreamException();
            /*0xf0fa20*/ EndOfStreamException(string message);
            /*0xe291b0*/ EndOfStreamException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Error
        {
            static /*0xf0fb00*/ System.Exception GetStreamIsClosed();
            static /*0xf0fa40*/ System.Exception GetEndOfFile();
            static /*0xf0faa0*/ System.Exception GetReadNotSupported();
            static /*0xf0fb60*/ System.Exception GetWriteNotSupported();
        }

        enum FileAccess
        {
            Read = 1,
            Write = 2,
            ReadWrite = 3,
        }

        class FileLoadException : System.IO.IOException
        {
            /*0x90*/ string <FileName>k__BackingField;
            /*0x98*/ string <FusionLog>k__BackingField;

            static /*0xf10020*/ string FormatFileLoadExceptionMessage(string fileName, int hResult);
            /*0xf10480*/ FileLoadException();
            /*0xf10460*/ FileLoadException(string message);
            /*0xf10390*/ FileLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xf104d0*/ string get_Message();
            /*0x7378b0*/ string get_FileName();
            /*0x9c7a50*/ string get_FusionLog();
            /*0xf101a0*/ string ToString();
            /*0xf10080*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum FileMode
        {
            CreateNew = 1,
            Create = 2,
            Open = 3,
            OpenOrCreate = 4,
            Truncate = 5,
            Append = 6,
        }

        class FileNotFoundException : System.IO.IOException
        {
            /*0x90*/ string <FileName>k__BackingField;
            /*0x98*/ string <FusionLog>k__BackingField;

            /*0xf10940*/ FileNotFoundException();
            /*0xf10a60*/ FileNotFoundException(string message);
            /*0xf10a80*/ FileNotFoundException(string message, string fileName);
            /*0xf10990*/ FileNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xf10ac0*/ string get_Message();
            /*0xf10680*/ void SetMessageField();
            /*0x7378b0*/ string get_FileName();
            /*0x9c7a50*/ string get_FusionLog();
            /*0xf10750*/ string ToString();
            /*0xf10560*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum FileOptions
        {
            None = 0,
            WriteThrough = -2147483648,
            Asynchronous = 1073741824,
            RandomAccess = 268435456,
            DeleteOnClose = 67108864,
            SequentialScan = 134217728,
            Encrypted = 16384,
        }

        enum FileShare
        {
            None = 0,
            Read = 1,
            Write = 2,
            ReadWrite = 3,
            Delete = 4,
            Inheritable = 16,
        }

        class IOException : System.SystemException
        {
            /*0xf159b0*/ IOException();
            /*0xf15990*/ IOException(string message);
            /*0xf15960*/ IOException(string message, int hresult);
            /*0xf15a00*/ IOException(string message, System.Exception innerException);
            /*0xe291b0*/ IOException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class MemoryStream : System.IO.Stream
        {
            /*0x28*/ byte[] _buffer;
            /*0x30*/ int _origin;
            /*0x34*/ int _position;
            /*0x38*/ int _length;
            /*0x3c*/ int _capacity;
            /*0x40*/ bool _expandable;
            /*0x41*/ bool _writable;
            /*0x42*/ bool _exposable;
            /*0x43*/ bool _isOpen;
            /*0x48*/ System.Threading.Tasks.Task<int> _lastReadTask;

            /*0xf17d10*/ MemoryStream();
            /*0xf17db0*/ MemoryStream(int capacity);
            /*0xf17c30*/ MemoryStream(byte[] buffer);
            /*0xf17b40*/ MemoryStream(byte[] buffer, bool writable);
            /*0xf17ed0*/ bool get_CanRead();
            /*0xf17ed0*/ bool get_CanSeek();
            /*0xf17ee0*/ bool get_CanWrite();
            /*0xf16c60*/ void EnsureNotClosed();
            /*0xf16ca0*/ void EnsureWriteable();
            /*0xf16b00*/ void Dispose(bool disposing);
            /*0xf16ba0*/ bool EnsureCapacity(int value);
            /*0x32d010*/ void Flush();
            /*0xf16cf0*/ byte[] GetBuffer();
            /*0x79a150*/ byte[] InternalGetBuffer();
            /*0x995160*/ int InternalGetPosition();
            /*0xf16dc0*/ int InternalReadInt32();
            /*0xf16d60*/ int InternalEmulateRead(int count);
            /*0xf17ef0*/ int get_Capacity();
            /*0xf17fd0*/ void set_Capacity(int value);
            /*0xf17f30*/ long get_Length();
            /*0xf17f80*/ long get_Position();
            /*0xf18180*/ void set_Position(long value);
            /*0xf16f30*/ int Read(byte[] buffer, int offset, int count);
            /*0xf16eb0*/ int ReadByte();
            /*0xf171b0*/ long Seek(long offset, System.IO.SeekOrigin loc);
            /*0xf17400*/ byte[] ToArray();
            /*0xf17830*/ void Write(byte[] buffer, int offset, int count);
            /*0xf175c0*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0xf174a0*/ void WriteByte(byte value);
        }

        class PathInternal
        {
            static /*0x0*/ bool s_isCaseSensitive;

            static /*0xf1a010*/ PathInternal();
            static /*0xf19ba0*/ bool IsValidDriveChar(char value);
            static /*0xf18ee0*/ bool EndsWithPeriodOrSpace(string path);
            static /*0xf18f40*/ string EnsureExtendedPrefixIfNeeded(string path);
            static /*0xf190f0*/ string EnsureExtendedPrefix(string path);
            static /*0xf198d0*/ bool IsDevice(System.ReadOnlySpan<char> path);
            static /*0xf197e0*/ bool IsDeviceUNC(System.ReadOnlySpan<char> path);
            static /*0xf19ab0*/ bool IsExtended(System.ReadOnlySpan<char> path);
            static /*0xf19400*/ int GetRootLength(System.ReadOnlySpan<char> path);
            static /*0xf19a90*/ bool IsDirectorySeparator(char c);
            static /*0xf18e50*/ bool EndsInDirectorySeparator(System.ReadOnlySpan<char> path);
            static /*0xf19bc0*/ bool StartsWithDirectorySeparator(System.ReadOnlySpan<char> path);
            static /*0xf19c40*/ string TrimEndingDirectorySeparator(string path);
            static /*0xf19e50*/ System.ReadOnlySpan<char> TrimEndingDirectorySeparator(System.ReadOnlySpan<char> path);
            static /*0xf19b30*/ bool IsRoot(System.ReadOnlySpan<char> path);
            static /*0xf1a050*/ bool get_IsCaseSensitive();
            static /*0xf19240*/ bool GetIsCaseSensitive();
            static /*0x348b00*/ bool IsPartiallyQualified(string path);
        }

        class PathTooLongException : System.IO.IOException
        {
            /*0xf1a0a0*/ PathTooLongException();
            /*0xf1a0f0*/ PathTooLongException(string message);
            /*0xe291b0*/ PathTooLongException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class PinnedBufferMemoryStream : System.IO.UnmanagedMemoryStream
        {
            /*0x60*/ byte[] _array;
            /*0x68*/ System.Runtime.InteropServices.GCHandle _pinningHandle;

            /*0xf1a1f0*/ PinnedBufferMemoryStream(byte[] array);
            /*0xf1a1d0*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0xf1a160*/ void Finalize();
            /*0xf1a110*/ void Dispose(bool disposing);
        }

        enum SeekOrigin
        {
            Begin = 0,
            Current = 1,
            End = 2,
        }

        class StreamReader : System.IO.TextReader
        {
            static /*0x0*/ System.IO.StreamReader Null;
            /*0x18*/ System.IO.Stream _stream;
            /*0x20*/ System.Text.Encoding _encoding;
            /*0x28*/ System.Text.Decoder _decoder;
            /*0x30*/ byte[] _byteBuffer;
            /*0x38*/ char[] _charBuffer;
            /*0x40*/ int _charPos;
            /*0x44*/ int _charLen;
            /*0x48*/ int _byteLen;
            /*0x4c*/ int _bytePos;
            /*0x50*/ int _maxCharsPerBuffer;
            /*0x54*/ bool _detectEncoding;
            /*0x55*/ bool _checkPreamble;
            /*0x56*/ bool _isBlocked;
            /*0x57*/ bool _closable;
            /*0x58*/ System.Threading.Tasks.Task _asyncReadTask;

            static /*0xf20150*/ StreamReader();
            static /*0xf20100*/ void ThrowAsyncIOInProgress();
            /*0xf203c0*/ StreamReader();
            /*0xf20390*/ StreamReader(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0xf209b0*/ StreamReader(System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks);
            /*0xf20480*/ StreamReader(System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen);
            /*0xf202e0*/ StreamReader(string path);
            /*0xf20330*/ StreamReader(string path, bool detectEncodingFromByteOrderMarks);
            /*0xf20990*/ StreamReader(string path, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks);
            /*0xf206c0*/ StreamReader(string path, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize);
            /*0xf1e3c0*/ void CheckAsyncTaskInProgress();
            /*0xf1e820*/ void Init(System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen);
            /*0xf1e800*/ void Init(System.IO.Stream stream);
            /*0xf1e420*/ void Close();
            /*0xf1e780*/ void Dispose(bool disposing);
            /*0xf209e0*/ bool get_LeaveOpen();
            /*0xf1eac0*/ int Peek();
            /*0xf1fe20*/ int Read();
            /*0xf1ff30*/ int Read(char[] buffer, int index, int count);
            /*0xf1fa10*/ int ReadSpan(System.Span<char> buffer);
            /*0xf1fca0*/ string ReadToEnd();
            /*0xf1e440*/ void CompressBuffer(int n);
            /*0xf1e490*/ void DetectEncoding();
            /*0xf1e990*/ bool IsPreamble();
            /*0xf1ebd0*/ int ReadBuffer();
            /*0xf1f090*/ int ReadBuffer(System.Span<char> userBuffer, ref bool readToUserBuffer);
            /*0xf1f770*/ string ReadLine();
            /*0xf1e480*/ bool DataAvailable();

            class NullStreamReader : System.IO.StreamReader
            {
                /*0xf18d10*/ NullStreamReader();
                /*0x32d010*/ void Dispose(bool disposing);
                /*0xec2ac0*/ int Peek();
                /*0xec2ac0*/ int Read();
                /*0x388e90*/ int Read(char[] buffer, int index, int count);
                /*0x388e90*/ string ReadLine();
                /*0xf18cd0*/ string ReadToEnd();
                /*0x388e90*/ int ReadBuffer();
            }
        }

        class StreamWriter : System.IO.TextWriter
        {
            static /*0x0*/ System.IO.StreamWriter Null;
            /*0x30*/ System.IO.Stream _stream;
            /*0x38*/ System.Text.Encoding _encoding;
            /*0x40*/ System.Text.Encoder _encoder;
            /*0x48*/ byte[] _byteBuffer;
            /*0x50*/ char[] _charBuffer;
            /*0x58*/ int _charPos;
            /*0x5c*/ int _charLen;
            /*0x60*/ bool _autoFlush;
            /*0x61*/ bool _haveWrittenPreamble;
            /*0x62*/ bool _closable;
            /*0x68*/ System.Threading.Tasks.Task _asyncWriteTask;

            static /*0xf216c0*/ StreamWriter();
            static /*0xf20ec0*/ void ThrowAsyncIOInProgress();
            static /*0xf21ff0*/ System.Text.Encoding get_UTF8NoBOM();
            /*0xf21f20*/ StreamWriter();
            /*0xf21d00*/ StreamWriter(System.IO.Stream stream);
            /*0xf21a10*/ StreamWriter(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0xf217d0*/ StreamWriter(System.IO.Stream stream, System.Text.Encoding encoding, int bufferSize, bool leaveOpen);
            /*0xf21e70*/ StreamWriter(string path);
            /*0xf21db0*/ StreamWriter(string path, bool append);
            /*0xf21a40*/ StreamWriter(string path, bool append, System.Text.Encoding encoding, int bufferSize);
            /*0xf209f0*/ void CheckAsyncTaskInProgress();
            /*0xf20d50*/ void Init(System.IO.Stream streamArg, System.Text.Encoding encodingArg, int bufferSize, bool shouldLeaveOpen);
            /*0xf20a50*/ void Close();
            /*0xf20ac0*/ void Dispose(bool disposing);
            /*0xf20b90*/ void Flush(bool flushStream, bool flushEncoder);
            /*0xf22030*/ void set_AutoFlush(bool value);
            /*0xf21fe0*/ bool get_LeaveOpen();
            /*0xf21330*/ void Write(char value);
            /*0xf213f0*/ void Write(char[] buffer);
            /*0xf21460*/ void Write(char[] buffer, int index, int count);
            /*0xf20fe0*/ void WriteSpan(System.ReadOnlySpan<char> buffer, bool appendNewLine);
            /*0xf212b0*/ void Write(string value);
            /*0xf20f10*/ void WriteLine(string value);
        }

        class TextReader : System.MarshalByRefObject, System.IDisposable
        {
            static /*0x0*/ System.IO.TextReader Null;

            static /*0xf36420*/ TextReader();
            static /*0xf36320*/ System.IO.TextReader Synchronized(System.IO.TextReader reader);
            /*0x32f970*/ TextReader();
            /*0xf35e00*/ void Close();
            /*0xf35e70*/ void Dispose();
            /*0x32d010*/ void Dispose(bool disposing);
            /*0xec2ac0*/ int Peek();
            /*0xec2ac0*/ int Read();
            /*0xf36100*/ int Read(char[] buffer, int index, int count);
            /*0xf36000*/ string ReadToEnd();
            /*0xf35ee0*/ string ReadLine();

            class NullTextReader : System.IO.TextReader
            {
                /*0xf2f170*/ NullTextReader();
                /*0x388e90*/ int Read(char[] buffer, int index, int count);
                /*0x388e90*/ string ReadLine();
            }

            class SyncTextReader : System.IO.TextReader
            {
                /*0x18*/ System.IO.TextReader _in;

                /*0xf35930*/ SyncTextReader(System.IO.TextReader t);
                /*0xed9890*/ void Close();
                /*0xf35810*/ void Dispose(bool disposing);
                /*0xe17ad0*/ int Peek();
                /*0xf35900*/ int Read();
                /*0xf358d0*/ int Read(char[] buffer, int index, int count);
                /*0xf35870*/ string ReadLine();
                /*0xf358a0*/ string ReadToEnd();
            }
        }

        class TextWriter : System.MarshalByRefObject, System.IDisposable
        {
            static /*0x0*/ System.IO.TextWriter Null;
            static /*0x8*/ char[] s_coreNewLine;
            /*0x18*/ char[] CoreNewLine;
            /*0x20*/ string CoreNewLineStr;
            /*0x28*/ System.IFormatProvider _internalFormatProvider;

            static /*0xf36b10*/ TextWriter();
            static /*0xf365b0*/ System.IO.TextWriter Synchronized(System.IO.TextWriter writer);
            /*0xf36c40*/ TextWriter();
            /*0xf36ce0*/ TextWriter(System.IFormatProvider formatProvider);
            /*0xf36d80*/ System.IFormatProvider get_FormatProvider();
            /*0xf364d0*/ void Close();
            /*0x32d010*/ void Dispose(bool disposing);
            /*0xf36540*/ void Dispose();
            /*0x61a260*/ string get_NewLine();
            /*0x32d010*/ void Write(char value);
            /*0xf36890*/ void Write(char[] buffer);
            /*0xf368c0*/ void Write(char[] buffer, int index, int count);
            /*0xf36840*/ void Write(long value);
            /*0xf36ad0*/ void Write(string value);
            /*0xf367b0*/ void WriteLine();
            /*0xf366d0*/ void WriteLine(string value);
            /*0xf367d0*/ void WriteLine(string format, object arg0);
            /*0xf36720*/ void WriteLine(string format, object arg0, object arg1, object arg2);

            class NullTextWriter : System.IO.TextWriter
            {
                /*0xf2f1c0*/ NullTextWriter();
                /*0x32d010*/ void Write(char[] buffer, int index, int count);
                /*0x32d010*/ void Write(string value);
                /*0x32d010*/ void WriteLine();
                /*0x32d010*/ void WriteLine(string value);
                /*0x32d010*/ void Write(char value);
            }

            class SyncTextWriter : System.IO.TextWriter, System.IDisposable
            {
                /*0x30*/ System.IO.TextWriter _out;

                /*0xf35af0*/ SyncTextWriter(System.IO.TextWriter t);
                /*0xf35b80*/ System.IFormatProvider get_FormatProvider();
                /*0xf35bb0*/ string get_NewLine();
                /*0xf359a0*/ void Close();
                /*0xf359d0*/ void Dispose(bool disposing);
                /*0xea01f0*/ void Write(char value);
                /*0xea0220*/ void Write(char[] buffer);
                /*0xf35ac0*/ void Write(char[] buffer, int index, int count);
                /*0xea0400*/ void Write(long value);
                /*0xea20a0*/ void Write(string value);
                /*0xf35a90*/ void WriteLine();
                /*0xea20d0*/ void WriteLine(string value);
                /*0xf35a30*/ void WriteLine(string format, object arg0);
                /*0xf35a60*/ void WriteLine(string format, object arg0, object arg1, object arg2);
            }
        }

        class UnmanagedMemoryStream : System.IO.Stream
        {
            /*0x28*/ System.Runtime.InteropServices.SafeBuffer _buffer;
            /*0x30*/ byte* _mem;
            /*0x38*/ long _length;
            /*0x40*/ long _capacity;
            /*0x48*/ long _position;
            /*0x50*/ long _offset;
            /*0x58*/ System.IO.FileAccess _access;
            /*0x5c*/ bool _isOpen;

            /*0xf39690*/ UnmanagedMemoryStream();
            /*0xf39600*/ UnmanagedMemoryStream(byte* pointer, long length, long capacity, System.IO.FileAccess access);
            /*0xf38200*/ void Initialize(byte* pointer, long length, long capacity, System.IO.FileAccess access);
            /*0xf396f0*/ bool get_CanRead();
            /*0xf39700*/ bool get_CanSeek();
            /*0xf39710*/ bool get_CanWrite();
            /*0xf38110*/ void Dispose(bool disposing);
            /*0xf38120*/ void EnsureNotClosed();
            /*0xf38160*/ void EnsureReadable();
            /*0xf381b0*/ void EnsureWriteable();
            /*0xf38120*/ void Flush();
            /*0xf39730*/ long get_Length();
            /*0xf39870*/ long get_Position();
            /*0xf398d0*/ void set_Position(long value);
            /*0xf39780*/ byte* get_PositionPointer();
            /*0xf388b0*/ int Read(byte[] buffer, int offset, int count);
            /*0xf38620*/ int ReadCore(System.Span<byte> buffer);
            /*0xf38490*/ int ReadByte();
            /*0xf38ad0*/ long Seek(long offset, System.IO.SeekOrigin loc);
            /*0xf392f0*/ void Write(byte[] buffer, int offset, int count);
            /*0xf39540*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0xf38f50*/ void WriteCore(System.ReadOnlySpan<byte> buffer);
            /*0xf38cb0*/ void WriteByte(byte value);
        }

        class Win32Marshal
        {
            static /*0xf399a0*/ System.Exception GetExceptionForWin32Error(int errorCode, string path);
            static /*0xf39e80*/ int MakeHRFromErrorCode(int errorCode);
            static /*0xf39e70*/ string GetMessage(int errorCode);
        }

        class DriveNotFoundException : System.IO.IOException
        {
            /*0xf26d30*/ DriveNotFoundException();
            /*0xf26d10*/ DriveNotFoundException(string message);
            /*0xea43e0*/ DriveNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Directory
        {
            static /*0xf265e0*/ System.IO.DirectoryInfo CreateDirectory(string path);
            static /*0xf26770*/ bool Exists(string path);
            static /*0xf26830*/ string[] GetFiles(string path);
            static /*0xf26920*/ string[] GetFiles(string path, string searchPattern, System.IO.EnumerationOptions enumerationOptions);
            static /*0xf26a20*/ System.Collections.Generic.IEnumerable<string> InternalEnumeratePaths(string path, string searchPattern, System.IO.SearchTarget searchTarget, System.IO.EnumerationOptions options);
            static /*0xf26c60*/ string InternalGetDirectoryRoot(string path);
            static /*0xf26820*/ string GetCurrentDirectory();
            static /*0xf26990*/ string InsecureGetCurrentDirectory();
        }

        class DirectoryInfo : System.IO.FileSystemInfo
        {
            /*0xf26060*/ DirectoryInfo(string originalPath, string fullPath, string fileName, bool isNormalized);
            /*0xf26460*/ DirectoryInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xf25c60*/ void Init(string originalPath, string fullPath, string fileName, bool isNormalized);
        }

        class EnumerationOptions
        {
            static /*0x0*/ System.IO.EnumerationOptions <Compatible>k__BackingField;
            static /*0x8*/ System.IO.EnumerationOptions <CompatibleRecursive>k__BackingField;
            static /*0x10*/ System.IO.EnumerationOptions <Default>k__BackingField;
            /*0x10*/ bool <RecurseSubdirectories>k__BackingField;
            /*0x11*/ bool <IgnoreInaccessible>k__BackingField;
            /*0x14*/ int <BufferSize>k__BackingField;
            /*0x18*/ System.IO.FileAttributes <AttributesToSkip>k__BackingField;
            /*0x1c*/ System.IO.MatchType <MatchType>k__BackingField;
            /*0x20*/ System.IO.MatchCasing <MatchCasing>k__BackingField;
            /*0x24*/ bool <ReturnSpecialDirectories>k__BackingField;

            static /*0xf26d80*/ EnumerationOptions();
            static /*0xf26ee0*/ System.IO.EnumerationOptions get_Compatible();
            static /*0xf26f30*/ System.IO.EnumerationOptions get_Default();
            /*0xf26eb0*/ EnumerationOptions();
            /*0x793eb0*/ bool get_RecurseSubdirectories();
            /*0x793ec0*/ void set_RecurseSubdirectories(bool value);
            /*0xf26f80*/ bool get_IgnoreInaccessible();
            /*0xf26f90*/ void set_IgnoreInaccessible(bool value);
            /*0x70a440*/ int get_BufferSize();
            /*0x8a5c20*/ System.IO.FileAttributes get_AttributesToSkip();
            /*0x8a5c50*/ void set_AttributesToSkip(System.IO.FileAttributes value);
            /*0xc70b00*/ System.IO.MatchType get_MatchType();
            /*0xc70b50*/ void set_MatchType(System.IO.MatchType value);
            /*0x3e3af0*/ System.IO.MatchCasing get_MatchCasing();
            /*0xed9100*/ bool get_ReturnSpecialDirectories();
        }

        class File
        {
            static /*0xf2d5d0*/ bool Exists(string path);
            static /*0xf2d800*/ System.IO.FileStream OpenRead(string path);
            static /*0xf2d880*/ string ReadAllText(string path);
            static /*0xf2d6f0*/ string InternalReadAllText(string path, System.Text.Encoding encoding);
            static /*0xf2d960*/ void WriteAllText(string path, string contents);
            static /*0xf2d420*/ void AppendAllText(string path, string contents);
        }

        class FileSystemInfo : System.MarshalByRefObject, System.Runtime.Serialization.ISerializable
        {
            /*0x18*/ int _dataInitialized;
            /*0x20*/ string FullPath;
            /*0x28*/ string OriginalPath;
            /*0x30*/ string _name;

            /*0xf2c580*/ FileSystemInfo();
            /*0xf26460*/ FileSystemInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xf2c3e0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x997630*/ string get_Name();
            /*0xf2c530*/ string ToString();
        }

        enum MatchCasing
        {
            PlatformDefault = 0,
            CaseSensitive = 1,
            CaseInsensitive = 2,
        }

        enum MatchType
        {
            Simple = 0,
            Win32 = 1,
        }

        enum SearchTarget
        {
            Files = 1,
            Directories = 2,
            Both = 3,
        }

        enum FileAttributes
        {
            ReadOnly = 1,
            Hidden = 2,
            System = 4,
            Directory = 16,
            Archive = 32,
            Device = 64,
            Normal = 128,
            Temporary = 256,
            SparseFile = 512,
            ReparsePoint = 1024,
            Compressed = 2048,
            Offline = 4096,
            NotContentIndexed = 8192,
            Encrypted = 16384,
            IntegrityStream = 32768,
            NoScrubData = 131072,
        }

        class Stream : System.MarshalByRefObject, System.IDisposable
        {
            static /*0x0*/ System.IO.Stream Null;
            /*0x18*/ System.IO.Stream.ReadWriteTask _activeReadWriteTask;
            /*0x20*/ System.Threading.SemaphoreSlim _asyncActiveSemaphore;

            static /*0xf35150*/ Stream();
            static /*0xf34420*/ int BlockingEndRead(System.IAsyncResult asyncResult);
            static /*0xf34530*/ void BlockingEndWrite(System.IAsyncResult asyncResult);
            /*0x32f970*/ Stream();
            /*0xf34ae0*/ System.Threading.SemaphoreSlim EnsureAsyncActiveSemaphoreInitialized();
            /*0x17cb40*/ bool get_CanRead();
            /*0x17cb40*/ bool get_CanSeek();
            /*0x17cb40*/ bool get_CanWrite();
            long get_Length();
            long get_Position();
            /*0x17a1c0*/ void set_Position(long value);
            /*0xf34630*/ void Close();
            /*0x542e60*/ void Dispose();
            /*0x32d010*/ void Dispose(bool disposing);
            /*0x180fc0*/ void Flush();
            /*0xf33f60*/ System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0xf33d20*/ System.IAsyncResult BeginReadInternal(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state, bool serializeAsynchronously, bool apm);
            /*0xf346a0*/ int EndRead(System.IAsyncResult asyncResult);
            /*0xf341e0*/ System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0xf33fa0*/ System.IAsyncResult BeginWriteInternal(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state, bool serializeAsynchronously, bool apm);
            /*0xf34cd0*/ void RunReadWriteTaskWhenReady(System.Threading.Tasks.Task asyncWaiter, System.IO.Stream.ReadWriteTask readWriteTask);
            /*0xf34ea0*/ void RunReadWriteTask(System.IO.Stream.ReadWriteTask readWriteTask);
            /*0xf34bf0*/ void FinishTrackingAsyncOperation();
            /*0xf348c0*/ void EndWrite(System.IAsyncResult asyncResult);
            long Seek(long offset, System.IO.SeekOrigin origin);
            int Read(byte[] buffer, int offset, int count);
            /*0xf34c30*/ int ReadByte();
            void Write(byte[] buffer, int offset, int count);
            /*0xf35000*/ void Write(System.ReadOnlySpan<byte> buffer);
            /*0xf34f70*/ void WriteByte(byte value);
            /*0xf34220*/ System.IAsyncResult BlockingBeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0xf34320*/ System.IAsyncResult BlockingBeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);

            class ReadWriteTask : System.Threading.Tasks.Task<int>, System.Threading.Tasks.ITaskCompletionAction
            {
                static /*0x0*/ System.Threading.ContextCallback s_invokeAsyncCallback;
                /*0x58*/ bool _isRead;
                /*0x59*/ bool _apm;
                /*0x60*/ System.IO.Stream _stream;
                /*0x68*/ byte[] _buffer;
                /*0x70*/ int _offset;
                /*0x74*/ int _count;
                /*0x78*/ System.AsyncCallback _callback;
                /*0x80*/ System.Threading.ExecutionContext _context;

                static /*0xf339f0*/ void InvokeAsyncCallback(object completedTask);
                /*0xf33bd0*/ ReadWriteTask(bool isRead, bool apm, System.Func<object, int> function, object state, System.IO.Stream stream, byte[] buffer, int offset, int count, System.AsyncCallback callback);
                /*0xf339b0*/ void ClearBeginState();
                /*0xf33a80*/ void System.Threading.Tasks.ITaskCompletionAction.Invoke(System.Threading.Tasks.Task completingTask);
                /*0x3ce290*/ bool System.Threading.Tasks.ITaskCompletionAction.get_InvokeMayRunArbitraryCode();
            }

            class NullStream : System.IO.Stream
            {
                static /*0x0*/ System.Threading.Tasks.Task<int> s_zeroTask;

                static /*0xf2f090*/ NullStream();
                /*0xf2f120*/ NullStream();
                /*0x3ce290*/ bool get_CanRead();
                /*0x3ce290*/ bool get_CanWrite();
                /*0x3ce290*/ bool get_CanSeek();
                /*0x388e90*/ long get_Length();
                /*0x388e90*/ long get_Position();
                /*0x32d010*/ void set_Position(long value);
                /*0x32d010*/ void Dispose(bool disposing);
                /*0x32d010*/ void Flush();
                /*0xf2ec60*/ System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0xf2ed80*/ int EndRead(System.IAsyncResult asyncResult);
                /*0xf2ecf0*/ System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0xf2ef10*/ void EndWrite(System.IAsyncResult asyncResult);
                /*0x388e90*/ int Read(byte[] buffer, int offset, int count);
                /*0xec2ac0*/ int ReadByte();
                /*0x32d010*/ void Write(byte[] buffer, int offset, int count);
                /*0x32d010*/ void Write(System.ReadOnlySpan<byte> buffer);
                /*0x32d010*/ void WriteByte(byte value);
                /*0x388e90*/ long Seek(long offset, System.IO.SeekOrigin origin);
            }

            class SynchronousAsyncResult : System.IAsyncResult
            {
                /*0x10*/ object _stateObject;
                /*0x18*/ bool _isWrite;
                /*0x20*/ System.Threading.ManualResetEvent _waitHandle;
                /*0x28*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo _exceptionInfo;
                /*0x30*/ bool _endXxxCalled;
                /*0x34*/ int _bytesRead;

                static /*0xf34420*/ int EndRead(System.IAsyncResult asyncResult);
                static /*0xf34530*/ void EndWrite(System.IAsyncResult asyncResult);
                /*0xf35c70*/ SynchronousAsyncResult(int bytesRead, object asyncStateObject);
                /*0xf35cb0*/ SynchronousAsyncResult(object asyncStateObject);
                /*0xf35c00*/ SynchronousAsyncResult(System.Exception ex, object asyncStateObject, bool isWrite);
                /*0x3ce290*/ bool get_IsCompleted();
                /*0xf35cf0*/ System.Threading.WaitHandle get_AsyncWaitHandle();
                /*0xf35be0*/ void ThrowIfError();

                class <>c
                {
                    static /*0x0*/ System.IO.Stream.SynchronousAsyncResult.<> <>9;
                    static /*0x8*/ System.Func<System.Threading.ManualResetEvent> <>9__12_0;

                    static /*0xf379e0*/ <>c();
                    /*0x32f970*/ <>c();
                    /*0xf37620*/ System.Threading.ManualResetEvent <get_AsyncWaitHandle>b__12_0();
                }
            }

            class <>c
            {
                static /*0x0*/ System.IO.Stream.<> <>9;
                static /*0x8*/ System.Func<System.Threading.SemaphoreSlim> <>9__4_0;
                static /*0x10*/ System.Func<object, int> <>9__40_0;
                static /*0x18*/ System.Func<object, int> <>9__48_0;
                static /*0x20*/ System.Action<System.Threading.Tasks.Task, object> <>9__49_0;

                static /*0xf37900*/ <>c();
                /*0x32f970*/ <>c();
                /*0xf370d0*/ System.Threading.SemaphoreSlim <EnsureAsyncActiveSemaphoreInitialized>b__4_0();
                /*0xf36e80*/ int <BeginReadInternal>b__40_0(object <p0>);
                /*0xf36fb0*/ int <BeginWriteInternal>b__48_0(object <p0>);
                /*0xf375a0*/ void <RunReadWriteTaskWhenReady>b__49_0(System.Threading.Tasks.Task t, object state);
            }
        }

        class __Error
        {
            static /*0xf3a000*/ void EndOfFile();
            static /*0xf3a060*/ void FileNotOpen();
            static /*0xf3a0d0*/ string GetDisplayablePath(string path, bool isInvalidPath);
            static /*0xf3a230*/ void WinIOError(int errorCode, string maybeFullPath);
            static /*0xf3aa60*/ void WriterClosed();
        }

        class BinaryReader : System.IDisposable
        {
            /*0x10*/ System.IO.Stream m_stream;
            /*0x18*/ byte[] m_buffer;
            /*0x20*/ System.Text.Decoder m_decoder;
            /*0x28*/ byte[] m_charBytes;
            /*0x30*/ char[] m_singleChar;
            /*0x38*/ char[] m_charBuffer;
            /*0x40*/ int m_maxCharsSize;
            /*0x44*/ bool m_2BytesPerChar;
            /*0x45*/ bool m_isMemoryStream;
            /*0x46*/ bool m_leaveOpen;

            /*0xf240b0*/ BinaryReader(System.IO.Stream input, System.Text.Encoding encoding);
            /*0xf23de0*/ BinaryReader(System.IO.Stream input, System.Text.Encoding encoding, bool leaveOpen);
            /*0x73d3e0*/ System.IO.Stream get_BaseStream();
            /*0xf225f0*/ void Close();
            /*0xf22610*/ void Dispose(bool disposing);
            /*0xf225f0*/ void Dispose();
            /*0xf23bd0*/ int Read();
            /*0xf22f30*/ bool ReadBoolean();
            /*0xf22f80*/ byte ReadByte();
            /*0xf23750*/ sbyte ReadSByte();
            /*0xf23170*/ char ReadChar();
            /*0xf234a0*/ short ReadInt16();
            /*0xf234a0*/ ushort ReadUInt16();
            /*0xf23500*/ int ReadInt32();
            /*0xf23b50*/ uint ReadUInt32();
            /*0xf23630*/ long ReadInt64();
            /*0xf23630*/ ulong ReadUInt64();
            /*0xf237a0*/ float ReadSingle();
            /*0xf23460*/ double ReadDouble();
            /*0xf23320*/ decimal ReadDecimal();
            /*0xf237e0*/ string ReadString();
            /*0xf22840*/ int InternalReadChars(char[] buffer, int index, int count);
            /*0xf22bd0*/ int InternalReadOneChar();
            /*0xf231a0*/ char[] ReadChars(int count);
            /*0xf23bf0*/ int Read(byte[] buffer, int index, int count);
            /*0xf22fc0*/ byte[] ReadBytes(int count);
            /*0xf226d0*/ void FillBuffer(int numBytes);
            /*0xf22e80*/ int Read7BitEncodedInt();
        }

        class BinaryWriter : System.IDisposable
        {
            static /*0x0*/ System.IO.BinaryWriter Null;
            /*0x10*/ System.IO.Stream OutStream;
            /*0x18*/ byte[] _buffer;
            /*0x20*/ System.Text.Encoding _encoding;
            /*0x28*/ System.Text.Encoder _encoder;
            /*0x30*/ bool _leaveOpen;
            /*0x38*/ byte[] _largeByteBuffer;
            /*0x40*/ int _maxChars;

            static /*0xf24e40*/ BinaryWriter();
            /*0xf24fc0*/ BinaryWriter();
            /*0xf24fa0*/ BinaryWriter(System.IO.Stream output, System.Text.Encoding encoding);
            /*0xf250d0*/ BinaryWriter(System.IO.Stream output, System.Text.Encoding encoding, bool leaveOpen);
            /*0xf240f0*/ void Dispose(bool disposing);
            /*0xf240d0*/ void Dispose();
            /*0xe9ad40*/ void Flush();
            /*0xf248b0*/ void Write(bool value);
            /*0xf24d30*/ void Write(byte value);
            /*0xf24700*/ void Write(byte[] buffer);
            /*0xf24d60*/ void Write(byte[] buffer, int index, int count);
            /*0xf24bc0*/ void Write(char ch);
            /*0xf24790*/ void Write(char[] chars);
            /*0xf24ac0*/ void Write(double value);
            /*0xf24550*/ void Write(short value);
            /*0xf24a50*/ void Write(ushort value);
            /*0xf24b10*/ void Write(int value);
            /*0xf24d90*/ void Write(uint value);
            /*0xf24910*/ void Write(long value);
            /*0xf245c0*/ void Write(ulong value);
            /*0xf24860*/ void Write(float value);
            /*0xf241c0*/ void Write(string value);
            /*0xf24150*/ void Write7BitEncodedInt(int value);
        }

        class StringWriter : System.IO.TextWriter
        {
            /*0x30*/ System.Text.StringBuilder _sb;
            /*0x38*/ bool _isOpen;

            /*0xf354c0*/ StringWriter();
            /*0xf356f0*/ StringWriter(System.Text.StringBuilder sb);
            /*0xf35600*/ StringWriter(System.Text.StringBuilder sb, System.IFormatProvider formatProvider);
            /*0xf35200*/ void Close();
            /*0xf35220*/ void Dispose(bool disposing);
            /*0xf35490*/ void Write(char value);
            /*0xf35260*/ void Write(char[] buffer, int index, int count);
            /*0xf35450*/ void Write(string value);
            /*0xf35230*/ string ToString();
        }

        class FileStream : System.IO.Stream
        {
            static /*0x0*/ byte[] buf_recycle;
            static /*0x8*/ object buf_recycle_lock;
            /*0x28*/ byte[] buf;
            /*0x30*/ string name;
            /*0x38*/ Microsoft.Win32.SafeHandles.SafeFileHandle safeHandle;
            /*0x40*/ bool isExposed;
            /*0x48*/ long append_startpos;
            /*0x50*/ System.IO.FileAccess access;
            /*0x54*/ bool owner;
            /*0x55*/ bool async;
            /*0x56*/ bool canseek;
            /*0x57*/ bool anonymous;
            /*0x58*/ bool buf_dirty;
            /*0x5c*/ int buf_size;
            /*0x60*/ int buf_length;
            /*0x64*/ int buf_offset;
            /*0x68*/ long buf_start;

            static /*0xf29dd0*/ FileStream();
            /*0xf2ab50*/ FileStream(nint handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize);
            /*0xf29e50*/ FileStream(nint handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper);
            /*0xf2aae0*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
            /*0xf2ab10*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options);
            /*0xf2aa20*/ FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access);
            /*0xf2a950*/ FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize, bool isAsync);
            /*0xf2a000*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool anonymous, System.IO.FileOptions options);
            /*0xf28840*/ void Init(Microsoft.Win32.SafeHandles.SafeFileHandle safeHandle, System.IO.FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper);
            /*0xf2ad00*/ bool get_CanRead();
            /*0xf2ad30*/ bool get_CanWrite();
            /*0xf2ad20*/ bool get_CanSeek();
            /*0xf2ad50*/ long get_Length();
            /*0xf2af00*/ long get_Position();
            /*0xf2b100*/ void set_Position(long value);
            /*0xf2b0c0*/ Microsoft.Win32.SafeHandles.SafeFileHandle get_SafeFileHandle();
            /*0xf28150*/ void ExposeHandle();
            /*0xf28bb0*/ int ReadByte();
            /*0xf296e0*/ void WriteByte(byte value);
            /*0xf28fe0*/ int Read(byte[] array, int offset, int count);
            /*0xf28e60*/ int ReadInternal(byte[] dest, int offset, int count);
            /*0xf27120*/ System.IAsyncResult BeginRead(byte[] array, int offset, int numBytes, System.AsyncCallback userCallback, object stateObject);
            /*0xf27d70*/ int EndRead(System.IAsyncResult asyncResult);
            /*0xf29b00*/ void Write(byte[] array, int offset, int count);
            /*0xf29850*/ void WriteInternal(byte[] src, int offset, int count);
            /*0xf27530*/ System.IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, System.AsyncCallback userCallback, object stateObject);
            /*0xf27f70*/ void EndWrite(System.IAsyncResult asyncResult);
            /*0xf293d0*/ long Seek(long offset, System.IO.SeekOrigin origin);
            /*0xf28380*/ void Flush();
            /*0xf1a160*/ void Finalize();
            /*0xf27a50*/ void Dispose(bool disposing);
            /*0xf28f30*/ int ReadSegment(byte[] dest, int dest_offset, int count);
            /*0xf29a90*/ int WriteSegment(byte[] src, int src_offset, int count);
            /*0xf28190*/ void FlushBuffer();
            /*0xf28180*/ void FlushBufferIfDirty();
            /*0xf29390*/ void RefillBuffer();
            /*0xf28d20*/ int ReadData(System.Runtime.InteropServices.SafeHandle safeHandle, byte[] buf, int offset, int count);
            /*0xf285a0*/ void InitBuffer(int size, bool isZeroSize);
            /*0xf284e0*/ string GetSecureFileName(string filename);
            /*0xf28400*/ string GetSecureFileName(string filename, bool full);

            class ReadDelegate : System.MulticastDelegate
            {
                /*0xf338f0*/ ReadDelegate(object object, nint method);
                /*0x723400*/ int Invoke(byte[] buffer, int offset, int count);
                /*0xf33820*/ System.IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, System.AsyncCallback callback, object object);
                /*0xf338c0*/ int EndInvoke(System.IAsyncResult result);
            }

            class WriteDelegate : System.MulticastDelegate
            {
                /*0xf39f40*/ WriteDelegate(object object, nint method);
                /*0x723400*/ void Invoke(byte[] buffer, int offset, int count);
                /*0xf39ea0*/ System.IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, System.AsyncCallback callback, object object);
                /*0x723cb0*/ void EndInvoke(System.IAsyncResult result);
            }
        }

        class FileStreamAsyncResult : System.IAsyncResult
        {
            /*0x10*/ object state;
            /*0x18*/ bool completed;
            /*0x20*/ System.Threading.ManualResetEvent wh;
            /*0x28*/ System.AsyncCallback cb;
            /*0x30*/ int Count;
            /*0x34*/ int OriginalCount;
            /*0x38*/ int BytesRead;
            /*0x40*/ System.AsyncCallback realcb;

            static /*0xf26fa0*/ void CBWrapper(System.IAsyncResult ares);
            /*0xf27030*/ FileStreamAsyncResult(System.AsyncCallback cb, object state);
            /*0x61a260*/ System.Threading.WaitHandle get_AsyncWaitHandle();
            /*0xdd36a0*/ bool get_IsCompleted();
        }

        enum MonoFileType
        {
            Unknown = 0,
            Disk = 1,
            Char = 2,
            Pipe = 3,
            Remote = 32768,
        }

        class MonoIO
        {
            static /*0x0*/ nint InvalidHandle;
            static /*0x8*/ bool dump_handles;

            static /*0xf2eb70*/ MonoIO();
            static /*0xf2e380*/ System.Exception GetException(System.IO.MonoIOError error);
            static /*0xf2dc90*/ System.Exception GetException(string path, System.IO.MonoIOError error);
            static /*0xf2dc80*/ string GetCurrentDirectory(ref System.IO.MonoIOError error);
            static /*0xf2e5a0*/ System.IO.MonoFileType GetFileType(nint handle, ref System.IO.MonoIOError error);
            static /*0xf2e490*/ System.IO.MonoFileType GetFileType(System.Runtime.InteropServices.SafeHandle safeHandle, ref System.IO.MonoIOError error);
            static /*0xf2dc70*/ bool FindCloseFile(nint hnd);
            static /*0xf2e6d0*/ nint Open(char* filename, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.FileOptions options, ref System.IO.MonoIOError error);
            static /*0xf2e6e0*/ nint Open(string filename, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.FileOptions options, ref System.IO.MonoIOError error);
            static /*0xf2db10*/ bool Cancel_internal(nint handle, ref System.IO.MonoIOError error);
            static /*0xf2db20*/ bool Cancel(System.Runtime.InteropServices.SafeHandle safeHandle, ref System.IO.MonoIOError error);
            static /*0xf2dc40*/ bool Close(nint handle, ref System.IO.MonoIOError error);
            static /*0xf2e8b0*/ int Read(nint handle, byte[] dest, int dest_offset, int count, ref System.IO.MonoIOError error);
            static /*0xf2e770*/ int Read(System.Runtime.InteropServices.SafeHandle safeHandle, byte[] dest, int dest_offset, int count, ref System.IO.MonoIOError error);
            static /*0xf2eb60*/ int Write(nint handle, byte[] src, int src_offset, int count, ref System.IO.MonoIOError error);
            static /*0xf2ea20*/ int Write(System.Runtime.InteropServices.SafeHandle safeHandle, byte[] src, int src_offset, int count, ref System.IO.MonoIOError error);
            static /*0xf2ea10*/ long Seek(nint handle, long offset, System.IO.SeekOrigin origin, ref System.IO.MonoIOError error);
            static /*0xf2e8d0*/ long Seek(System.Runtime.InteropServices.SafeHandle safeHandle, long offset, System.IO.SeekOrigin origin, ref System.IO.MonoIOError error);
            static /*0xf2e5b0*/ long GetLength(nint handle, ref System.IO.MonoIOError error);
            static /*0xf2e5c0*/ long GetLength(System.Runtime.InteropServices.SafeHandle safeHandle, ref System.IO.MonoIOError error);
            static /*0xf2ec20*/ nint get_ConsoleOutput();
            static /*0xf2ec10*/ nint get_ConsoleInput();
            static /*0xf2ec00*/ nint get_ConsoleError();
            static /*0xf2dc50*/ bool CreatePipe(ref nint read_handle, ref nint write_handle, ref System.IO.MonoIOError error);
            static /*0xf2dc60*/ bool DuplicateHandle(nint source_process_handle, nint source_handle, nint target_process_handle, ref nint target_handle, int access, int inherit, int options, ref System.IO.MonoIOError error);
            static /*0xf2ec50*/ char get_VolumeSeparatorChar();
            static /*0xf2ec30*/ char get_DirectorySeparatorChar();
            static /*0xf2ebf0*/ char get_AltDirectorySeparatorChar();
            static /*0xf2ec40*/ char get_PathSeparator();
            static /*0xed3a00*/ void DumpHandles();
            static /*0xf2e8c0*/ bool RemapPath(string path, ref string newPath);
        }

        enum MonoIOError
        {
            ERROR_SUCCESS = 0,
            ERROR_FILE_NOT_FOUND = 2,
            ERROR_PATH_NOT_FOUND = 3,
            ERROR_TOO_MANY_OPEN_FILES = 4,
            ERROR_ACCESS_DENIED = 5,
            ERROR_INVALID_HANDLE = 6,
            ERROR_INVALID_DRIVE = 15,
            ERROR_NOT_SAME_DEVICE = 17,
            ERROR_NO_MORE_FILES = 18,
            ERROR_NOT_READY = 21,
            ERROR_WRITE_FAULT = 29,
            ERROR_READ_FAULT = 30,
            ERROR_GEN_FAILURE = 31,
            ERROR_SHARING_VIOLATION = 32,
            ERROR_LOCK_VIOLATION = 33,
            ERROR_HANDLE_DISK_FULL = 39,
            ERROR_NOT_SUPPORTED = 50,
            ERROR_FILE_EXISTS = 80,
            ERROR_CANNOT_MAKE = 82,
            ERROR_INVALID_PARAMETER = 87,
            ERROR_BROKEN_PIPE = 109,
            ERROR_INVALID_NAME = 123,
            ERROR_DIR_NOT_EMPTY = 145,
            ERROR_ALREADY_EXISTS = 183,
            ERROR_FILENAME_EXCED_RANGE = 206,
            ERROR_DIRECTORY = 267,
            ERROR_ENCRYPTION_FAILED = 6000,
        }

        struct MonoIOStat
        {
            /*0x10*/ System.IO.FileAttributes fileAttributes;
            /*0x18*/ long Length;
            /*0x20*/ long CreationTime;
            /*0x28*/ long LastAccessTime;
            /*0x30*/ long LastWriteTime;
        }

        class Path
        {
            static /*0x0*/ char[] InvalidPathChars;
            static /*0x8*/ char AltDirectorySeparatorChar;
            static /*0xa*/ char DirectorySeparatorChar;
            static /*0xc*/ char PathSeparator;
            static /*0x10*/ string DirectorySeparatorStr;
            static /*0x18*/ char VolumeSeparatorChar;
            static /*0x20*/ char[] PathSeparatorChars;
            static /*0x28*/ bool dirEqualsVolume;
            static /*0x30*/ char[] trimEndCharsWindows;
            static /*0x38*/ char[] trimEndCharsUnix;

            static /*0xf334f0*/ Path();
            static /*0xf2fe00*/ string Combine(string path1, string path2);
            static /*0xf2f990*/ string CleanPath(string s);
            static /*0xf30790*/ string GetDirectoryName(string path);
            static /*0xf306b0*/ System.ReadOnlySpan<char> GetDirectoryName(System.ReadOnlySpan<char> path);
            static /*0xf30d30*/ string GetFileName(string path);
            static /*0xf311c0*/ string GetFullPath(string path);
            static /*0xf30e40*/ string GetFullPathInternal(string path);
            static /*0xf310e0*/ int GetFullPathName(string path, int numBufferChars, System.Text.StringBuilder buffer, ref nint lpFilePartOrNull);
            static /*0xf30e90*/ string GetFullPathName(string path);
            static /*0xf33270*/ string WindowsDriveAdjustment(string path);
            static /*0xf31a70*/ string InsecureGetFullPath(string path);
            static /*0xf32180*/ bool IsDirectorySeparator(char c);
            static /*0xf312a0*/ string GetPathRoot(string path);
            static /*0xf31950*/ string GetTempPath();
            static /*0xf33810*/ string get_temp_path();
            static /*0xf32430*/ bool IsPathRooted(System.ReadOnlySpan<char> path);
            static /*0xf32200*/ bool IsPathRooted(string path);
            static /*0xf31220*/ char[] GetInvalidPathChars();
            static /*0xf31750*/ string GetServerAndShare(string path);
            static /*0xf32f60*/ bool SameRoot(string root, string path);
            static /*0xf2f250*/ string CanonicalizePath(string path);
            static /*0xf30320*/ string Combine(string[] paths);
            static /*0xf30130*/ string Combine(string path1, string path2, string path3);
            static /*0xf30bd0*/ System.ReadOnlySpan<char> GetFileName(System.ReadOnlySpan<char> path);
            static /*0xf32c00*/ string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2);
            static /*0xf32cb0*/ string Join(System.ReadOnlySpan<char> path1, System.ReadOnlySpan<char> path2, System.ReadOnlySpan<char> path3);
            static /*0xf32930*/ string JoinInternal(System.ReadOnlySpan<char> first, System.ReadOnlySpan<char> second);
            static /*0xf32550*/ string JoinInternal(System.ReadOnlySpan<char> first, System.ReadOnlySpan<char> second, System.ReadOnlySpan<char> third);

            class <>c
            {
                static /*0x0*/ System.IO.Path.<> <>9;
                static /*0x8*/ System.Buffers.SpanAction<char, System.ValueTuple<nint, int, nint, int, bool>> <>9__59_0;
                static /*0x10*/ System.Buffers.SpanAction<char, System.ValueTuple<nint, int, nint, int, nint, int, bool, System.ValueTuple<bool>>> <>9__60_0;

                static /*0xf37890*/ <>c();
                /*0x32f970*/ <>c();
                /*0xf37120*/ void <JoinInternal>b__59_0(System.Span<char> destination, System.ValueTuple<nint, int, nint, int, bool> state);
                /*0xf372f0*/ void <JoinInternal>b__60_0(System.Span<char> destination, System.ValueTuple<nint, int, nint, int, nint, int, bool, System.ValueTuple<bool>> state);
            }
        }

        class UnexceptionalStreamReader : System.IO.StreamReader
        {
            static /*0x0*/ bool[] newline;
            static /*0x8*/ char newlineChar;

            static /*0xf37ef0*/ UnexceptionalStreamReader();
            /*0xf37fa0*/ UnexceptionalStreamReader(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0xf252c0*/ int Peek();
            /*0xf37ed0*/ int Read();
            /*0xf37c70*/ int Read(char[] dest_buffer, int index, int count);
            /*0xf37a50*/ bool CheckEOL(char current);
            /*0xf37c30*/ string ReadLine();
            /*0xf37c50*/ string ReadToEnd();
        }

        class UnexceptionalStreamWriter : System.IO.StreamWriter
        {
            /*0xf38090*/ UnexceptionalStreamWriter(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0xf38050*/ void Write(char[] buffer, int index, int count);
            /*0xf38010*/ void Write(char value);
            /*0xf38070*/ void Write(char[] value);
            /*0xf38030*/ void Write(string value);
        }

        class CStreamReader : System.IO.StreamReader
        {
            /*0x60*/ System.TermInfoDriver driver;

            /*0xf25550*/ CStreamReader(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0xf252c0*/ int Peek();
            /*0xf25340*/ int Read();
            /*0xf253a0*/ int Read(char[] dest, int index, int count);
            /*0xf252e0*/ string ReadLine();
            /*0xf25310*/ string ReadToEnd();
        }

        class CStreamWriter : System.IO.StreamWriter
        {
            /*0x70*/ System.TermInfoDriver driver;

            /*0xf25b00*/ CStreamWriter(System.IO.Stream stream, System.Text.Encoding encoding, bool leaveOpen);
            /*0xf25740*/ void Write(char[] buffer, int index, int count);
            /*0xf25960*/ void Write(char val);
            /*0xf256c0*/ void InternalWriteString(string val);
            /*0xf25680*/ void InternalWriteChar(char val);
            /*0xf256a0*/ void InternalWriteChars(char[] buffer, int n);
            /*0xf25ac0*/ void Write(char[] val);
            /*0xf25a50*/ void Write(string val);
            /*0xf256e0*/ void WriteLine(string val);
        }

        class MonoLinqHelper
        {
            static /*0x17e030*/ T[] ToArray<T>(System.Collections.Generic.IEnumerable<T> source);
        }

        namespace Enumeration
        {
            class FileSystemEnumerator<TResult> : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.Collections.Generic.IEnumerator<TResult>, System.IDisposable, System.Collections.IEnumerator
            {
                /*0x0*/ string _originalRootDirectory;
                /*0x0*/ string _rootDirectory;
                /*0x0*/ System.IO.EnumerationOptions _options;
                /*0x0*/ object _lock;
                /*0x0*/ Interop.NtDll.FILE_FULL_DIR_INFORMATION* _entry;
                /*0x0*/ TResult _current;
                /*0x0*/ nint _buffer;
                /*0x0*/ int _bufferLength;
                /*0x0*/ nint _directoryHandle;
                /*0x0*/ string _currentPath;
                /*0x0*/ bool _lastEntryFound;
                /*0x0*/ System.Collections.Generic.Queue<System.ValueTuple<nint, string>> _pending;

                /*0x183150*/ FileSystemEnumerator(string directory, System.IO.EnumerationOptions options);
                /*0x17cb40*/ bool GetDataUWP();
                /*0x2a5510*/ nint CreateRelativeDirectoryHandleUWP(System.ReadOnlySpan<char> relativePath, string fullPath);
                /*0x180fc0*/ void CloseDirectoryHandle();
                /*0x2a5510*/ nint CreateDirectoryHandle(string path, bool ignoreNotFound);
                bool ContinueOnDirectoryError(int error, bool ignoreNotFound);
                /*0x17cb40*/ bool MoveNext();
                /*0x180fc0*/ void FindNextEntry();
                /*0x17cb40*/ bool DequeueNextDirectory();
                /*0x181190*/ void InternalDispose(bool disposing);
                /*0x17cb40*/ bool GetData();
                /*0x2a5510*/ nint CreateRelativeDirectoryHandle(System.ReadOnlySpan<char> relativePath, string fullPath);
                /*0x17e620*/ bool ShouldIncludeEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                /*0x17e620*/ bool ShouldRecurseIntoEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                /*0x2a5510*/ TResult TransformEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                void OnDirectoryFinished(System.ReadOnlySpan<char> directory);
                /*0x17bfd0*/ bool ContinueOnError(int error);
                /*0x2a5510*/ TResult get_Current();
                /*0x1803b0*/ object System.Collections.IEnumerator.get_Current();
                /*0x180fc0*/ void DirectoryFinished();
                /*0x180fc0*/ void Reset();
                /*0x180fc0*/ void Dispose();
                /*0x181190*/ void Dispose(bool disposing);
                /*0x180fc0*/ void Finalize();
            }

            struct FileSystemEntry
            {
                /*0x10*/ Interop.NtDll.FILE_FULL_DIR_INFORMATION* _info;
                /*0x18*/ System.ReadOnlySpan<char> <Directory>k__BackingField;
                /*0x28*/ System.ReadOnlySpan<char> <RootDirectory>k__BackingField;
                /*0x38*/ System.ReadOnlySpan<char> <OriginalRootDirectory>k__BackingField;

                static /*0xf2b1a0*/ void Initialize(ref System.IO.Enumeration.FileSystemEntry entry, Interop.NtDll.FILE_FULL_DIR_INFORMATION* info, System.ReadOnlySpan<char> directory, System.ReadOnlySpan<char> rootDirectory, System.ReadOnlySpan<char> originalRootDirectory);
                /*0xa5a790*/ System.ReadOnlySpan<char> get_Directory();
                /*0xf2b430*/ void set_Directory(System.ReadOnlySpan<char> value);
                /*0x716050*/ System.ReadOnlySpan<char> get_RootDirectory();
                /*0xdd5220*/ void set_RootDirectory(System.ReadOnlySpan<char> value);
                /*0xa75be0*/ System.ReadOnlySpan<char> get_OriginalRootDirectory();
                /*0xf2b440*/ void set_OriginalRootDirectory(System.ReadOnlySpan<char> value);
                /*0xf2b3e0*/ System.ReadOnlySpan<char> get_FileName();
                /*0xf2b3c0*/ System.IO.FileAttributes get_Attributes();
                /*0xf2b410*/ bool get_IsDirectory();
                /*0xf2b1c0*/ string ToSpecifiedFullPath();
            }

            class FileSystemEnumerable<TResult> : System.Collections.Generic.IEnumerable<TResult>, System.Collections.IEnumerable
            {
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.DelegateEnumerator<TResult> _enumerator;
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<TResult> _transform;
                /*0x0*/ System.IO.EnumerationOptions _options;
                /*0x0*/ string _directory;
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> <ShouldIncludePredicate>k__BackingField;
                /*0x0*/ System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> <ShouldRecursePredicate>k__BackingField;

                /*0x183830*/ FileSystemEnumerable(string directory, System.IO.Enumeration.FileSystemEnumerable.FindTransform<TResult> transform, System.IO.EnumerationOptions options);
                /*0x1803b0*/ System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> get_ShouldIncludePredicate();
                /*0x17aec0*/ void set_ShouldIncludePredicate(System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> value);
                /*0x1803b0*/ System.IO.Enumeration.FileSystemEnumerable.FindPredicate<TResult> get_ShouldRecursePredicate();
                /*0x1803b0*/ System.Collections.Generic.IEnumerator<TResult> GetEnumerator();
                /*0x1803b0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class FindPredicate<TResult> : System.MulticastDelegate
                {
                    FindPredicate(object object, nint method);
                    /*0x17e620*/ bool Invoke(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class FindTransform<TResult> : System.MulticastDelegate
                {
                    FindTransform(object object, nint method);
                    /*0x2a5510*/ TResult Invoke(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class DelegateEnumerator<TResult> : System.IO.Enumeration.FileSystemEnumerator<TResult>
                {
                    /*0x0*/ System.IO.Enumeration.FileSystemEnumerable<TResult> _enumerable;

                    /*0x17aec0*/ DelegateEnumerator(System.IO.Enumeration.FileSystemEnumerable<TResult> enumerable);
                    /*0x2a5510*/ TResult TransformEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x17e620*/ bool ShouldRecurseIntoEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0x17e620*/ bool ShouldIncludeEntry(ref System.IO.Enumeration.FileSystemEntry entry);
                }
            }

            class FileSystemEnumerableFactory
            {
                static /*0x0*/ char[] s_unixEscapeChars;

                static /*0xf2c350*/ FileSystemEnumerableFactory();
                static /*0xf2b710*/ void NormalizeInputs(ref string directory, ref string expression, System.IO.EnumerationOptions options);
                static /*0xf2b450*/ bool MatchesPattern(string expression, System.ReadOnlySpan<char> name, System.IO.EnumerationOptions options);
                static /*0xf2c140*/ System.Collections.Generic.IEnumerable<string> UserFiles(string directory, string expression, System.IO.EnumerationOptions options);
                static /*0xf2bd20*/ System.Collections.Generic.IEnumerable<string> UserDirectories(string directory, string expression, System.IO.EnumerationOptions options);
                static /*0xf2bf30*/ System.Collections.Generic.IEnumerable<string> UserEntries(string directory, string expression, System.IO.EnumerationOptions options);

                class <>c__DisplayClass3_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x32f970*/ <>c__DisplayClass3_0();
                    /*0xf37670*/ bool <UserFiles>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c
                {
                    static /*0x0*/ System.IO.Enumeration.FileSystemEnumerableFactory.<> <>9;
                    static /*0x8*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<string> <>9__3_0;
                    static /*0x10*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<string> <>9__4_0;
                    static /*0x18*/ System.IO.Enumeration.FileSystemEnumerable.FindTransform<string> <>9__5_0;

                    static /*0xf37970*/ <>c();
                    /*0x32f970*/ <>c();
                    /*0xf37610*/ string <UserFiles>b__3_0(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0xf37610*/ string <UserDirectories>b__4_0(ref System.IO.Enumeration.FileSystemEntry entry);
                    /*0xf37610*/ string <UserEntries>b__5_0(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c__DisplayClass4_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x32f970*/ <>c__DisplayClass4_0();
                    /*0xf37730*/ bool <UserDirectories>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }

                class <>c__DisplayClass5_0
                {
                    /*0x10*/ string expression;
                    /*0x18*/ System.IO.EnumerationOptions options;

                    /*0x32f970*/ <>c__DisplayClass5_0();
                    /*0xf377f0*/ bool <UserEntries>b__1(ref System.IO.Enumeration.FileSystemEntry entry);
                }
            }

            class FileSystemName
            {
                static /*0x0*/ char[] s_wildcardChars;
                static /*0x8*/ char[] s_simpleWildcardChars;

                static /*0xf2d320*/ FileSystemName();
                static /*0xf2d000*/ string TranslateWin32Expression(string expression);
                static /*0xf2cf70*/ bool MatchesWin32Expression(System.ReadOnlySpan<char> expression, System.ReadOnlySpan<char> name, bool ignoreCase);
                static /*0xf2cee0*/ bool MatchesSimpleExpression(System.ReadOnlySpan<char> expression, System.ReadOnlySpan<char> name, bool ignoreCase);
                static /*0xf2c590*/ bool MatchPattern(System.ReadOnlySpan<char> expression, System.ReadOnlySpan<char> name, bool ignoreCase, bool useExtendedWildcards);
            }
        }
    }
}

class <PrivateImplementationDetails>
{
    static /*0x0*/ <PrivateImplementationDetails> 021022D5891F99B3B525763EB77BAEC69B107268F560721F5060FCDBD4D5AAE8;
    static /*0xaa*/ <PrivateImplementationDetails> 042957A0DB5FF2D38A343AC5AE5F8635B88F10C32EB87A238B1DFB4756468476;
    static /*0xb6*/ <PrivateImplementationDetails> 0C496C9AE05419BD25256D0EF4F31AFD291119F14B8BD683BF1774F91E08659D;
    static /*0x10a*/ <PrivateImplementationDetails> 0E499E7743BCDFF289B85890E4DFDD635594DB16246DC094C3C19556B6C1262C;
    static /*0x152*/ <PrivateImplementationDetails> 0F9E3C7E66CDEF5C44FA29E65CA676C480F7A2A4A067F70107FDC292C68D38B0;
    static /*0x15e*/ <PrivateImplementationDetails> 1199C3B39A2FA058EFF5B3829616AE81EE2B59A51D89C107A5FA4B6FEF95DD16;
    static /*0x1aa*/ <PrivateImplementationDetails> 12D518BA10F3DD1A331E65FBD4C330930C0A0BD9F50F37BE0BDF596E964B9A78;
    static /*0x9de*/ <PrivateImplementationDetails> 195ABC1ABB69B6BD65F20ACAFA79EED2D330BF513E25C830F24B8A78D8703446;
    static /*0xa5e*/ <PrivateImplementationDetails> 1A07BC77B9912D8D87E9B28E0167F53A9B09BB017B35A35F3913989C9440A60B;
    static /*0xa68*/ <PrivateImplementationDetails> 1B9CC34A0CF8DBCC350E200673FAC4124DDAD581F1FC2C16FF9A1C0154691687;
    static /*0x1012*/ <PrivateImplementationDetails> 1C4B3A80ED7AEC83916479BCE280E1258D5785D07F0EA22A5E27592ACCAE692B;
    static /*0x117a*/ <PrivateImplementationDetails> 1F38DEB3F70291588D06D3830D0D4241CE0570C9F4EE8B00F606C4753EB016E2;
    static /*0x11a4*/ <PrivateImplementationDetails> 2403FBEA85D0741C5727760E97EF16C9BF23294F21C0F1265A4BAF7F22202A64;
    static /*0x11b0*/ <PrivateImplementationDetails> 25308BAB47481701F1E861B1EA4F2409E73ABB14E9579C26DF4ABE440A0DCF0A;
    static /*0x11fc*/ <PrivateImplementationDetails> 2CCF4119215BDAD102DA7AD5B57E0E6CA19CC8FF5524856FC58907E824213E1F;
    static /*0x1244*/ <PrivateImplementationDetails> 3444EB31231B2CCC1B05C7A44EBD1B2A009C1D9977A99B453F52E2F81DD6C32F;
    static /*0x128c*/ <PrivateImplementationDetails> 3D95E4501B1964D7FCE16E3F5682A038752B462357D87343880B1E819F6163FE;
    static /*0x129c*/ <PrivateImplementationDetails> 3F62692E2AD5078353EC4471A13421A61EE493294CF59DC66626A6EF9CCCD2C4;
    static /*0x12e4*/ <PrivateImplementationDetails> 42E1421FC2A5A6A33E964D7EB9603EB101818D858DDA09B2BC9B5A888C1C351C;
    static /*0x12f0*/ <PrivateImplementationDetails> 4623CA5867960AA898AA1F65E720CD5ECD3552542E0C6F6FB65B21D14DD1CBC2;
    static /*0x1368*/ <PrivateImplementationDetails> 494C32E1A18F6E8AD8ED5FAB0A5AF07F801BE7AF3C936942B020918CE2953046;
    static /*0x1416*/ <PrivateImplementationDetails> 4E0B9E024FA510B6F03C92D95BB204E78CDC6E3FD2EC8D35787B7BC76F0655A0;
    static /*0x1d64*/ <PrivateImplementationDetails> 508085E0DDEEA9CE48BFAE98CEC779F8D06301AE973555D37680D08190CAFA70;
    static /*0x1d90*/ <PrivateImplementationDetails> 510FDFA4743E58DD45DCDD7CB4F8509BF6294CC1D1D4958CA30A9E7604973006;
    static /*0x1dd8*/ <PrivateImplementationDetails> 5292FD0A8E62FCCBE41F34EFE7575D097990A66FE23B3507971C5BF272A4362E;
    static /*0x1e02*/ <PrivateImplementationDetails> 543172FF9822CE5240DF89FF3AD8C7FD9824F97D0EED9B1432E60345FBBDE9A9;
    static /*0x1e36*/ <PrivateImplementationDetails> 56073E3CC3FC817690CC306D0DB7EA63EBCB0801359567CA44CA3D3B9BF63854;
    static /*0x4866*/ <PrivateImplementationDetails> 5857EE4CE98BFABBD62B385C1098507DD0052FF3951043AAD6A1DABD495F18AA;
    static /*0x489a*/ <PrivateImplementationDetails> 5EC4E50DA95A113769D73E5F7F8221A876185CEE6498ABB16FBB9F0563C15BBF;
    static /*0x48e2*/ <PrivateImplementationDetails> 61D639BE11384EE21CDE2B40357F4F9D80A106C97C592D18A9F4CAA442CA5D31;
    static /*0x4940*/ <PrivateImplementationDetails> 64A0AD5A7BF0B569FABE66AF3006423DA81FF79CD282E8D781CD013B1FD7D5CE;
    static /*0x495c*/ <PrivateImplementationDetails> 67856A16DB0550FDAB4D1A9B208B0C155C4679CA116BF867B74ED2A0AA4D2955;
    static /*0x4be4*/ <PrivateImplementationDetails> 6DC92D3617F0357376502FBA4CDD465B5423818DABE8B2CA1A06E1351F2F1C85;
    static /*0x4c2c*/ <PrivateImplementationDetails> 71F7F6B226CBC11C8B26D506869FAE022928427389882579DB316F36FF34A096;
    static /*0x4d00*/ <PrivateImplementationDetails> 74BCD6ED20AF2231F2BB1CDE814C5F4FF48E54BAC46029EEF90DDF4A208E2B20;
    static /*0x4e20*/ <PrivateImplementationDetails> 7BEC6AD454781FDCD8D475B3418629CBABB3BF9CA66FA80009D608A1A60D0696;
    static /*0x53e0*/ <PrivateImplementationDetails> 7F777906B0704EB248888E491577584D5BEBE71B375BD595A06444390B471915;
    static /*0x5428*/ <PrivateImplementationDetails> 801494072CDD59E61F9AA9345A80D045378705DFDCE94902C22EAEAE049BE780;
    static /*0x5528*/ long 819B40F8CF7DC49B4275955A17C10239F1BBBB3BF96E26E25ED844B96B645D7F;
    static /*0x5530*/ <PrivateImplementationDetails> 8259E3EBA4D41CA02AE5322BBD280034A9C9860D9CD0D2038139FC9EBE6B6C77;
    static /*0x5578*/ long 82B100804CE219CD73E155C7C6457FCF04EA539DE5B19F4736E800098714EB21;
    static /*0x5580*/ <PrivateImplementationDetails> 861FD05B0EAD3D0AA9418B140CC37846BBC5F195214D90CEF42919D1E36EED10;
    static /*0x55c8*/ <PrivateImplementationDetails> 86BDA34D2165AC08F2DE4918B302E44205CDEA674FCA7F2C7F56D4F12D8B0C73;
    static /*0x59b0*/ long 8BFD94DEAAC0F168DC8B50A00AC120A113B550B68FEF344F807D503D1A6E5DED;
    static /*0x59b8*/ <PrivateImplementationDetails> 8CCE27079B32C13BB310169A6AD26AE419CDC98B7E2EFD3CC9997257F4BC1DEF;
    static /*0x6039*/ <PrivateImplementationDetails> 9086502742CE7F0595B57A4E5B32901FF4CF97959B92F7E91A435E4765AC1115;
    static /*0x7779*/ <PrivateImplementationDetails> 93B42898102ACB2421875C45676880B8A07390D8DF0E1EE85C5D1AA26964B0C6;
    static /*0x78c9*/ <PrivateImplementationDetails> 93F28AF88A06482BE13F8D0354B6A7676DDAED573EA3938C50F6E53E6D6BB0B6;
    static /*0x78fd*/ <PrivateImplementationDetails> 95BDE712712F10D07813AE3DEEA40D1F38E3FCF1A92CC435F17A326CC22242EB;
    static /*0x79ab*/ <PrivateImplementationDetails> 964889A5283FD0A3DFC8AE256721E6F67B8212FD6841AB1C821DE3134DE79B07;
    static /*0x7ab1*/ <PrivateImplementationDetails> 96E3FDE919EC36694EFBEC22FEF80F84EE640CC5E46CED07C3E65AC04607C7D6;
    static /*0x7ac0*/ <PrivateImplementationDetails> 9960C7FC60CDD325C8A2A00995BE7064EAC3F6295C6A5C4E797D2281846131E4;
    static /*0x7ae4*/ <PrivateImplementationDetails> 99E66DACA3EFF94776AF1258E0E5B2F4DF2900E4EA32351B0DF37A87F2426B1F;
    static /*0x7b10*/ <PrivateImplementationDetails> A252A93D042C5E2453990C2829A425C6DD749CCDCDF13DB58C11BBC78E8D3CE9;
    static /*0x7b58*/ <PrivateImplementationDetails> A2DFDF9C2CED8BB1C0B9B06064345ACC9C22DFE5FEC9976FF061F0994451519B;
    static /*0x7bd0*/ <PrivateImplementationDetails> A2EC7CB9B0FE89F9A9BEA547D773225AFE6E4535DF28325A0D6CD7A5E2D20376;
    static /*0x7c1c*/ <PrivateImplementationDetails> A30E1152CFB528AE968FAC58E83BBEB3611BFDE2E6CF60B4FA9535A7D0A9B8EA;
    static /*0x7c64*/ <PrivateImplementationDetails> A516EECB41051151F0183A8B0B6F6693C43F7D9E1815F85CAAAB18E00A5269A2;
    static /*0x7c8c*/ <PrivateImplementationDetails> AAF4528994DD7C464F43C131F6CD44DF41ACC18462C95877252FFC7EAC0164EF;
    static /*0x7cd4*/ <PrivateImplementationDetails> B21802DE889E5F4F5344C8E0D366F59B68F886F88EFE45EA5CE01534A3F5C0E5;
    static /*0x7d08*/ <PrivateImplementationDetails> B55F94CD2F415D0279D7A1AF2265C4D9A90CE47F8C900D5D09AD088796210838;
    static /*0x8588*/ <PrivateImplementationDetails> BABD01C34E7E65E57E4C431281E782B4101CE0644A8090AD6E501F1C6CF2C9DF;
    static /*0x85ac*/ <PrivateImplementationDetails> BB425A9B43E10C921902A25D07A4317DEFF9F606A788672E1B21633C143407F0;
    static /*0x85bc*/ <PrivateImplementationDetails> C250CAD28060A4EB63B4C4A643DDA196CCD35FD2FC67FB749ADF4BAC6D62E1A0;
    static /*0x85e0*/ <PrivateImplementationDetails> C5733A1245383FBF067B4A9BDB41E3FB8E3A6BDEF37B3D5418F389422875783F;
    static /*0x8628*/ <PrivateImplementationDetails> C8EC70AC5A448C3A45CF1DFCC1375BE4E80DC6793E97D5E89BD97A0DC232B2E3;
    static /*0x8a28*/ <PrivateImplementationDetails> C95D810E738DB5F591EE691CE884EED2F110D9F82B1F7A8BE6ED257FDF4CDBEB;
    static /*0x8a38*/ <PrivateImplementationDetails> C9830DF6956357ACE51CE1F82298578B36EB45A0CFDB8AEC5B9FDA7DB17E8063;
    static /*0x8aba*/ <PrivateImplementationDetails> CAF8A46B3A07E26F84FE849B57A877051A0D06194B1C057985446B64BCC6E016;
    static /*0x8b02*/ <PrivateImplementationDetails> CAFFFC9D15E4037EE8FBDB1A45DFE456F0936BDC7310F1882EAF14B706A76658;
    static /*0x8b26*/ <PrivateImplementationDetails> D1A99909A2923269BB67E72C1AED693F74961BDA58360FCC133007740CEBF5F1;
    static /*0x8b6e*/ <PrivateImplementationDetails> D503954AE2C3616EA32CEB0D66F5B2E119D03CE722773E5D7E1A8BC8F1803631;
    static /*0x8bb6*/ <PrivateImplementationDetails> D6691EE5A533DE7E0859066942261B24D0C836D7EE016D2251377BFEE40FEA15;
    static /*0x8c62*/ <PrivateImplementationDetails> D896D464C3726A21162F271ACB711464AD07EA9C9CE78E0297FD0DE934471FA6;
    static /*0x8c6e*/ <PrivateImplementationDetails> D8A29F3D197FBB54CF9F4B105AFBA6B1257ADF6449F0184F843380AAAA24639C;
    static /*0x8cb6*/ <PrivateImplementationDetails> DCDCF594464B904F763D4CE53B1DBE08A47E551AE86FD5D61F63FD0C3313FDC3;
    static /*0x8cfe*/ <PrivateImplementationDetails> DCE88EE5233B9D0FD0D7A6222C82BC3AEE83B15E9992F939B17AB40530DB555C;
    static /*0x962c*/ <PrivateImplementationDetails> DD471F12FFA94CC557A02A91C2CBB95F551AB28C8BBF297B2F953B8886BCCF6D;
    static /*0x96c4*/ <PrivateImplementationDetails> DF29A050CD2EBD9DFDC783DB1CC74D3D716DAEC1630A337EE31B9E2E03D34D2D;
    static /*0x970c*/ <PrivateImplementationDetails> E2C673A3A737B04369A63F1FB1A30F6E742B066E2CCCD9B1838793CBB5590598;
    static /*0x9732*/ <PrivateImplementationDetails> E32C465157D21F39B3DBF186A98FB02185C63B0260B47247A7A5FDF2B061EAA8;
    static /*0x973e*/ <PrivateImplementationDetails> E5F4F6214036DF103321A8A0CE30C2EF935694B4199D52BC538E7EF3F045CB92;
    static /*0x9756*/ <PrivateImplementationDetails> E768EDCAE10BAB68BB5DF102FDBB8CF4F31B9D60159B44DA3F33ABC36388308B;
    static /*0x9796*/ <PrivateImplementationDetails> E8588351183F6F6A7DAD54DC28357628F3C4D4B358AB92A18AE7D08B0D9B0092;
    static /*0x9b90*/ <PrivateImplementationDetails> EBE07C3718876777F609CD22058F4C3A6CCCC695F5BDE90998DC1E12E0CBE63D;
    static /*0x9b9c*/ <PrivateImplementationDetails> EE415D5C3ECC6C8C19F71BCD4E03847F5A15931374A7F5BF88C24B722F04B8FE;
    static /*0x9bbc*/ <PrivateImplementationDetails> EF82B163CA8252A793A6E73F57775D843C9A21F65586926EB11893FA8BB603E9;
    static /*0x9bcc*/ <PrivateImplementationDetails> F0CF66F9B123DCEBB39C38C5D8E4821D4E94DB593889C506BCA0827036F1B7EB;
    static /*0x9cbc*/ <PrivateImplementationDetails> F1945CD6C19E56B3C1C78943EF5EC18116907A4CA1EFC40A57D48AB1DB7ADFC5;
    static /*0x9cbf*/ <PrivateImplementationDetails> F2830F044682E33B39018B5912634835B641562914E192CA66C654F5E4492FA8;
    static /*0x9dbf*/ <PrivateImplementationDetails> F4BD8144313C3B67E191C6F3CD8B00540FF1809837C5BCA5C2FDA0D518681563;
    static /*0x9e07*/ <PrivateImplementationDetails> F7D381AF73D85950E0B064CF1AA8F14938A1F38084B46CE36AAEFE81BEF739F3;
    static /*0x9edb*/ <PrivateImplementationDetails> FADB218011E7702BB9575D0C32A685DA10B5C72EB809BD9A955DB1C76E4D8315;
    static /*0x9f0f*/ <PrivateImplementationDetails> FB2089AF82E09593374B65EC2440779FDCF5DD6DA07D26E57AF6790667B937CD;
    static /*0xa3c7*/ <PrivateImplementationDetails> FD68700E95459C5E7A49C5830F8BD0A9BA4BD171252663D8066B09E7768C5C5D;
    static /*0xa4b7*/ <PrivateImplementationDetails> FEC387BA57A54BB6066E4CA8A4F9C0FF9C36B9CBD6600C3683F6FB1BDB5077EB;

    static /*0xf36e20*/ uint ComputeStringHash(string s);

    struct __StaticArrayInitTypeSize=3
    {
    }

    struct __StaticArrayInitTypeSize=10
    {
    }

    struct __StaticArrayInitTypeSize=12
    {
    }

    struct __StaticArrayInitTypeSize=15
    {
    }

    struct __StaticArrayInitTypeSize=16
    {
    }

    struct __StaticArrayInitTypeSize=24
    {
    }

    struct __StaticArrayInitTypeSize=28
    {
    }

    struct __StaticArrayInitTypeSize=32
    {
    }

    struct __StaticArrayInitTypeSize=36
    {
    }

    struct __StaticArrayInitTypeSize=38
    {
    }

    struct __StaticArrayInitTypeSize=40
    {
    }

    struct __StaticArrayInitTypeSize=42
    {
    }

    struct __StaticArrayInitTypeSize=44
    {
    }

    struct __StaticArrayInitTypeSize=52
    {
    }

    struct __StaticArrayInitTypeSize=64
    {
    }

    struct __StaticArrayInitTypeSize=72
    {
    }

    struct __StaticArrayInitTypeSize=76
    {
    }

    struct __StaticArrayInitTypeSize=84
    {
    }

    struct __StaticArrayInitTypeSize=94
    {
    }

    struct __StaticArrayInitTypeSize=120
    {
    }

    struct __StaticArrayInitTypeSize=128
    {
    }

    struct __StaticArrayInitTypeSize=130
    {
    }

    struct __StaticArrayInitTypeSize=152
    {
    }

    struct __StaticArrayInitTypeSize=170
    {
    }

    struct __StaticArrayInitTypeSize=172
    {
    }

    struct __StaticArrayInitTypeSize=174
    {
    }

    struct __StaticArrayInitTypeSize=212
    {
    }

    struct __StaticArrayInitTypeSize=240
    {
    }

    struct __StaticArrayInitTypeSize=256
    {
    }

    struct __StaticArrayInitTypeSize=262
    {
    }

    struct __StaticArrayInitTypeSize=288
    {
    }

    struct __StaticArrayInitTypeSize=336
    {
    }

    struct __StaticArrayInitTypeSize=360
    {
    }

    struct __StaticArrayInitTypeSize=648
    {
    }

    struct __StaticArrayInitTypeSize=998
    {
    }

    struct __StaticArrayInitTypeSize=1018
    {
    }

    struct __StaticArrayInitTypeSize=1024
    {
    }

    struct __StaticArrayInitTypeSize=1208
    {
    }

    struct __StaticArrayInitTypeSize=1450
    {
    }

    struct __StaticArrayInitTypeSize=1472
    {
    }

    struct __StaticArrayInitTypeSize=1665
    {
    }

    struct __StaticArrayInitTypeSize=2100
    {
    }

    struct __StaticArrayInitTypeSize=2176
    {
    }

    struct __StaticArrayInitTypeSize=2350
    {
    }

    struct __StaticArrayInitTypeSize=2382
    {
    }

    struct __StaticArrayInitTypeSize=5952
    {
    }

    struct __StaticArrayInitTypeSize=10800
    {
    }
}

namespace Unity
{
    class ThrowStub : System.ObjectDisposedException
    {
        static /*0xf36de0*/ void ThrowNotSupportedException();
    }
}

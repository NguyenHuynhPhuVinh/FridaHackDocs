class <Module>
{
}

class Locale
{
    static /*0x1a915e0*/ string GetText(string msg);
    static /*0x1a9617c*/ string GetText(string fmt, object[] args);
}

class SR
{
    static /*0x2166dd4*/ string Format(string resourceFormat, object p1);
    static /*0x2166e50*/ string Format(string resourceFormat, object p1, object p2);
}

namespace Mono
{
    class Runtime
    {
        static /*0x2152c58*/ void mono_runtime_install_handlers();
        static /*0x2152c5c*/ void InstallSignalHandlers();
        static /*0x2152c60*/ void mono_runtime_cleanup_handlers();
        static /*0x2152c94*/ void RemoveSignalHandlers();
        static /*0x2152cc8*/ string GetDisplayName();
        static /*0x2152ccc*/ string GetNativeStackTrace(System.Exception exception);
        static /*0x2152cd0*/ bool SetGCAllowSynchronousMajor(bool flag);
    }

    struct RuntimeClassHandle
    {
        /*0x10*/ Mono.RuntimeStructs.MonoClass* value;

        static /*0x2152fc8*/ nint GetTypeFromClass(Mono.RuntimeStructs.MonoClass* klass);
        /*0xae1c7c*/ RuntimeClassHandle(Mono.RuntimeStructs.MonoClass* value);
        /*0xae1c84*/ RuntimeClassHandle(nint ptr);
        /*0xae1cb0*/ Mono.RuntimeStructs.MonoClass* get_Value();
        /*0xae1cb8*/ bool Equals(object obj);
        /*0xae1cc0*/ int GetHashCode();
        /*0xae1cf4*/ System.RuntimeTypeHandle GetTypeHandle();
    }

    struct RuntimeRemoteClassHandle
    {
        /*0x10*/ Mono.RuntimeStructs.RemoteClass* value;

        /*0xae1e6c*/ Mono.RuntimeClassHandle get_ProxyClass();
    }

    struct RuntimeGenericParamInfoHandle
    {
        /*0x10*/ Mono.RuntimeStructs.GenericParamInfo* value;

        /*0xae1dac*/ RuntimeGenericParamInfoHandle(nint ptr);
        /*0xae1dd8*/ System.Type[] get_Constraints();
        /*0xae1de0*/ System.Reflection.GenericParameterAttributes get_Attributes();
        /*0xae1dfc*/ System.Type[] GetConstraints();
        /*0xae1e04*/ int GetConstraintsCount();
    }

    struct RuntimeEventHandle
    {
        /*0x10*/ nint value;

        /*0xae1cfc*/ RuntimeEventHandle(nint v);
        /*0xae1d04*/ nint get_Value();
        /*0xae1d0c*/ bool Equals(object obj);
        /*0xae1d14*/ int GetHashCode();
    }

    struct RuntimePropertyHandle
    {
        /*0x10*/ nint value;

        /*0xae1e48*/ RuntimePropertyHandle(nint v);
        /*0xae1e50*/ nint get_Value();
        /*0xae1e58*/ bool Equals(object obj);
        /*0xae1e60*/ int GetHashCode();
    }

    struct RuntimeGPtrArrayHandle
    {
        /*0x10*/ Mono.RuntimeStructs.GPtrArray* value;

        static /*0x2153e10*/ void GPtrArrayFree(Mono.RuntimeStructs.GPtrArray* value);
        static /*0x2153e14*/ void DestroyAndFree(ref Mono.RuntimeGPtrArrayHandle h);
        /*0xae1d54*/ RuntimeGPtrArrayHandle(nint ptr);
        /*0xae1d80*/ int get_Length();
        /*0xae1d9c*/ nint get_Item(int i);
        /*0xae1da4*/ nint Lookup(int i);
    }

    class RuntimeMarshal
    {
        static /*0x21540cc*/ string PtrToUtf8String(nint ptr);
        static /*0x21541a4*/ Mono.SafeStringMarshal MarshalString(string str);
        static /*0x21541d4*/ int DecodeBlobSize(nint in_ptr, ref nint out_ptr);
        static /*0x2154258*/ byte[] DecodeBlobArray(nint ptr);
        static /*0x215431c*/ int AsciHexDigitValue(int c);
        static /*0x2154348*/ void FreeAssemblyName(ref Mono.MonoAssemblyName name, bool freeStruct);
    }

    class RuntimeStructs
    {
        struct RemoteClass
        {
            /*0x10*/ nint default_vtable;
            /*0x18*/ nint xdomain_vtable;
            /*0x20*/ Mono.RuntimeStructs.MonoClass* proxy_class;
            /*0x28*/ nint proxy_class_name;
            /*0x30*/ uint interface_count;
        }

        struct MonoClass
        {
        }

        struct GenericParamInfo
        {
            /*0x10*/ Mono.RuntimeStructs.MonoClass* pklass;
            /*0x18*/ nint name;
            /*0x20*/ ushort flags;
            /*0x24*/ uint token;
            /*0x28*/ Mono.RuntimeStructs.MonoClass** constraints;
        }

        struct GPtrArray
        {
            /*0x10*/ nint* data;
            /*0x18*/ int len;
        }

        struct HandleStackMark
        {
            /*0x10*/ int size;
            /*0x14*/ int interior_size;
            /*0x18*/ nint chunk;
        }

        struct MonoError
        {
            /*0x10*/ ushort error_code;
            /*0x12*/ ushort hidden_0;
            /*0x18*/ nint hidden_1;
            /*0x20*/ nint hidden_2;
            /*0x28*/ nint hidden_3;
            /*0x30*/ nint hidden_4;
            /*0x38*/ nint hidden_5;
            /*0x40*/ nint hidden_6;
            /*0x48*/ nint hidden_7;
            /*0x50*/ nint hidden_8;
            /*0x58*/ nint hidden_11;
            /*0x60*/ nint hidden_12;
            /*0x68*/ nint hidden_13;
            /*0x70*/ nint hidden_14;
            /*0x78*/ nint hidden_15;
            /*0x80*/ nint hidden_16;
            /*0x88*/ nint hidden_17;
            /*0x90*/ nint hidden_18;
        }
    }

    struct MonoAssemblyName
    {
        /*0x10*/ nint name;
        /*0x18*/ nint culture;
        /*0x20*/ nint hash_value;
        /*0x28*/ nint public_key;
        /*0x30*/ Mono.MonoAssemblyName.<public_key_token> public_key_token;
        /*0x44*/ uint hash_alg;
        /*0x48*/ uint hash_len;
        /*0x4c*/ uint flags;
        /*0x50*/ ushort major;
        /*0x52*/ ushort minor;
        /*0x54*/ ushort build;
        /*0x56*/ ushort revision;
        /*0x58*/ ushort arch;

        struct <public_key_token>e__FixedBuffer
        {
            /*0x10*/ byte FixedElementField;
        }
    }

    struct SafeGPtrArrayHandle : System.IDisposable
    {
        /*0x10*/ Mono.RuntimeGPtrArrayHandle handle;

        /*0xae204c*/ SafeGPtrArrayHandle(nint ptr);
        /*0xae2078*/ void Dispose();
        /*0xae20a0*/ int get_Length();
        /*0xae20bc*/ nint get_Item(int i);
    }

    struct SafeStringMarshal : System.IDisposable
    {
        /*0x10*/ string str;
        /*0x18*/ nint marshaled_string;

        static /*0x204e0cc*/ nint StringToUtf8(string str);
        static /*0x204e0d0*/ void GFree(nint ptr);
        /*0xae0180*/ SafeStringMarshal(string str);
        /*0xae01cc*/ nint get_Value();
        /*0xae01d4*/ void Dispose();
    }

    namespace Xml
    {
        class SecurityParser : Mono.Xml.SmallXmlParser, Mono.Xml.SmallXmlParser.IContentHandler
        {
            /*0x68*/ System.Security.SecurityElement root;
            /*0x70*/ System.Security.SecurityElement current;
            /*0x78*/ System.Collections.Stack stack;

            /*0x205054c*/ SecurityParser();
            /*0x20505b0*/ void LoadXml(string xml);
            /*0x2051bac*/ System.Security.SecurityElement ToXml();
            /*0x2051bb4*/ void OnStartParsing(Mono.Xml.SmallXmlParser parser);
            /*0x2051bb8*/ void OnProcessingInstruction(string name, string text);
            /*0x2051bbc*/ void OnIgnorableWhitespace(string s);
            /*0x2051bc0*/ void OnStartElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
            /*0x2051e60*/ void OnEndElement(string name);
            /*0x2051edc*/ void OnChars(string ch);
            /*0x2051f60*/ void OnEndParsing(Mono.Xml.SmallXmlParser parser);
        }

        class SmallXmlParser
        {
            /*0x10*/ Mono.Xml.SmallXmlParser.IContentHandler handler;
            /*0x18*/ System.IO.TextReader reader;
            /*0x20*/ System.Collections.Stack elementNames;
            /*0x28*/ System.Collections.Stack xmlSpaces;
            /*0x30*/ string xmlSpace;
            /*0x38*/ System.Text.StringBuilder buffer;
            /*0x40*/ char[] nameBuffer;
            /*0x48*/ bool isWhitespace;
            /*0x50*/ Mono.Xml.SmallXmlParser.AttrListImpl attributes;
            /*0x58*/ int line;
            /*0x5c*/ int column;
            /*0x60*/ bool resetColumn;

            /*0x20518c4*/ SmallXmlParser();
            /*0x205f940*/ System.Exception Error(string msg);
            /*0x205fa84*/ System.Exception UnexpectedEndError();
            /*0x205fb6c*/ bool IsNameChar(char c, bool start);
            /*0x205fc7c*/ bool IsWhitespace(int c);
            /*0x205fcac*/ void SkipWhitespaces();
            /*0x205fd64*/ void HandleWhitespaces();
            /*0x205fcb4*/ void SkipWhitespaces(bool expected);
            /*0x205fe9c*/ int Peek();
            /*0x205fe28*/ int Read();
            /*0x205febc*/ void Expect(int c);
            /*0x205ff88*/ string ReadUntil(char until, bool handleReferences);
            /*0x206023c*/ string ReadName();
            /*0x20519d0*/ void Parse(System.IO.TextReader input, Mono.Xml.SmallXmlParser.IContentHandler handler);
            /*0x2060c44*/ void Cleanup();
            /*0x20603ec*/ void ReadContent();
            /*0x2060af8*/ void HandleBufferedContent();
            /*0x2060fd4*/ void ReadCharacters();
            /*0x2060070*/ void ReadReference();
            /*0x2061060*/ int ReadCharacterReference();
            /*0x2060e68*/ void ReadAttribute(Mono.Xml.SmallXmlParser.AttrListImpl a);
            /*0x2060cd0*/ void ReadCDATASection();
            /*0x2060dd4*/ void ReadComment();

            interface IContentHandler
            {
                void OnStartParsing(Mono.Xml.SmallXmlParser parser);
                void OnEndParsing(Mono.Xml.SmallXmlParser parser);
                void OnStartElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                void OnEndElement(string name);
                void OnProcessingInstruction(string name, string text);
                void OnChars(string text);
                void OnIgnorableWhitespace(string text);
            }

            interface IAttrList
            {
                int get_Length();
                string GetName(int i);
                string GetValue(int i);
                string GetValue(string name);
                string[] get_Names();
                string[] get_Values();
            }

            class AttrListImpl : Mono.Xml.SmallXmlParser.IAttrList
            {
                /*0x10*/ System.Collections.Generic.List<string> attrNames;
                /*0x18*/ System.Collections.Generic.List<string> attrValues;

                /*0x181aadc*/ AttrListImpl();
                /*0x181a744*/ int get_Length();
                /*0x181a790*/ string GetName(int i);
                /*0x181a804*/ string GetValue(int i);
                /*0x181a878*/ string GetValue(string name);
                /*0x181a954*/ string[] get_Names();
                /*0x181a9a8*/ string[] get_Values();
                /*0x181a9fc*/ void Clear();
                /*0x181aa60*/ void Add(string name, string value);
            }
        }

        class SmallXmlParserException : System.SystemException
        {
            /*0x88*/ int line;
            /*0x8c*/ int column;

            /*0x205f9b4*/ SmallXmlParserException(string msg, int line, int column);
        }
    }

    namespace Globalization
    {
        namespace Unicode
        {
            class CodePointIndexer
            {
                /*0x10*/ Mono.Globalization.Unicode.CodePointIndexer.TableRange[] ranges;
                /*0x18*/ int TotalCount;
                /*0x1c*/ int defaultIndex;
                /*0x20*/ int defaultCP;

                /*0x1619138*/ CodePointIndexer(int[] starts, int[] ends, int defaultIndex, int defaultCP);
                /*0x16192dc*/ int ToIndex(int cp);

                struct TableRange
                {
                    /*0x10*/ int Start;
                    /*0x14*/ int End;
                    /*0x18*/ int Count;
                    /*0x1c*/ int IndexStart;
                    /*0x20*/ int IndexEnd;

                    /*0xaca844*/ TableRange(int start, int end, int indexStart);
                }
            }

            class TailoringInfo
            {
                /*0x10*/ int LCID;
                /*0x14*/ int TailoringIndex;
                /*0x18*/ int TailoringCount;
                /*0x1c*/ bool FrenchSort;

                /*0x1e24450*/ TailoringInfo(int lcid, int tailoringIndex, int tailoringCount, bool frenchSort);
            }

            class Contraction
            {
                /*0x10*/ int Index;
                /*0x18*/ char[] Source;
                /*0x20*/ string Replacement;
                /*0x28*/ byte[] SortKey;

                /*0x16256b4*/ Contraction(int index, char[] source, string replacement, byte[] sortkey);
            }

            class ContractionComparer : System.Collections.Generic.IComparer<Mono.Globalization.Unicode.Contraction>
            {
                static /*0x0*/ Mono.Globalization.Unicode.ContractionComparer Instance;

                static /*0x16257a8*/ ContractionComparer();
                /*0x16257a0*/ ContractionComparer();
                /*0x1625704*/ int Compare(Mono.Globalization.Unicode.Contraction c1, Mono.Globalization.Unicode.Contraction c2);
            }

            class Level2Map
            {
                /*0x10*/ byte Source;
                /*0x11*/ byte Replace;

                /*0x1a93df8*/ Level2Map(byte source, byte replace);
            }

            class MSCompatUnicodeTable
            {
                static /*0x0*/ int MaxExpansionLength;
                static /*0x8*/ byte* ignorableFlags;
                static /*0x10*/ byte* categories;
                static /*0x18*/ byte* level1;
                static /*0x20*/ byte* level2;
                static /*0x28*/ byte* level3;
                static /*0x30*/ byte* cjkCHScategory;
                static /*0x38*/ byte* cjkCHTcategory;
                static /*0x40*/ byte* cjkJAcategory;
                static /*0x48*/ byte* cjkKOcategory;
                static /*0x50*/ byte* cjkCHSlv1;
                static /*0x58*/ byte* cjkCHTlv1;
                static /*0x60*/ byte* cjkJAlv1;
                static /*0x68*/ byte* cjkKOlv1;
                static /*0x70*/ byte* cjkKOlv2;
                static /*0x78*/ char[] tailoringArr;
                static /*0x80*/ Mono.Globalization.Unicode.TailoringInfo[] tailoringInfos;
                static /*0x88*/ object forLock;
                static /*0x90*/ bool isReady;

                static /*0x1c0e90c*/ MSCompatUnicodeTable();
                static /*0x1c0d4b0*/ Mono.Globalization.Unicode.TailoringInfo GetTailoringInfo(int lcid);
                static /*0x1c0d5d8*/ void BuildTailoringTables(System.Globalization.CultureInfo culture, Mono.Globalization.Unicode.TailoringInfo t, ref Mono.Globalization.Unicode.Contraction[] contractions, ref Mono.Globalization.Unicode.Level2Map[] diacriticals);
                static /*0x1c0dd20*/ void SetCJKReferences(string name, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref byte* lv2Table);
                static /*0x1c0dfe8*/ byte Category(int cp);
                static /*0x1c0e0ac*/ byte Level1(int cp);
                static /*0x1c0e170*/ byte Level2(int cp);
                static /*0x1c0e234*/ byte Level3(int cp);
                static /*0x1c0e2f8*/ bool IsIgnorable(int cp, byte flag);
                static /*0x1c0e438*/ bool IsIgnorableNonSpacing(int cp);
                static /*0x1c0e49c*/ int ToKanaTypeInsensitive(int i);
                static /*0x1c0e4bc*/ int ToWidthCompat(int i);
                static /*0x1c0e654*/ bool HasSpecialWeight(char c);
                static /*0x1c0e6e8*/ bool IsHalfWidthKana(char c);
                static /*0x1c0e6fc*/ bool IsHiragana(char c);
                static /*0x1c0e714*/ bool IsJapaneseSmallLetter(char c);
                static /*0x1c0e800*/ bool get_IsReady();
                static /*0x1c0e864*/ nint GetResource(string name);
                static /*0x1c0e8dc*/ uint UInt32FromBytePtr(byte* raw, uint idx);
                static /*0x1c0ed84*/ void FillCJK(string culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref byte* lv2Table);
                static /*0x1c0ef18*/ void FillCJKCore(string culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer cjkLv2Indexer, ref byte* lv2Table);

                class <>c
                {
                    static /*0x0*/ Mono.Globalization.Unicode.MSCompatUnicodeTable.<> <>9;
                    static /*0x8*/ System.Comparison<Mono.Globalization.Unicode.Level2Map> <>9__17_0;

                    static /*0x1814b60*/ <>c();
                    /*0x1814bc0*/ <>c();
                    /*0x1814bc8*/ int <BuildTailoringTables>b__17_0(Mono.Globalization.Unicode.Level2Map a, Mono.Globalization.Unicode.Level2Map b);
                }
            }

            class MSCompatUnicodeTableUtil
            {
                static /*0x0*/ Mono.Globalization.Unicode.CodePointIndexer Ignorable;
                static /*0x8*/ Mono.Globalization.Unicode.CodePointIndexer Category;
                static /*0x10*/ Mono.Globalization.Unicode.CodePointIndexer Level1;
                static /*0x18*/ Mono.Globalization.Unicode.CodePointIndexer Level2;
                static /*0x20*/ Mono.Globalization.Unicode.CodePointIndexer Level3;
                static /*0x28*/ Mono.Globalization.Unicode.CodePointIndexer CjkCHS;
                static /*0x30*/ Mono.Globalization.Unicode.CodePointIndexer Cjk;

                static /*0x1c0f47c*/ MSCompatUnicodeTableUtil();
            }

            class NormalizationTableUtil
            {
                static /*0x0*/ Mono.Globalization.Unicode.CodePointIndexer Prop;
                static /*0x8*/ Mono.Globalization.Unicode.CodePointIndexer Map;
                static /*0x10*/ Mono.Globalization.Unicode.CodePointIndexer Combining;
                static /*0x18*/ Mono.Globalization.Unicode.CodePointIndexer Composite;
                static /*0x20*/ Mono.Globalization.Unicode.CodePointIndexer Helper;

                static /*0x22a8434*/ NormalizationTableUtil();
                static /*0x22a6894*/ int PropIdx(int cp);
                static /*0x22a69b0*/ int MapIdx(int cp);
            }

            class SimpleCollator
            {
                static int UnsafeFlagLength = 96;
                static /*0x0*/ bool QuickCheckDisabled;
                static /*0x8*/ Mono.Globalization.Unicode.SimpleCollator invariant;
                /*0x10*/ System.Globalization.TextInfo textInfo;
                /*0x18*/ Mono.Globalization.Unicode.CodePointIndexer cjkIndexer;
                /*0x20*/ Mono.Globalization.Unicode.Contraction[] contractions;
                /*0x28*/ Mono.Globalization.Unicode.Level2Map[] level2Maps;
                /*0x30*/ byte[] unsafeFlags;
                /*0x38*/ byte* cjkCatTable;
                /*0x40*/ byte* cjkLv1Table;
                /*0x48*/ byte* cjkLv2Table;
                /*0x50*/ Mono.Globalization.Unicode.CodePointIndexer cjkLv2Indexer;
                /*0x58*/ int lcid;
                /*0x5c*/ bool frenchSort;

                static /*0x205dc0c*/ SimpleCollator();
                static /*0x2058a30*/ System.Globalization.CultureInfo GetNeutralCulture(System.Globalization.CultureInfo info);
                static /*0x2058d6c*/ bool IsHalfKana(int cp, System.Globalization.CompareOptions opt);
                static /*0x20594f4*/ byte ToDashTypeValue(Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, System.Globalization.CompareOptions opt);
                static /*0x20596d4*/ bool IsIgnorable(int i, System.Globalization.CompareOptions opt);
                /*0x20585d8*/ SimpleCollator(System.Globalization.CultureInfo culture);
                /*0x205893c*/ void SetCJKTable(System.Globalization.CultureInfo culture, ref Mono.Globalization.Unicode.CodePointIndexer cjkIndexer, ref byte* catTable, ref byte* lv1Table, ref Mono.Globalization.Unicode.CodePointIndexer lv2Indexer, ref byte* lv2Table);
                /*0x2058aac*/ byte Category(int cp);
                /*0x2058b60*/ byte Level1(int cp);
                /*0x2058c14*/ byte Level2(int cp, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext);
                /*0x2058df4*/ Mono.Globalization.Unicode.Contraction GetContraction(string s, int start, int end);
                /*0x2058ecc*/ Mono.Globalization.Unicode.Contraction GetContraction(string s, int start, int end, Mono.Globalization.Unicode.Contraction[] clist);
                /*0x2059000*/ Mono.Globalization.Unicode.Contraction GetTailContraction(string s, int start, int end);
                /*0x20590d8*/ Mono.Globalization.Unicode.Contraction GetTailContraction(string s, int start, int end, Mono.Globalization.Unicode.Contraction[] clist);
                /*0x20592d0*/ int FilterOptions(int i, System.Globalization.CompareOptions opt);
                /*0x20593e8*/ Mono.Globalization.Unicode.SimpleCollator.ExtenderType GetExtenderType(int i);
                /*0x2059514*/ int FilterExtender(int i, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, System.Globalization.CompareOptions opt);
                /*0x2059768*/ bool IsSafe(int i);
                /*0x20597d4*/ System.Globalization.SortKey GetSortKey(string s, System.Globalization.CompareOptions options);
                /*0x20597f4*/ System.Globalization.SortKey GetSortKey(string s, int start, int length, System.Globalization.CompareOptions options);
                /*0x2059a78*/ void GetSortKey(string s, int start, int end, Mono.Globalization.Unicode.SortKeyBuffer buf, System.Globalization.CompareOptions opt);
                /*0x2059e7c*/ void FillSortKeyRaw(int i, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, Mono.Globalization.Unicode.SortKeyBuffer buf, System.Globalization.CompareOptions opt);
                /*0x205a3e4*/ void FillSurrogateSortKeyRaw(int i, Mono.Globalization.Unicode.SortKeyBuffer buf);
                /*0x205a534*/ int Compare(string s1, int idx1, int len1, string s2, int idx2, int len2, System.Globalization.CompareOptions options);
                /*0x2059e60*/ void ClearBuffer(byte* buffer, int size);
                /*0x205a650*/ int CompareInternal(string s1, int idx1, int len1, string s2, int idx2, int len2, ref bool targetConsumed, ref bool sourceConsumed, bool skipHeadingExtenders, bool immediateBreakup, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x205b9c8*/ int CompareFlagPair(bool b1, bool b2);
                /*0x205b9e8*/ bool IsPrefix(string src, string target, System.Globalization.CompareOptions opt);
                /*0x205ba08*/ bool IsPrefix(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x205bb04*/ bool IsPrefix(string s, string target, int start, int length, bool skipHeadingExtenders, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x205bb70*/ bool IsSuffix(string src, string target, System.Globalization.CompareOptions opt);
                /*0x205bb90*/ bool IsSuffix(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x205bde8*/ int QuickIndexOf(string s, string target, int start, int length, ref bool testWasUnable);
                /*0x205bf5c*/ int IndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x205c584*/ int IndexOfOrdinal(string s, string target, int start, int length);
                /*0x205c660*/ int IndexOfOrdinal(string s, char target, int start, int length);
                /*0x205c6d0*/ int IndexOfSortKey(string s, int start, int length, byte* sortkey, char target, int ti, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x205c130*/ int IndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x205bc2c*/ int LastIndexOf(string s, string target, int start, int length, System.Globalization.CompareOptions opt);
                /*0x205c930*/ int LastIndexOfOrdinal(string s, string target, int start, int length);
                /*0x205cf34*/ int LastIndexOfSortKey(string s, int start, int orgStart, int length, byte* sortkey, int ti, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x205ca60*/ int LastIndexOf(string s, string target, int start, int length, byte* targetSortKey, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x205c770*/ bool MatchesForward(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x205d1ac*/ bool MatchesForwardCore(string s, ref int idx, int end, int ti, byte* sortkey, bool noLv4, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, ref Mono.Globalization.Unicode.Contraction ct, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x205d51c*/ bool MatchesPrimitive(System.Globalization.CompareOptions opt, byte* source, int si, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, byte* target, int ti, bool noLv4);
                /*0x205cfe4*/ bool MatchesBackward(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);
                /*0x205d71c*/ bool MatchesBackwardCore(string s, ref int idx, int end, int orgStart, int ti, byte* sortkey, bool noLv4, Mono.Globalization.Unicode.SimpleCollator.ExtenderType ext, ref Mono.Globalization.Unicode.Contraction ct, ref Mono.Globalization.Unicode.SimpleCollator.Context ctx);

                struct Context
                {
                    /*0x10*/ System.Globalization.CompareOptions Option;
                    /*0x18*/ byte* NeverMatchFlags;
                    /*0x20*/ byte* AlwaysMatchFlags;
                    /*0x28*/ byte* Buffer1;
                    /*0x30*/ byte* Buffer2;
                    /*0x38*/ int PrevCode;
                    /*0x40*/ byte* PrevSortKey;

                    /*0xacb048*/ Context(System.Globalization.CompareOptions opt, byte* alwaysMatchFlags, byte* neverMatchFlags, byte* buffer1, byte* buffer2, byte* prev1);
                }

                struct PreviousInfo
                {
                    /*0x10*/ int Code;
                    /*0x18*/ byte* SortKey;

                    /*0xacb124*/ PreviousInfo(bool dummy);
                }

                struct Escape
                {
                    /*0x10*/ string Source;
                    /*0x18*/ int Index;
                    /*0x1c*/ int Start;
                    /*0x20*/ int End;
                    /*0x24*/ int Optional;
                }

                enum ExtenderType
                {
                    None = 0,
                    Simple = 1,
                    Voiced = 2,
                    Conditional = 3,
                    Buggy = 4,
                }
            }

            class SortKeyBuffer
            {
                /*0x10*/ byte[] l1b;
                /*0x18*/ byte[] l2b;
                /*0x20*/ byte[] l3b;
                /*0x28*/ byte[] l4sb;
                /*0x30*/ byte[] l4tb;
                /*0x38*/ byte[] l4kb;
                /*0x40*/ byte[] l4wb;
                /*0x48*/ byte[] l5b;
                /*0x50*/ string source;
                /*0x58*/ int l1;
                /*0x5c*/ int l2;
                /*0x60*/ int l3;
                /*0x64*/ int l4s;
                /*0x68*/ int l4t;
                /*0x6c*/ int l4k;
                /*0x70*/ int l4w;
                /*0x74*/ int l5;
                /*0x78*/ int lcid;
                /*0x7c*/ System.Globalization.CompareOptions options;
                /*0x80*/ bool processLevel2;
                /*0x81*/ bool frenchSort;
                /*0x82*/ bool frenchSorted;

                /*0x20598bc*/ SortKeyBuffer(int lcid);
                /*0x2062f14*/ void Reset();
                /*0x20598c4*/ void Initialize(System.Globalization.CompareOptions options, int lcid, string s, bool frenchSort);
                /*0x205a344*/ void AppendCJKExtension(byte lv1msb, byte lv1lsb);
                /*0x205a49c*/ void AppendKana(byte category, byte lv1, byte lv2, byte lv3, bool isSmallKana, byte markType, bool isKatakana, bool isHalfWidth);
                /*0x205a1f4*/ void AppendNormal(byte category, byte lv1, byte lv2, byte lv3);
                /*0x2062ff8*/ void AppendLevel5(byte category, byte lv1);
                /*0x2062f24*/ void AppendBufferPrimitive(byte value, ref byte[] buf, ref int bidx);
                /*0x2059e34*/ System.Globalization.SortKey GetResultAndReset();
                /*0x20634f8*/ int GetOptimizedLength(byte[] data, int len, byte defaultValue);
                /*0x206309c*/ System.Globalization.SortKey GetResult();
            }
        }
    }

    namespace Security
    {
        class ASN1
        {
            /*0x10*/ byte m_nTag;
            /*0x18*/ byte[] m_aValue;
            /*0x20*/ System.Collections.ArrayList elist;

            /*0x1c84ca4*/ ASN1(byte tag);
            /*0x1c84cd4*/ ASN1(byte tag, byte[] data);
            /*0x1c84d10*/ ASN1(byte[] data);
            /*0x1c84fc0*/ int get_Count();
            /*0x1c84fdc*/ byte get_Tag();
            /*0x1c84fe4*/ int get_Length();
            /*0x1c84ffc*/ byte[] get_Value();
            /*0x1c85090*/ void set_Value(byte[] value);
            /*0x1c85118*/ bool CompareArray(byte[] array1, byte[] array2);
            /*0x1c85194*/ bool CompareValue(byte[] value);
            /*0x1c851a4*/ Mono.Security.ASN1 Add(Mono.Security.ASN1 asn1);
            /*0x1c852b0*/ byte[] GetBytes();
            /*0x1c84e98*/ void Decode(byte[] asn1, ref int anPos, int anLength);
            /*0x1c85918*/ void DecodeTLV(byte[] asn1, ref int pos, ref byte tag, ref int length, ref byte[] content);
            /*0x1c85a54*/ Mono.Security.ASN1 get_Item(int index);
            /*0x1c85b90*/ Mono.Security.ASN1 Element(int index, byte anTag);
            /*0x1c85ce8*/ string ToString();
        }

        class ASN1Convert
        {
            static /*0x1c85fc4*/ Mono.Security.ASN1 FromInt32(int value);
            static /*0x1c86144*/ Mono.Security.ASN1 FromOid(string oid);
            static /*0x1c861fc*/ int ToInt32(Mono.Security.ASN1 asn1);
            static /*0x1c86314*/ string ToOid(Mono.Security.ASN1 asn1);
            static /*0x1c865b8*/ System.DateTime ToDateTime(Mono.Security.ASN1 time);
        }

        class BitConverterLE
        {
            static /*0x1c598b4*/ byte[] GetUIntBytes(byte* bytes);
            static /*0x1c599d8*/ byte[] GetULongBytes(byte* bytes);
            static /*0x1c59b7c*/ byte[] GetBytes(int value);
            static /*0x1c579dc*/ byte[] GetBytes(float value);
            static /*0x1c574f0*/ byte[] GetBytes(double value);
            static /*0x1c59ba0*/ void UIntFromBytes(byte* dst, byte[] src, int startIndex);
            static /*0x1c59d00*/ void ULongFromBytes(byte* dst, byte[] src, int startIndex);
            static /*0x1c55fa0*/ float ToSingle(byte[] value, int startIndex);
            static /*0x1c56018*/ double ToDouble(byte[] value, int startIndex);
        }

        class PKCS7
        {
            class ContentInfo
            {
                /*0x10*/ string contentType;
                /*0x18*/ Mono.Security.ASN1 content;

                /*0x181734c*/ ContentInfo();
                /*0x18173b8*/ ContentInfo(string oid);
                /*0x18173e0*/ ContentInfo(byte[] data);
                /*0x1817450*/ ContentInfo(Mono.Security.ASN1 asn1);
                /*0x18175c0*/ Mono.Security.ASN1 get_ASN1();
                /*0x1817670*/ Mono.Security.ASN1 get_Content();
                /*0x1817678*/ void set_Content(Mono.Security.ASN1 value);
                /*0x1817680*/ string get_ContentType();
                /*0x1817688*/ void set_ContentType(string value);
                /*0x18175c4*/ Mono.Security.ASN1 GetASN1();
            }

            class EncryptedData
            {
                /*0x10*/ byte _version;
                /*0x18*/ Mono.Security.PKCS7.ContentInfo _content;
                /*0x20*/ Mono.Security.PKCS7.ContentInfo _encryptionAlgorithm;
                /*0x28*/ byte[] _encrypted;

                /*0x1817690*/ EncryptedData();
                /*0x18176b8*/ EncryptedData(Mono.Security.ASN1 asn1);
                /*0x18179ac*/ Mono.Security.PKCS7.ContentInfo get_EncryptionAlgorithm();
                /*0x18179b4*/ byte[] get_EncryptedContent();
            }
        }

        enum UriPartial
        {
            Scheme = 0,
            Authority = 1,
            Path = 2,
        }

        class Uri
        {
            static /*0x0*/ string hexUpperChars;
            static /*0x8*/ string SchemeDelimiter;
            static /*0x10*/ string UriSchemeFile;
            static /*0x18*/ string UriSchemeFtp;
            static /*0x20*/ string UriSchemeGopher;
            static /*0x28*/ string UriSchemeHttp;
            static /*0x30*/ string UriSchemeHttps;
            static /*0x38*/ string UriSchemeMailto;
            static /*0x40*/ string UriSchemeNews;
            static /*0x48*/ string UriSchemeNntp;
            static /*0x50*/ Mono.Security.Uri.UriScheme[] schemes;
            /*0x10*/ bool isUnixFilePath;
            /*0x18*/ string source;
            /*0x20*/ string scheme;
            /*0x28*/ string host;
            /*0x30*/ int port;
            /*0x38*/ string path;
            /*0x40*/ string query;
            /*0x48*/ string fragment;
            /*0x50*/ string userinfo;
            /*0x58*/ bool isUnc;
            /*0x59*/ bool isOpaquePart;
            /*0x5a*/ bool userEscaped;
            /*0x60*/ string cachedToString;
            /*0x68*/ string cachedLocalPath;
            /*0x70*/ int cachedHashCode;
            /*0x74*/ bool reduce;

            static /*0x206f46c*/ Uri();
            static /*0x206d07c*/ int FromHex(char digit);
            static /*0x206d120*/ string HexEscape(char character);
            static /*0x206d26c*/ char HexUnescape(string pattern, ref int index);
            static /*0x206d5a8*/ bool IsHexDigit(char digit);
            static /*0x206d5e4*/ bool IsHexEncoding(string pattern, int index);
            static /*0x206d9ac*/ string EscapeString(string str);
            static /*0x206da18*/ string EscapeString(string str, bool escapeReserved, bool escapeHex, bool escapeBrackets);
            static /*0x206efe4*/ string Reduce(string path);
            static /*0x206f324*/ string GetSchemeDelimiter(string scheme);
            static /*0x206cf4c*/ int GetDefaultPort(string scheme);
            static /*0x206ee1c*/ bool IsPredefinedScheme(string scheme);
            /*0x206c284*/ Uri(string uriString);
            /*0x206c28c*/ Uri(string uriString, bool dontEscape);
            /*0x206c3f4*/ string get_AbsolutePath();
            /*0x206c3fc*/ bool get_IsFile();
            /*0x206c470*/ bool get_IsUnc();
            /*0x206c478*/ string get_LocalPath();
            /*0x206c77c*/ bool Equals(object comparant);
            /*0x206c9b4*/ int GetHashCode();
            /*0x206ca8c*/ string GetLeftPart(Mono.Security.UriPartial part);
            /*0x206d728*/ string ToString();
            /*0x206c358*/ void Parse();
            /*0x206c774*/ string Unescape(string str);
            /*0x206d808*/ string Unescape(string str, bool excludeSharp);
            /*0x206e938*/ void ParseAsWindowsUNC(string uriString);
            /*0x206eafc*/ void ParseAsWindowsAbsoluteFilePath(string uriString);
            /*0x206ec90*/ void ParseAsUnixAbsoluteFilePath(string uriString);
            /*0x206dd3c*/ void Parse(string uriString);
            /*0x206cebc*/ string GetOpaqueWiseSchemeDelimiter();

            struct UriScheme
            {
                /*0x10*/ string scheme;
                /*0x18*/ string delimiter;
                /*0x20*/ int defaultPort;

                /*0xb21690*/ UriScheme(string s, string d, int p);
            }
        }

        namespace X509
        {
            class SafeBag
            {
                /*0x10*/ string _bagOID;
                /*0x18*/ Mono.Security.ASN1 _asn1;

                /*0x2166edc*/ SafeBag(string bagOID, Mono.Security.ASN1 asn1);
                /*0x2166f14*/ string get_BagOID();
                /*0x2166f1c*/ Mono.Security.ASN1 get_ASN1();
            }

            class PKCS12 : System.ICloneable
            {
                static /*0x0*/ int password_max_length;
                /*0x10*/ byte[] _password;
                /*0x18*/ System.Collections.ArrayList _keyBags;
                /*0x20*/ System.Collections.ArrayList _secretBags;
                /*0x28*/ Mono.Security.X509.X509CertificateCollection _certs;
                /*0x30*/ bool _keyBagsChanged;
                /*0x31*/ bool _secretBagsChanged;
                /*0x32*/ bool _certsChanged;
                /*0x34*/ int _iterations;
                /*0x38*/ System.Collections.ArrayList _safeBags;
                /*0x40*/ System.Security.Cryptography.RandomNumberGenerator _rng;

                static /*0x215189c*/ PKCS12();
                static /*0x2151838*/ int get_MaximumPasswordLength();
                /*0x214b318*/ PKCS12();
                /*0x214b3f4*/ PKCS12(byte[] data);
                /*0x214bd10*/ PKCS12(byte[] data, string password);
                /*0x214b60c*/ void Decode(byte[] data);
                /*0x214c708*/ void Finalize();
                /*0x214b42c*/ void set_Password(string value);
                /*0x214c788*/ int get_IterationCount();
                /*0x214c790*/ void set_IterationCount(int value);
                /*0x214c798*/ System.Collections.ArrayList get_Keys();
                /*0x214d05c*/ Mono.Security.X509.X509CertificateCollection get_Certificates();
                /*0x214d46c*/ System.Security.Cryptography.RandomNumberGenerator get_RNG();
                /*0x214bebc*/ bool Compare(byte[] expected, byte[] actual);
                /*0x214d498*/ System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm(string algorithmOid, byte[] salt, int iterationCount);
                /*0x214ce9c*/ byte[] Decrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] encryptedData);
                /*0x214c658*/ byte[] Decrypt(Mono.Security.PKCS7.EncryptedData ed);
                /*0x214dbac*/ byte[] Encrypt(string algorithmOid, byte[] salt, int iterationCount, byte[] data);
                /*0x214ddcc*/ System.Security.Cryptography.DSAParameters GetExistingParameters(ref bool found);
                /*0x214e008*/ void AddPrivateKey(Mono.Security.Cryptography.PKCS8.PrivateKeyInfo pki);
                /*0x214bf38*/ void ReadSafeBag(Mono.Security.ASN1 safeBag);
                /*0x214e174*/ Mono.Security.ASN1 CertificateSafeBag(Mono.Security.X509.X509Certificate x509, System.Collections.IDictionary attributes);
                /*0x214bd54*/ byte[] MAC(byte[] password, byte[] salt, int iterations, byte[] data);
                /*0x214ed60*/ byte[] GetBytes();
                /*0x2150cc4*/ Mono.Security.PKCS7.ContentInfo EncryptedContentInfo(Mono.Security.ASN1 safeBags, string algorithmOid);
                /*0x2150cbc*/ void AddCertificate(Mono.Security.X509.X509Certificate cert);
                /*0x2150fd0*/ void AddCertificate(Mono.Security.X509.X509Certificate cert, System.Collections.IDictionary attributes);
                /*0x2150cb4*/ void RemoveCertificate(Mono.Security.X509.X509Certificate cert);
                /*0x2151238*/ void RemoveCertificate(Mono.Security.X509.X509Certificate cert, System.Collections.IDictionary attrs);
                /*0x2151764*/ object Clone();

                class DeriveBytes
                {
                    static /*0x0*/ byte[] keyDiversifier;
                    static /*0x8*/ byte[] ivDiversifier;
                    static /*0x10*/ byte[] macDiversifier;
                    /*0x10*/ string _hashName;
                    /*0x18*/ int _iterations;
                    /*0x20*/ byte[] _password;
                    /*0x28*/ byte[] _salt;

                    static /*0x181723c*/ DeriveBytes();
                    /*0x1816a48*/ DeriveBytes();
                    /*0x1816a50*/ void set_HashName(string value);
                    /*0x1816a58*/ void set_IterationCount(int value);
                    /*0x1816a60*/ void set_Password(byte[] value);
                    /*0x1816afc*/ void set_Salt(byte[] value);
                    /*0x1816b8c*/ void Adjust(byte[] a, int aOff, byte[] b);
                    /*0x1816c74*/ byte[] Derive(byte[] diversifier, int n);
                    /*0x18170c8*/ byte[] DeriveKey(int size);
                    /*0x1817144*/ byte[] DeriveIV(int size);
                    /*0x18171c0*/ byte[] DeriveMAC(int size);
                }
            }

            class X501
            {
                static /*0x0*/ byte[] countryName;
                static /*0x8*/ byte[] organizationName;
                static /*0x10*/ byte[] organizationalUnitName;
                static /*0x18*/ byte[] commonName;
                static /*0x20*/ byte[] localityName;
                static /*0x28*/ byte[] stateOrProvinceName;
                static /*0x30*/ byte[] streetAddress;
                static /*0x38*/ byte[] domainComponent;
                static /*0x40*/ byte[] userid;
                static /*0x48*/ byte[] email;
                static /*0x50*/ byte[] dnQualifier;
                static /*0x58*/ byte[] title;
                static /*0x60*/ byte[] surname;
                static /*0x68*/ byte[] givenName;
                static /*0x70*/ byte[] initial;

                static /*0x2078cac*/ X501();
                static /*0x2078160*/ string ToString(Mono.Security.ASN1 seq);
                static /*0x2078adc*/ string ToString(Mono.Security.ASN1 seq, bool reversed, string separator, bool quotes);
                static /*0x20782a4*/ void AppendEntry(System.Text.StringBuilder sb, Mono.Security.ASN1 entry, bool quotes);
            }

            class X509Certificate : System.Runtime.Serialization.ISerializable
            {
                static /*0x0*/ string encoding_error;
                /*0x10*/ Mono.Security.ASN1 decoder;
                /*0x18*/ byte[] m_encodedcert;
                /*0x20*/ System.DateTime m_from;
                /*0x28*/ System.DateTime m_until;
                /*0x30*/ Mono.Security.ASN1 issuer;
                /*0x38*/ string m_issuername;
                /*0x40*/ string m_keyalgo;
                /*0x48*/ byte[] m_keyalgoparams;
                /*0x50*/ Mono.Security.ASN1 subject;
                /*0x58*/ string m_subject;
                /*0x60*/ byte[] m_publickey;
                /*0x68*/ byte[] signature;
                /*0x70*/ string m_signaturealgo;
                /*0x78*/ byte[] m_signaturealgoparams;
                /*0x80*/ System.Security.Cryptography.RSA _rsa;
                /*0x88*/ System.Security.Cryptography.DSA _dsa;
                /*0x90*/ int version;
                /*0x98*/ byte[] serialnumber;
                /*0xa0*/ byte[] issuerUniqueID;
                /*0xa8*/ byte[] subjectUniqueID;
                /*0xb0*/ Mono.Security.X509.X509ExtensionCollection extensions;

                static /*0x22615c8*/ X509Certificate();
                static /*0x2260d54*/ byte[] PEM(string type, byte[] data);
                /*0x2260b80*/ X509Certificate(byte[] data);
                /*0x226006c*/ void Parse(byte[] data);
                /*0x2260e94*/ byte[] GetUnsignedBigInteger(byte[] integer);
                /*0x2260f3c*/ System.Security.Cryptography.DSA get_DSA();
                /*0x2261208*/ string get_IssuerName();
                /*0x2261210*/ byte[] get_KeyAlgorithmParameters();
                /*0x2261288*/ System.Security.Cryptography.RSA get_RSA();
                /*0x2261448*/ byte[] get_RawData();
                /*0x22614c0*/ byte[] get_SerialNumber();
                /*0x2261538*/ string get_SubjectName();
                /*0x2261540*/ System.DateTime get_ValidFrom();
                /*0x2261548*/ System.DateTime get_ValidUntil();
                /*0x2261550*/ Mono.Security.ASN1 GetIssuerName();
                /*0x2261558*/ Mono.Security.ASN1 GetSubjectName();
                /*0x2261560*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class X509CertificateCollection : System.Collections.CollectionBase, System.Collections.IEnumerable
            {
                /*0x22621e8*/ X509CertificateCollection();
                /*0x22621f0*/ Mono.Security.X509.X509Certificate get_Item(int index);
                /*0x226229c*/ int Add(Mono.Security.X509.X509Certificate value);
                /*0x2262324*/ Mono.Security.X509.X509CertificateCollection.X509CertificateEnumerator GetEnumerator();
                /*0x2262384*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x22623b0*/ int GetHashCode();

                class X509CertificateEnumerator : System.Collections.IEnumerator
                {
                    /*0x10*/ System.Collections.IEnumerator enumerator;

                    /*0x2aa4850*/ X509CertificateEnumerator(Mono.Security.X509.X509CertificateCollection mappings);
                    /*0x2aa4918*/ Mono.Security.X509.X509Certificate get_Current();
                    /*0x2aa4a14*/ object System.Collections.IEnumerator.get_Current();
                    /*0x2aa4ac4*/ bool System.Collections.IEnumerator.MoveNext();
                    /*0x2aa4b70*/ void System.Collections.IEnumerator.Reset();
                    /*0x2aa4c20*/ bool MoveNext();
                }
            }

            class X509Extension
            {
                /*0x10*/ string extnOid;
                /*0x18*/ bool extnCritical;
                /*0x20*/ Mono.Security.ASN1 extnValue;

                /*0x2262cd0*/ X509Extension(Mono.Security.ASN1 asn1);
                /*0x2262f90*/ void Decode();
                /*0x2262f94*/ bool Equals(object obj);
                /*0x22630f0*/ int GetHashCode();
                /*0x2263110*/ void WriteLine(System.Text.StringBuilder sb, int n, int pos);
                /*0x2263360*/ string ToString();
            }

            class X509ExtensionCollection : System.Collections.CollectionBase, System.Collections.IEnumerable
            {
                /*0x18*/ bool readOnly;

                /*0x2263458*/ X509ExtensionCollection();
                /*0x2260a38*/ X509ExtensionCollection(Mono.Security.ASN1 asn1);
                /*0x2263460*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            }
        }

        namespace Cryptography
        {
            class ARC4Managed : Mono.Security.Cryptography.RC4, System.Security.Cryptography.ICryptoTransform, System.IDisposable
            {
                /*0x48*/ byte[] key;
                /*0x50*/ byte[] state;
                /*0x58*/ byte x;
                /*0x59*/ byte y;
                /*0x5a*/ bool m_disposed;

                /*0x1c82020*/ ARC4Managed();
                /*0x1c820b0*/ void Finalize();
                /*0x1c82124*/ void Dispose(bool disposing);
                /*0x1c822f4*/ byte[] get_Key();
                /*0x1c82394*/ void set_Key(byte[] value);
                /*0x1c825f8*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgvIV);
                /*0x1c82624*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgvIV);
                /*0x1c8265c*/ void GenerateIV();
                /*0x1c826bc*/ void GenerateKey();
                /*0x1c826ec*/ bool get_CanTransformMultipleBlocks();
                /*0x1c826f4*/ int get_InputBlockSize();
                /*0x1c826fc*/ int get_OutputBlockSize();
                /*0x1c82504*/ void KeySetup(byte[] key);
                /*0x1c82704*/ void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x1c828d0*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x1c82a2c*/ int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x1c82b84*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
            }

            class KeyBuilder
            {
                static /*0x0*/ System.Security.Cryptography.RandomNumberGenerator rng;

                static /*0x1a8b184*/ System.Security.Cryptography.RandomNumberGenerator get_Rng();
                static /*0x1a8b1f0*/ byte[] Key(int size);
                static /*0x1a8b264*/ byte[] IV(int size);
            }

            class KeyPairPersistence
            {
                static /*0x0*/ bool _userPathExists;
                static /*0x8*/ string _userPath;
                static /*0x10*/ bool _machinePathExists;
                static /*0x18*/ string _machinePath;
                static /*0x20*/ object lockobj;
                /*0x10*/ System.Security.Cryptography.CspParameters _params;
                /*0x18*/ string _keyvalue;
                /*0x20*/ string _filename;
                /*0x28*/ string _container;

                static /*0x1a91870*/ KeyPairPersistence();
                static /*0x1a90790*/ string get_UserPath();
                static /*0x1a90190*/ string get_MachinePath();
                static /*0x1a9170c*/ bool _CanSecure(string root);
                static /*0x1a91710*/ bool _ProtectUser(string path);
                static /*0x1a91714*/ bool _ProtectMachine(string path);
                static /*0x1a91718*/ bool _IsUserProtected(string path);
                static /*0x1a9171c*/ bool _IsMachineProtected(string path);
                static /*0x1a91720*/ bool CanSecure(string path);
                static /*0x1a91534*/ bool ProtectUser(string path);
                static /*0x1a914a0*/ bool ProtectMachine(string path);
                static /*0x1a915e4*/ bool IsUserProtected(string path);
                static /*0x1a91678*/ bool IsMachineProtected(string path);
                /*0x1a8fd54*/ KeyPairPersistence(System.Security.Cryptography.CspParameters parameters);
                /*0x1a8fd5c*/ KeyPairPersistence(System.Security.Cryptography.CspParameters parameters, string keyPair);
                /*0x1a8fe8c*/ string get_Filename();
                /*0x1a90d94*/ string get_KeyValue();
                /*0x1a90d9c*/ void set_KeyValue(string value);
                /*0x1a90dc0*/ bool Load();
                /*0x1a9105c*/ void Save();
                /*0x1a915c8*/ void Remove();
                /*0x1a90db0*/ bool get_CanChange();
                /*0x1a917fc*/ bool get_UseDefaultKeyContainer();
                /*0x1a90170*/ bool get_UseMachineKeyStore();
                /*0x1a90044*/ string get_ContainerName();
                /*0x1a8fde8*/ System.Security.Cryptography.CspParameters Copy(System.Security.Cryptography.CspParameters p);
                /*0x1a90f34*/ void FromXml(string xml);
                /*0x1a91288*/ string ToXml();
            }

            class MD2 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x1a98374*/ Mono.Security.Cryptography.MD2 Create();
                /*0x1a98348*/ MD2();
            }

            class MD2Managed : Mono.Security.Cryptography.MD2
            {
                static /*0x0*/ byte[] PI_SUBST;
                /*0x28*/ byte[] state;
                /*0x30*/ byte[] checksum;
                /*0x38*/ byte[] buffer;
                /*0x40*/ int count;
                /*0x48*/ byte[] x;

                static /*0x1a989d8*/ MD2Managed();
                /*0x1a983c8*/ MD2Managed();
                /*0x1a98470*/ byte[] Padding(int nLength);
                /*0x1a98518*/ void Initialize();
                /*0x1a98584*/ void HashCore(byte[] array, int ibStart, int cbSize);
                /*0x1a988e4*/ byte[] HashFinal();
                /*0x1a98658*/ void MD2Transform(byte[] state, byte[] checksum, byte[] block, int index);
            }

            class MD4 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x1a98a94*/ Mono.Security.Cryptography.MD4 Create();
                /*0x1a98a68*/ MD4();
            }

            class MD4Managed : Mono.Security.Cryptography.MD4
            {
                /*0x28*/ uint[] state;
                /*0x30*/ byte[] buffer;
                /*0x38*/ uint[] count;
                /*0x40*/ uint[] x;
                /*0x48*/ byte[] digest;

                /*0x1a98ae8*/ MD4Managed();
                /*0x1a98bbc*/ void Initialize();
                /*0x1a98cb4*/ void HashCore(byte[] array, int ibStart, int cbSize);
                /*0x1a9947c*/ byte[] HashFinal();
                /*0x1a99690*/ byte[] Padding(int nLength);
                /*0x1a99714*/ uint F(uint x, uint y, uint z);
                /*0x1a99724*/ uint G(uint x, uint y, uint z);
                /*0x1a99738*/ uint H(uint x, uint y, uint z);
                /*0x1a99744*/ uint ROL(uint x, byte n);
                /*0x1a99750*/ void FF(ref uint a, uint b, uint c, uint d, uint x, byte s);
                /*0x1a99778*/ void GG(ref uint a, uint b, uint c, uint d, uint x, byte s);
                /*0x1a997b0*/ void HH(ref uint a, uint b, uint c, uint d, uint x, byte s);
                /*0x1a9958c*/ void Encode(byte[] output, uint[] input);
                /*0x1a997e0*/ void Decode(uint[] output, byte[] input, int index);
                /*0x1a98df8*/ void MD4Transform(uint[] state, byte[] block, int index);
            }

            class PKCS1
            {
                static /*0x0*/ byte[] emptySHA1;
                static /*0x8*/ byte[] emptySHA256;
                static /*0x10*/ byte[] emptySHA384;
                static /*0x18*/ byte[] emptySHA512;

                static /*0x214b1cc*/ PKCS1();
                static /*0x214add0*/ System.Security.Cryptography.HashAlgorithm CreateFromName(string name);
            }

            class PKCS8
            {
                class PrivateKeyInfo
                {
                    /*0x10*/ int _version;
                    /*0x18*/ string _algorithm;
                    /*0x20*/ byte[] _key;
                    /*0x28*/ System.Collections.ArrayList _list;

                    static /*0x18181d0*/ byte[] RemoveLeadingZero(byte[] bigInt);
                    static /*0x1818278*/ byte[] Normalize(byte[] bigInt, int length);
                    static /*0x1818328*/ System.Security.Cryptography.RSA DecodeRSA(byte[] keypair);
                    static /*0x18186f0*/ System.Security.Cryptography.DSA DecodeDSA(byte[] privateKey, System.Security.Cryptography.DSAParameters dsaParameters);
                    /*0x1817e5c*/ PrivateKeyInfo();
                    /*0x1817ec8*/ PrivateKeyInfo(byte[] data);
                    /*0x1818158*/ byte[] get_PrivateKey();
                    /*0x1817ef4*/ void Decode(byte[] data);
                }

                class EncryptedPrivateKeyInfo
                {
                    /*0x10*/ string _algorithm;
                    /*0x18*/ byte[] _salt;
                    /*0x20*/ int _iterations;
                    /*0x28*/ byte[] _data;

                    /*0x1817a2c*/ EncryptedPrivateKeyInfo();
                    /*0x1817a34*/ EncryptedPrivateKeyInfo(byte[] data);
                    /*0x1817d14*/ string get_Algorithm();
                    /*0x1817d1c*/ byte[] get_EncryptedData();
                    /*0x1817d94*/ byte[] get_Salt();
                    /*0x1817e54*/ int get_IterationCount();
                    /*0x1817a64*/ void Decode(byte[] data);
                }
            }

            class RC4 : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x2534c14*/ RC4();
                static /*0x2534bbc*/ Mono.Security.Cryptography.RC4 Create();
                /*0x2534adc*/ RC4();
                /*0x2534b70*/ byte[] get_IV();
                /*0x2534bb8*/ void set_IV(byte[] value);
            }

            class RSAManaged : System.Security.Cryptography.RSA
            {
                /*0x20*/ bool isCRTpossible;
                /*0x21*/ bool keyBlinding;
                /*0x22*/ bool keypairGenerated;
                /*0x23*/ bool m_disposed;
                /*0x28*/ Mono.Math.BigInteger d;
                /*0x30*/ Mono.Math.BigInteger p;
                /*0x38*/ Mono.Math.BigInteger q;
                /*0x40*/ Mono.Math.BigInteger dp;
                /*0x48*/ Mono.Math.BigInteger dq;
                /*0x50*/ Mono.Math.BigInteger qInv;
                /*0x58*/ Mono.Math.BigInteger n;
                /*0x60*/ Mono.Math.BigInteger e;
                /*0x68*/ Mono.Security.Cryptography.RSAManaged.KeyGeneratedEventHandler KeyGenerated;

                /*0x1988b50*/ RSAManaged(int keySize);
                /*0x19890d4*/ void Finalize();
                /*0x1989148*/ void GenerateKeyPair();
                /*0x198943c*/ int get_KeySize();
                /*0x1988d98*/ bool get_PublicOnly();
                /*0x19894e0*/ System.Security.Cryptography.RSAParameters ExportParameters(bool includePrivateParameters);
                /*0x1989924*/ void ImportParameters(System.Security.Cryptography.RSAParameters parameters);
                /*0x1989e24*/ void Dispose(bool disposing);
                /*0x1988c4c*/ void add_KeyGenerated(Mono.Security.Cryptography.RSAManaged.KeyGeneratedEventHandler value);
                /*0x198a0ac*/ void remove_KeyGenerated(Mono.Security.Cryptography.RSAManaged.KeyGeneratedEventHandler value);
                /*0x198a14c*/ string ToXmlString(bool includePrivateParameters);
                /*0x1989864*/ byte[] GetPaddedValue(Mono.Math.BigInteger value, int length);

                class KeyGeneratedEventHandler : System.MulticastDelegate
                {
                    /*0x1818d94*/ KeyGeneratedEventHandler(object object, nint method);
                    /*0x1818df4*/ void Invoke(object sender, System.EventArgs e);
                    /*0x1819188*/ System.IAsyncResult BeginInvoke(object sender, System.EventArgs e, System.AsyncCallback callback, object object);
                    /*0x18191b8*/ void EndInvoke(System.IAsyncResult result);
                }
            }

            class SymmetricTransform : System.Security.Cryptography.ICryptoTransform, System.IDisposable
            {
                /*0x10*/ System.Security.Cryptography.SymmetricAlgorithm algo;
                /*0x18*/ bool encrypt;
                /*0x1c*/ int BlockSizeByte;
                /*0x20*/ byte[] temp;
                /*0x28*/ byte[] temp2;
                /*0x30*/ byte[] workBuff;
                /*0x38*/ byte[] workout;
                /*0x40*/ System.Security.Cryptography.PaddingMode padmode;
                /*0x44*/ int FeedBackByte;
                /*0x48*/ bool m_disposed;
                /*0x49*/ bool lastBlock;
                /*0x50*/ System.Security.Cryptography.RandomNumberGenerator _rng;

                /*0x1e21940*/ SymmetricTransform(System.Security.Cryptography.SymmetricAlgorithm symmAlgo, bool encryption, byte[] rgbIV);
                /*0x1e21c18*/ void Finalize();
                /*0x1e21c8c*/ void System.IDisposable.Dispose();
                /*0x1e21d04*/ void Dispose(bool disposing);
                /*0x1e21d68*/ bool get_CanTransformMultipleBlocks();
                /*0x1e21d70*/ int get_InputBlockSize();
                /*0x1e21d78*/ int get_OutputBlockSize();
                /*0x1e21d80*/ void Transform(byte[] input, byte[] output);
                void ECB(byte[] input, byte[] output);
                /*0x1e21f04*/ void CBC(byte[] input, byte[] output);
                /*0x1e2207c*/ void CFB(byte[] input, byte[] output);
                /*0x1e22258*/ void OFB(byte[] input, byte[] output);
                /*0x1e222ac*/ void CTS(byte[] input, byte[] output);
                /*0x1e22300*/ void CheckInput(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x1e22448*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x1e22654*/ bool get_KeepLastBlock();
                /*0x1e22678*/ int InternalTransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x1e2283c*/ void Random(byte[] buffer, int start, int length);
                /*0x1e228f8*/ void ThrowBadPaddingException(System.Security.Cryptography.PaddingMode padding, int length, int position);
                /*0x1e22a44*/ byte[] FinalEncrypt(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x1e22cf0*/ byte[] FinalDecrypt(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x1e22fa0*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
            }

            class DSAManaged : System.Security.Cryptography.DSA
            {
                /*0x20*/ bool keypairGenerated;
                /*0x21*/ bool m_disposed;
                /*0x28*/ Mono.Math.BigInteger p;
                /*0x30*/ Mono.Math.BigInteger q;
                /*0x38*/ Mono.Math.BigInteger g;
                /*0x40*/ Mono.Math.BigInteger x;
                /*0x48*/ Mono.Math.BigInteger y;
                /*0x50*/ Mono.Math.BigInteger j;
                /*0x58*/ Mono.Math.BigInteger seed;
                /*0x60*/ int counter;
                /*0x64*/ bool j_missing;
                /*0x68*/ System.Security.Cryptography.RandomNumberGenerator rng;
                /*0x70*/ Mono.Security.Cryptography.DSAManaged.KeyGeneratedEventHandler KeyGenerated;

                /*0x19f9630*/ DSAManaged(int dwKeySize);
                /*0x19f9ad8*/ void Finalize();
                /*0x19f9b4c*/ void Generate();
                /*0x19fa16c*/ void GenerateKeyPair();
                /*0x19fa27c*/ void add(byte[] a, byte[] b, int value);
                /*0x19f9ba0*/ void GenerateParams(int keyLength);
                /*0x19fa330*/ System.Security.Cryptography.RandomNumberGenerator get_Random();
                /*0x19fa35c*/ int get_KeySize();
                /*0x19f9868*/ bool get_PublicOnly();
                /*0x19fa388*/ byte[] NormalizeArray(byte[] array);
                /*0x19fa438*/ System.Security.Cryptography.DSAParameters ExportParameters(bool includePrivateParameters);
                /*0x19fa6e8*/ void ImportParameters(System.Security.Cryptography.DSAParameters parameters);
                /*0x19fa9b4*/ void Dispose(bool disposing);
                /*0x19f971c*/ void add_KeyGenerated(Mono.Security.Cryptography.DSAManaged.KeyGeneratedEventHandler value);
                /*0x19fabf8*/ void remove_KeyGenerated(Mono.Security.Cryptography.DSAManaged.KeyGeneratedEventHandler value);

                class KeyGeneratedEventHandler : System.MulticastDelegate
                {
                    /*0x180f104*/ KeyGeneratedEventHandler(object object, nint method);
                    /*0x180f164*/ void Invoke(object sender, System.EventArgs e);
                    /*0x180f4f8*/ System.IAsyncResult BeginInvoke(object sender, System.EventArgs e, System.AsyncCallback callback, object object);
                    /*0x180f528*/ void EndInvoke(System.IAsyncResult result);
                }
            }
        }
    }

    namespace Math
    {
        class BigInteger
        {
            static /*0x0*/ uint[] smallPrimes;
            static /*0x8*/ System.Security.Cryptography.RandomNumberGenerator rng;
            /*0x10*/ uint length;
            /*0x18*/ uint[] data;

            static /*0x1c52894*/ BigInteger();
            static /*0x1c50c74*/ Mono.Math.BigInteger op_Implicit(uint value);
            static /*0x1c50cd0*/ Mono.Math.BigInteger op_Implicit(int value);
            static /*0x1c50d78*/ Mono.Math.BigInteger op_Subtraction(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x1c50f80*/ uint op_Modulus(Mono.Math.BigInteger bi, uint ui);
            static /*0x1c50f88*/ Mono.Math.BigInteger op_Modulus(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x1c50fc4*/ Mono.Math.BigInteger op_Division(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x1c50ffc*/ Mono.Math.BigInteger op_Multiply(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x1c511d0*/ Mono.Math.BigInteger op_Multiply(Mono.Math.BigInteger bi, int i);
            static /*0x1c512e0*/ Mono.Math.BigInteger op_LeftShift(Mono.Math.BigInteger bi1, int shiftVal);
            static /*0x1c512e8*/ Mono.Math.BigInteger op_RightShift(Mono.Math.BigInteger bi1, int shiftVal);
            static /*0x1c512f0*/ System.Security.Cryptography.RandomNumberGenerator get_Rng();
            static /*0x1c513b4*/ Mono.Math.BigInteger GenerateRandom(int bits, System.Security.Cryptography.RandomNumberGenerator rng);
            static /*0x1c51748*/ Mono.Math.BigInteger GenerateRandom(int bits);
            static /*0x1c50f08*/ bool op_Equality(Mono.Math.BigInteger bi1, uint ui);
            static /*0x1c51d8c*/ bool op_Inequality(Mono.Math.BigInteger bi1, uint ui);
            static /*0x1c51e04*/ bool op_Equality(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x1c51ed4*/ bool op_Inequality(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x1c51fa4*/ bool op_GreaterThan(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x1c51fc4*/ bool op_LessThan(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x1c51fe0*/ bool op_GreaterThanOrEqual(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x1c52000*/ bool op_LessThanOrEqual(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
            static /*0x1c52754*/ Mono.Math.BigInteger GeneratePseudoPrime(int bits);
            /*0x1c506dc*/ BigInteger(Mono.Math.BigInteger.Sign sign, uint len);
            /*0x1c50754*/ BigInteger(Mono.Math.BigInteger bi);
            /*0x1c50800*/ BigInteger(Mono.Math.BigInteger bi, uint len);
            /*0x1c508e4*/ BigInteger(byte[] inData);
            /*0x1c50be0*/ BigInteger(uint ui);
            /*0x1c517b0*/ void Randomize(System.Security.Cryptography.RandomNumberGenerator rng);
            /*0x1c519f0*/ void Randomize();
            /*0x1c51970*/ int BitCount();
            /*0x1c51a58*/ bool TestBit(uint bitNum);
            /*0x1c51aa8*/ bool TestBit(int bitNum);
            /*0x1c51b50*/ void SetBit(uint bitNum);
            /*0x1c51b58*/ void SetBit(uint bitNum, bool value);
            /*0x1c51bc0*/ int LowestSetBit();
            /*0x1c51c48*/ byte[] GetBytes();
            /*0x1c52020*/ string ToString(uint radix);
            /*0x1c5207c*/ string ToString(uint radix, string characterSet);
            /*0x1c50b7c*/ void Normalize();
            /*0x1c522ac*/ void Clear();
            /*0x1c52308*/ int GetHashCode();
            /*0x1c5236c*/ string ToString();
            /*0x1c52374*/ bool Equals(object o);
            /*0x1c524e0*/ Mono.Math.BigInteger ModInverse(Mono.Math.BigInteger modulus);
            /*0x1c524e8*/ Mono.Math.BigInteger ModPow(Mono.Math.BigInteger exp, Mono.Math.BigInteger n);
            /*0x1c5256c*/ bool IsProbablePrime();
            /*0x1c527c4*/ void Incr2();

            enum Sign
            {
                Negative = -1,
                Zero = 0,
                Positive = 1,
            }

            class ModulusRing
            {
                /*0x10*/ Mono.Math.BigInteger mod;
                /*0x18*/ Mono.Math.BigInteger constant;

                /*0x227380c*/ ModulusRing(Mono.Math.BigInteger modulus);
                /*0x2273b24*/ void BarrettReduction(Mono.Math.BigInteger x);
                /*0x2273dc0*/ Mono.Math.BigInteger Multiply(Mono.Math.BigInteger a, Mono.Math.BigInteger b);
                /*0x2273900*/ Mono.Math.BigInteger Difference(Mono.Math.BigInteger a, Mono.Math.BigInteger b);
                /*0x2273fa4*/ Mono.Math.BigInteger Pow(Mono.Math.BigInteger a, Mono.Math.BigInteger k);
                /*0x22740d4*/ Mono.Math.BigInteger Pow(uint b, Mono.Math.BigInteger exp);
            }

            class Kernel
            {
                static /*0x2271d24*/ Mono.Math.BigInteger Subtract(Mono.Math.BigInteger big, Mono.Math.BigInteger small);
                static /*0x2271ef0*/ void MinusEq(Mono.Math.BigInteger big, Mono.Math.BigInteger small);
                static /*0x2272010*/ void PlusEq(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
                static /*0x227219c*/ Mono.Math.BigInteger.Sign Compare(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
                static /*0x22722ec*/ uint SingleByteDivideInPlace(Mono.Math.BigInteger n, uint d);
                static /*0x2272388*/ uint DwordMod(Mono.Math.BigInteger n, uint d);
                static /*0x2272400*/ Mono.Math.BigInteger[] DwordDivMod(Mono.Math.BigInteger n, uint d);
                static /*0x22725c4*/ Mono.Math.BigInteger[] multiByteDivide(Mono.Math.BigInteger bi1, Mono.Math.BigInteger bi2);
                static /*0x2272acc*/ Mono.Math.BigInteger LeftShift(Mono.Math.BigInteger bi, int n);
                static /*0x2272cc8*/ Mono.Math.BigInteger RightShift(Mono.Math.BigInteger bi, int n);
                static /*0x2272e90*/ Mono.Math.BigInteger MultiplyByDword(Mono.Math.BigInteger n, uint f);
                static /*0x2272fa8*/ void Multiply(uint[] x, uint xOffset, uint xLen, uint[] y, uint yOffset, uint yLen, uint[] d, uint dOffset);
                static /*0x22730a4*/ void MultiplyMod2p32pmod(uint[] x, int xOffset, int xLen, uint[] y, int yOffest, int yLen, uint[] d, int dOffset, int mod);
                static /*0x22731d4*/ uint modInverse(Mono.Math.BigInteger bi, uint modulus);
                static /*0x22732a4*/ Mono.Math.BigInteger modInverse(Mono.Math.BigInteger bi, Mono.Math.BigInteger modulus);
            }
        }

        namespace Prime
        {
            enum ConfidenceFactor
            {
                ExtraLow = 0,
                Low = 1,
                Medium = 2,
                High = 3,
                ExtraHigh = 4,
                Provable = 5,
            }

            class PrimalityTest : System.MulticastDelegate
            {
                /*0x252ffa0*/ PrimalityTest(object object, nint method);
                /*0x2530000*/ bool Invoke(Mono.Math.BigInteger bi, Mono.Math.Prime.ConfidenceFactor confidence);
                /*0x25303a0*/ System.IAsyncResult BeginInvoke(Mono.Math.BigInteger bi, Mono.Math.Prime.ConfidenceFactor confidence, System.AsyncCallback callback, object object);
                /*0x2530438*/ bool EndInvoke(System.IAsyncResult result);
            }

            class PrimalityTests
            {
                static /*0x2530464*/ int GetSPPRounds(Mono.Math.BigInteger bi, Mono.Math.Prime.ConfidenceFactor confidence);
                static /*0x25305fc*/ bool Test(Mono.Math.BigInteger n, Mono.Math.Prime.ConfidenceFactor confidence);
                static /*0x2530874*/ bool RabinMillerTest(Mono.Math.BigInteger n, Mono.Math.Prime.ConfidenceFactor confidence);
                static /*0x2530650*/ bool SmallPrimeSppTest(Mono.Math.BigInteger bi, Mono.Math.Prime.ConfidenceFactor confidence);
            }

            namespace Generator
            {
                class PrimeGeneratorBase
                {
                    /*0x2530c20*/ PrimeGeneratorBase();
                    /*0x2530ba0*/ Mono.Math.Prime.ConfidenceFactor get_Confidence();
                    /*0x2530ba8*/ Mono.Math.Prime.PrimalityTest get_PrimalityTest();
                    /*0x2530c18*/ int get_TrialDivisionBounds();
                    Mono.Math.BigInteger GenerateNewPrime(int bits);
                }

                class SequentialSearchPrimeGeneratorBase : Mono.Math.Prime.Generator.PrimeGeneratorBase
                {
                    /*0x2053b88*/ SequentialSearchPrimeGeneratorBase();
                    /*0x20537e4*/ Mono.Math.BigInteger GenerateSearchBase(int bits, object context);
                    /*0x2053868*/ Mono.Math.BigInteger GenerateNewPrime(int bits);
                    /*0x2053878*/ Mono.Math.BigInteger GenerateNewPrime(int bits, object context);
                    /*0x2053b80*/ bool IsPrimeAcceptable(Mono.Math.BigInteger bi, object context);
                }
            }
        }
    }
}

namespace Microsoft
{
    namespace Win32
    {
        interface IRegistryApi
        {
            Microsoft.Win32.RegistryKey OpenSubKey(Microsoft.Win32.RegistryKey rkey, string keyname, bool writtable);
            void Flush(Microsoft.Win32.RegistryKey rkey);
            void Close(Microsoft.Win32.RegistryKey rkey);
            object GetValue(Microsoft.Win32.RegistryKey rkey, string name, object default_value, Microsoft.Win32.RegistryValueOptions options);
            string[] GetSubKeyNames(Microsoft.Win32.RegistryKey rkey);
            string ToString(Microsoft.Win32.RegistryKey rkey);
            nint GetHandle(Microsoft.Win32.RegistryKey key);
        }

        class Registry
        {
            static /*0x0*/ Microsoft.Win32.RegistryKey ClassesRoot;
            static /*0x8*/ Microsoft.Win32.RegistryKey CurrentConfig;
            static /*0x10*/ Microsoft.Win32.RegistryKey CurrentUser;
            static /*0x18*/ Microsoft.Win32.RegistryKey DynData;
            static /*0x20*/ Microsoft.Win32.RegistryKey LocalMachine;
            static /*0x28*/ Microsoft.Win32.RegistryKey PerformanceData;
            static /*0x30*/ Microsoft.Win32.RegistryKey Users;

            static /*0x1990200*/ Registry();
        }

        enum RegistryHive
        {
            ClassesRoot = -2147483648,
            CurrentConfig = -2147483643,
            CurrentUser = -2147483647,
            DynData = -2147483642,
            LocalMachine = -2147483646,
            PerformanceData = -2147483644,
            Users = -2147483645,
        }

        class RegistryKey : System.MarshalByRefObject, System.IDisposable
        {
            static /*0x0*/ Microsoft.Win32.IRegistryApi RegistryApi;
            /*0x18*/ object handle;
            /*0x20*/ Microsoft.Win32.SafeHandles.SafeRegistryHandle safe_handle;
            /*0x28*/ object hive;
            /*0x30*/ string qname;
            /*0x38*/ bool isRemoteRoot;
            /*0x39*/ bool isWritable;

            static /*0x199048c*/ RegistryKey();
            static /*0x19907f0*/ bool IsEquals(Microsoft.Win32.RegistryKey a, Microsoft.Win32.RegistryKey b);
            static /*0x1991224*/ string DecodeString(byte[] data);
            static /*0x19912d0*/ System.IO.IOException CreateMarkedForDeletionException();
            static /*0x1990664*/ string GetHiveName(Microsoft.Win32.RegistryHive hive);
            /*0x1990440*/ RegistryKey(Microsoft.Win32.RegistryHive hiveId);
            /*0x199056c*/ RegistryKey(Microsoft.Win32.RegistryHive hiveId, nint keyHandle, bool remoteRoot);
            /*0x19907a8*/ RegistryKey(object data, string keyName, bool writable);
            /*0x1990894*/ void Dispose();
            /*0x1990a0c*/ string get_Name();
            /*0x1990a14*/ void Flush();
            /*0x1990900*/ void Close();
            /*0x1990b0c*/ Microsoft.Win32.SafeHandles.SafeRegistryHandle get_Handle();
            /*0x1990cb0*/ Microsoft.Win32.RegistryKey OpenSubKey(string name);
            /*0x1990cb8*/ Microsoft.Win32.RegistryKey OpenSubKey(string name, bool writable);
            /*0x1990e84*/ object GetValue(string name);
            /*0x1990e8c*/ object GetValue(string name, object defaultValue);
            /*0x1990f98*/ string[] GetSubKeyNames();
            /*0x1991088*/ string ToString();
            /*0x1990afc*/ bool get_IsRoot();
            /*0x1991178*/ Microsoft.Win32.RegistryHive get_Hive();
            /*0x199121c*/ object get_InternalHandle();
            /*0x1990c50*/ void AssertKeyStillValid();
            /*0x1990e10*/ void AssertKeyNameLength(string name);
        }

        enum RegistryValueKind
        {
            Unknown = 0,
            String = 1,
            ExpandString = 2,
            Binary = 3,
            DWord = 4,
            MultiString = 7,
            QWord = 11,
            None = -1,
        }

        enum RegistryValueOptions
        {
            None = 0,
            DoNotExpandEnvironmentNames = 1,
        }

        class ExpandString
        {
            /*0x10*/ string value;

            /*0x20df38c*/ ExpandString(string s);
            /*0x20df3b8*/ string ToString();
            /*0x20df3c0*/ string Expand();
        }

        class RegistryKeyComparer : System.Collections.IEqualityComparer
        {
            /*0x1991454*/ RegistryKeyComparer();
            /*0x1991324*/ bool Equals(object x, object y);
            /*0x19913d4*/ int GetHashCode(object obj);
        }

        class KeyHandler
        {
            static /*0x0*/ System.Collections.Hashtable key_to_handler;
            static /*0x8*/ System.Collections.Hashtable dir_to_handler;
            static /*0x10*/ string user_store;
            static /*0x18*/ string machine_store;
            /*0x10*/ string Dir;
            /*0x18*/ string ActualDir;
            /*0x20*/ bool IsVolatile;
            /*0x28*/ System.Collections.Hashtable values;
            /*0x30*/ string file;
            /*0x38*/ bool dirty;

            static /*0x1a8b2d8*/ KeyHandler();
            static /*0x1a8cab0*/ string CombineName(Microsoft.Win32.RegistryKey rkey, string extra);
            static /*0x1a8d170*/ long GetSystemBootTime();
            static /*0x1a8d4f4*/ long GetRegisteredBootTime(string path);
            static /*0x1a8d80c*/ void SaveRegisteredBootTime(string path, long btime);
            static /*0x1a8b3f8*/ void CleanVolatileKeys();
            static /*0x1a8cf30*/ bool VolatileKeyExists(string dir);
            static /*0x1a8b840*/ string GetVolatileDir(string dir);
            static /*0x1a8de60*/ Microsoft.Win32.KeyHandler Lookup(Microsoft.Win32.RegistryKey rkey, bool createNonExisting);
            static /*0x1a8dd24*/ string GetRootFromDir(string dir);
            static /*0x1a8e328*/ void Drop(Microsoft.Win32.RegistryKey rkey);
            static /*0x1a8da30*/ string get_UserStore();
            static /*0x1a8db50*/ string get_MachineStore();
            /*0x1a8b644*/ KeyHandler(Microsoft.Win32.RegistryKey rkey, string basedir);
            /*0x1a8b64c*/ KeyHandler(Microsoft.Win32.RegistryKey rkey, string basedir, bool is_volatile);
            /*0x1a8b914*/ void Load();
            /*0x1a8bfe8*/ void LoadKey(System.Security.SecurityElement se);
            /*0x1a8c79c*/ Microsoft.Win32.RegistryKey Ensure(Microsoft.Win32.RegistryKey rkey, string extra, bool writable, bool is_volatile);
            /*0x1a8cb4c*/ Microsoft.Win32.RegistryKey Probe(Microsoft.Win32.RegistryKey rkey, string extra, bool writable);
            /*0x1a8e808*/ object GetValue(string name, Microsoft.Win32.RegistryValueOptions options);
            /*0x1a8ea54*/ string[] GetSubKeyNames();
            /*0x1a8ef00*/ void Flush();
            /*0x1a8fb10*/ bool ValueExists(string name);
            /*0x1a8e9c8*/ bool get_IsMarkedForDeletion();
            /*0x1a8fc40*/ void Finalize();
            /*0x1a8f038*/ void Save();
        }

        class UnixRegistryApi : Microsoft.Win32.IRegistryApi
        {
            static /*0x206a28c*/ string ToUnix(string keyname);
            static /*0x206a2e8*/ bool IsWellKnownKey(string parentKeyName, string keyname);
            /*0x206a904*/ UnixRegistryApi();
            /*0x206a428*/ Microsoft.Win32.RegistryKey OpenSubKey(Microsoft.Win32.RegistryKey rkey, string keyname, bool writable);
            /*0x206a518*/ void Flush(Microsoft.Win32.RegistryKey rkey);
            /*0x206a598*/ void Close(Microsoft.Win32.RegistryKey rkey);
            /*0x206a5fc*/ object GetValue(Microsoft.Win32.RegistryKey rkey, string name, object default_value, Microsoft.Win32.RegistryValueOptions options);
            /*0x206a6c4*/ string[] GetSubKeyNames(Microsoft.Win32.RegistryKey rkey);
            /*0x206a73c*/ string ToString(Microsoft.Win32.RegistryKey rkey);
            /*0x206a50c*/ Microsoft.Win32.RegistryKey CreateSubKey(Microsoft.Win32.RegistryKey rkey, string keyname, bool writable);
            /*0x206a754*/ Microsoft.Win32.RegistryKey CreateSubKey(Microsoft.Win32.RegistryKey rkey, string keyname, bool writable, bool is_volatile);
            /*0x206a8c4*/ nint GetHandle(Microsoft.Win32.RegistryKey key);
        }

        class Win32RegistryApi : Microsoft.Win32.IRegistryApi
        {
            /*0x10*/ int NativeBytesPerCharacter;

            static /*0x2074b0c*/ int RegCloseKey(nint keyHandle);
            static /*0x2074b8c*/ int RegFlushKey(nint keyHandle);
            static /*0x2074c0c*/ int RegOpenKeyEx(nint keyBase, string keyName, nint reserved, int access, ref nint keyHandle);
            static /*0x2074cc0*/ int RegEnumKeyEx(nint keyHandle, int dwIndex, char* lpName, ref int lpcbName, int[] lpReserved, System.Text.StringBuilder lpClass, int[] lpcbClass, long[] lpftLastWriteTime);
            static /*0x2074ddc*/ int RegQueryValueEx(nint keyBase, string valueName, nint reserved, ref Microsoft.Win32.RegistryValueKind type, nint zero, ref int dataSize);
            static /*0x2074ea4*/ int RegQueryValueEx(nint keyBase, string valueName, nint reserved, ref Microsoft.Win32.RegistryValueKind type, byte[] data, ref int dataSize);
            static /*0x2075004*/ int RegQueryValueEx(nint keyBase, string valueName, nint reserved, ref Microsoft.Win32.RegistryValueKind type, ref int data, ref int dataSize);
            static /*0x20750cc*/ int RegQueryValueEx(nint keyBase, string valueName, nint reserved, ref Microsoft.Win32.RegistryValueKind type, ref long data, ref int dataSize);
            static /*0x2075194*/ int RegQueryInfoKey(nint hKey, System.Text.StringBuilder lpClass, int[] lpcbClass, nint lpReserved_MustBeZero, ref int lpcSubKeys, int[] lpcbMaxSubKeyLen, int[] lpcbMaxClassLen, ref int lpcValues, int[] lpcbMaxValueNameLen, int[] lpcbMaxValueLen, int[] lpcbSecurityDescriptor, int[] lpftLastWriteTime);
            static /*0x2075360*/ bool IsHandleValid(Microsoft.Win32.RegistryKey key);
            static /*0x2075ad0*/ string CombineName(Microsoft.Win32.RegistryKey rkey, string localName);
            /*0x2075d98*/ Win32RegistryApi();
            /*0x20752e8*/ nint GetHandle(Microsoft.Win32.RegistryKey key);
            /*0x2075380*/ object GetValue(Microsoft.Win32.RegistryKey rkey, string name, object defaultValue, Microsoft.Win32.RegistryValueOptions options);
            /*0x2075888*/ int GetBinaryValue(Microsoft.Win32.RegistryKey rkey, string name, Microsoft.Win32.RegistryValueKind type, ref byte[] data, int size);
            /*0x207592c*/ int SubKeyCount(Microsoft.Win32.RegistryKey rkey);
            /*0x20759b4*/ Microsoft.Win32.RegistryKey OpenSubKey(Microsoft.Win32.RegistryKey rkey, string keyName, bool writable);
            /*0x2075b38*/ void Flush(Microsoft.Win32.RegistryKey rkey);
            /*0x2075b64*/ void Close(Microsoft.Win32.RegistryKey rkey);
            /*0x2075bc4*/ string[] GetSubKeyNames(Microsoft.Win32.RegistryKey rkey);
            /*0x2075704*/ void GenerateException(int errorCode);
            /*0x2075d80*/ string ToString(Microsoft.Win32.RegistryKey rkey);
        }

        class Win32Native
        {
            static /*0x2074a7c*/ string GetMessage(int hr);
            static /*0x2074b00*/ int MakeHRFromErrorCode(int errorCode);

            class WIN32_FIND_DATA
            {
                /*0x10*/ int dwFileAttributes;
                /*0x18*/ string cFileName;

                /*0x2aa4848*/ WIN32_FIND_DATA();
            }
        }

        namespace SafeHandles
        {
            class SafeFileHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0x21670d0*/ SafeFileHandle(nint preexistingHandle, bool ownsHandle);
                /*0x2167100*/ bool ReleaseHandle();
            }

            class SafeFindHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0x2167188*/ SafeFindHandle(nint preexistingHandle);
                /*0x21671b8*/ bool ReleaseHandle();
            }

            class SafeRegistryHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0x204ca14*/ SafeRegistryHandle(nint preexistingHandle, bool ownsHandle);
                /*0x204ca40*/ bool ReleaseHandle();
            }

            class SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0x204e1e0*/ SafeWaitHandle(nint existingHandle, bool ownsHandle);
                /*0x204e20c*/ bool ReleaseHandle();
            }

            class SafeHandleZeroOrMinusOneIsInvalid : System.Runtime.InteropServices.SafeHandle
            {
                /*0x204c95c*/ SafeHandleZeroOrMinusOneIsInvalid(bool ownsHandle);
                /*0x204c9b4*/ bool get_IsInvalid();
            }
        }
    }
}

namespace System
{
    class Pinnable<T>
    {
        /*0x0*/ T Data;
    }

    struct ReadOnlySpan<T>
    {
        /*0x0*/ System.Pinnable<T> _pinnable;
        /*0x0*/ nint _byteOffset;
        /*0x0*/ int _length;

        ReadOnlySpan(T[] array);
        ReadOnlySpan(void* pointer, int length);
        int get_Length();
        T get_Item(int index);
        bool Equals(object obj);
        int GetHashCode();
        ref T DangerousGetPinnableReference();
    }

    struct Span<T>
    {
        /*0x0*/ System.Pinnable<T> _pinnable;
        /*0x0*/ nint _byteOffset;
        /*0x0*/ int _length;

        static System.Span<T> op_Implicit(T[] array);
        Span(T[] array);
        int get_Length();
        ref T get_Item(int index);
        bool Equals(object obj);
        int GetHashCode();
    }

    class SpanDebugView<T>
    {
    }

    class SpanHelpers
    {
        static bool IsReferenceOrContainsReferences<T>();
        static /*0x249e6b8*/ bool IsReferenceOrContainsReferencesCore(System.Type type);

        class PerTypeValues<T>
        {
            static /*0x0*/ bool IsReferenceOrContainsReferences;
            static /*0x0*/ T[] EmptyArray;
            static /*0x0*/ nint ArrayAdjustment;

            static PerTypeValues();
            static nint MeasureArrayAdjustment();
        }
    }

    class ThrowHelper
    {
        static /*0x1d32538*/ void ThrowArgumentNullException(System.ExceptionArgument argument);
        static /*0x1d32564*/ System.Exception CreateArgumentNullException(System.ExceptionArgument argument);
        static /*0x1d32618*/ void ThrowArrayTypeMismatchException_ArrayTypeMustBeExactMatch(System.Type type);
        static /*0x1d32644*/ System.Exception CreateArrayTypeMismatchException_ArrayTypeMustBeExactMatch(System.Type type);
        static /*0x1d326d0*/ void ThrowArgumentException_InvalidTypeWithPointersNotSupported(System.Type type);
        static /*0x1d326fc*/ System.Exception CreateArgumentException_InvalidTypeWithPointersNotSupported(System.Type type);
        static /*0x1d32788*/ void ThrowIndexOutOfRangeException();
        static /*0x1d327b4*/ System.Exception CreateIndexOutOfRangeException();
        static /*0x1d3280c*/ void ThrowArgumentOutOfRangeException(System.ExceptionArgument argument);
        static /*0x1d32838*/ System.Exception CreateArgumentOutOfRangeException(System.ExceptionArgument argument);
        static /*0x1d328ec*/ void ThrowArgumentOutOfRangeException();
        static /*0x1d329a4*/ void ThrowWrongValueTypeArgumentException(object value, System.Type targetType);
        static /*0x1d32a80*/ void ThrowKeyNotFoundException();
        static /*0x1d32ac0*/ void ThrowArgumentException(System.ExceptionResource resource);
        static /*0x1d32900*/ void ThrowArgumentOutOfRangeException(System.ExceptionArgument argument, System.ExceptionResource resource);
        static /*0x1d32f2c*/ void ThrowInvalidOperationException(System.ExceptionResource resource);
        static /*0x1d32f80*/ void ThrowNotSupportedException(System.ExceptionResource resource);
        static void IfNullAndNullsAreIllegalThenThrow<T>(object value, System.ExceptionArgument argName);
        static /*0x1d32da4*/ string GetArgumentName(System.ExceptionArgument argument);
        static /*0x1d32b14*/ string GetResourceName(System.ExceptionResource resource);
    }

    interface IValueTupleInternal : System.Runtime.CompilerServices.ITuple
    {
        int GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToStringEnd();
    }

    struct ValueTuple : System.IEquatable<System.ValueTuple>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        static /*0x2070aac*/ int CombineHashCodes(int h1, int h2);
        static /*0x2070b34*/ int CombineHashCodes(int h1, int h2, int h3);
        static /*0x2070bc0*/ int CombineHashCodes(int h1, int h2, int h3, int h4);
        static /*0x2070c5c*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5);
        static /*0x2070d00*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6);
        static /*0x2070db4*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7);
        static /*0x2070e70*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8);
        /*0xae05d8*/ bool Equals(object obj);
        /*0xae0638*/ bool Equals(System.ValueTuple other);
        /*0xae0640*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0xae06a0*/ int System.IComparable.CompareTo(object other);
        /*0xae06a8*/ int CompareTo(System.ValueTuple other);
        /*0xae06b0*/ int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0xae06b8*/ int GetHashCode();
        /*0xae06c0*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0xae06c8*/ int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0xae06d0*/ string ToString();
        /*0xae0714*/ string System.IValueTupleInternal.ToStringEnd();
        /*0xae0758*/ int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1> : System.IEquatable<System.ValueTuple<T1>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;

        ValueTuple(T1 item1);
        bool Equals(object obj);
        bool Equals(System.ValueTuple<T1> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object other);
        int CompareTo(System.ValueTuple<T1> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.IValueTupleInternal.ToStringEnd();
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2> : System.IEquatable<System.ValueTuple<T1, T2>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;

        ValueTuple(T1 item1, T2 item2);
        bool Equals(object obj);
        bool Equals(System.ValueTuple<T1, T2> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object other);
        int CompareTo(System.ValueTuple<T1, T2> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.IValueTupleInternal.ToStringEnd();
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3> : System.IEquatable<System.ValueTuple<T1, T2, T3>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;

        ValueTuple(T1 item1, T2 item2, T3 item3);
        bool Equals(object obj);
        bool Equals(System.ValueTuple<T1, T2, T3> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object other);
        int CompareTo(System.ValueTuple<T1, T2, T3> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.IValueTupleInternal.ToStringEnd();
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;

        ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4);
        bool Equals(object obj);
        bool Equals(System.ValueTuple<T1, T2, T3, T4> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object other);
        int CompareTo(System.ValueTuple<T1, T2, T3, T4> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.IValueTupleInternal.ToStringEnd();
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;

        ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
        bool Equals(object obj);
        bool Equals(System.ValueTuple<T1, T2, T3, T4, T5> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object other);
        int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.IValueTupleInternal.ToStringEnd();
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5, T6> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5, T6>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5, T6>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;
        /*0x0*/ T6 Item6;

        ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);
        bool Equals(object obj);
        bool Equals(System.ValueTuple<T1, T2, T3, T4, T5, T6> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object other);
        int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5, T6> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.IValueTupleInternal.ToStringEnd();
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5, T6, T7> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;
        /*0x0*/ T6 Item6;
        /*0x0*/ T7 Item7;

        ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);
        bool Equals(object obj);
        bool Equals(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object other);
        int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.IValueTupleInternal.ToStringEnd();
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    struct ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> : System.IEquatable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>, System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.IComparable<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>, System.IValueTupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 Item1;
        /*0x0*/ T2 Item2;
        /*0x0*/ T3 Item3;
        /*0x0*/ T4 Item4;
        /*0x0*/ T5 Item5;
        /*0x0*/ T6 Item6;
        /*0x0*/ T7 Item7;
        /*0x0*/ TRest Rest;

        ValueTuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);
        bool Equals(object obj);
        bool Equals(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> other);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object other);
        int CompareTo(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> other);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int GetHashCodeCore(System.Collections.IEqualityComparer comparer);
        int System.IValueTupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.IValueTupleInternal.ToStringEnd();
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Array : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable, System.ICloneable
    {
        static /*0x1c8df90*/ System.Array CreateInstance(System.Type elementType, long[] lengths);
        static System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly<T>(T[] array);
        static void Resize<T>(ref T[] array, int newSize);
        static /*0x1c8f31c*/ int CombineHashCodes(int h1, int h2);
        static /*0x1c8f4a0*/ int BinarySearch(System.Array array, object value);
        static TOutput[] ConvertAll<TInput, TOutput>(TInput[] array, System.Converter<TInput, TOutput> converter);
        static /*0x1c8f9e8*/ void Copy(System.Array sourceArray, System.Array destinationArray, long length);
        static /*0x1c8fb20*/ void Copy(System.Array sourceArray, long sourceIndex, System.Array destinationArray, long destinationIndex, long length);
        static void ForEach<T>(T[] array, System.Action<T> action);
        static /*0x1c901dc*/ int BinarySearch(System.Array array, int index, int length, object value);
        static /*0x1c901e4*/ int BinarySearch(System.Array array, object value, System.Collections.IComparer comparer);
        static /*0x1c8f538*/ int BinarySearch(System.Array array, int index, int length, object value, System.Collections.IComparer comparer);
        static /*0x1c90280*/ int GetMedian(int low, int hi);
        static int BinarySearch<T>(T[] array, T value);
        static int BinarySearch<T>(T[] array, T value, System.Collections.Generic.IComparer<T> comparer);
        static int BinarySearch<T>(T[] array, int index, int length, T value);
        static int BinarySearch<T>(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
        static /*0x1c8e7d8*/ int IndexOf(System.Array array, object value);
        static /*0x1c90520*/ int IndexOf(System.Array array, object value, int startIndex);
        static /*0x1c9028c*/ int IndexOf(System.Array array, object value, int startIndex, int count);
        static int IndexOf<T>(T[] array, T value);
        static int IndexOf<T>(T[] array, T value, int startIndex);
        static int IndexOf<T>(T[] array, T value, int startIndex, int count);
        static /*0x1c905bc*/ int LastIndexOf(System.Array array, object value);
        static /*0x1c908f0*/ int LastIndexOf(System.Array array, object value, int startIndex);
        static /*0x1c9064c*/ int LastIndexOf(System.Array array, object value, int startIndex, int count);
        static int LastIndexOf<T>(T[] array, T value);
        static int LastIndexOf<T>(T[] array, T value, int startIndex);
        static int LastIndexOf<T>(T[] array, T value, int startIndex, int count);
        static /*0x1c9094c*/ void Reverse(System.Array array);
        static /*0x1c909d0*/ void Reverse(System.Array array, int index, int length);
        static void Reverse<T>(T[] array);
        static void Reverse<T>(T[] array, int index, int length);
        static /*0x1c91194*/ void Sort(System.Array array);
        static /*0x1c91458*/ void Sort(System.Array array, int index, int length);
        static /*0x1c9146c*/ void Sort(System.Array array, System.Collections.IComparer comparer);
        static /*0x1c91504*/ void Sort(System.Array array, int index, int length, System.Collections.IComparer comparer);
        static /*0x1c91518*/ void Sort(System.Array keys, System.Array items);
        static /*0x1c915b0*/ void Sort(System.Array keys, System.Array items, System.Collections.IComparer comparer);
        static /*0x1c9164c*/ void Sort(System.Array keys, System.Array items, int index, int length);
        static /*0x1c91220*/ void Sort(System.Array keys, System.Array items, int index, int length, System.Collections.IComparer comparer);
        static void Sort<T>(T[] array);
        static void Sort<T>(T[] array, int index, int length);
        static void Sort<T>(T[] array, System.Collections.Generic.IComparer<T> comparer);
        static void Sort<T>(T[] array, int index, int length, System.Collections.Generic.IComparer<T> comparer);
        static void Sort<T>(T[] array, System.Comparison<T> comparison);
        static void Sort<TKey, TValue>(TKey[] keys, TValue[] items);
        static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length);
        static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, System.Collections.Generic.IComparer<TKey> comparer);
        static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, System.Collections.Generic.IComparer<TKey> comparer);
        static bool Exists<T>(T[] array, System.Predicate<T> match);
        static void Fill<T>(T[] array, T value);
        static void Fill<T>(T[] array, T value, int startIndex, int count);
        static T Find<T>(T[] array, System.Predicate<T> match);
        static T[] FindAll<T>(T[] array, System.Predicate<T> match);
        static int FindIndex<T>(T[] array, System.Predicate<T> match);
        static int FindIndex<T>(T[] array, int startIndex, System.Predicate<T> match);
        static int FindIndex<T>(T[] array, int startIndex, int count, System.Predicate<T> match);
        static T FindLast<T>(T[] array, System.Predicate<T> match);
        static int FindLastIndex<T>(T[] array, System.Predicate<T> match);
        static int FindLastIndex<T>(T[] array, int startIndex, System.Predicate<T> match);
        static int FindLastIndex<T>(T[] array, int startIndex, int count, System.Predicate<T> match);
        static bool TrueForAll<T>(T[] array, System.Predicate<T> match);
        static /*0x1c91888*/ bool FastCopy(System.Array source, int source_idx, System.Array dest, int dest_idx, int length);
        static /*0x1c9188c*/ System.Array CreateInstanceImpl(System.Type elementType, int[] lengths, int[] bounds);
        static /*0x1c918d4*/ System.Array UnsafeCreateInstance(System.Type elementType, int[] lengths, int[] lowerBounds);
        static /*0x1c91cc8*/ System.Array UnsafeCreateInstance(System.Type elementType, int length1, int length2);
        static /*0x1c91d60*/ System.Array UnsafeCreateInstance(System.Type elementType, int[] lengths);
        static /*0x1c91d64*/ System.Array CreateInstance(System.Type elementType, int length);
        static /*0x1c91ccc*/ System.Array CreateInstance(System.Type elementType, int length1, int length2);
        static /*0x1c91de8*/ System.Array CreateInstance(System.Type elementType, int length1, int length2, int length3);
        static /*0x1c8e118*/ System.Array CreateInstance(System.Type elementType, int[] lengths);
        static /*0x1c918d8*/ System.Array CreateInstance(System.Type elementType, int[] lengths, int[] lowerBounds);
        static /*0x1c821d4*/ void Clear(System.Array array, int index, int length);
        static /*0x1c91e94*/ void ClearInternal(System.Array a, int index, int count);
        static /*0x1c8fa5c*/ void Copy(System.Array sourceArray, System.Array destinationArray, int length);
        static /*0x1c8ea60*/ void Copy(System.Array sourceArray, int sourceIndex, System.Array destinationArray, int destinationIndex, int length);
        static /*0x1c91e98*/ System.Exception CreateArrayTypeMismatchException();
        static /*0x1c91eec*/ bool CanAssignArrayElement(System.Type source, System.Type target);
        static /*0x1c92024*/ void ConstrainedCopy(System.Array sourceArray, int sourceIndex, System.Array destinationArray, int destinationIndex, int length);
        static T[] Empty<T>();
        static int IndexOfImpl<T>(T[] array, T value, int startIndex, int count);
        static int LastIndexOfImpl<T>(T[] array, T value, int startIndex, int count);
        static /*0x1c91654*/ void SortImpl(System.Array keys, System.Array items, int index, int length, System.Collections.IComparer comparer);
        static T UnsafeLoad<T>(T[] array, int index);
        static void UnsafeStore<T>(T[] array, int index, T value);
        static R UnsafeMov<S, R>(S instance);
        /*0x1c917bc*/ Array();
        /*0x1c8e3d4*/ int System.Collections.ICollection.get_Count();
        /*0x1c8e444*/ bool System.Collections.IList.get_IsReadOnly();
        /*0x1c8e44c*/ object System.Collections.IList.get_Item(int index);
        /*0x1c8e5cc*/ void System.Collections.IList.set_Item(int index, object value);
        /*0x1c8e768*/ int System.Collections.IList.Add(object value);
        /*0x1c8e7bc*/ bool System.Collections.IList.Contains(object value);
        /*0x1c8e86c*/ void System.Collections.IList.Clear();
        /*0x1c8e8ac*/ int System.Collections.IList.IndexOf(object value);
        /*0x1c8e8b0*/ void System.Collections.IList.Insert(int index, object value);
        /*0x1c8e904*/ void System.Collections.IList.Remove(object value);
        /*0x1c8e958*/ void System.Collections.IList.RemoveAt(int index);
        /*0x1c8e9ac*/ void CopyTo(System.Array array, int index);
        /*0x1c8238c*/ object Clone();
        /*0x1c8ef88*/ int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        /*0x1c8f178*/ bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        /*0x1c8f328*/ int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        /*0x1c8fbf4*/ void CopyTo(System.Array array, long index);
        /*0x1c8fc68*/ long get_LongLength();
        /*0x1c8fcdc*/ long GetLongLength(int dimension);
        /*0x1c8fcf4*/ object GetValue(long index);
        /*0x1c8fd68*/ object GetValue(long index1, long index2);
        /*0x1c8fea4*/ object GetValue(long index1, long index2, long index3);
        /*0x1c90024*/ object GetValue(long[] indices);
        /*0x1c901c0*/ bool get_IsFixedSize();
        /*0x1c901c8*/ bool get_IsReadOnly();
        /*0x1c901d0*/ bool get_IsSynchronized();
        /*0x1c901d8*/ object get_SyncRoot();
        /*0x1c90ca8*/ void SetValue(object value, long index);
        /*0x1c90d1c*/ void SetValue(object value, long index1, long index2);
        /*0x1c90e68*/ void SetValue(object value, long index1, long index2, long index3);
        /*0x1c90ff0*/ void SetValue(object value, long[] indices);
        /*0x1c9175c*/ System.Collections.IEnumerator GetEnumerator();
        /*0x1c917c4*/ int InternalArray__ICollection_get_Count();
        /*0x1c917c8*/ bool InternalArray__ICollection_get_IsReadOnly();
        System.Collections.Generic.IEnumerator<T> InternalArray__IEnumerable_GetEnumerator<T>();
        /*0x1c917d0*/ void InternalArray__ICollection_Clear();
        void InternalArray__ICollection_Add<T>(T item);
        bool InternalArray__ICollection_Remove<T>(T item);
        bool InternalArray__ICollection_Contains<T>(T item);
        void InternalArray__ICollection_CopyTo<T>(T[] array, int arrayIndex);
        T InternalArray__IReadOnlyList_get_Item<T>(int index);
        /*0x1c91824*/ int InternalArray__IReadOnlyCollection_get_Count();
        void InternalArray__Insert<T>(int index, T item);
        /*0x1c91828*/ void InternalArray__RemoveAt(int index);
        int InternalArray__IndexOf<T>(T item);
        T InternalArray__get_Item<T>(int index);
        void InternalArray__set_Item<T>(int index, T item);
        void GetGenericValueImpl<T>(int pos, ref T value);
        void SetGenericValueImpl<T>(int pos, ref T value);
        /*0x1c8e3d8*/ int get_Length();
        /*0x1c8ea5c*/ int get_Rank();
        /*0x1c9187c*/ int GetRank();
        /*0x1c8fcd8*/ int GetLength(int dimension);
        /*0x1c8e8a8*/ int GetLowerBound(int dimension);
        /*0x1c901bc*/ object GetValue(int[] indices);
        /*0x1c91190*/ void SetValue(object value, int[] indices);
        /*0x1c91880*/ object GetValueImpl(int pos);
        /*0x1c91884*/ void SetValueImpl(object value, int pos);
        /*0x1c91890*/ int GetUpperBound(int dimension);
        /*0x1c8e450*/ object GetValue(int index);
        /*0x1c8fe10*/ object GetValue(int index1, int index2);
        /*0x1c8ff78*/ object GetValue(int index1, int index2, int index3);
        /*0x1c8e5dc*/ void SetValue(object value, int index);
        /*0x1c90dc4*/ void SetValue(object value, int index1, int index2);
        /*0x1c90f3c*/ void SetValue(object value, int index1, int index2, int index3);
        /*0x1c92028*/ void Initialize();

        class ArrayEnumerator : System.Collections.IEnumerator, System.ICloneable
        {
            /*0x10*/ System.Array _array;
            /*0x18*/ int _index;
            /*0x1c*/ int _endIndex;

            /*0x226c570*/ ArrayEnumerator(System.Array array);
            /*0x226c5bc*/ bool MoveNext();
            /*0x226c5e4*/ void Reset();
            /*0x226c5f0*/ object Clone();
            /*0x226c5f8*/ object get_Current();
        }

        struct InternalEnumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
        {
            /*0x0*/ System.Array array;
            /*0x0*/ int idx;

            InternalEnumerator(System.Array array);
            void Dispose();
            bool MoveNext();
            T get_Current();
            void System.Collections.IEnumerator.Reset();
            object System.Collections.IEnumerator.get_Current();
        }

        class EmptyInternalEnumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
        {
            static /*0x0*/ System.Array.EmptyInternalEnumerator<T> Value;

            static EmptyInternalEnumerator();
            EmptyInternalEnumerator();
            void Dispose();
            bool MoveNext();
            T get_Current();
            object System.Collections.IEnumerator.get_Current();
            void System.Collections.IEnumerator.Reset();
        }

        struct SorterObjectArray
        {
            /*0x10*/ object[] keys;
            /*0x18*/ object[] items;
            /*0x20*/ System.Collections.IComparer comparer;

            /*0xae3cbc*/ SorterObjectArray(object[] keys, object[] items, System.Collections.IComparer comparer);
            /*0xae3cc4*/ void SwapIfGreaterWithItems(int a, int b);
            /*0xae3ccc*/ void Swap(int i, int j);
            /*0xae3cd4*/ void Sort(int left, int length);
            /*0xae3cdc*/ void IntrospectiveSort(int left, int length);
            /*0xae3ce4*/ void IntroSort(int lo, int hi, int depthLimit);
            /*0xae3cec*/ int PickPivotAndPartition(int lo, int hi);
            /*0xae3cf4*/ void Heapsort(int lo, int hi);
            /*0xae3cfc*/ void DownHeap(int i, int n, int lo);
            /*0xae3d04*/ void InsertionSort(int lo, int hi);
        }

        struct SorterGenericArray
        {
            /*0x10*/ System.Array keys;
            /*0x18*/ System.Array items;
            /*0x20*/ System.Collections.IComparer comparer;

            /*0xae3c30*/ SorterGenericArray(System.Array keys, System.Array items, System.Collections.IComparer comparer);
            /*0xae3c38*/ void SwapIfGreaterWithItems(int a, int b);
            /*0xae3c40*/ void Swap(int i, int j);
            /*0xae3c48*/ void Sort(int left, int length);
            /*0xae3c50*/ void IntrospectiveSort(int left, int length);
            /*0xae3c58*/ void IntroSort(int lo, int hi, int depthLimit);
            /*0xae3c60*/ int PickPivotAndPartition(int lo, int hi);
            /*0xae3c68*/ void Heapsort(int lo, int hi);
            /*0xae3c70*/ void DownHeap(int i, int n, int lo);
            /*0xae3c78*/ void InsertionSort(int lo, int hi);
        }
    }

    interface ITupleInternal : System.Runtime.CompilerServices.ITuple
    {
        string ToString(System.Text.StringBuilder sb);
        int GetHashCode(System.Collections.IEqualityComparer comparer);
    }

    class Tuple
    {
        static System.Tuple<T1, T2> Create<T1, T2>(T1 item1, T2 item2);
        static System.Tuple<T1, T2, T3> Create<T1, T2, T3>(T1 item1, T2 item2, T3 item3);
        static System.Tuple<T1, T2, T3, T4> Create<T1, T2, T3, T4>(T1 item1, T2 item2, T3 item3, T4 item4);
        static /*0x207b508*/ int CombineHashCodes(int h1, int h2);
        static /*0x207b514*/ int CombineHashCodes(int h1, int h2, int h3);
        static /*0x207b528*/ int CombineHashCodes(int h1, int h2, int h3, int h4);
        static /*0x207b544*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5);
        static /*0x207b568*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6);
        static /*0x207b594*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7);
        static /*0x207b5c8*/ int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8);
    }

    class Tuple<T1> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;

        Tuple(T1 item1);
        T1 get_Item1();
        bool Equals(object obj);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;

        Tuple(T1 item1, T2 item2);
        T1 get_Item1();
        T2 get_Item2();
        bool Equals(object obj);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;

        Tuple(T1 item1, T2 item2, T3 item3);
        T1 get_Item1();
        T2 get_Item2();
        T3 get_Item3();
        bool Equals(object obj);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;

        Tuple(T1 item1, T2 item2, T3 item3, T4 item4);
        T1 get_Item1();
        T2 get_Item2();
        T3 get_Item3();
        T4 get_Item4();
        bool Equals(object obj);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4, T5> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;
        /*0x0*/ T5 m_Item5;

        Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
        T1 get_Item1();
        T2 get_Item2();
        T3 get_Item3();
        T4 get_Item4();
        T5 get_Item5();
        bool Equals(object obj);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4, T5, T6> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;
        /*0x0*/ T5 m_Item5;
        /*0x0*/ T6 m_Item6;

        Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);
        T1 get_Item1();
        T2 get_Item2();
        T3 get_Item3();
        T4 get_Item4();
        T5 get_Item5();
        T6 get_Item6();
        bool Equals(object obj);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4, T5, T6, T7> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;
        /*0x0*/ T5 m_Item5;
        /*0x0*/ T6 m_Item6;
        /*0x0*/ T7 m_Item7;

        Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);
        T1 get_Item1();
        T2 get_Item2();
        T3 get_Item3();
        T4 get_Item4();
        T5 get_Item5();
        T6 get_Item6();
        T7 get_Item7();
        bool Equals(object obj);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> : System.Collections.IStructuralEquatable, System.Collections.IStructuralComparable, System.IComparable, System.ITupleInternal, System.Runtime.CompilerServices.ITuple
    {
        /*0x0*/ T1 m_Item1;
        /*0x0*/ T2 m_Item2;
        /*0x0*/ T3 m_Item3;
        /*0x0*/ T4 m_Item4;
        /*0x0*/ T5 m_Item5;
        /*0x0*/ T6 m_Item6;
        /*0x0*/ T7 m_Item7;
        /*0x0*/ TRest m_Rest;

        Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);
        T1 get_Item1();
        T2 get_Item2();
        T3 get_Item3();
        T4 get_Item4();
        T5 get_Item5();
        T6 get_Item6();
        T7 get_Item7();
        TRest get_Rest();
        bool Equals(object obj);
        bool System.Collections.IStructuralEquatable.Equals(object other, System.Collections.IEqualityComparer comparer);
        int System.IComparable.CompareTo(object obj);
        int System.Collections.IStructuralComparable.CompareTo(object other, System.Collections.IComparer comparer);
        int GetHashCode();
        int System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer);
        int System.ITupleInternal.GetHashCode(System.Collections.IEqualityComparer comparer);
        string ToString();
        string System.ITupleInternal.ToString(System.Text.StringBuilder sb);
        int System.Runtime.CompilerServices.ITuple.get_Length();
    }

    class MonoTODOAttribute : System.Attribute
    {
        /*0x10*/ string comment;

        /*0x22a54cc*/ MonoTODOAttribute();
        /*0x22a54d4*/ MonoTODOAttribute(string comment);
    }

    class MonoLimitationAttribute : System.MonoTODOAttribute
    {
        /*0x1c25264*/ MonoLimitationAttribute(string comment);
    }

    class AggregateException : System.Exception
    {
        /*0x88*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Exception> m_innerExceptions;

        /*0x1c88d88*/ AggregateException();
        /*0x1c88e90*/ AggregateException(System.Collections.Generic.IEnumerable<System.Exception> innerExceptions);
        /*0x1c88fc0*/ AggregateException(System.Exception[] innerExceptions);
        /*0x1c88ef8*/ AggregateException(string message, System.Collections.Generic.IEnumerable<System.Exception> innerExceptions);
        /*0x1c89028*/ AggregateException(string message, System.Exception[] innerExceptions);
        /*0x1c8902c*/ AggregateException(string message, System.Collections.Generic.IList<System.Exception> innerExceptions);
        /*0x1c89418*/ AggregateException(System.Collections.Generic.IEnumerable<System.Runtime.ExceptionServices.ExceptionDispatchInfo> innerExceptionInfos);
        /*0x1c89480*/ AggregateException(string message, System.Collections.Generic.IEnumerable<System.Runtime.ExceptionServices.ExceptionDispatchInfo> innerExceptionInfos);
        /*0x1c89548*/ AggregateException(string message, System.Collections.Generic.IList<System.Runtime.ExceptionServices.ExceptionDispatchInfo> innerExceptionInfos);
        /*0x1c899b8*/ AggregateException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1c89bc0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1c89d64*/ System.Exception GetBaseException();
        /*0x1c89e28*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Exception> get_InnerExceptions();
        /*0x1c89e30*/ System.AggregateException Flatten();
        /*0x1c8a144*/ string ToString();
    }

    class AppContext
    {
        static /*0x0*/ System.Collections.Generic.Dictionary<string, System.AppContext.SwitchValueState> s_switchMap;
        static /*0x8*/ bool s_defaultsInitialized;

        static /*0x1c8a9c8*/ AppContext();
        static /*0x1c8a4dc*/ void InitializeDefaultSwitchValues();
        static /*0x1c8a644*/ bool TryGetSwitch(string switchName, ref bool isEnabled);

        enum SwitchValueState
        {
            HasFalseValue = 1,
            HasTrueValue = 2,
            HasLookedForOverride = 4,
            UnknownValue = 8,
        }
    }

    class AppContextSwitches
    {
        static /*0x0*/ bool ThrowExceptionIfDisposedCancellationTokenSource;
        static /*0x1*/ bool SetActorAsReferenceWhenCopyingClaimsIdentity;
        static /*0x2*/ bool NoAsyncCurrentCulture;
    }

    class LazyHelpers
    {
        static /*0x0*/ object PUBLICATION_ONLY_SENTINEL;

        static /*0x1a9288c*/ LazyHelpers();
    }

    class Lazy<T>
    {
        static /*0x0*/ System.Func<T> ALREADY_INVOKED_SENTINEL;
        /*0x0*/ object m_boxed;
        /*0x0*/ System.Func<T> m_valueFactory;
        /*0x0*/ object m_threadSafeObj;

        static Lazy();
        static object GetObjectFromMode(System.Threading.LazyThreadSafetyMode mode);
        Lazy();
        Lazy(System.Func<T> valueFactory);
        Lazy(System.Threading.LazyThreadSafetyMode mode);
        Lazy(System.Func<T> valueFactory, System.Threading.LazyThreadSafetyMode mode);
        void OnSerializing(System.Runtime.Serialization.StreamingContext context);
        string ToString();
        System.Threading.LazyThreadSafetyMode get_Mode();
        bool get_IsValueCreated();
        T get_Value();
        T LazyInitValue();
        System.Lazy.Boxed<T> CreateValue();

        class Boxed<T>
        {
            /*0x0*/ T m_value;

            Boxed(T value);
        }

        class LazyInternalExceptionHolder<T>
        {
            /*0x0*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo m_edi;

            LazyInternalExceptionHolder(System.Exception ex);
        }

        class <>c<T>
        {
            static /*0x0*/ System.Lazy.<>c<T> <>9;

            static <>c();
            <>c();
            T <.cctor>b__27_0();
        }
    }

    class System_LazyDebugView<T>
    {
    }

    class __Filters
    {
        static /*0x0*/ System.__Filters Instance;

        static /*0x226c4c4*/ __Filters();
        /*0x226c4bc*/ __Filters();
        /*0x226be0c*/ bool FilterAttribute(System.Reflection.MemberInfo m, object filterCriteria);
        /*0x226c184*/ bool FilterName(System.Reflection.MemberInfo m, object filterCriteria);
        /*0x226c318*/ bool FilterIgnoreCase(System.Reflection.MemberInfo m, object filterCriteria);
    }

    class LocalDataStoreHolder
    {
        /*0x10*/ System.LocalDataStore m_Store;

        /*0x1a95590*/ LocalDataStoreHolder(System.LocalDataStore store);
        /*0x1a955bc*/ void Finalize();
        /*0x1a9562c*/ System.LocalDataStore get_Store();
    }

    class LocalDataStoreElement
    {
        /*0x10*/ object m_value;
        /*0x18*/ long m_cookie;

        /*0x1a9554c*/ LocalDataStoreElement(long cookie);
        /*0x1a95578*/ object get_Value();
        /*0x1a95580*/ void set_Value(object value);
        /*0x1a95588*/ long get_Cookie();
    }

    class LocalDataStore
    {
        /*0x10*/ System.LocalDataStoreElement[] m_DataTable;
        /*0x18*/ System.LocalDataStoreMgr m_Manager;

        /*0x1a94e40*/ LocalDataStore(System.LocalDataStoreMgr mgr, int InitialCapacity);
        /*0x1a94eb4*/ void Dispose();
        /*0x1a94fdc*/ object GetData(System.LocalDataStoreSlot slot);
        /*0x1a95124*/ void SetData(System.LocalDataStoreSlot slot, object data);
        /*0x1a954dc*/ void FreeData(int slot, long cookie);
        /*0x1a95210*/ System.LocalDataStoreElement PopulateElement(System.LocalDataStoreSlot slot);
    }

    class LocalDataStoreSlot
    {
        /*0x10*/ System.LocalDataStoreMgr m_mgr;
        /*0x18*/ int m_slot;
        /*0x20*/ long m_cookie;

        /*0x1a959f4*/ LocalDataStoreSlot(System.LocalDataStoreMgr mgr, int slot, long cookie);
        /*0x1a9600c*/ System.LocalDataStoreMgr get_Manager();
        /*0x1a96014*/ int get_Slot();
        /*0x1a9601c*/ long get_Cookie();
        /*0x1a96024*/ void Finalize();
    }

    class LocalDataStoreMgr
    {
        /*0x10*/ bool[] m_SlotInfoTable;
        /*0x18*/ int m_FirstAvailableSlot;
        /*0x20*/ System.Collections.Generic.List<System.LocalDataStore> m_ManagedLocalDataStores;
        /*0x28*/ System.Collections.Generic.Dictionary<string, System.LocalDataStoreSlot> m_KeyToSlotMap;
        /*0x30*/ long m_CookieGenerator;

        /*0x1a95f30*/ LocalDataStoreMgr();
        /*0x1a95634*/ System.LocalDataStoreHolder CreateLocalDataStore();
        /*0x1a94ed0*/ void DeleteLocalDataStore(System.LocalDataStore store);
        /*0x1a957a4*/ System.LocalDataStoreSlot AllocateDataSlot();
        /*0x1a95a38*/ System.LocalDataStoreSlot AllocateNamedDataSlot(string name);
        /*0x1a95b5c*/ System.LocalDataStoreSlot GetNamedDataSlot(string name);
        /*0x1a95c80*/ void FreeNamedDataSlot(string name);
        /*0x1a95d8c*/ void FreeDataSlot(int slot, long cookie);
        /*0x1a950b4*/ void ValidateSlot(System.LocalDataStoreSlot slot);
        /*0x1a95530*/ int GetSlotTableLength();
    }

    class AccessViolationException : System.SystemException
    {
        /*0x1c86d34*/ AccessViolationException();
        /*0x1c86da4*/ AccessViolationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Action<T> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T obj);
        System.IAsyncResult BeginInvoke(T obj, System.AsyncCallback callback, object object);
        void EndInvoke(System.IAsyncResult result);
    }

    class Action : System.MulticastDelegate
    {
        /*0x1c86dac*/ Action(object object, nint method);
        /*0x1c86e0c*/ void Invoke();
        /*0x1c87018*/ System.IAsyncResult BeginInvoke(System.AsyncCallback callback, object object);
        /*0x1c87044*/ void EndInvoke(System.IAsyncResult result);
    }

    class Action<T1, T2> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T1 arg1, T2 arg2);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, System.AsyncCallback callback, object object);
        void EndInvoke(System.IAsyncResult result);
    }

    class Action<T1, T2, T3> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T1 arg1, T2 arg2, T3 arg3);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, System.AsyncCallback callback, object object);
        void EndInvoke(System.IAsyncResult result);
    }

    class Action<T1, T2, T3, T4> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, System.AsyncCallback callback, object object);
        void EndInvoke(System.IAsyncResult result);
    }

    class Func<TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke();
        System.IAsyncResult BeginInvoke(System.AsyncCallback callback, object object);
        TResult EndInvoke(System.IAsyncResult result);
    }

    class Func<T, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T arg);
        System.IAsyncResult BeginInvoke(T arg, System.AsyncCallback callback, object object);
        TResult EndInvoke(System.IAsyncResult result);
    }

    class Func<T1, T2, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T1 arg1, T2 arg2);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, System.AsyncCallback callback, object object);
        TResult EndInvoke(System.IAsyncResult result);
    }

    class Func<T1, T2, T3, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T1 arg1, T2 arg2, T3 arg3);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, System.AsyncCallback callback, object object);
        TResult EndInvoke(System.IAsyncResult result);
    }

    class Func<T1, T2, T3, T4, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, System.AsyncCallback callback, object object);
        TResult EndInvoke(System.IAsyncResult result);
    }

    class Action<T1, T2, T3, T4, T5> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, System.AsyncCallback callback, object object);
        void EndInvoke(System.IAsyncResult result);
    }

    class Action<T1, T2, T3, T4, T5, T6> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, System.AsyncCallback callback, object object);
        void EndInvoke(System.IAsyncResult result);
    }

    class Action<T1, T2, T3, T4, T5, T6, T7> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, System.AsyncCallback callback, object object);
        void EndInvoke(System.IAsyncResult result);
    }

    class Action<T1, T2, T3, T4, T5, T6, T7, T8> : System.MulticastDelegate
    {
        Action(object object, nint method);
        void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, System.AsyncCallback callback, object object);
        void EndInvoke(System.IAsyncResult result);
    }

    class Func<T1, T2, T3, T4, T5, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, System.AsyncCallback callback, object object);
        TResult EndInvoke(System.IAsyncResult result);
    }

    class Func<T1, T2, T3, T4, T5, T6, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, System.AsyncCallback callback, object object);
        TResult EndInvoke(System.IAsyncResult result);
    }

    class Func<T1, T2, T3, T4, T5, T6, T7, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, System.AsyncCallback callback, object object);
        TResult EndInvoke(System.IAsyncResult result);
    }

    class Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> : System.MulticastDelegate
    {
        Func(object object, nint method);
        TResult Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
        System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, System.AsyncCallback callback, object object);
        TResult EndInvoke(System.IAsyncResult result);
    }

    class Comparison<T> : System.MulticastDelegate
    {
        Comparison(object object, nint method);
        int Invoke(T x, T y);
        System.IAsyncResult BeginInvoke(T x, T y, System.AsyncCallback callback, object object);
        int EndInvoke(System.IAsyncResult result);
    }

    class Converter<TInput, TOutput> : System.MulticastDelegate
    {
        Converter(object object, nint method);
        TOutput Invoke(TInput input);
        System.IAsyncResult BeginInvoke(TInput input, System.AsyncCallback callback, object object);
        TOutput EndInvoke(System.IAsyncResult result);
    }

    class Predicate<T> : System.MulticastDelegate
    {
        Predicate(object object, nint method);
        bool Invoke(T obj);
        System.IAsyncResult BeginInvoke(T obj, System.AsyncCallback callback, object object);
        bool EndInvoke(System.IAsyncResult result);
    }

    class Activator
    {
        static /*0x1c8878c*/ object CreateInstance(System.Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture);
        static /*0x1c88794*/ object CreateInstance(System.Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
        static /*0x1c889bc*/ object CreateInstance(System.Type type, object[] args);
        static /*0x1c889d4*/ object CreateInstance(System.Type type);
        static /*0x1c889dc*/ object CreateInstance(System.Type type, bool nonPublic);
        static T CreateInstance<T>();
    }

    class AppDomainUnloadedException : System.SystemException
    {
        /*0x1c8cf98*/ AppDomainUnloadedException();
        /*0x1c8d008*/ AppDomainUnloadedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ApplicationException : System.Exception
    {
        /*0x1c8d010*/ ApplicationException();
        /*0x1c8d0b4*/ ApplicationException(string message);
        /*0x1c8d13c*/ ApplicationException(string message, System.Exception innerException);
        /*0x1c8d1cc*/ ApplicationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ArgumentException : System.SystemException, System.Runtime.Serialization.ISerializable
    {
        /*0x88*/ string m_paramName;

        /*0x1c8d588*/ ArgumentException();
        /*0x1c84110*/ ArgumentException(string message);
        /*0x1c8d5f8*/ ArgumentException(string message, System.Exception innerException);
        /*0x1c8d62c*/ ArgumentException(string message, string paramName, System.Exception innerException);
        /*0x1c82894*/ ArgumentException(string message, string paramName);
        /*0x1c8d66c*/ ArgumentException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1c8d700*/ string get_Message();
        /*0x1c8d81c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ArgumentNullException : System.ArgumentException
    {
        /*0x1c8d944*/ ArgumentNullException();
        /*0x1c82470*/ ArgumentNullException(string paramName);
        /*0x1c82df8*/ ArgumentNullException(string paramName, string message);
        /*0x1c8d9c8*/ ArgumentNullException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ArgumentOutOfRangeException : System.ArgumentException, System.Runtime.Serialization.ISerializable
    {
        static /*0x0*/ string _rangeMessage;
        /*0x90*/ object m_actualValue;

        static /*0x1c8d9cc*/ string get_RangeMessage();
        /*0x1c8da68*/ ArgumentOutOfRangeException();
        /*0x1c8dabc*/ ArgumentOutOfRangeException(string paramName);
        /*0x1c82840*/ ArgumentOutOfRangeException(string paramName, string message);
        /*0x1c8db18*/ ArgumentOutOfRangeException(string paramName, object actualValue, string message);
        /*0x1c8ddcc*/ ArgumentOutOfRangeException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1c8db7c*/ string get_Message();
        /*0x1c8dca8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ArithmeticException : System.SystemException
    {
        /*0x1c8deb0*/ ArithmeticException();
        /*0x1c8df20*/ ArithmeticException(string message);
        /*0x1c8df54*/ ArithmeticException(string message, System.Exception innerException);
        /*0x1c8df88*/ ArithmeticException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct ArraySegment<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
    {
        /*0x0*/ T[] _array;
        /*0x0*/ int _offset;
        /*0x0*/ int _count;

        ArraySegment(T[] array);
        ArraySegment(T[] array, int offset, int count);
        T[] get_Array();
        int get_Offset();
        int get_Count();
        int GetHashCode();
        bool Equals(object obj);
        bool Equals(System.ArraySegment<T> obj);
        T System.Collections.Generic.IList<T>.get_Item(int index);
        void System.Collections.Generic.IList<T>.set_Item(int index, T value);
        int System.Collections.Generic.IList<T>.IndexOf(T item);
        void System.Collections.Generic.IList<T>.Insert(int index, T item);
        void System.Collections.Generic.IList<T>.RemoveAt(int index);
        T System.Collections.Generic.IReadOnlyList<T>.get_Item(int index);
        bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
        void System.Collections.Generic.ICollection<T>.Add(T item);
        void System.Collections.Generic.ICollection<T>.Clear();
        bool System.Collections.Generic.ICollection<T>.Contains(T item);
        void System.Collections.Generic.ICollection<T>.CopyTo(T[] array, int arrayIndex);
        bool System.Collections.Generic.ICollection<T>.Remove(T item);
        System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

        class ArraySegmentEnumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
        {
            /*0x0*/ T[] _array;
            /*0x0*/ int _start;
            /*0x0*/ int _end;
            /*0x0*/ int _current;

            ArraySegmentEnumerator(System.ArraySegment<T> arraySegment);
            bool MoveNext();
            T get_Current();
            object System.Collections.IEnumerator.get_Current();
            void System.Collections.IEnumerator.Reset();
            void Dispose();
        }
    }

    class ArrayTypeMismatchException : System.SystemException
    {
        /*0x1c91fb4*/ ArrayTypeMismatchException();
        /*0x1c93944*/ ArrayTypeMismatchException(string message);
        /*0x1c93978*/ ArrayTypeMismatchException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class AsyncCallback : System.MulticastDelegate
    {
        /*0x1c964e8*/ AsyncCallback(object object, nint method);
        /*0x1c96548*/ void Invoke(System.IAsyncResult ar);
        /*0x1c968c0*/ System.IAsyncResult BeginInvoke(System.IAsyncResult ar, System.AsyncCallback callback, object object);
        /*0x1c968e4*/ void EndInvoke(System.IAsyncResult result);
    }

    class Attribute
    {
        static /*0x1c4cf38*/ System.Attribute[] InternalGetCustomAttributes(System.Reflection.PropertyInfo element, System.Type type, bool inherit);
        static /*0x1c4cff0*/ System.Attribute[] InternalGetCustomAttributes(System.Reflection.EventInfo element, System.Type type, bool inherit);
        static /*0x1c4d0a8*/ System.Attribute[] InternalParamGetCustomAttributes(System.Reflection.ParameterInfo parameter, System.Type attributeType, bool inherit);
        static /*0x1c4d51c*/ bool InternalIsDefined(System.Reflection.PropertyInfo element, System.Type attributeType, bool inherit);
        static /*0x1c4d598*/ bool InternalIsDefined(System.Reflection.EventInfo element, System.Type attributeType, bool inherit);
        static /*0x1c4d614*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element, System.Type type);
        static /*0x1c4d61c*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element, System.Type type, bool inherit);
        static /*0x1c4d928*/ System.Attribute[] GetCustomAttributes(System.Reflection.MemberInfo element, bool inherit);
        static /*0x1c4db90*/ bool IsDefined(System.Reflection.MemberInfo element, System.Type attributeType);
        static /*0x1c4db98*/ bool IsDefined(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
        static /*0x1c4de8c*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType);
        static /*0x1c4de94*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
        static /*0x1c4df24*/ System.Attribute[] GetCustomAttributes(System.Reflection.ParameterInfo element, System.Type attributeType, bool inherit);
        static /*0x1c4e1f4*/ System.Attribute[] GetCustomAttributes(System.Reflection.ParameterInfo element, bool inherit);
        static /*0x1c4e3d0*/ System.Attribute[] GetCustomAttributes(System.Reflection.Module element, bool inherit);
        static /*0x1c4e540*/ System.Attribute[] GetCustomAttributes(System.Reflection.Module element, System.Type attributeType, bool inherit);
        static /*0x1c4e7b4*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element, System.Type attributeType);
        static /*0x1c4e7bc*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element, System.Type attributeType, bool inherit);
        static /*0x1c4ea04*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element);
        static /*0x1c4ea0c*/ System.Attribute[] GetCustomAttributes(System.Reflection.Assembly element, bool inherit);
        static /*0x1c4eb50*/ System.Attribute GetCustomAttribute(System.Reflection.Assembly element, System.Type attributeType);
        static /*0x1c4eb58*/ System.Attribute GetCustomAttribute(System.Reflection.Assembly element, System.Type attributeType, bool inherit);
        static /*0x1c4ee40*/ bool AreFieldValuesEqual(object thisValue, object thatValue);
        /*0x1c4ebe8*/ Attribute();
        /*0x1c4ebf0*/ bool Equals(object obj);
        /*0x1c4f01c*/ int GetHashCode();
        /*0x1c4f158*/ object get_TypeId();
        /*0x1c4f160*/ bool Match(object obj);
        /*0x1c4f16c*/ bool IsDefaultAttribute();
    }

    enum AttributeTargets
    {
        Assembly = 1,
        Module = 2,
        Class = 4,
        Struct = 8,
        Enum = 16,
        Constructor = 32,
        Method = 64,
        Property = 128,
        Field = 256,
        Event = 512,
        Interface = 1024,
        Parameter = 2048,
        Delegate = 4096,
        ReturnValue = 8192,
        GenericParameter = 16384,
        All = 32767,
    }

    class AttributeUsageAttribute : System.Attribute
    {
        static /*0x0*/ System.AttributeUsageAttribute Default;
        /*0x10*/ System.AttributeTargets m_attributeTarget;
        /*0x14*/ bool m_allowMultiple;
        /*0x15*/ bool m_inherited;

        static /*0x1c4f1d8*/ AttributeUsageAttribute();
        /*0x1c4f174*/ AttributeUsageAttribute(System.AttributeTargets validOn);
        /*0x1c4f1b0*/ bool get_AllowMultiple();
        /*0x1c4f1b8*/ void set_AllowMultiple(bool value);
        /*0x1c4f1c4*/ bool get_Inherited();
        /*0x1c4f1cc*/ void set_Inherited(bool value);
    }

    class BadImageFormatException : System.SystemException
    {
        /*0x88*/ string _fileName;
        /*0x90*/ string _fusionLog;

        /*0x1c4ff34*/ BadImageFormatException();
        /*0x1c4ffa4*/ BadImageFormatException(string message);
        /*0x1c4ffd8*/ BadImageFormatException(string message, System.Exception inner);
        /*0x1c5000c*/ BadImageFormatException(string message, string fileName);
        /*0x1c503e0*/ BadImageFormatException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1c5004c*/ string get_Message();
        /*0x1c50070*/ void SetMessageField();
        /*0x1c500f4*/ string ToString();
        /*0x1c50510*/ string get_FusionLog();
        /*0x1c50518*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class BitConverter
    {
        static /*0x0*/ bool IsLittleEndian;

        static /*0x1c59864*/ BitConverter();
        static /*0x1c58950*/ bool AmILittleEndian();
        static /*0x1c58958*/ byte[] GetBytes(bool value);
        static /*0x1c589cc*/ byte[] GetBytes(char value);
        static /*0x1c58a2c*/ byte[] GetBytes(short value);
        static /*0x1c58a9c*/ byte[] GetBytes(int value);
        static /*0x1c58b0c*/ byte[] GetBytes(long value);
        static /*0x1c58b7c*/ byte[] GetBytes(ushort value);
        static /*0x1c58bdc*/ byte[] GetBytes(uint value);
        static /*0x1c58c3c*/ byte[] GetBytes(ulong value);
        static /*0x1c58c9c*/ byte[] GetBytes(float value);
        static /*0x1c58cfc*/ byte[] GetBytes(double value);
        static /*0x1c58d5c*/ short ToInt16(byte[] value, int startIndex);
        static /*0x1c58e68*/ int ToInt32(byte[] value, int startIndex);
        static /*0x1c58f90*/ long ToInt64(byte[] value, int startIndex);
        static /*0x1c590e4*/ ushort ToUInt16(byte[] value, int startIndex);
        static /*0x1c591a4*/ uint ToUInt32(byte[] value, int startIndex);
        static /*0x1c59264*/ ulong ToUInt64(byte[] value, int startIndex);
        static /*0x1c59324*/ float ToSingle(byte[] value, int startIndex);
        static /*0x1c593ec*/ char GetHexValue(int i);
        static /*0x1c59404*/ string ToString(byte[] value, int startIndex, int length);
        static /*0x1c597a0*/ string ToString(byte[] value);
        static /*0x1c59854*/ long DoubleToInt64Bits(double value);
        static /*0x1c5985c*/ double Int64BitsToDouble(long value);
    }

    struct Boolean : System.IComparable, System.IConvertible, System.IComparable<bool>, System.IEquatable<bool>
    {
        static int True = 1;
        static int False = 0;
        static string TrueLiteral = "True";
        static string FalseLiteral = "False";
        static /*0x0*/ string TrueString;
        static /*0x8*/ string FalseString;
        /*0x10*/ bool m_value;

        static /*0x1c5ab9c*/ Boolean();
        static /*0x1c5a094*/ bool Parse(string value);
        static /*0x1c5a1b0*/ bool TryParse(string value, ref bool result);
        static /*0x1c5a2e8*/ string TrimWhiteSpaceAndNull(string value);
        /*0xad7260*/ int GetHashCode();
        /*0xad7270*/ string ToString();
        /*0xad7278*/ string ToString(System.IFormatProvider provider);
        /*0xad7280*/ bool Equals(object obj);
        /*0xad7288*/ bool Equals(bool obj);
        /*0xad729c*/ int CompareTo(object obj);
        /*0xad72a4*/ int CompareTo(bool value);
        /*0xad72c4*/ System.TypeCode GetTypeCode();
        /*0xad72cc*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xad72dc*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xad72e8*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xad72f0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xad72f8*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xad7300*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xad7308*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xad7310*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xad7318*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xad7320*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xad7328*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xad7330*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xad7338*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xad7340*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xad734c*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class Buffer
    {
        static /*0x1c56960*/ bool InternalBlockCopy(System.Array src, int srcOffsetBytes, System.Array dst, int dstOffsetBytes, int byteCount);
        static /*0x1c5b3bc*/ int IndexOfByte(byte* src, byte value, int index, int count);
        static /*0x1c5b4d8*/ int _ByteLength(System.Array array);
        static /*0x1c5b4dc*/ void ZeroMemory(byte* src, long len);
        static /*0x1c5b500*/ void Memcpy(byte[] dest, int destIndex, byte* src, int srcIndex, int len);
        static /*0x1c5b58c*/ void Memcpy(byte* pDest, int destIndex, byte[] src, int srcIndex, int len);
        static /*0x1c5b5bc*/ int ByteLength(System.Array array);
        static /*0x1c51540*/ void BlockCopy(System.Array src, int srcOffset, System.Array dst, int dstOffset, int count);
        static /*0x1c5b678*/ void MemoryCopy(void* source, void* destination, long destinationSizeInBytes, long sourceBytesToCopy);
        static /*0x1c5b7c0*/ void memcpy4(byte* dest, byte* src, int size);
        static /*0x1c5b84c*/ void memcpy2(byte* dest, byte* src, int size);
        static /*0x1c5b714*/ void memcpy1(byte* dest, byte* src, int size);
        static /*0x1c5b530*/ void Memcpy(byte* dest, byte* src, int size);
    }

    struct Byte : System.IComparable, System.IFormattable, System.IConvertible, System.IComparable<byte>, System.IEquatable<byte>
    {
        static byte MaxValue = 255;
        static byte MinValue = 0;
        /*0x10*/ byte m_value;

        static /*0x1c5ba40*/ byte Parse(string s, System.Globalization.NumberStyles style);
        static /*0x1c5bbc4*/ byte Parse(string s, System.IFormatProvider provider);
        static /*0x1c5bbf8*/ byte Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x1c5ba80*/ byte Parse(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x1c5bc48*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref byte result);
        static /*0x1c5bca0*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref byte result);
        /*0xad7354*/ int CompareTo(object value);
        /*0xad735c*/ int CompareTo(byte value);
        /*0xad7368*/ bool Equals(object obj);
        /*0xad7370*/ bool Equals(byte obj);
        /*0xad7380*/ int GetHashCode();
        /*0xad7388*/ string ToString();
        /*0xad73bc*/ string ToString(string format);
        /*0xad73f4*/ string ToString(System.IFormatProvider provider);
        /*0xad742c*/ string ToString(string format, System.IFormatProvider provider);
        /*0xad7468*/ System.TypeCode GetTypeCode();
        /*0xad7470*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xad7478*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xad7480*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xad7488*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xad7490*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xad7498*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xad74a0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xad74a8*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xad74b0*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xad74b8*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xad74c0*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xad74c8*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xad74d0*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xad74d8*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xad74e4*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class CannotUnloadAppDomainException : System.SystemException
    {
        /*0x160c340*/ CannotUnloadAppDomainException();
        /*0x160c3b0*/ CannotUnloadAppDomainException(string message);
        /*0x160c3e4*/ CannotUnloadAppDomainException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Char : System.IComparable, System.IConvertible, System.IComparable<char>, System.IEquatable<char>
    {
        static char MaxValue = 65535;
        static char MinValue = 0;
        static int UNICODE_PLANE00_END = 65535;
        static int UNICODE_PLANE01_START = 65536;
        static int UNICODE_PLANE16_END = 1114111;
        static int HIGH_SURROGATE_START = 55296;
        static int LOW_SURROGATE_END = 57343;
        static /*0x0*/ byte[] categoryForLatin1;
        /*0x10*/ char m_value;

        static /*0x1614410*/ Char();
        static /*0x1610774*/ bool IsLatin1(char ch);
        static /*0x1610784*/ bool IsAscii(char ch);
        static /*0x1610794*/ System.Globalization.UnicodeCategory GetLatin1UnicodeCategory(char ch);
        static /*0x1610a14*/ string ToString(char c);
        static /*0x1610a98*/ char Parse(string s);
        static /*0x1610b60*/ bool TryParse(string s, ref char result);
        static /*0x1610bac*/ bool IsDigit(char c);
        static /*0x1610cc4*/ bool CheckLetter(System.Globalization.UnicodeCategory uc);
        static /*0x1610cd0*/ bool IsLetter(char c);
        static /*0x1610df4*/ bool IsWhiteSpaceLatin1(char c);
        static /*0x1610e3c*/ bool IsWhiteSpace(char c);
        static /*0x1610f6c*/ bool IsUpper(char c);
        static /*0x161106c*/ bool IsLower(char c);
        static /*0x161116c*/ bool CheckLetterOrDigit(System.Globalization.UnicodeCategory uc);
        static /*0x1611188*/ bool IsLetterOrDigit(char c);
        static /*0x1611288*/ char ToUpper(char c, System.Globalization.CultureInfo culture);
        static /*0x1611318*/ char ToUpper(char c);
        static /*0x16113b8*/ char ToUpperInvariant(char c);
        static /*0x1611458*/ char ToLower(char c, System.Globalization.CultureInfo culture);
        static /*0x16114e8*/ char ToLower(char c);
        static /*0x1611588*/ char ToLowerInvariant(char c);
        static /*0x1613364*/ bool IsLetterOrDigit(string s, int index);
        static /*0x1613614*/ bool CheckNumber(System.Globalization.UnicodeCategory uc);
        static /*0x1613624*/ bool IsNumber(char c);
        static /*0x1613748*/ bool IsNumber(string s, int index);
        static /*0x1613920*/ bool CheckSeparator(System.Globalization.UnicodeCategory uc);
        static /*0x1613930*/ bool IsSeparatorLatin1(char c);
        static /*0x1613944*/ bool IsSeparator(char c);
        static /*0x1613a38*/ bool IsSurrogate(char c);
        static /*0x1613a48*/ bool IsSurrogate(string s, int index);
        static /*0x1613b60*/ bool IsWhiteSpace(string s, int index);
        static /*0x1613dd8*/ System.Globalization.UnicodeCategory GetUnicodeCategory(char c);
        static /*0x1613f04*/ System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int index);
        static /*0x1614164*/ bool IsHighSurrogate(char c);
        static /*0x1614174*/ bool IsHighSurrogate(string s, int index);
        static /*0x1614290*/ bool IsLowSurrogate(char c);
        static /*0x16142a0*/ bool IsSurrogatePair(char highSurrogate, char lowSurrogate);
        static /*0x16142c4*/ int ConvertToUtf32(char highSurrogate, char lowSurrogate);
        /*0xab4c78*/ int GetHashCode();
        /*0xab4c84*/ bool Equals(object obj);
        /*0xab4c8c*/ bool Equals(char obj);
        /*0xab4c9c*/ int CompareTo(object value);
        /*0xab4ca4*/ int CompareTo(char value);
        /*0xab4cb0*/ string ToString();
        /*0xab4cb8*/ string ToString(System.IFormatProvider provider);
        /*0xab4cc0*/ System.TypeCode GetTypeCode();
        /*0xab4cc8*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xab4cd4*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xab4cdc*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xab4ce4*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xab4cec*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xab4cf4*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xab4cfc*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xab4d04*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xab4d0c*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xab4d14*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xab4d1c*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xab4d28*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xab4d34*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xab4d40*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xab4d4c*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class CharEnumerator : System.Collections.IEnumerator, System.ICloneable, System.Collections.Generic.IEnumerator<char>, System.IDisposable
    {
        /*0x10*/ string str;
        /*0x18*/ int index;
        /*0x1c*/ char currentElement;

        /*0x16144a0*/ CharEnumerator(string str);
        /*0x16146e0*/ CharEnumerator();
        /*0x16144d4*/ object Clone();
        /*0x16144dc*/ bool MoveNext();
        /*0x161453c*/ void Dispose();
        /*0x1614554*/ object System.Collections.IEnumerator.get_Current();
        /*0x1614634*/ char get_Current();
        /*0x16146d0*/ void Reset();
    }

    class CLSCompliantAttribute : System.Attribute
    {
        /*0x10*/ bool m_compliant;

        /*0x1c5ff80*/ CLSCompliantAttribute(bool isCompliant);
    }

    class ConsoleCancelEventHandler : System.MulticastDelegate
    {
        /*0x16213a4*/ ConsoleCancelEventHandler(object object, nint method);
        /*0x1620fcc*/ void Invoke(object sender, System.ConsoleCancelEventArgs e);
        /*0x1621404*/ System.IAsyncResult BeginInvoke(object sender, System.ConsoleCancelEventArgs e, System.AsyncCallback callback, object object);
        /*0x1621434*/ void EndInvoke(System.IAsyncResult result);
    }

    class ConsoleCancelEventArgs : System.EventArgs
    {
        /*0x10*/ System.ConsoleSpecialKey _type;
        /*0x14*/ bool _cancel;

        /*0x1620f50*/ ConsoleCancelEventArgs(System.ConsoleSpecialKey type);
        /*0x1621368*/ ConsoleCancelEventArgs();
        /*0x1621360*/ bool get_Cancel();
    }

    enum ConsoleColor
    {
        Black = 0,
        DarkBlue = 1,
        DarkGreen = 2,
        DarkCyan = 3,
        DarkRed = 4,
        DarkMagenta = 5,
        DarkYellow = 6,
        Gray = 7,
        DarkGray = 8,
        Blue = 9,
        Green = 10,
        Cyan = 11,
        Red = 12,
        Magenta = 13,
        Yellow = 14,
        White = 15,
    }

    enum ConsoleKey
    {
        Backspace = 8,
        Tab = 9,
        Clear = 12,
        Enter = 13,
        Pause = 19,
        Escape = 27,
        Spacebar = 32,
        PageUp = 33,
        PageDown = 34,
        End = 35,
        Home = 36,
        LeftArrow = 37,
        UpArrow = 38,
        RightArrow = 39,
        DownArrow = 40,
        Select = 41,
        Print = 42,
        Execute = 43,
        PrintScreen = 44,
        Insert = 45,
        Delete = 46,
        Help = 47,
        D0 = 48,
        D1 = 49,
        D2 = 50,
        D3 = 51,
        D4 = 52,
        D5 = 53,
        D6 = 54,
        D7 = 55,
        D8 = 56,
        D9 = 57,
        A = 65,
        B = 66,
        C = 67,
        D = 68,
        E = 69,
        F = 70,
        G = 71,
        H = 72,
        I = 73,
        J = 74,
        K = 75,
        L = 76,
        M = 77,
        N = 78,
        O = 79,
        P = 80,
        Q = 81,
        R = 82,
        S = 83,
        T = 84,
        U = 85,
        V = 86,
        W = 87,
        X = 88,
        Y = 89,
        Z = 90,
        LeftWindows = 91,
        RightWindows = 92,
        Applications = 93,
        Sleep = 95,
        NumPad0 = 96,
        NumPad1 = 97,
        NumPad2 = 98,
        NumPad3 = 99,
        NumPad4 = 100,
        NumPad5 = 101,
        NumPad6 = 102,
        NumPad7 = 103,
        NumPad8 = 104,
        NumPad9 = 105,
        Multiply = 106,
        Add = 107,
        Separator = 108,
        Subtract = 109,
        Decimal = 110,
        Divide = 111,
        F1 = 112,
        F2 = 113,
        F3 = 114,
        F4 = 115,
        F5 = 116,
        F6 = 117,
        F7 = 118,
        F8 = 119,
        F9 = 120,
        F10 = 121,
        F11 = 122,
        F12 = 123,
        F13 = 124,
        F14 = 125,
        F15 = 126,
        F16 = 127,
        F17 = 128,
        F18 = 129,
        F19 = 130,
        F20 = 131,
        F21 = 132,
        F22 = 133,
        F23 = 134,
        F24 = 135,
        BrowserBack = 166,
        BrowserForward = 167,
        BrowserRefresh = 168,
        BrowserStop = 169,
        BrowserSearch = 170,
        BrowserFavorites = 171,
        BrowserHome = 172,
        VolumeMute = 173,
        VolumeDown = 174,
        VolumeUp = 175,
        MediaNext = 176,
        MediaPrevious = 177,
        MediaStop = 178,
        MediaPlay = 179,
        LaunchMail = 180,
        LaunchMediaSelect = 181,
        LaunchApp1 = 182,
        LaunchApp2 = 183,
        Oem1 = 186,
        OemPlus = 187,
        OemComma = 188,
        OemMinus = 189,
        OemPeriod = 190,
        Oem2 = 191,
        Oem3 = 192,
        Oem4 = 219,
        Oem5 = 220,
        Oem6 = 221,
        Oem7 = 222,
        Oem8 = 223,
        Oem102 = 226,
        Process = 229,
        Packet = 231,
        Attention = 246,
        CrSel = 247,
        ExSel = 248,
        EraseEndOfFile = 249,
        Play = 250,
        Zoom = 251,
        NoName = 252,
        Pa1 = 253,
        OemClear = 254,
    }

    struct ConsoleKeyInfo
    {
        /*0x10*/ char _keyChar;
        /*0x14*/ System.ConsoleKey _key;
        /*0x18*/ System.ConsoleModifiers _mods;

        /*0xab4ebc*/ ConsoleKeyInfo(char keyChar, System.ConsoleKey key, bool shift, bool alt, bool control);
        /*0xab4ed0*/ char get_KeyChar();
        /*0xab4ed8*/ System.ConsoleKey get_Key();
        /*0xab4ee0*/ bool Equals(object value);
        /*0xab4ee8*/ bool Equals(System.ConsoleKeyInfo obj);
        /*0xab4f1c*/ int GetHashCode();
    }

    enum ConsoleModifiers
    {
        Alt = 1,
        Shift = 2,
        Control = 4,
    }

    enum ConsoleSpecialKey
    {
        ControlC = 0,
        ControlBreak = 1,
    }

    class ContextBoundObject : System.MarshalByRefObject
    {
        /*0x1624dac*/ ContextBoundObject();
    }

    class ContextStaticAttribute : System.Attribute
    {
        /*0x16254e0*/ ContextStaticAttribute();
    }

    enum Base64FormattingOptions
    {
        None = 0,
        InsertLineBreaks = 1,
    }

    class Convert
    {
        static /*0x0*/ System.RuntimeType[] ConvertTypes;
        static /*0x8*/ System.RuntimeType EnumType;
        static /*0x10*/ char[] base64Table;
        static /*0x18*/ object DBNull;

        static /*0x162ce6c*/ Convert();
        static /*0x1625808*/ System.TypeCode GetTypeCode(object value);
        static /*0x16258d8*/ object ChangeType(object value, System.TypeCode typeCode, System.IFormatProvider provider);
        static /*0x161200c*/ object DefaultToType(System.IConvertible value, System.Type targetType, System.IFormatProvider provider);
        static /*0x16261fc*/ object ChangeType(object value, System.Type conversionType);
        static /*0x1626290*/ object ChangeType(object value, System.Type conversionType, System.IFormatProvider provider);
        static /*0x162734c*/ bool ToBoolean(object value);
        static /*0x1627458*/ bool ToBoolean(object value, System.IFormatProvider provider);
        static /*0x1627568*/ bool ToBoolean(sbyte value);
        static /*0x1627574*/ bool ToBoolean(byte value);
        static /*0x1627580*/ bool ToBoolean(short value);
        static /*0x162758c*/ bool ToBoolean(ushort value);
        static /*0x1627598*/ bool ToBoolean(int value);
        static /*0x16275a4*/ bool ToBoolean(uint value);
        static /*0x16275b0*/ bool ToBoolean(long value);
        static /*0x16275bc*/ bool ToBoolean(ulong value);
        static /*0x16275c8*/ bool ToBoolean(string value);
        static /*0x1627640*/ bool ToBoolean(string value, System.IFormatProvider provider);
        static /*0x16276b8*/ bool ToBoolean(float value);
        static /*0x16276c4*/ bool ToBoolean(double value);
        static /*0x16276d0*/ bool ToBoolean(decimal value);
        static /*0x1627750*/ char ToChar(object value, System.IFormatProvider provider);
        static /*0x1627860*/ char ToChar(sbyte value);
        static /*0x16278c8*/ char ToChar(byte value);
        static /*0x16278d0*/ char ToChar(short value);
        static /*0x1627938*/ char ToChar(ushort value);
        static /*0x162793c*/ char ToChar(int value);
        static /*0x16279a4*/ char ToChar(uint value);
        static /*0x1627a0c*/ char ToChar(long value);
        static /*0x1627a74*/ char ToChar(ulong value);
        static /*0x1627adc*/ char ToChar(string value, System.IFormatProvider provider);
        static /*0x1627ba4*/ sbyte ToSByte(object value, System.IFormatProvider provider);
        static /*0x1627cb4*/ sbyte ToSByte(bool value);
        static /*0x1611788*/ sbyte ToSByte(char value);
        static /*0x1627cbc*/ sbyte ToSByte(byte value);
        static /*0x1627d24*/ sbyte ToSByte(short value);
        static /*0x1627d94*/ sbyte ToSByte(ushort value);
        static /*0x1627e00*/ sbyte ToSByte(int value);
        static /*0x1627e6c*/ sbyte ToSByte(uint value);
        static /*0x1627ed4*/ sbyte ToSByte(long value);
        static /*0x1627f40*/ sbyte ToSByte(ulong value);
        static /*0x1627fa8*/ sbyte ToSByte(float value);
        static /*0x1628010*/ sbyte ToSByte(double value);
        static /*0x1628180*/ sbyte ToSByte(decimal value);
        static /*0x1628200*/ sbyte ToSByte(string value, System.IFormatProvider provider);
        static /*0x1628210*/ byte ToByte(object value, System.IFormatProvider provider);
        static /*0x1628320*/ byte ToByte(bool value);
        static /*0x1611858*/ byte ToByte(char value);
        static /*0x1628328*/ byte ToByte(sbyte value);
        static /*0x1628390*/ byte ToByte(short value);
        static /*0x16283fc*/ byte ToByte(ushort value);
        static /*0x1628468*/ byte ToByte(int value);
        static /*0x16284d0*/ byte ToByte(uint value);
        static /*0x1628538*/ byte ToByte(long value);
        static /*0x16285a0*/ byte ToByte(ulong value);
        static /*0x1628608*/ byte ToByte(float value);
        static /*0x1628670*/ byte ToByte(double value);
        static /*0x16286dc*/ byte ToByte(decimal value);
        static /*0x162875c*/ byte ToByte(string value);
        static /*0x16287e0*/ byte ToByte(string value, System.IFormatProvider provider);
        static /*0x16287f8*/ short ToInt16(object value, System.IFormatProvider provider);
        static /*0x1628908*/ short ToInt16(bool value);
        static /*0x1611928*/ short ToInt16(char value);
        static /*0x1628910*/ short ToInt16(sbyte value);
        static /*0x1628918*/ short ToInt16(byte value);
        static /*0x1628920*/ short ToInt16(ushort value);
        static /*0x1628988*/ short ToInt16(int value);
        static /*0x16289f4*/ short ToInt16(uint value);
        static /*0x1628a5c*/ short ToInt16(long value);
        static /*0x1628ac8*/ short ToInt16(ulong value);
        static /*0x1628b30*/ short ToInt16(float value);
        static /*0x1628b98*/ short ToInt16(double value);
        static /*0x1628c04*/ short ToInt16(decimal value);
        static /*0x1628c84*/ short ToInt16(string value, System.IFormatProvider provider);
        static /*0x1628c9c*/ ushort ToUInt16(object value, System.IFormatProvider provider);
        static /*0x1628dac*/ ushort ToUInt16(bool value);
        static /*0x16119f4*/ ushort ToUInt16(char value);
        static /*0x1628db4*/ ushort ToUInt16(sbyte value);
        static /*0x1628e1c*/ ushort ToUInt16(byte value);
        static /*0x1628e24*/ ushort ToUInt16(short value);
        static /*0x1628e8c*/ ushort ToUInt16(int value);
        static /*0x1628ef4*/ ushort ToUInt16(uint value);
        static /*0x1628f5c*/ ushort ToUInt16(long value);
        static /*0x1628fc4*/ ushort ToUInt16(ulong value);
        static /*0x162902c*/ ushort ToUInt16(float value);
        static /*0x1629094*/ ushort ToUInt16(double value);
        static /*0x1629100*/ ushort ToUInt16(decimal value);
        static /*0x1629180*/ ushort ToUInt16(string value, System.IFormatProvider provider);
        static /*0x1629198*/ int ToInt32(object value);
        static /*0x16292a4*/ int ToInt32(object value, System.IFormatProvider provider);
        static /*0x16293b4*/ int ToInt32(bool value);
        static /*0x1611a5c*/ int ToInt32(char value);
        static /*0x16293bc*/ int ToInt32(byte value);
        static /*0x16293c4*/ int ToInt32(short value);
        static /*0x16293cc*/ int ToInt32(ushort value);
        static /*0x16293d4*/ int ToInt32(uint value);
        static /*0x1629438*/ int ToInt32(long value);
        static /*0x16294a4*/ int ToInt32(ulong value);
        static /*0x162950c*/ int ToInt32(float value);
        static /*0x162807c*/ int ToInt32(double value);
        static /*0x1629574*/ int ToInt32(decimal value);
        static /*0x16295e8*/ int ToInt32(string value);
        static /*0x162966c*/ int ToInt32(string value, System.IFormatProvider provider);
        static /*0x1629684*/ uint ToUInt32(object value);
        static /*0x1629790*/ uint ToUInt32(object value, System.IFormatProvider provider);
        static /*0x16298a0*/ uint ToUInt32(bool value);
        static /*0x1611ac8*/ uint ToUInt32(char value);
        static /*0x16298a8*/ uint ToUInt32(sbyte value);
        static /*0x1629910*/ uint ToUInt32(byte value);
        static /*0x1629918*/ uint ToUInt32(short value);
        static /*0x1629980*/ uint ToUInt32(ushort value);
        static /*0x1629988*/ uint ToUInt32(int value);
        static /*0x16299ec*/ uint ToUInt32(long value);
        static /*0x1629a54*/ uint ToUInt32(ulong value);
        static /*0x1629abc*/ uint ToUInt32(float value);
        static /*0x1629b24*/ uint ToUInt32(double value);
        static /*0x1629bd4*/ uint ToUInt32(decimal value);
        static /*0x1629c54*/ uint ToUInt32(string value, System.IFormatProvider provider);
        static /*0x1629c6c*/ long ToInt64(object value, System.IFormatProvider provider);
        static /*0x1629d7c*/ long ToInt64(bool value);
        static /*0x1611b34*/ long ToInt64(char value);
        static /*0x1629d84*/ long ToInt64(sbyte value);
        static /*0x1629d8c*/ long ToInt64(byte value);
        static /*0x1629d94*/ long ToInt64(short value);
        static /*0x1629d9c*/ long ToInt64(ushort value);
        static /*0x1629da4*/ long ToInt64(int value);
        static /*0x1629dac*/ long ToInt64(uint value);
        static /*0x1629db4*/ long ToInt64(ulong value);
        static /*0x1629e18*/ long ToInt64(long value);
        static /*0x1629e1c*/ long ToInt64(float value);
        static /*0x1629e84*/ long ToInt64(double value);
        static /*0x1629fa0*/ long ToInt64(decimal value);
        static /*0x162a020*/ long ToInt64(string value);
        static /*0x162a0a4*/ long ToInt64(string value, System.IFormatProvider provider);
        static /*0x162a0bc*/ ulong ToUInt64(object value, System.IFormatProvider provider);
        static /*0x162a1cc*/ ulong ToUInt64(bool value);
        static /*0x1611ba0*/ ulong ToUInt64(char value);
        static /*0x162a1d4*/ ulong ToUInt64(sbyte value);
        static /*0x162a240*/ ulong ToUInt64(byte value);
        static /*0x162a248*/ ulong ToUInt64(short value);
        static /*0x162a2b4*/ ulong ToUInt64(ushort value);
        static /*0x162a2bc*/ ulong ToUInt64(int value);
        static /*0x162a324*/ ulong ToUInt64(uint value);
        static /*0x162a32c*/ ulong ToUInt64(long value);
        static /*0x162a390*/ ulong ToUInt64(float value);
        static /*0x162a3f8*/ ulong ToUInt64(double value);
        static /*0x162a500*/ ulong ToUInt64(decimal value);
        static /*0x162a580*/ ulong ToUInt64(string value, System.IFormatProvider provider);
        static /*0x162a598*/ float ToSingle(object value, System.IFormatProvider provider);
        static /*0x162a6a8*/ float ToSingle(sbyte value);
        static /*0x162a6b4*/ float ToSingle(byte value);
        static /*0x162a6c0*/ float ToSingle(short value);
        static /*0x162a6cc*/ float ToSingle(ushort value);
        static /*0x162a6d8*/ float ToSingle(int value);
        static /*0x162a6e0*/ float ToSingle(uint value);
        static /*0x162a6ec*/ float ToSingle(long value);
        static /*0x162a6f4*/ float ToSingle(ulong value);
        static /*0x162a700*/ float ToSingle(double value);
        static /*0x162a708*/ float ToSingle(decimal value);
        static /*0x162a77c*/ float ToSingle(string value, System.IFormatProvider provider);
        static /*0x162a798*/ float ToSingle(bool value);
        static /*0x162a7ac*/ double ToDouble(object value);
        static /*0x162a8b8*/ double ToDouble(object value, System.IFormatProvider provider);
        static /*0x162a9c8*/ double ToDouble(sbyte value);
        static /*0x162a9d4*/ double ToDouble(byte value);
        static /*0x162a9e0*/ double ToDouble(short value);
        static /*0x162a9ec*/ double ToDouble(ushort value);
        static /*0x162a9f8*/ double ToDouble(int value);
        static /*0x162aa00*/ double ToDouble(uint value);
        static /*0x162aa08*/ double ToDouble(long value);
        static /*0x162aa10*/ double ToDouble(ulong value);
        static /*0x162aa18*/ double ToDouble(float value);
        static /*0x162aa20*/ double ToDouble(decimal value);
        static /*0x162aa94*/ double ToDouble(string value, System.IFormatProvider provider);
        static /*0x162ab24*/ double ToDouble(bool value);
        static /*0x162ab38*/ decimal ToDecimal(object value);
        static /*0x162ac70*/ decimal ToDecimal(object value, System.IFormatProvider provider);
        static /*0x162adac*/ decimal ToDecimal(sbyte value);
        static /*0x162ae10*/ decimal ToDecimal(byte value);
        static /*0x162ae74*/ decimal ToDecimal(short value);
        static /*0x162aed8*/ decimal ToDecimal(ushort value);
        static /*0x162af3c*/ decimal ToDecimal(int value);
        static /*0x162afa0*/ decimal ToDecimal(uint value);
        static /*0x162b004*/ decimal ToDecimal(long value);
        static /*0x162b068*/ decimal ToDecimal(ulong value);
        static /*0x162b0cc*/ decimal ToDecimal(float value);
        static /*0x162b138*/ decimal ToDecimal(double value);
        static /*0x162b1a4*/ decimal ToDecimal(string value, System.IFormatProvider provider);
        static /*0x162b244*/ decimal ToDecimal(decimal value);
        static /*0x162b248*/ decimal ToDecimal(bool value);
        static /*0x162b2b0*/ System.DateTime ToDateTime(object value, System.IFormatProvider provider);
        static /*0x162b3f4*/ System.DateTime ToDateTime(string value);
        static /*0x162b4c8*/ System.DateTime ToDateTime(string value, System.IFormatProvider provider);
        static /*0x162b564*/ string ToString(object value, System.IFormatProvider provider);
        static /*0x162b718*/ string ToString(char value, System.IFormatProvider provider);
        static /*0x162b73c*/ string ToString(int value);
        static /*0x162b7b0*/ string ToString(int value, System.IFormatProvider provider);
        static /*0x162b7d8*/ byte ToByte(string value, int fromBase);
        static /*0x162b8b4*/ sbyte ToSByte(string value, int fromBase);
        static /*0x162b9b0*/ short ToInt16(string value, int fromBase);
        static /*0x162baac*/ ushort ToUInt16(string value, int fromBase);
        static /*0x162bb88*/ int ToInt32(string value, int fromBase);
        static /*0x162bc14*/ uint ToUInt32(string value, int fromBase);
        static /*0x162bca0*/ long ToInt64(string value, int fromBase);
        static /*0x162bd2c*/ ulong ToUInt64(string value, int fromBase);
        static /*0x162bdb8*/ string ToString(int value, int toBase);
        static /*0x162be4c*/ string ToBase64String(byte[] inArray);
        static /*0x1617948*/ string ToBase64String(byte[] inArray, int offset, int length);
        static /*0x162bf04*/ string ToBase64String(byte[] inArray, int offset, int length, System.Base64FormattingOptions options);
        static /*0x162c4d8*/ int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut);
        static /*0x162c56c*/ int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut, System.Base64FormattingOptions options);
        static /*0x162c28c*/ int ConvertToBase64Array(char* outChars, byte* inData, int offset, int length, bool insertLineBreaks);
        static /*0x162c1d4*/ int ToBase64_CalculateAndValidateOutputLength(int inputLength, bool insertLineBreaks);
        static /*0x16179c4*/ byte[] FromBase64String(string s);
        static /*0x162c9f8*/ byte[] FromBase64CharArray(char[] inArray, int offset, int length);
        static /*0x162c8b8*/ byte[] FromBase64CharPtr(char* inputPtr, int inputLength);
        static /*0x162cc4c*/ int FromBase64_Decode(char* startInputPtr, int inputLength, byte* startDestPtr, int destLength);
        static /*0x162cb84*/ int FromBase64_ComputeResultLength(char* inputPtr, int inputLength);
    }

    struct DateTime : System.IComparable, System.IFormattable, System.IConvertible, System.Runtime.Serialization.ISerializable, System.IComparable<System.DateTime>, System.IEquatable<System.DateTime>
    {
        static long TicksPerMillisecond = 10000;
        static long TicksPerSecond = 10000000;
        static long TicksPerMinute = 600000000;
        static long TicksPerHour = 36000000000;
        static long TicksPerDay = 864000000000;
        static int MillisPerSecond = 1000;
        static int MillisPerMinute = 60000;
        static int MillisPerHour = 3600000;
        static int MillisPerDay = 86400000;
        static int DaysPerYear = 365;
        static int DaysPer4Years = 1461;
        static int DaysPer100Years = 36524;
        static int DaysPer400Years = 146097;
        static int DaysTo1601 = 584388;
        static int DaysTo1899 = 693593;
        static int DaysTo1970 = 719162;
        static int DaysTo10000 = 3652059;
        static long MinTicks = 0;
        static long MaxTicks = 3155378975999999999;
        static long MaxMillis = 315537897600000;
        static long FileTimeOffset = 504911232000000000;
        static long DoubleDateOffset = 599264352000000000;
        static long OADateMinAsTicks = 31241376000000000;
        static double OADateMinAsDouble = -657435;
        static double OADateMaxAsDouble = 2958466;
        static int DatePartYear = 0;
        static int DatePartDayOfYear = 1;
        static int DatePartMonth = 2;
        static int DatePartDay = 3;
        static ulong TicksMask = 4611686018427387903;
        static ulong FlagsMask = 13835058055282163712;
        static ulong LocalMask = 9223372036854775808;
        static long TicksCeiling = 4611686018427387904;
        static ulong KindUnspecified = 0;
        static ulong KindUtc = 4611686018427387904;
        static ulong KindLocal = 9223372036854775808;
        static ulong KindLocalAmbiguousDst = 13835058055282163712;
        static int KindShift = 62;
        static string TicksField = "ticks";
        static string DateDataField = "dateData";
        static /*0x0*/ int[] DaysToMonth365;
        static /*0x8*/ int[] DaysToMonth366;
        static /*0x10*/ System.DateTime MinValue;
        static /*0x18*/ System.DateTime MaxValue;
        /*0x10*/ ulong dateData;

        static /*0x19ffa18*/ DateTime();
        static /*0x19fc8ac*/ int Compare(System.DateTime t1, System.DateTime t2);
        static /*0x19fb158*/ long DateToTicks(int year, int month, int day);
        static /*0x19fb3f4*/ long TimeToTicks(int hour, int minute, int second);
        static /*0x19fc6ac*/ int DaysInMonth(int year, int month);
        static /*0x19fcb3c*/ System.DateTime FromBinary(long dateData);
        static /*0x19fcd48*/ System.DateTime FromBinaryRaw(long dateData);
        static /*0x19fcdd8*/ System.DateTime FromFileTime(long fileTime);
        static /*0x19fce58*/ System.DateTime FromFileTimeUtc(long fileTime);
        static /*0x19fcff8*/ System.DateTime SpecifyKind(System.DateTime value, System.DateTimeKind kind);
        static /*0x19fd230*/ System.DateTime get_Now();
        static /*0x19fd304*/ System.DateTime get_UtcNow();
        static /*0x19fd374*/ long GetSystemTimeAsFileTime();
        static /*0x19fc9d0*/ bool IsLeapYear(int year);
        static /*0x19fd3f0*/ System.DateTime Parse(string s);
        static /*0x19fd698*/ System.DateTime Parse(string s, System.IFormatProvider provider);
        static /*0x19fd920*/ System.DateTime Parse(string s, System.IFormatProvider provider, System.Globalization.DateTimeStyles styles);
        static /*0x19fdaa4*/ System.DateTime ParseExact(string s, string format, System.IFormatProvider provider);
        static /*0x19fdc74*/ System.DateTime ParseExact(string s, string format, System.IFormatProvider provider, System.Globalization.DateTimeStyles style);
        static /*0x19fdd58*/ System.DateTime ParseExact(string s, string[] formats, System.IFormatProvider provider, System.Globalization.DateTimeStyles style);
        static /*0x19fe4a0*/ bool TryParse(string s, ref System.DateTime result);
        static /*0x19fe664*/ bool TryParse(string s, System.IFormatProvider provider, System.Globalization.DateTimeStyles styles, ref System.DateTime result);
        static /*0x19fe748*/ bool TryParseExact(string s, string format, System.IFormatProvider provider, System.Globalization.DateTimeStyles style, ref System.DateTime result);
        static /*0x19fe950*/ System.DateTime op_Addition(System.DateTime d, System.TimeSpan t);
        static /*0x19fe9fc*/ System.DateTime op_Subtraction(System.DateTime d, System.TimeSpan t);
        static /*0x19feaa0*/ System.TimeSpan op_Subtraction(System.DateTime d1, System.DateTime d2);
        static /*0x19feab0*/ bool op_Equality(System.DateTime d1, System.DateTime d2);
        static /*0x19feac0*/ bool op_Inequality(System.DateTime d1, System.DateTime d2);
        static /*0x19fead0*/ bool op_LessThan(System.DateTime t1, System.DateTime t2);
        static /*0x19feae4*/ bool op_LessThanOrEqual(System.DateTime t1, System.DateTime t2);
        static /*0x19feaf8*/ bool op_GreaterThan(System.DateTime t1, System.DateTime t2);
        static /*0x19feb0c*/ bool op_GreaterThanOrEqual(System.DateTime t1, System.DateTime t2);
        static /*0x19ff7e4*/ bool TryCreate(int year, int month, int day, int hour, int minute, int second, int millisecond, ref System.DateTime result);
        /*0xacee28*/ DateTime(long ticks);
        /*0xacee30*/ DateTime(ulong dateData);
        /*0xacee38*/ DateTime(long ticks, System.DateTimeKind kind);
        /*0xacee40*/ DateTime(long ticks, System.DateTimeKind kind, bool isAmbiguousDst);
        /*0xacee4c*/ DateTime(int year, int month, int day);
        /*0xacee54*/ DateTime(int year, int month, int day, int hour, int minute, int second);
        /*0xacee5c*/ DateTime(int year, int month, int day, int hour, int minute, int second, System.DateTimeKind kind);
        /*0xacee64*/ DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);
        /*0xacee6c*/ DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System.DateTimeKind kind);
        /*0xacee7c*/ DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);
        /*0xacee8c*/ DateTime(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xacee94*/ long get_InternalTicks();
        /*0xaceea0*/ ulong get_InternalKind();
        /*0xaceeac*/ System.DateTime Add(System.TimeSpan value);
        /*0xaceeb4*/ System.DateTime Add(double value, int scale);
        /*0xaceebc*/ System.DateTime AddDays(double value);
        /*0xaceecc*/ System.DateTime AddHours(double value);
        /*0xaceedc*/ System.DateTime AddMilliseconds(double value);
        /*0xaceee8*/ System.DateTime AddMinutes(double value);
        /*0xaceef4*/ System.DateTime AddMonths(int months);
        /*0xaceefc*/ System.DateTime AddSeconds(double value);
        /*0xacef08*/ System.DateTime AddTicks(long value);
        /*0xacef10*/ System.DateTime AddYears(int value);
        /*0xacef18*/ int CompareTo(object value);
        /*0xacef20*/ int CompareTo(System.DateTime value);
        /*0xacef3c*/ bool Equals(object value);
        /*0xacef44*/ bool Equals(System.DateTime value);
        /*0xacef58*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xacef60*/ long ToBinary();
        /*0xacef68*/ long ToBinaryRaw();
        /*0xacef70*/ System.DateTime get_Date();
        /*0xacefac*/ int GetDatePart(int part);
        /*0xacefb4*/ int get_Day();
        /*0xacefc0*/ System.DayOfWeek get_DayOfWeek();
        /*0xacf00c*/ int GetHashCode();
        /*0xacf01c*/ int get_Hour();
        /*0xacf058*/ bool IsAmbiguousDaylightSavingTime();
        /*0xacf06c*/ System.DateTimeKind get_Kind();
        /*0xacf090*/ int get_Millisecond();
        /*0xacf0d8*/ int get_Minute();
        /*0xacf114*/ int get_Month();
        /*0xacf120*/ int get_Second();
        /*0xacf15c*/ long get_Ticks();
        /*0xacf168*/ System.TimeSpan get_TimeOfDay();
        /*0xacf19c*/ int get_Year();
        /*0xacf1a8*/ System.TimeSpan Subtract(System.DateTime value);
        /*0xacf1bc*/ System.DateTime ToLocalTime();
        /*0xacf1c8*/ System.DateTime ToLocalTime(bool throwOnOverflow);
        /*0xacf1d4*/ string ToShortDateString();
        /*0xacf1dc*/ string ToString();
        /*0xacf1e4*/ string ToString(string format);
        /*0xacf1ec*/ string ToString(System.IFormatProvider provider);
        /*0xacf1f4*/ string ToString(string format, System.IFormatProvider provider);
        /*0xacf1fc*/ System.DateTime ToUniversalTime();
        /*0xacf20c*/ System.TypeCode GetTypeCode();
        /*0xacf214*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xacf220*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xacf22c*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xacf238*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xacf244*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xacf250*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xacf25c*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xacf268*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xacf274*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xacf280*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xacf28c*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xacf298*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xacf2a4*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xacf2b0*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xacf2b8*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    enum DateTimeKind
    {
        Unspecified = 0,
        Utc = 1,
        Local = 2,
    }

    struct DateTimeOffset : System.IComparable, System.IFormattable, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.IComparable<System.DateTimeOffset>, System.IEquatable<System.DateTimeOffset>
    {
        static /*0x0*/ System.DateTimeOffset MinValue;
        static /*0x10*/ System.DateTimeOffset MaxValue;
        /*0x10*/ System.DateTime m_dateTime;
        /*0x18*/ short m_offsetMinutes;

        static /*0x1a0ae00*/ DateTimeOffset();
        static /*0x1a0914c*/ System.DateTimeOffset get_Now();
        static /*0x1a09578*/ int Compare(System.DateTimeOffset first, System.DateTimeOffset second);
        static /*0x1a09d84*/ System.DateTimeOffset Parse(string input, System.IFormatProvider formatProvider);
        static /*0x1a09df8*/ System.DateTimeOffset Parse(string input, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);
        static /*0x1a0a104*/ System.DateTimeOffset ParseExact(string input, string format, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);
        static /*0x1a0a694*/ bool TryParse(string input, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, ref System.DateTimeOffset result);
        static /*0x1a0a954*/ bool TryParseExact(string input, string format, System.IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, ref System.DateTimeOffset result);
        static /*0x1a08a90*/ short ValidateOffset(System.TimeSpan offset);
        static /*0x1a08b98*/ System.DateTime ValidateDate(System.DateTime dateTime, System.TimeSpan offset);
        static /*0x1a09f2c*/ System.Globalization.DateTimeStyles ValidateStyles(System.Globalization.DateTimeStyles style, string parameterName);
        static /*0x1a0ac24*/ System.DateTimeOffset op_Implicit(System.DateTime dateTime);
        static /*0x1a0ac50*/ System.TimeSpan op_Subtraction(System.DateTimeOffset left, System.DateTimeOffset right);
        static /*0x1a0ace0*/ bool op_Equality(System.DateTimeOffset left, System.DateTimeOffset right);
        static /*0x1a0ad70*/ bool op_Inequality(System.DateTimeOffset left, System.DateTimeOffset right);
        /*0xacf2c0*/ DateTimeOffset(long ticks, System.TimeSpan offset);
        /*0xacf2c8*/ DateTimeOffset(System.DateTime dateTime);
        /*0xacf2d0*/ DateTimeOffset(System.DateTime dateTime, System.TimeSpan offset);
        /*0xacf2d8*/ DateTimeOffset(int year, int month, int day, int hour, int minute, int second, System.TimeSpan offset);
        /*0xacf2e0*/ DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System.TimeSpan offset);
        /*0xacf2f0*/ DateTimeOffset(int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, System.TimeSpan offset);
        /*0xacf5f8*/ DateTimeOffset(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xacf300*/ System.DateTime get_DateTime();
        /*0xacf308*/ System.DateTime get_UtcDateTime();
        /*0xacf310*/ System.DateTime get_LocalDateTime();
        /*0xacf340*/ System.DateTime get_ClockDateTime();
        /*0xacf348*/ int get_Day();
        /*0xacf378*/ int get_Hour();
        /*0xacf3c4*/ int get_Millisecond();
        /*0xacf41c*/ int get_Minute();
        /*0xacf468*/ int get_Month();
        /*0xacf498*/ System.TimeSpan get_Offset();
        /*0xacf4d0*/ int get_Second();
        /*0xacf51c*/ long get_Ticks();
        /*0xacf538*/ long get_UtcTicks();
        /*0xacf554*/ System.TimeSpan get_TimeOfDay();
        /*0xacf598*/ int get_Year();
        /*0xacf5c8*/ int System.IComparable.CompareTo(object obj);
        /*0xacf5d0*/ int CompareTo(System.DateTimeOffset other);
        /*0xacf5d8*/ bool Equals(object obj);
        /*0xacf5e0*/ bool Equals(System.DateTimeOffset other);
        /*0xacf5e8*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        /*0xacf5f0*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xacf600*/ int GetHashCode();
        /*0xacf620*/ string ToString();
        /*0xacf628*/ string ToString(System.IFormatProvider formatProvider);
        /*0xacf630*/ string ToString(string format, System.IFormatProvider formatProvider);
        /*0xacf638*/ System.DateTimeOffset ToUniversalTime();
    }

    enum DayOfWeek
    {
        Sunday = 0,
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6,
    }

    class DBNull : System.Runtime.Serialization.ISerializable, System.IConvertible
    {
        static /*0x0*/ System.DBNull Value;

        static /*0x2524984*/ DBNull();
        /*0x25242dc*/ DBNull();
        /*0x25242e4*/ DBNull(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x2524348*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x2524360*/ string ToString();
        /*0x25243ac*/ string ToString(System.IFormatProvider provider);
        /*0x25243f8*/ System.TypeCode GetTypeCode();
        /*0x2524400*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x252445c*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x25244b8*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x2524514*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x2524570*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x25245cc*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x2524628*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x2524684*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x25246e0*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x252473c*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x2524798*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x25247f4*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x2524850*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x25248ac*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x2524908*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Decimal : System.IFormattable, System.IComparable, System.IConvertible, System.Runtime.Serialization.IDeserializationCallback, System.IComparable<decimal>, System.IEquatable<decimal>
    {
        static int SignMask = -2147483648;
        static byte DECIMAL_NEG = 128;
        static byte DECIMAL_ADD = 0;
        static int ScaleMask = 16711680;
        static int ScaleShift = 16;
        static int MaxInt32Scale = 9;
        static /*0x0*/ uint[] Powers10;
        static /*0x8*/ decimal Zero;
        static /*0x18*/ decimal One;
        static /*0x28*/ decimal MinusOne;
        static /*0x38*/ decimal MaxValue;
        static /*0x48*/ decimal MinValue;
        static /*0x58*/ decimal NearNegativeZero;
        static /*0x68*/ decimal NearPositiveZero;
        /*0x10*/ int flags;
        /*0x14*/ int hi;
        /*0x18*/ int lo;
        /*0x1c*/ int mid;

        static /*0x203650c*/ Decimal();
        static /*0x2033dfc*/ decimal Abs(decimal d);
        static /*0x2033e30*/ decimal Add(decimal d1, decimal d2);
        static /*0x2033eac*/ void FCallAddSub(ref decimal d1, ref decimal d2, byte bSign);
        static /*0x2033eb0*/ int Compare(decimal d1, decimal d2);
        static /*0x2033f24*/ int FCallCompare(ref decimal d1, ref decimal d2);
        static /*0x2034098*/ decimal Divide(decimal d1, decimal d2);
        static /*0x2034110*/ void FCallDivide(ref decimal d1, ref decimal d2);
        static /*0x2034304*/ decimal Parse(string s, System.IFormatProvider provider);
        static /*0x203433c*/ decimal Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x2034390*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref decimal result);
        static /*0x2033b8c*/ int[] GetBits(decimal d);
        static /*0x20343ec*/ decimal ToDecimal(byte[] buffer);
        static /*0x2034518*/ decimal Max(decimal d1, decimal d2);
        static /*0x20345b0*/ decimal Min(decimal d1, decimal d2);
        static /*0x2034648*/ decimal Remainder(decimal d1, decimal d2);
        static /*0x2034c60*/ decimal Multiply(decimal d1, decimal d2);
        static /*0x2034cd8*/ void FCallMultiply(ref decimal d1, ref decimal d2);
        static /*0x2034cdc*/ decimal Negate(decimal d);
        static /*0x2034d10*/ decimal Round(decimal d, int decimals);
        static /*0x2034d88*/ void FCallRound(ref decimal d, int decimals);
        static /*0x2034d8c*/ byte ToByte(decimal value);
        static /*0x2035014*/ sbyte ToSByte(decimal value);
        static /*0x20352ac*/ short ToInt16(decimal value);
        static /*0x2035444*/ double ToDouble(decimal d);
        static /*0x2035448*/ int FCallToInt32(decimal d);
        static /*0x20351ac*/ int ToInt32(decimal d);
        static /*0x2035450*/ long ToInt64(decimal d);
        static /*0x2035548*/ ushort ToUInt16(decimal value);
        static /*0x2034f20*/ uint ToUInt32(decimal d);
        static /*0x20356dc*/ ulong ToUInt64(decimal d);
        static /*0x20357c8*/ float ToSingle(decimal d);
        static /*0x2034a80*/ decimal Truncate(decimal d);
        static /*0x203544c*/ void FCallTruncate(ref decimal d);
        static /*0x20357cc*/ decimal op_Implicit(byte value);
        static /*0x20357d8*/ decimal op_Implicit(sbyte value);
        static /*0x20357f0*/ decimal op_Implicit(short value);
        static /*0x2035808*/ decimal op_Implicit(ushort value);
        static /*0x2035814*/ decimal op_Implicit(char value);
        static /*0x2035820*/ decimal op_Implicit(int value);
        static /*0x2035830*/ decimal op_Implicit(uint value);
        static /*0x203583c*/ decimal op_Implicit(long value);
        static /*0x2035850*/ decimal op_Implicit(ulong value);
        static /*0x203585c*/ decimal op_Explicit(float value);
        static /*0x2035884*/ decimal op_Explicit(double value);
        static /*0x20358ac*/ int op_Explicit(decimal value);
        static /*0x203591c*/ long op_Explicit(decimal value);
        static /*0x203598c*/ ulong op_Explicit(decimal value);
        static /*0x20359fc*/ float op_Explicit(decimal value);
        static /*0x2035a6c*/ double op_Explicit(decimal value);
        static /*0x2035adc*/ decimal op_UnaryNegation(decimal d);
        static /*0x2035b4c*/ decimal op_Increment(decimal d);
        static /*0x2034be4*/ decimal op_Addition(decimal d1, decimal d2);
        static /*0x2034910*/ decimal op_Subtraction(decimal d1, decimal d2);
        static /*0x2034af0*/ decimal op_Multiply(decimal d1, decimal d2);
        static /*0x2034a08*/ decimal op_Division(decimal d1, decimal d2);
        static /*0x2035bc8*/ decimal op_Modulus(decimal d1, decimal d2);
        static /*0x203498c*/ bool op_Equality(decimal d1, decimal d2);
        static /*0x2035c50*/ bool op_Inequality(decimal d1, decimal d2);
        static /*0x2034898*/ bool op_LessThan(decimal d1, decimal d2);
        static /*0x2034b68*/ bool op_LessThanOrEqual(decimal d1, decimal d2);
        static /*0x2035ccc*/ bool op_GreaterThan(decimal d1, decimal d2);
        static /*0x2035d48*/ bool op_GreaterThanOrEqual(decimal d1, decimal d2);
        /*0xadfaf4*/ Decimal(int value);
        /*0xadfb18*/ Decimal(uint value);
        /*0xadfb24*/ Decimal(long value);
        /*0xadfb4c*/ Decimal(ulong value);
        /*0xadfb5c*/ Decimal(float value);
        /*0xadfb64*/ Decimal(double value);
        /*0xadfb6c*/ Decimal(int[] bits);
        /*0xadfb7c*/ Decimal(int lo, int mid, int hi, bool isNegative, byte scale);
        /*0xadfb98*/ Decimal(int lo, int mid, int hi, int flags);
        /*0xadfb74*/ void SetBits(int[] bits);
        /*0xadfb88*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
        /*0xadfb90*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        /*0xadfba0*/ int CompareTo(object value);
        /*0xadfba8*/ int CompareTo(decimal value);
        /*0xadfbb0*/ bool Equals(object value);
        /*0xadfbb8*/ bool Equals(decimal value);
        /*0xadfbc0*/ int GetHashCode();
        /*0xadfbc8*/ string ToString();
        /*0xadfc00*/ string ToString(System.IFormatProvider provider);
        /*0xadfc3c*/ string ToString(string format, System.IFormatProvider provider);
        /*0xadfc84*/ System.TypeCode GetTypeCode();
        /*0xadfc8c*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xadfc94*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xadfca0*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xadfca8*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xadfcb0*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xadfcb8*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xadfcc0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xadfcc8*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xadfcd0*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xadfcd8*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xadfce0*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xadfce8*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xadfcf0*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xadfcfc*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xadfd08*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class DefaultBinder : System.Reflection.Binder
    {
        static /*0x203d938*/ System.Reflection.MethodBase ExactBinding(System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        static /*0x203dc94*/ System.Reflection.PropertyInfo ExactPropertyBinding(System.Reflection.PropertyInfo[] match, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        static /*0x203d170*/ int FindMostSpecific(System.Reflection.ParameterInfo[] p1, int[] paramOrder1, System.Type paramArrayType1, System.Reflection.ParameterInfo[] p2, int[] paramOrder2, System.Type paramArrayType2, System.Type[] types, object[] args);
        static /*0x203cdd0*/ int FindMostSpecificType(System.Type c1, System.Type c2, System.Type t);
        static /*0x203b4a0*/ int FindMostSpecificMethod(System.Reflection.MethodBase m1, int[] paramOrder1, System.Type paramArrayType1, System.Reflection.MethodBase m2, int[] paramOrder2, System.Type paramArrayType2, System.Type[] types, object[] args);
        static /*0x203ba2c*/ int FindMostSpecificField(System.Reflection.FieldInfo cur1, System.Reflection.FieldInfo cur2);
        static /*0x203d564*/ int FindMostSpecificProperty(System.Reflection.PropertyInfo cur1, System.Reflection.PropertyInfo cur2);
        static /*0x203df70*/ bool CompareMethodSigAndName(System.Reflection.MethodBase m1, System.Reflection.MethodBase m2);
        static /*0x203e0e4*/ int GetHierarchyDepth(System.Type t);
        static /*0x203db8c*/ System.Reflection.MethodBase FindMostDerivedNewSlotMeth(System.Reflection.MethodBase[] match, int cMatches);
        static /*0x203b338*/ void ReorderParams(int[] paramOrder, object[] vars);
        static /*0x203aff4*/ bool CreateParamOrder(int[] paramOrder, System.Reflection.ParameterInfo[] pars, string[] names);
        static /*0x203c1bc*/ bool CanConvertPrimitive(System.RuntimeType source, System.RuntimeType target);
        static /*0x203b23c*/ bool CanConvertPrimitiveObjectToType(object source, System.RuntimeType type);
        /*0x203e18c*/ DefaultBinder();
        /*0x2039174*/ System.Reflection.MethodBase BindToMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo cultureInfo, string[] names, ref object state);
        /*0x203b5b4*/ System.Reflection.FieldInfo BindToField(System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo cultureInfo);
        /*0x203bad8*/ System.Reflection.MethodBase SelectMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x203c420*/ System.Reflection.PropertyInfo SelectProperty(System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, System.Type returnType, System.Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
        /*0x203d610*/ object ChangeType(object value, System.Type type, System.Globalization.CultureInfo cultureInfo);
        /*0x203d66c*/ void ReorderArgumentArray(ref object[] args, object state);

        class BinderState
        {
            /*0x10*/ int[] m_argsMap;
            /*0x18*/ int m_originalSize;
            /*0x1c*/ bool m_isParamArray;

            /*0x180f9ec*/ BinderState(int[] argsMap, int originalSize, bool isParamArray);
        }

        class <>c
        {
            static /*0x0*/ System.DefaultBinder.<> <>9;
            static /*0x8*/ System.Predicate<System.Type> <>9__3_0;

            static /*0x180f91c*/ <>c();
            /*0x180f97c*/ <>c();
            /*0x180f984*/ bool <SelectProperty>b__3_0(System.Type t);
        }
    }

    class DivideByZeroException : System.ArithmeticException
    {
        /*0x2042af0*/ DivideByZeroException();
        /*0x2042b60*/ DivideByZeroException(string message);
        /*0x2042b94*/ DivideByZeroException(string message, System.Exception innerException);
        /*0x2042bc8*/ DivideByZeroException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class DllNotFoundException : System.TypeLoadException
    {
        /*0x2042ed0*/ DllNotFoundException();
        /*0x2042f40*/ DllNotFoundException(string message);
        /*0x2042f74*/ DllNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Double : System.IComparable, System.IFormattable, System.IConvertible, System.IComparable<double>, System.IEquatable<double>
    {
        static double MinValue = -1.7976931348623157e+308;
        static double MaxValue = 1.7976931348623157e+308;
        static double Epsilon = 5e-324;
        static double NegativeInfinity = -Infinity;
        static double PositiveInfinity = Infinity;
        static double NaN = NaN;
        static /*0x0*/ double NegativeZero;
        /*0x10*/ double m_value;

        static /*0x204405c*/ Double();
        static /*0x2042f7c*/ bool IsInfinity(double d);
        static /*0x2042f94*/ bool IsPositiveInfinity(double d);
        static /*0x2042fa8*/ bool IsNegativeInfinity(double d);
        static /*0x2042fbc*/ bool IsNaN(double d);
        static /*0x2042fd4*/ bool IsFinite(double d);
        static /*0x204354c*/ double Parse(string s);
        static /*0x20435d0*/ double Parse(string s, System.IFormatProvider provider);
        static /*0x204365c*/ double Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x20435c8*/ double Parse(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x20436f8*/ bool TryParse(string s, ref double result);
        static /*0x2043844*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref double result);
        static /*0x2043780*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref double result);
        /*0xadff3c*/ int CompareTo(object value);
        /*0xadff44*/ int CompareTo(double value);
        /*0xadff4c*/ bool Equals(object obj);
        /*0xadff54*/ bool Equals(double obj);
        /*0xadff5c*/ int GetHashCode();
        /*0xadff78*/ string ToString();
        /*0xadffac*/ string ToString(string format);
        /*0xadffec*/ string ToString(System.IFormatProvider provider);
        /*0xae0024*/ string ToString(string format, System.IFormatProvider provider);
        /*0xae0068*/ System.TypeCode GetTypeCode();
        /*0xae0070*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xae0078*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xae0084*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xae008c*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xae0094*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xae009c*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xae00a4*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xae00ac*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xae00b4*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xae00bc*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xae00c4*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xae00cc*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xae00d4*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xae00dc*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xae00e8*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class Empty : System.Runtime.Serialization.ISerializable
    {
        static /*0x0*/ System.Empty Value;

        static /*0x2045200*/ Empty();
        /*0x204513c*/ Empty();
        /*0x2045144*/ string ToString();
        /*0x2045190*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class EntryPointNotFoundException : System.TypeLoadException
    {
        /*0x2453e94*/ EntryPointNotFoundException();
        /*0x2453ef4*/ EntryPointNotFoundException(string message);
        /*0x2453f24*/ EntryPointNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Enum : System.IComparable, System.IFormattable, System.IConvertible
    {
        static string enumSeperator = ", ";
        static /*0x0*/ char[] enumSeperatorCharArray;

        static /*0x2458d00*/ Enum();
        static /*0x2453f2c*/ System.Enum.ValuesAndNames GetCachedValuesAndNames(System.RuntimeType enumType, bool getNames);
        static /*0x24540a4*/ string InternalFormattedHexString(object value);
        static /*0x245455c*/ string InternalFormat(System.RuntimeType eT, object value);
        static /*0x245477c*/ string InternalFlagsFormat(System.RuntimeType eT, object value);
        static /*0x2454994*/ ulong ToUInt64(object value);
        static /*0x2454b2c*/ int InternalCompareTo(object o1, object o2);
        static /*0x2454b30*/ System.RuntimeType InternalGetUnderlyingType(System.RuntimeType enumType);
        static /*0x24540a0*/ bool GetEnumValuesAndNames(System.RuntimeType enumType, ref ulong[] values, ref string[] names);
        static /*0x2454b34*/ object InternalBoxEnum(System.RuntimeType enumType, long value);
        static bool TryParse<TEnum>(string value, ref TEnum result);
        static bool TryParse<TEnum>(string value, bool ignoreCase, ref TEnum result);
        static /*0x2454b38*/ object Parse(System.Type enumType, string value);
        static /*0x2454bac*/ object Parse(System.Type enumType, string value, bool ignoreCase);
        static /*0x2454c80*/ bool TryParseEnum(System.Type enumType, string value, bool ignoreCase, ref System.Enum.EnumResult parseResult);
        static /*0x245535c*/ System.Type GetUnderlyingType(System.Type enumType);
        static /*0x2455bc0*/ System.Array GetValues(System.Type enumType);
        static /*0x2455c90*/ ulong[] InternalGetValues(System.RuntimeType enumType);
        static /*0x245469c*/ string GetName(System.Type enumType, object value);
        static /*0x2455d04*/ string[] GetNames(System.Type enumType);
        static /*0x2455dd4*/ string[] InternalGetNames(System.RuntimeType enumType);
        static /*0x245542c*/ object ToObject(System.Type enumType, object value);
        static /*0x2456fbc*/ bool IsDefined(System.Type enumType, object value);
        static /*0x245709c*/ string Format(System.Type enumType, object value, string format);
        static /*0x2456038*/ object ToObject(System.Type enumType, sbyte value);
        static /*0x2456228*/ object ToObject(System.Type enumType, short value);
        static /*0x2455e48*/ object ToObject(System.Type enumType, int value);
        static /*0x24567f8*/ object ToObject(System.Type enumType, byte value);
        static /*0x24569e8*/ object ToObject(System.Type enumType, ushort value);
        static /*0x2456608*/ object ToObject(System.Type enumType, uint value);
        static /*0x2456418*/ object ToObject(System.Type enumType, long value);
        static /*0x24559d0*/ object ToObject(System.Type enumType, ulong value);
        static /*0x2456bd8*/ object ToObject(System.Type enumType, char value);
        static /*0x2456dc8*/ object ToObject(System.Type enumType, bool value);
        /*0x2458cf8*/ Enum();
        /*0x2457728*/ object get_value();
        /*0x2457724*/ object GetValue();
        /*0x245772c*/ bool InternalHasFlag(System.Enum flags);
        /*0x2457730*/ int get_hashcode();
        /*0x2457734*/ bool Equals(object obj);
        /*0x245773c*/ int GetHashCode();
        /*0x2457740*/ string ToString();
        /*0x2457818*/ string ToString(string format, System.IFormatProvider provider);
        /*0x2457a88*/ int CompareTo(object target);
        /*0x245781c*/ string ToString(string format);
        /*0x2457c84*/ string ToString(System.IFormatProvider provider);
        /*0x2457c90*/ bool HasFlag(System.Enum flag);
        /*0x2457e20*/ System.TypeCode GetTypeCode();
        /*0x2458270*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x2458324*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x24583d8*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x245848c*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x2458540*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x24585f4*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x24586a8*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x245875c*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x2458810*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x24588c4*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x2458978*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x2458a2c*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x2458ae0*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x2458b94*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x2458c7c*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);

        enum ParseFailureKind
        {
            None = 0,
            Argument = 1,
            ArgumentNull = 2,
            ArgumentWithParameter = 3,
            UnhandledException = 4,
        }

        struct EnumResult
        {
            /*0x10*/ object parsedEnum;
            /*0x18*/ bool canThrow;
            /*0x1c*/ System.Enum.ParseFailureKind m_failure;
            /*0x20*/ string m_failureMessageID;
            /*0x28*/ string m_failureParameter;
            /*0x30*/ object m_failureMessageFormatArgument;
            /*0x38*/ System.Exception m_innerException;

            /*0xacaa34*/ void Init(bool canMethodThrow);
            /*0xacaa40*/ void SetFailure(System.Exception unhandledException);
            /*0xacaa50*/ void SetFailure(System.Enum.ParseFailureKind failure, string failureParameter);
            /*0xacaa58*/ void SetFailure(System.Enum.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
            /*0xacaa60*/ System.Exception GetEnumParseException();
        }

        class ValuesAndNames
        {
            /*0x10*/ ulong[] Values;
            /*0x18*/ string[] Names;

            /*0x1811318*/ ValuesAndNames(ulong[] values, string[] names);
        }
    }

    class EventArgs
    {
        static /*0x0*/ System.EventArgs Empty;

        static /*0x245aff8*/ EventArgs();
        /*0x245aff0*/ EventArgs();
    }

    class EventHandler : System.MulticastDelegate
    {
        /*0x245b058*/ EventHandler(object object, nint method);
        /*0x245b0b8*/ void Invoke(object sender, System.EventArgs e);
        /*0x245b44c*/ System.IAsyncResult BeginInvoke(object sender, System.EventArgs e, System.AsyncCallback callback, object object);
        /*0x245b47c*/ void EndInvoke(System.IAsyncResult result);
    }

    class EventHandler<TEventArgs> : System.MulticastDelegate
    {
        EventHandler(object object, nint method);
        void Invoke(object sender, TEventArgs e);
        System.IAsyncResult BeginInvoke(object sender, TEventArgs e, System.AsyncCallback callback, object object);
        void EndInvoke(System.IAsyncResult result);
    }

    class Exception : System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
    {
        static int _COMPlusExceptionCode = -532462766;
        static /*0x0*/ object s_EDILock;
        /*0x10*/ string _className;
        /*0x18*/ string _message;
        /*0x20*/ System.Collections.IDictionary _data;
        /*0x28*/ System.Exception _innerException;
        /*0x30*/ string _helpURL;
        /*0x38*/ object _stackTrace;
        /*0x40*/ string _stackTraceString;
        /*0x48*/ string _remoteStackTraceString;
        /*0x50*/ int _remoteStackIndex;
        /*0x58*/ object _dynamicMethods;
        /*0x60*/ int _HResult;
        /*0x68*/ string _source;
        /*0x70*/ System.Runtime.Serialization.SafeSerializationManager _safeSerializationManager;
        /*0x78*/ System.Diagnostics.StackTrace[] captured_traces;
        /*0x80*/ nint[] native_trace_ips;

        static /*0x245d360*/ Exception();
        static /*0x245c748*/ bool IsImmutableAgileException(System.Exception e);
        static /*0x245d204*/ string GetMessageFromNativeResources(System.Exception.ExceptionMessageKind kind);
        static /*0x245d35c*/ void ReportUnhandledException(System.Exception exception);
        /*0x245c0d0*/ Exception();
        /*0x245c0f8*/ Exception(string message);
        /*0x245c12c*/ Exception(string message, System.Exception innerException);
        /*0x245c170*/ Exception(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x245c05c*/ void Init();
        /*0x245c580*/ string get_Message();
        /*0x245c6a8*/ System.Collections.IDictionary get_Data();
        /*0x245c660*/ string GetClassName();
        /*0x245c758*/ System.Exception GetBaseException();
        /*0x245c76c*/ System.Exception get_InnerException();
        /*0x245c774*/ System.Reflection.MethodBase get_TargetSite();
        /*0x245c824*/ string get_StackTrace();
        /*0x245c82c*/ string GetStackTrace(bool needFileInfo);
        /*0x2453e24*/ void SetErrorCode(int hr);
        /*0x245c88c*/ string get_Source();
        /*0x245c99c*/ string ToString();
        /*0x245c9a8*/ string ToString(bool needFileLineInfo, bool needMessage);
        /*0x245cc44*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x245d0ec*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext context);
        /*0x245c884*/ string StripFileInfo(string stackTrace, bool isRemoteStackTrace);
        /*0x245d168*/ void RestoreExceptionDispatchInfo(System.Runtime.ExceptionServices.ExceptionDispatchInfo exceptionDispatchInfo);
        /*0x245d1f4*/ int get_HResult();
        /*0x245d1fc*/ void set_HResult(int value);
        /*0x245c750*/ System.Type GetType();
        /*0x245d268*/ System.Exception FixRemotingException();

        enum ExceptionMessageKind
        {
            ThreadAbort = 1,
            ThreadInterrupted = 2,
            OutOfMemory = 3,
        }
    }

    class ExecutionEngineException : System.SystemException
    {
        /*0x20df2ac*/ ExecutionEngineException();
        /*0x20df31c*/ ExecutionEngineException(string message);
        /*0x20df350*/ ExecutionEngineException(string message, System.Exception innerException);
        /*0x20df384*/ ExecutionEngineException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class FieldAccessException : System.MemberAccessException
    {
        /*0x20dfd5c*/ FieldAccessException();
        /*0x20dfdcc*/ FieldAccessException(string message);
        /*0x20dfe00*/ FieldAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class FlagsAttribute : System.Attribute
    {
        /*0x20e6e48*/ FlagsAttribute();
    }

    class FormatException : System.SystemException
    {
        /*0x20e6e50*/ FormatException();
        /*0x20e6ec0*/ FormatException(string message);
        /*0x20e6ef4*/ FormatException(string message, System.Exception innerException);
        /*0x20e6f28*/ FormatException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class GC
    {
        static /*0x0*/ object EPHEMERON_TOMBSTONE;

        static /*0x20e9b24*/ GC();
        static /*0x20e98d4*/ int GetCollectionCount(int generation);
        static /*0x20e98d8*/ int GetMaxGeneration();
        static /*0x20e98dc*/ void InternalCollect(int generation);
        static /*0x20e98e0*/ void register_ephemeron_array(System.Runtime.CompilerServices.Ephemeron[] array);
        static /*0x20e98e4*/ object get_ephemeron_tombstone();
        static /*0x20e98e8*/ void Collect();
        static /*0x20e999c*/ int CollectionCount(int generation);
        static /*0x20e9a64*/ void KeepAlive(object obj);
        static /*0x20e9944*/ int get_MaxGeneration();
        static /*0x20e9a68*/ void _SuppressFinalize(object o);
        static /*0x20e6754*/ void SuppressFinalize(object obj);
        static /*0x20e9a6c*/ void _ReRegisterForFinalize(object o);
        static /*0x20e9a70*/ void ReRegisterForFinalize(object obj);
        static /*0x20e9b1c*/ long GetTotalMemory(bool forceFullCollection);
    }

    class DateTimeFormat
    {
        static /*0x0*/ System.TimeSpan NullOffset;
        static /*0x8*/ char[] allStandardFormats;
        static /*0x10*/ string[] fixedNumberFormats;

        static /*0x1a03278*/ DateTimeFormat();
        static /*0x19ffb6c*/ void FormatDigits(System.Text.StringBuilder outputBuffer, int value, int len);
        static /*0x19ffbe8*/ void FormatDigits(System.Text.StringBuilder outputBuffer, int value, int len, bool overrideLengthLimit);
        static /*0x19ffcc4*/ void HebrewFormatDigits(System.Text.StringBuilder outputBuffer, int digits);
        static /*0x19ffd4c*/ int ParseRepeatPattern(string format, int pos, char patternChar);
        static /*0x19ffdc0*/ string FormatDayOfWeek(int dayOfWeek, int repeat, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a000a8*/ string FormatMonth(int month, int repeatCount, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a00398*/ string FormatHebrewMonthName(System.DateTime time, int month, int repeatCount, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a00604*/ int ParseQuoteString(string format, int pos, System.Text.StringBuilder result);
        static /*0x1a007b4*/ int ParseNextChar(string format, int pos);
        static /*0x1a007f4*/ bool IsUseGenitiveForm(string format, int index, int tokenLen, char patternToMatch);
        static /*0x1a00934*/ string FormatCustomized(System.DateTime dateTime, string format, System.Globalization.DateTimeFormatInfo dtfi, System.TimeSpan offset);
        static /*0x1a01984*/ void FormatCustomizedTimeZone(System.DateTime dateTime, System.TimeSpan offset, string format, int tokenLen, bool timeOnly, System.Text.StringBuilder result);
        static /*0x1a01d10*/ void FormatCustomizedRoundripTimeZone(System.DateTime dateTime, System.TimeSpan offset, System.Text.StringBuilder result);
        static /*0x1a01f78*/ string GetRealFormat(string format, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a02658*/ string ExpandPredefinedFormat(string format, ref System.DateTime dateTime, ref System.Globalization.DateTimeFormatInfo dtfi, ref System.TimeSpan offset);
        static /*0x19fe14c*/ string Format(System.DateTime dateTime, string format, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a02e7c*/ string Format(System.DateTime dateTime, string format, System.Globalization.DateTimeFormatInfo dtfi, System.TimeSpan offset);
        static /*0x1a02b28*/ void InvalidFormatForLocal(string format, System.DateTime dateTime);
        static /*0x1a01f74*/ void InvalidFormatForUtc(string format, System.DateTime dateTime);
    }

    class DateTimeParse
    {
        static /*0x0*/ System.DateTimeParse.MatchNumberDelegate m_hebrewNumberParser;
        static /*0x8*/ System.DateTimeParse.DS[][] dateParsingStates;

        static /*0x1a13648*/ DateTimeParse();
        static /*0x19fdb5c*/ System.DateTime ParseExact(string s, string format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style);
        static /*0x1a0a248*/ System.DateTime ParseExact(string s, string format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.TimeSpan offset);
        static /*0x19fe834*/ bool TryParseExact(string s, string format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTime result);
        static /*0x1a0aaac*/ bool TryParseExact(string s, string format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTime result, ref System.TimeSpan offset);
        static /*0x1a0aed8*/ bool TryParseExact(string s, string format, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTimeResult result);
        static /*0x19fde3c*/ System.DateTime ParseExactMultiple(string s, string[] formats, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style);
        static /*0x1a0b844*/ bool TryParseExactMultiple(string s, string[] formats, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles style, ref System.DateTimeResult result);
        static /*0x1a0ba5c*/ bool MatchWord(ref System.__DTString str, string target);
        static /*0x1a0bba0*/ bool GetTimeZoneName(ref System.__DTString str);
        static /*0x1a0bc64*/ bool IsDigit(char ch);
        static /*0x1a0bc78*/ bool ParseFraction(ref System.__DTString str, ref double result);
        static /*0x1a0bd58*/ bool ParseTimeZone(ref System.__DTString str, ref System.TimeSpan result);
        static /*0x1a0bfd0*/ bool HandleTimeZone(ref System.__DTString str, ref System.DateTimeResult result);
        static /*0x1a0c160*/ bool Lex(System.DateTimeParse.DS dps, ref System.__DTString str, ref System.DateTimeToken dtok, ref System.DateTimeRawInfo raw, ref System.DateTimeResult result, ref System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles);
        static /*0x1a0d26c*/ bool VerifyValidPunctuation(ref System.__DTString str);
        static /*0x1a0d3e0*/ bool GetYearMonthDayOrder(string datePattern, System.Globalization.DateTimeFormatInfo dtfi, ref int order);
        static /*0x1a0d688*/ bool GetYearMonthOrder(string pattern, System.Globalization.DateTimeFormatInfo dtfi, ref int order);
        static /*0x1a0d844*/ bool GetMonthDayOrder(string pattern, System.Globalization.DateTimeFormatInfo dtfi, ref int order);
        static /*0x1a0da48*/ bool TryAdjustYear(ref System.DateTimeResult result, int year, ref int adjustedYear);
        static /*0x1a0db10*/ bool SetDateYMD(ref System.DateTimeResult result, int year, int month, int day);
        static /*0x1a0db88*/ bool SetDateMDY(ref System.DateTimeResult result, int month, int day, int year);
        static /*0x1a0dc10*/ bool SetDateDMY(ref System.DateTimeResult result, int day, int month, int year);
        static /*0x1a0dc98*/ bool SetDateYDM(ref System.DateTimeResult result, int year, int day, int month);
        static /*0x1a0dd20*/ void GetDefaultYear(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles);
        static /*0x1a0debc*/ bool GetDayOfNN(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a0e070*/ bool GetDayOfNNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a0e378*/ bool GetDayOfMN(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a0e5cc*/ bool GetHebrewDayOfNM(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a0e740*/ bool GetDayOfNM(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a0e994*/ bool GetDayOfMNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a0ecb0*/ bool GetDayOfYNN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a0ee38*/ bool GetDayOfNNY(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a0efe4*/ bool GetDayOfYMN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a0f0cc*/ bool GetDayOfYN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a0f1b4*/ bool GetDayOfYM(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a0f284*/ void AdjustTimeMark(System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeRawInfo raw);
        static /*0x1a0f2f8*/ bool AdjustHour(ref int hour, System.DateTimeParse.TM timeMark);
        static /*0x1a0f340*/ bool GetTimeOfN(System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x1a0f3e8*/ bool GetTimeOfNN(System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x1a0f49c*/ bool GetTimeOfNNN(System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x1a0f564*/ bool GetDateOfDSN(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x1a0f604*/ bool GetDateOfNDS(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw);
        static /*0x1a0f6ec*/ bool GetDateOfNNDS(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a0f950*/ bool ProcessDateTimeSuffix(ref System.DateTimeResult result, ref System.DateTimeRawInfo raw, ref System.DateTimeToken dtok);
        static /*0x1a0fa48*/ bool ProcessHebrewTerminalState(System.DateTimeParse.DS dps, ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x1a0ce70*/ bool ProcessTerminaltState(System.DateTimeParse.DS dps, ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles, ref System.DateTimeRawInfo raw, System.Globalization.DateTimeFormatInfo dtfi);
        static /*0x19fd590*/ System.DateTime Parse(string s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles);
        static /*0x1a09fdc*/ System.DateTime Parse(string s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.TimeSpan offset);
        static /*0x19fe550*/ bool TryParse(string s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.DateTime result);
        static /*0x1a0a7ec*/ bool TryParse(string s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.DateTime result, ref System.TimeSpan offset);
        static /*0x1a0fd38*/ bool TryParse(string s, System.Globalization.DateTimeFormatInfo dtfi, System.Globalization.DateTimeStyles styles, ref System.DateTimeResult result);
        static /*0x1a10c6c*/ bool DetermineTimeZoneAdjustments(ref System.DateTimeResult result, System.Globalization.DateTimeStyles styles, bool bTimeOnly);
        static /*0x1a10e74*/ bool DateTimeOffsetTimeZonePostProcessing(ref System.DateTimeResult result, System.Globalization.DateTimeStyles styles);
        static /*0x1a11090*/ bool AdjustTimeZoneToUniversal(ref System.DateTimeResult result);
        static /*0x1a1115c*/ bool AdjustTimeZoneToLocal(ref System.DateTimeResult result, bool bTimeOnly);
        static /*0x1a10460*/ bool ParseISO8601(ref System.DateTimeRawInfo raw, ref System.__DTString str, System.Globalization.DateTimeStyles styles, ref System.DateTimeResult result);
        static /*0x1a113f0*/ bool MatchHebrewDigits(ref System.__DTString str, int digitLen, ref int number);
        static /*0x1a1134c*/ bool ParseDigits(ref System.__DTString str, int digitLen, ref int result);
        static /*0x1a114d8*/ bool ParseDigits(ref System.__DTString str, int minDigitLen, int maxDigitLen, ref int result);
        static /*0x1a11594*/ bool ParseFractionExact(ref System.__DTString str, int maxDigitLen, ref double result);
        static /*0x1a116c0*/ bool ParseSign(ref System.__DTString str, ref bool result);
        static /*0x1a11728*/ bool ParseTimeZoneOffset(ref System.__DTString str, int len, ref System.TimeSpan result);
        static /*0x1a118ec*/ bool MatchAbbreviatedMonthName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x1a11a50*/ bool MatchMonthName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x1a11be8*/ bool MatchAbbreviatedDayName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x1a11cf4*/ bool MatchDayName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x1a11e00*/ bool MatchEraName(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref int result);
        static /*0x1a11f3c*/ bool MatchTimeMark(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeParse.TM result);
        static /*0x1a12048*/ bool MatchAbbreviatedTimeMark(ref System.__DTString str, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeParse.TM result);
        static /*0x1a1210c*/ bool CheckNewValue(ref int currentValue, int newValue, char patternChar, ref System.DateTimeResult result);
        static /*0x1a0ddc8*/ System.DateTime GetDateTimeNow(ref System.DateTimeResult result, ref System.Globalization.DateTimeStyles styles);
        static /*0x1a109d0*/ bool CheckDefaultDateTime(ref System.DateTimeResult result, ref System.Globalization.Calendar cal, System.Globalization.DateTimeStyles styles);
        static /*0x1a121cc*/ string ExpandPredefinedFormat(string format, ref System.Globalization.DateTimeFormatInfo dtfi, ref System.ParsingInfo parseInfo, ref System.DateTimeResult result);
        static /*0x1a12580*/ bool ParseByFormat(ref System.__DTString str, ref System.__DTString format, ref System.ParsingInfo parseInfo, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeResult result);
        static /*0x1a1355c*/ bool TryParseQuoteString(string format, int pos, System.Text.StringBuilder result, ref int returnValue);
        static /*0x1a0b1e0*/ bool DoStrictParse(string s, string formatParam, System.Globalization.DateTimeStyles styles, System.Globalization.DateTimeFormatInfo dtfi, ref System.DateTimeResult result);
        static /*0x1a0b044*/ System.Exception GetDateTimeParseException(ref System.DateTimeResult result);

        class MatchNumberDelegate : System.MulticastDelegate
        {
            /*0x180f534*/ MatchNumberDelegate(object object, nint method);
            /*0x180f594*/ bool Invoke(ref System.__DTString str, int digitLen, ref int result);
            /*0x180f810*/ System.IAsyncResult BeginInvoke(ref System.__DTString str, int digitLen, ref int result, System.AsyncCallback callback, object object);
            /*0x180f8e4*/ bool EndInvoke(ref System.__DTString str, ref int result, System.IAsyncResult __result);
        }

        enum DTT
        {
            End = 0,
            NumEnd = 1,
            NumAmpm = 2,
            NumSpace = 3,
            NumDatesep = 4,
            NumTimesep = 5,
            MonthEnd = 6,
            MonthSpace = 7,
            MonthDatesep = 8,
            NumDatesuff = 9,
            NumTimesuff = 10,
            DayOfWeek = 11,
            YearSpace = 12,
            YearDateSep = 13,
            YearEnd = 14,
            TimeZone = 15,
            Era = 16,
            NumUTCTimeMark = 17,
            Unk = 18,
            NumLocalTimeMark = 19,
            Max = 20,
        }

        enum TM
        {
            NotSet = -1,
            AM = 0,
            PM = 1,
        }

        enum DS
        {
            BEGIN = 0,
            N = 1,
            NN = 2,
            D_Nd = 3,
            D_NN = 4,
            D_NNd = 5,
            D_M = 6,
            D_MN = 7,
            D_NM = 8,
            D_MNd = 9,
            D_NDS = 10,
            D_Y = 11,
            D_YN = 12,
            D_YNd = 13,
            D_YM = 14,
            D_YMd = 15,
            D_S = 16,
            T_S = 17,
            T_Nt = 18,
            T_NNt = 19,
            ERROR = 20,
            DX_NN = 21,
            DX_NNN = 22,
            DX_MN = 23,
            DX_NM = 24,
            DX_MNN = 25,
            DX_DS = 26,
            DX_DSN = 27,
            DX_NDS = 28,
            DX_NNDS = 29,
            DX_YNN = 30,
            DX_YMN = 31,
            DX_YN = 32,
            DX_YM = 33,
            TX_N = 34,
            TX_NN = 35,
            TX_NNN = 36,
            TX_TS = 37,
            DX_NNY = 38,
        }
    }

    struct __DTString
    {
        static /*0x0*/ char[] WhiteSpaceChecks;
        /*0x10*/ string Value;
        /*0x18*/ int Index;
        /*0x1c*/ int len;
        /*0x20*/ char m_current;
        /*0x28*/ System.Globalization.CompareInfo m_info;
        /*0x30*/ bool m_checkDigitToken;

        static /*0x226b2f8*/ __DTString();
        /*0xae3a94*/ __DTString(string str, System.Globalization.DateTimeFormatInfo dtfi, bool checkDigitToken);
        /*0xae3ac4*/ __DTString(string str, System.Globalization.DateTimeFormatInfo dtfi);
        /*0xae3acc*/ System.Globalization.CompareInfo get_CompareInfo();
        /*0xae3ad4*/ bool GetNext();
        /*0xae3adc*/ bool AtEnd();
        /*0xae3aec*/ bool Advance(int count);
        /*0xae3af4*/ void GetRegularToken(ref System.TokenType tokenType, ref int tokenValue, System.Globalization.DateTimeFormatInfo dtfi);
        /*0xae3afc*/ System.TokenType GetSeparatorToken(System.Globalization.DateTimeFormatInfo dtfi, ref int indexBeforeSeparator, ref char charBeforeSeparator);
        /*0xae3b04*/ bool MatchSpecifiedWord(string target);
        /*0xae3b0c*/ bool MatchSpecifiedWord(string target, int endIndex);
        /*0xae3b14*/ bool MatchSpecifiedWords(string target, bool checkWordBoundary, ref int matchLength);
        /*0xae3b20*/ bool Match(string str);
        /*0xae3b28*/ bool Match(char ch);
        /*0xae3b30*/ int MatchLongestWords(string[] words, ref int maxMatchStrLen);
        /*0xae3b38*/ int GetRepeatCount();
        /*0xae3b40*/ bool GetNextDigit();
        /*0xae3b48*/ char GetChar();
        /*0xae3b50*/ int GetDigit();
        /*0xae3b58*/ void SkipWhiteSpaces();
        /*0xae3b60*/ bool SkipWhiteSpaceCurrent();
        /*0xae3b68*/ void TrimTail();
        /*0xae3b70*/ void RemoveTrailingInQuoteSpaces();
        /*0xae3b78*/ void RemoveLeadingInQuoteSpaces();
        /*0xae3b80*/ System.DTSubString GetSubString();
        /*0xae3bc0*/ void ConsumeSubString(System.DTSubString sub);
    }

    enum DTSubStringType
    {
        Unknown = 0,
        Invalid = 1,
        Number = 2,
        End = 3,
        Other = 4,
    }

    struct DTSubString
    {
        /*0x10*/ string s;
        /*0x18*/ int index;
        /*0x1c*/ int length;
        /*0x20*/ System.DTSubStringType type;
        /*0x24*/ int value;

        /*0xacee20*/ char get_Item(int relativeIndex);
    }

    struct DateTimeToken
    {
        /*0x10*/ System.DateTimeParse.DTT dtt;
        /*0x14*/ System.TokenType suffix;
        /*0x18*/ int num;
    }

    struct DateTimeRawInfo
    {
        /*0x10*/ int* num;
        /*0x18*/ int numCount;
        /*0x1c*/ int month;
        /*0x20*/ int year;
        /*0x24*/ int dayOfWeek;
        /*0x28*/ int era;
        /*0x2c*/ System.DateTimeParse.TM timeMark;
        /*0x30*/ double fraction;
        /*0x38*/ bool hasSameDateAndTimeSeparators;
        /*0x39*/ bool timeZone;

        /*0xadfa28*/ void Init(int* numberBuffer);
        /*0xadfa4c*/ void AddNumber(int value);
        /*0xadfa64*/ int GetNumber(int index);
    }

    enum ParseFailureKind
    {
        None = 0,
        ArgumentNull = 1,
        Format = 2,
        FormatWithParameter = 3,
        FormatBadDateTimeCalendar = 4,
    }

    enum ParseFlags
    {
        HaveYear = 1,
        HaveMonth = 2,
        HaveDay = 4,
        HaveHour = 8,
        HaveMinute = 16,
        HaveSecond = 32,
        HaveTime = 64,
        HaveDate = 128,
        TimeZoneUsed = 256,
        TimeZoneUtc = 512,
        ParsedMonthName = 1024,
        CaptureOffset = 2048,
        YearDefault = 4096,
        Rfc1123Pattern = 8192,
        UtcSortPattern = 16384,
    }

    struct DateTimeResult
    {
        /*0x10*/ int Year;
        /*0x14*/ int Month;
        /*0x18*/ int Day;
        /*0x1c*/ int Hour;
        /*0x20*/ int Minute;
        /*0x24*/ int Second;
        /*0x28*/ double fraction;
        /*0x30*/ int era;
        /*0x34*/ System.ParseFlags flags;
        /*0x38*/ System.TimeSpan timeZoneOffset;
        /*0x40*/ System.Globalization.Calendar calendar;
        /*0x48*/ System.DateTime parsedDate;
        /*0x50*/ System.ParseFailureKind failure;
        /*0x58*/ string failureMessageID;
        /*0x60*/ object failureMessageFormatArgument;
        /*0x68*/ string failureArgumentName;

        /*0xadfaac*/ void Init();
        /*0xadfacc*/ void SetDate(int year, int month, int day);
        /*0xadfad8*/ void SetFailure(System.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
        /*0xadfae4*/ void SetFailure(System.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName);
    }

    struct ParsingInfo
    {
        /*0x10*/ System.Globalization.Calendar calendar;
        /*0x18*/ int dayOfWeek;
        /*0x1c*/ System.DateTimeParse.TM timeMark;
        /*0x20*/ bool fUseHour12;
        /*0x21*/ bool fUseTwoDigitYear;
        /*0x22*/ bool fAllowInnerWhite;
        /*0x23*/ bool fAllowTrailingWhite;
        /*0x24*/ bool fCustomNumberParser;
        /*0x28*/ System.DateTimeParse.MatchNumberDelegate parseNumberDelegate;

        /*0xaf0dac*/ void Init();
    }

    enum TokenType
    {
        NumberToken = 1,
        YearNumberToken = 2,
        Am = 3,
        Pm = 4,
        MonthToken = 5,
        EndOfString = 6,
        DayOfWeekToken = 7,
        TimeZoneToken = 8,
        EraToken = 9,
        DateWordToken = 10,
        UnknownToken = 11,
        HebrewNumber = 12,
        JapaneseEraToken = 13,
        TEraToken = 14,
        IgnorableSymbol = 15,
        SEP_Unk = 256,
        SEP_End = 512,
        SEP_Space = 768,
        SEP_Am = 1024,
        SEP_Pm = 1280,
        SEP_Date = 1536,
        SEP_Time = 1792,
        SEP_YearSuff = 2048,
        SEP_MonthSuff = 2304,
        SEP_DaySuff = 2560,
        SEP_HourSuff = 2816,
        SEP_MinuteSuff = 3072,
        SEP_SecondSuff = 3328,
        SEP_LocalTimeMark = 3584,
        SEP_DateOrOffset = 3840,
        RegularTokenMask = 255,
        SeparatorTokenMask = 65280,
    }

    struct Guid : System.IFormattable, System.IComparable, System.IComparable<System.Guid>, System.IEquatable<System.Guid>
    {
        static /*0x0*/ System.Guid Empty;
        static /*0x10*/ object _rngAccess;
        static /*0x18*/ System.Security.Cryptography.RandomNumberGenerator _rng;
        static /*0x20*/ System.Security.Cryptography.RandomNumberGenerator _fastRng;
        /*0x10*/ int _a;
        /*0x14*/ short _b;
        /*0x16*/ short _c;
        /*0x18*/ byte _d;
        /*0x19*/ byte _e;
        /*0x1a*/ byte _f;
        /*0x1b*/ byte _g;
        /*0x1c*/ byte _h;
        /*0x1d*/ byte _i;
        /*0x1e*/ byte _j;
        /*0x1f*/ byte _k;

        static /*0x20f040c*/ Guid();
        static /*0x20edadc*/ System.Guid Parse(string input);
        static /*0x20edbec*/ bool TryParseExact(string input, string format, ref System.Guid result);
        static /*0x20ed864*/ bool TryParseGuid(string g, System.Guid.GuidStyles flags, ref System.Guid.GuidResult result);
        static /*0x20ee15c*/ bool TryParseGuidWithHexPrefix(string guidString, ref System.Guid.GuidResult result);
        static /*0x20ee778*/ bool TryParseGuidWithNoStyle(string guidString, ref System.Guid.GuidResult result);
        static /*0x20edddc*/ bool TryParseGuidWithDashes(string guidString, ref System.Guid.GuidResult result);
        static /*0x20eeda0*/ bool StringToShort(string str, int requiredLength, int flags, ref short result, ref System.Guid.GuidResult parseResult);
        static /*0x20eef64*/ bool StringToShort(string str, int* parsePos, int requiredLength, int flags, ref short result, ref System.Guid.GuidResult parseResult);
        static /*0x20eed0c*/ bool StringToInt(string str, int requiredLength, int flags, ref int result, ref System.Guid.GuidResult parseResult);
        static /*0x20eeec4*/ bool StringToInt(string str, ref int parsePos, int requiredLength, int flags, ref int result, ref System.Guid.GuidResult parseResult);
        static /*0x20ef01c*/ bool StringToInt(string str, int* parsePos, int requiredLength, int flags, ref int result, ref System.Guid.GuidResult parseResult);
        static /*0x20eee34*/ bool StringToLong(string str, ref int parsePos, int flags, ref long result, ref System.Guid.GuidResult parseResult);
        static /*0x20ef228*/ bool StringToLong(string str, int* parsePos, int flags, ref long result, ref System.Guid.GuidResult parseResult);
        static /*0x20eead4*/ string EatAllWhitespace(string str);
        static /*0x20eebf4*/ bool IsHexPrefix(string str, int i);
        static /*0x20eff54*/ bool op_Equality(System.Guid a, System.Guid b);
        static /*0x20f0004*/ char HexToChar(int a);
        static /*0x20f0020*/ int HexsToChars(char* guidChars, int offset, int a, int b);
        static /*0x20f00ac*/ int HexsToChars(char* guidChars, int offset, int a, int b, bool hex);
        static /*0x20f020c*/ System.Guid NewGuid();
        /*0xae10e4*/ Guid(byte[] b);
        /*0xae10ec*/ Guid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);
        /*0xae112c*/ Guid(string g);
        /*0xae1134*/ byte[] ToByteArray();
        /*0xae113c*/ string ToString();
        /*0xae1144*/ int GetHashCode();
        /*0xae116c*/ bool Equals(object o);
        /*0xae1174*/ bool Equals(System.Guid g);
        /*0xae117c*/ int GetResult(uint me, uint them);
        /*0xae118c*/ int CompareTo(object value);
        /*0xae1194*/ int CompareTo(System.Guid value);
        /*0xae119c*/ string ToString(string format);
        /*0xae11a4*/ string ToString(string format, System.IFormatProvider provider);

        enum GuidStyles
        {
            None = 0,
            AllowParenthesis = 1,
            AllowBraces = 2,
            AllowDashes = 4,
            AllowHexPrefix = 8,
            RequireParenthesis = 16,
            RequireBraces = 32,
            RequireDashes = 64,
            RequireHexPrefix = 128,
            HexFormat = 160,
            NumberFormat = 0,
            DigitFormat = 64,
            BraceFormat = 96,
            ParenthesisFormat = 80,
            Any = 15,
        }

        enum GuidParseThrowStyle
        {
            None = 0,
            All = 1,
            AllButOverflow = 2,
        }

        enum ParseFailureKind
        {
            None = 0,
            ArgumentNull = 1,
            Format = 2,
            FormatWithParameter = 3,
            NativeException = 4,
            FormatWithInnerException = 5,
        }

        struct GuidResult
        {
            /*0x10*/ System.Guid parsedGuid;
            /*0x20*/ System.Guid.GuidParseThrowStyle throwStyle;
            /*0x24*/ System.Guid.ParseFailureKind m_failure;
            /*0x28*/ string m_failureMessageID;
            /*0x30*/ object m_failureMessageFormatArgument;
            /*0x38*/ string m_failureArgumentName;
            /*0x40*/ System.Exception m_innerException;

            /*0xacabec*/ void Init(System.Guid.GuidParseThrowStyle canThrow);
            /*0xacabf4*/ void SetFailure(System.Exception nativeException);
            /*0xacac04*/ void SetFailure(System.Guid.ParseFailureKind failure, string failureMessageID);
            /*0xacac18*/ void SetFailure(System.Guid.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
            /*0xacac28*/ void SetFailure(System.Guid.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName, System.Exception innerException);
            /*0xacac30*/ System.Exception GetGuidParseException();
        }
    }

    interface IAsyncResult
    {
        bool get_IsCompleted();
        System.Threading.WaitHandle get_AsyncWaitHandle();
        object get_AsyncState();
        bool get_CompletedSynchronously();
    }

    interface ICloneable
    {
        object Clone();
    }

    interface IComparable
    {
        int CompareTo(object obj);
    }

    interface IComparable<T>
    {
        int CompareTo(T other);
    }

    interface IConvertible
    {
        System.TypeCode GetTypeCode();
        bool ToBoolean(System.IFormatProvider provider);
        char ToChar(System.IFormatProvider provider);
        sbyte ToSByte(System.IFormatProvider provider);
        byte ToByte(System.IFormatProvider provider);
        short ToInt16(System.IFormatProvider provider);
        ushort ToUInt16(System.IFormatProvider provider);
        int ToInt32(System.IFormatProvider provider);
        uint ToUInt32(System.IFormatProvider provider);
        long ToInt64(System.IFormatProvider provider);
        ulong ToUInt64(System.IFormatProvider provider);
        float ToSingle(System.IFormatProvider provider);
        double ToDouble(System.IFormatProvider provider);
        decimal ToDecimal(System.IFormatProvider provider);
        System.DateTime ToDateTime(System.IFormatProvider provider);
        string ToString(System.IFormatProvider provider);
        object ToType(System.Type conversionType, System.IFormatProvider provider);
    }

    interface ICustomFormatter
    {
        string Format(string format, object arg, System.IFormatProvider formatProvider);
    }

    interface IDisposable
    {
        void Dispose();
    }

    interface IEquatable<T>
    {
        bool Equals(T other);
    }

    interface IFormatProvider
    {
        object GetFormat(System.Type formatType);
    }

    interface IFormattable
    {
        string ToString(string format, System.IFormatProvider formatProvider);
    }

    class IndexOutOfRangeException : System.SystemException
    {
        /*0x1a85cb4*/ IndexOutOfRangeException();
        /*0x1a85d24*/ IndexOutOfRangeException(string message);
        /*0x1a85d58*/ IndexOutOfRangeException(string message, System.Exception innerException);
        /*0x1a85d8c*/ IndexOutOfRangeException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InsufficientExecutionStackException : System.SystemException
    {
        /*0x1a85d94*/ InsufficientExecutionStackException();
        /*0x1a85e04*/ InsufficientExecutionStackException(string message);
        /*0x1a85e38*/ InsufficientExecutionStackException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct Int16 : System.IComparable, System.IFormattable, System.IConvertible, System.IComparable<short>, System.IEquatable<short>
    {
        static short MaxValue = 32767;
        static short MinValue = -32768;
        /*0x10*/ short m_value;

        static /*0x1a86110*/ short Parse(string s, System.IFormatProvider provider);
        static /*0x1a8629c*/ short Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x1a86144*/ short Parse(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x1a862ec*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref short result);
        static /*0x1a86344*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref short result);
        /*0xad0bdc*/ int CompareTo(object value);
        /*0xad0be4*/ int CompareTo(short value);
        /*0xad0bf0*/ bool Equals(object obj);
        /*0xad0bf8*/ bool Equals(short obj);
        /*0xad0c08*/ int GetHashCode();
        /*0xad0c14*/ string ToString();
        /*0xad0c48*/ string ToString(System.IFormatProvider provider);
        /*0xad0c80*/ string ToString(string format, System.IFormatProvider provider);
        /*0xad0cb8*/ string ToString(string format, System.Globalization.NumberFormatInfo info);
        /*0xad0cc0*/ System.TypeCode GetTypeCode();
        /*0xad0cc8*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xad0cd0*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xad0cd8*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xad0ce0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xad0ce8*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xad0cf0*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xad0cf8*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xad0d00*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xad0d08*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xad0d10*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xad0d18*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xad0d20*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xad0d28*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xad0d30*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xad0d3c*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Int32 : System.IComparable, System.IFormattable, System.IConvertible, System.IComparable<int>, System.IEquatable<int>
    {
        static int MaxValue = 2147483647;
        static int MinValue = -2147483648;
        /*0x10*/ int m_value;

        static /*0x1a86cf4*/ int Parse(string s);
        static /*0x1a86d28*/ int Parse(string s, System.Globalization.NumberStyles style);
        static /*0x1a86d6c*/ int Parse(string s, System.IFormatProvider provider);
        static /*0x1a86da4*/ int Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x1a86df8*/ bool TryParse(string s, ref int result);
        static /*0x1a86e34*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref int result);
        /*0xad0d44*/ int CompareTo(object value);
        /*0xad0d4c*/ int CompareTo(int value);
        /*0xad0d60*/ bool Equals(object obj);
        /*0xad0d68*/ bool Equals(int obj);
        /*0xad0d78*/ int GetHashCode();
        /*0xad0d80*/ string ToString();
        /*0xad0db4*/ string ToString(string format);
        /*0xad0dec*/ string ToString(System.IFormatProvider provider);
        /*0xad0e24*/ string ToString(string format, System.IFormatProvider provider);
        /*0xad0e60*/ System.TypeCode GetTypeCode();
        /*0xad0e68*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xad0e70*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xad0e78*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xad0e80*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xad0e88*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xad0e90*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xad0e98*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xad0ea0*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xad0ea8*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xad0eb0*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xad0eb8*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xad0ec0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xad0ec8*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xad0ed0*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xad0edc*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct Int64 : System.IComparable, System.IFormattable, System.IConvertible, System.IComparable<long>, System.IEquatable<long>
    {
        static long MaxValue = 9223372036854775807;
        static long MinValue = -9223372036854775808;
        /*0x10*/ long m_value;

        static /*0x1a8779c*/ long Parse(string s);
        static /*0x1a877d0*/ long Parse(string s, System.IFormatProvider provider);
        static /*0x1a87808*/ long Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x1a8785c*/ bool TryParse(string s, ref long result);
        static /*0x1a87898*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref long result);
        /*0xad0ee4*/ int CompareTo(object value);
        /*0xad0eec*/ int CompareTo(long value);
        /*0xad0f00*/ bool Equals(object obj);
        /*0xad0f08*/ bool Equals(long obj);
        /*0xad0f18*/ int GetHashCode();
        /*0xad0f24*/ string ToString();
        /*0xad0f58*/ string ToString(System.IFormatProvider provider);
        /*0xad0f90*/ string ToString(string format);
        /*0xad0fc8*/ string ToString(string format, System.IFormatProvider provider);
        /*0xad1004*/ System.TypeCode GetTypeCode();
        /*0xad100c*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xad1014*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xad101c*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xad1024*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xad102c*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xad1034*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xad103c*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xad1044*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xad104c*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xad1054*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xad105c*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xad1064*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xad106c*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xad1074*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xad1080*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class InvalidCastException : System.SystemException
    {
        /*0x1a89e4c*/ InvalidCastException();
        /*0x1a86990*/ InvalidCastException(string message);
        /*0x1a89ebc*/ InvalidCastException(string message, System.Exception innerException);
        /*0x1a89ef0*/ InvalidCastException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InvalidOperationException : System.SystemException
    {
        /*0x1a89fa4*/ InvalidOperationException();
        /*0x1a83578*/ InvalidOperationException(string message);
        /*0x1a8a014*/ InvalidOperationException(string message, System.Exception innerException);
        /*0x1a8a048*/ InvalidOperationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InvalidProgramException : System.SystemException
    {
        /*0x1a8a050*/ InvalidProgramException();
        /*0x1a8a0c0*/ InvalidProgramException(string message);
        /*0x1a8a0f4*/ InvalidProgramException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class InvalidTimeZoneException : System.Exception
    {
        /*0x1a8a0fc*/ InvalidTimeZoneException(string message);
        /*0x1a8a170*/ InvalidTimeZoneException(string message, System.Exception innerException);
        /*0x1a8a1ec*/ InvalidTimeZoneException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1a8a278*/ InvalidTimeZoneException();
    }

    interface IServiceProvider
    {
        object GetService(System.Type serviceType);
    }

    class Math
    {
        static int maxRoundingDigits = 15;
        static double PI = 3.141592653589793;
        static double E = 2.718281828459045;
        static /*0x0*/ double doubleRoundLimit;
        static /*0x8*/ double[] roundPower10Double;

        static /*0x1c14ae4*/ Math();
        static /*0x1c13af4*/ double Acos(double d);
        static /*0x1c13af8*/ double Asin(double d);
        static /*0x1c13afc*/ double Atan(double d);
        static /*0x1c13b00*/ double Atan2(double y, double x);
        static /*0x1c13b04*/ double Ceiling(double a);
        static /*0x1c13b0c*/ double Cos(double d);
        static /*0x1c13b10*/ double Cosh(double value);
        static /*0x1c13b14*/ double Floor(double d);
        static /*0x1c13b1c*/ double InternalRound(double value, int digits, System.MidpointRounding mode);
        static /*0x1c13d88*/ double InternalTruncate(double d);
        static /*0x1c13df0*/ double Sin(double a);
        static /*0x1c13df4*/ double Tan(double a);
        static /*0x1c13df8*/ double Sinh(double value);
        static /*0x1c13dfc*/ double Round(double a);
        static /*0x1c13e7c*/ double Round(double value, int digits);
        static /*0x1c13f5c*/ double Round(double value, System.MidpointRounding mode);
        static /*0x1c13fd0*/ double Round(double value, int digits, System.MidpointRounding mode);
        static /*0x1c141b8*/ decimal Round(decimal d);
        static /*0x1c13cfc*/ double SplitFractionDouble(double* value);
        static /*0x1c14230*/ decimal Truncate(decimal d);
        static /*0x1c142a4*/ double Truncate(double d);
        static /*0x1c1430c*/ double Sqrt(double d);
        static /*0x1c14324*/ double Log(double d);
        static /*0x1c14328*/ double Pow(double x, double y);
        static /*0x1c1432c*/ int Abs(int value);
        static /*0x1c143a0*/ int AbsHelper(int value);
        static /*0x1c14410*/ long Abs(long value);
        static /*0x1c14484*/ long AbsHelper(long value);
        static /*0x1c144f4*/ float Abs(float value);
        static /*0x1c144fc*/ double Abs(double value);
        static /*0x1c14504*/ decimal Abs(decimal value);
        static /*0x1c14578*/ sbyte Max(sbyte val1, sbyte val2);
        static /*0x1c14588*/ byte Max(byte val1, byte val2);
        static /*0x1c14598*/ short Max(short val1, short val2);
        static /*0x1c145a8*/ ushort Max(ushort val1, ushort val2);
        static /*0x1c145b8*/ int Max(int val1, int val2);
        static /*0x1c145c4*/ uint Max(uint val1, uint val2);
        static /*0x1c145d0*/ long Max(long val1, long val2);
        static /*0x1c145dc*/ ulong Max(ulong val1, ulong val2);
        static /*0x1c145e8*/ float Max(float val1, float val2);
        static /*0x1c1462c*/ double Max(double val1, double val2);
        static /*0x1c146b8*/ decimal Max(decimal val1, decimal val2);
        static /*0x1c14744*/ sbyte Min(sbyte val1, sbyte val2);
        static /*0x1c14754*/ byte Min(byte val1, byte val2);
        static /*0x1c14764*/ short Min(short val1, short val2);
        static /*0x1c14774*/ ushort Min(ushort val1, ushort val2);
        static /*0x1c14784*/ int Min(int val1, int val2);
        static /*0x1c14790*/ uint Min(uint val1, uint val2);
        static /*0x1c1479c*/ long Min(long val1, long val2);
        static /*0x1c147a8*/ ulong Min(ulong val1, ulong val2);
        static /*0x1c147b4*/ float Min(float val1, float val2);
        static /*0x1c147f8*/ double Min(double val1, double val2);
        static /*0x1c14884*/ decimal Min(decimal val1, decimal val2);
        static /*0x1c14910*/ double Log(double a, double newBase);
        static /*0x1c14a5c*/ int Sign(float value);
        static /*0x1c13d00*/ int Sign(double value);
    }

    class MemberAccessException : System.SystemException
    {
        /*0x1c14b90*/ MemberAccessException();
        /*0x1c14c00*/ MemberAccessException(string message);
        /*0x1c14c34*/ MemberAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class MethodAccessException : System.MemberAccessException
    {
        /*0x1c1a1f8*/ MethodAccessException();
        /*0x1c1a280*/ MethodAccessException(string message);
        /*0x1c1a2cc*/ MethodAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum MidpointRounding
    {
        ToEven = 0,
        AwayFromZero = 1,
    }

    class MissingFieldException : System.MissingMemberException, System.Runtime.Serialization.ISerializable
    {
        /*0x1c1e6d4*/ MissingFieldException();
        /*0x1c1e78c*/ MissingFieldException(string message);
        /*0x1c1e7bc*/ MissingFieldException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1c1ec04*/ MissingFieldException(string className, string fieldName);
        /*0x1c1e930*/ string get_Message();
    }

    class MissingMemberException : System.MemberAccessException, System.Runtime.Serialization.ISerializable
    {
        /*0x88*/ string ClassName;
        /*0x90*/ string MemberName;
        /*0x98*/ byte[] Signature;

        static /*0x1c1ec00*/ string FormatSignature(byte[] signature);
        /*0x1c1ec38*/ MissingMemberException();
        /*0x1c1e740*/ MissingMemberException(string message);
        /*0x1c1e7c0*/ MissingMemberException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1c1ea84*/ string get_Message();
        /*0x1c1ed38*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class MissingMethodException : System.MissingMemberException, System.Runtime.Serialization.ISerializable
    {
        /*0xa0*/ string signature;

        /*0x1c1eef0*/ MissingMethodException();
        /*0x1c1ef5c*/ MissingMethodException(string message);
        /*0x1c1ef8c*/ MissingMethodException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1c1f0a0*/ MissingMethodException(string className, string methodName);
        /*0x1c1f0d4*/ MissingMethodException(string className, string methodName, string signature, string message);
        /*0x1c1ef90*/ string get_Message();
    }

    class MulticastNotSupportedException : System.SystemException
    {
        /*0x22a5e70*/ MulticastNotSupportedException();
        /*0x22a5ee0*/ MulticastNotSupportedException(string message);
        /*0x22a5f14*/ MulticastNotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class NonSerializedAttribute : System.Attribute
    {
        /*0x22a67e8*/ NonSerializedAttribute();
    }

    class NotImplementedException : System.SystemException
    {
        /*0x22a8794*/ NotImplementedException();
        /*0x22a8804*/ NotImplementedException(string message);
        /*0x22a8838*/ NotImplementedException(string message, System.Exception inner);
        /*0x22a886c*/ NotImplementedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class NotSupportedException : System.SystemException
    {
        /*0x22a8874*/ NotSupportedException();
        /*0x22a88e4*/ NotSupportedException(string message);
        /*0x22a8918*/ NotSupportedException(string message, System.Exception innerException);
        /*0x22a894c*/ NotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class NullReferenceException : System.SystemException
    {
        /*0x22a8a48*/ NullReferenceException();
        /*0x22a8ab8*/ NullReferenceException(string message);
        /*0x22a8aec*/ NullReferenceException(string message, System.Exception innerException);
        /*0x22a8b20*/ NullReferenceException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Number
    {
        static /*0x22a8ccc*/ bool NumberBufferToDecimal(byte* number, ref decimal value);
        static /*0x22a8cd0*/ bool NumberBufferToDouble(byte* number, ref double value);
        static /*0x22a8cd4*/ string FormatDecimal(decimal value, string format, System.Globalization.NumberFormatInfo info);
        static /*0x22a8e2c*/ string FormatDouble(double value, string format, System.Globalization.NumberFormatInfo info);
        static /*0x22a8fcc*/ string FormatInt32(int value, string format, System.Globalization.NumberFormatInfo info);
        static /*0x22a90f4*/ string FormatUInt32(uint value, string format, System.Globalization.NumberFormatInfo info);
        static /*0x22a921c*/ string FormatInt64(long value, string format, System.Globalization.NumberFormatInfo info);
        static /*0x22a9340*/ string FormatUInt64(ulong value, string format, System.Globalization.NumberFormatInfo info);
        static /*0x22a9464*/ string FormatSingle(float value, string format, System.Globalization.NumberFormatInfo info);
        static /*0x22a9604*/ bool HexNumberToInt32(ref System.Number.NumberBuffer number, ref int value);
        static /*0x22a96d0*/ bool HexNumberToInt64(ref System.Number.NumberBuffer number, ref long value);
        static /*0x22a9638*/ bool HexNumberToUInt32(ref System.Number.NumberBuffer number, ref uint value);
        static /*0x22a9704*/ bool HexNumberToUInt64(ref System.Number.NumberBuffer number, ref ulong value);
        static /*0x22a97a0*/ bool IsWhite(char ch);
        static /*0x22a97c8*/ bool NumberToInt32(ref System.Number.NumberBuffer number, ref int value);
        static /*0x22a9854*/ bool NumberToInt64(ref System.Number.NumberBuffer number, ref long value);
        static /*0x22a98d8*/ bool NumberToUInt32(ref System.Number.NumberBuffer number, ref uint value);
        static /*0x22a995c*/ bool NumberToUInt64(ref System.Number.NumberBuffer number, ref ulong value);
        static /*0x22a99e0*/ char* MatchChars(char* p, string str);
        static /*0x22a9a54*/ char* MatchChars(char* p, char* str);
        static /*0x22a9aa0*/ decimal ParseDecimal(string value, System.Globalization.NumberStyles options, System.Globalization.NumberFormatInfo numfmt);
        static /*0x22a9d24*/ double ParseDouble(string value, System.Globalization.NumberStyles options, System.Globalization.NumberFormatInfo numfmt);
        static /*0x22a9f88*/ int ParseInt32(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x22aa0f0*/ long ParseInt64(string value, System.Globalization.NumberStyles options, System.Globalization.NumberFormatInfo numfmt);
        static /*0x22aa258*/ bool ParseNumber(ref char* str, System.Globalization.NumberStyles options, ref System.Number.NumberBuffer number, System.Text.StringBuilder sb, System.Globalization.NumberFormatInfo numfmt, bool parseDecimal);
        static /*0x22aa780*/ float ParseSingle(string value, System.Globalization.NumberStyles options, System.Globalization.NumberFormatInfo numfmt);
        static /*0x22aa9ec*/ uint ParseUInt32(string value, System.Globalization.NumberStyles options, System.Globalization.NumberFormatInfo numfmt);
        static /*0x22aab34*/ ulong ParseUInt64(string value, System.Globalization.NumberStyles options, System.Globalization.NumberFormatInfo numfmt);
        static /*0x22a9be4*/ void StringToNumber(string str, System.Globalization.NumberStyles options, ref System.Number.NumberBuffer number, System.Globalization.NumberFormatInfo info, bool parseDecimal);
        static /*0x22aac7c*/ bool TrailingZeros(string s, int index);
        static /*0x22aace4*/ bool TryParseDecimal(string value, System.Globalization.NumberStyles options, System.Globalization.NumberFormatInfo numfmt, ref decimal result);
        static /*0x22aadec*/ bool TryParseDouble(string value, System.Globalization.NumberStyles options, System.Globalization.NumberFormatInfo numfmt, ref double result);
        static /*0x22aaef4*/ bool TryParseInt32(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref int result);
        static /*0x22ab028*/ bool TryParseInt64(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref long result);
        static /*0x22ab154*/ bool TryParseSingle(string value, System.Globalization.NumberStyles options, System.Globalization.NumberFormatInfo numfmt, ref float result);
        static /*0x22ab294*/ bool TryParseUInt32(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref uint result);
        static /*0x22ab3ac*/ bool TryParseUInt64(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref ulong result);
        static /*0x22a9f74*/ bool TryStringToNumber(string str, System.Globalization.NumberStyles options, ref System.Number.NumberBuffer number, System.Globalization.NumberFormatInfo numfmt, bool parseDecimal);
        static /*0x22ab4c4*/ bool TryStringToNumber(string str, System.Globalization.NumberStyles options, ref System.Number.NumberBuffer number, System.Text.StringBuilder sb, System.Globalization.NumberFormatInfo numfmt, bool parseDecimal);

        struct NumberBuffer
        {
            static /*0x0*/ int NumberBufferBytes;
            /*0x10*/ byte* baseAddress;
            /*0x18*/ char* digits;
            /*0x20*/ int precision;
            /*0x24*/ int scale;
            /*0x28*/ bool sign;

            static /*0x1815610*/ NumberBuffer();
            /*0xacaee8*/ NumberBuffer(byte* stackBuffer);
            /*0xacaefc*/ byte* PackForNative();
        }
    }

    class ObjectDisposedException : System.InvalidOperationException
    {
        /*0x88*/ string objectName;

        /*0x22b1814*/ ObjectDisposedException();
        /*0x22b18d0*/ ObjectDisposedException(string objectName);
        /*0x22b188c*/ ObjectDisposedException(string objectName, string message);
        /*0x22b1af4*/ ObjectDisposedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x22b1954*/ string get_Message();
        /*0x22b1a70*/ string get_ObjectName();
        /*0x22b1b88*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ObsoleteAttribute : System.Attribute
    {
        /*0x10*/ string _message;
        /*0x18*/ bool _error;

        /*0x2145578*/ ObsoleteAttribute();
        /*0x21455a4*/ ObsoleteAttribute(string message);
        /*0x21455d4*/ ObsoleteAttribute(string message, bool error);
        /*0x2145614*/ string get_Message();
    }

    class OperationCanceledException : System.SystemException
    {
        /*0x88*/ System.Threading.CancellationToken _cancellationToken;

        /*0x214a7b0*/ OperationCanceledException();
        /*0x214a820*/ OperationCanceledException(string message);
        /*0x214a854*/ OperationCanceledException(string message, System.Threading.CancellationToken token);
        /*0x214a894*/ OperationCanceledException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x214a7a0*/ System.Threading.CancellationToken get_CancellationToken();
        /*0x214a7a8*/ void set_CancellationToken(System.Threading.CancellationToken value);
    }

    class OutOfMemoryException : System.SystemException
    {
        /*0x214abf8*/ OutOfMemoryException();
        /*0x214ac80*/ OutOfMemoryException(string message);
        /*0x214acb4*/ OutOfMemoryException(string message, System.Exception innerException);
        /*0x214ace8*/ OutOfMemoryException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class OverflowException : System.ArithmeticException
    {
        /*0x214acf0*/ OverflowException();
        /*0x214ad60*/ OverflowException(string message);
        /*0x214ad94*/ OverflowException(string message, System.Exception innerException);
        /*0x214adc8*/ OverflowException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ParamArrayAttribute : System.Attribute
    {
        /*0x2526348*/ ParamArrayAttribute();
    }

    struct ParamsArray
    {
        static /*0x0*/ object[] oneArgArray;
        static /*0x8*/ object[] twoArgArray;
        static /*0x10*/ object[] threeArgArray;
        /*0x10*/ object arg0;
        /*0x18*/ object arg1;
        /*0x20*/ object arg2;
        /*0x28*/ object[] args;

        static /*0x25282f8*/ ParamsArray();
        /*0xaf0d18*/ ParamsArray(object arg0);
        /*0xaf0d20*/ ParamsArray(object arg0, object arg1);
        /*0xaf0d28*/ ParamsArray(object arg0, object arg1, object arg2);
        /*0xaf0d30*/ ParamsArray(object[] args);
        /*0xaf0d38*/ int get_Length();
        /*0xaf0d54*/ object get_Item(int index);
        /*0xaf0d68*/ object GetAtSlow(int index);
    }

    class PlatformNotSupportedException : System.NotSupportedException
    {
        /*0x252f98c*/ PlatformNotSupportedException();
        /*0x252f9fc*/ PlatformNotSupportedException(string message);
        /*0x252fa30*/ PlatformNotSupportedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class Random
    {
        static int MBIG = 2147483647;
        static int MSEED = 161803398;
        static int MZ = 0;
        /*0x10*/ int inext;
        /*0x14*/ int inextp;
        /*0x18*/ int[] SeedArray;

        /*0x198aa64*/ Random();
        /*0x198aa90*/ Random(int Seed);
        /*0x198acf8*/ double Sample();
        /*0x198ad1c*/ int InternalSample();
        /*0x198adb8*/ int Next();
        /*0x198adbc*/ double GetSampleForLargeRange();
        /*0x198ae0c*/ int Next(int minValue, int maxValue);
        /*0x198af94*/ int Next(int maxValue);
        /*0x198b09c*/ double NextDouble();
        /*0x198b0a8*/ void NextBytes(byte[] buffer);
    }

    class RankException : System.SystemException
    {
        /*0x198b22c*/ RankException();
        /*0x198b29c*/ RankException(string message);
        /*0x198b2d0*/ RankException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    enum TypeNameFormatFlags
    {
        FormatBasic = 0,
        FormatNamespace = 1,
        FormatFullInst = 2,
        FormatAssembly = 4,
        FormatSignature = 8,
        FormatNoVersion = 16,
        FormatAngleBrackets = 64,
        FormatStubInfo = 128,
        FormatGenericParam = 256,
        FormatSerialization = 259,
    }

    enum TypeNameKind
    {
        Name = 0,
        ToString = 1,
        SerializationName = 2,
        FullName = 3,
    }

    class RuntimeType : System.Reflection.TypeInfo, System.Runtime.Serialization.ISerializable, System.ICloneable
    {
        static System.Reflection.BindingFlags MemberBindingMask = 255;
        static System.Reflection.BindingFlags InvocationMask = 65280;
        static System.Reflection.BindingFlags BinderNonCreateInstance = 15616;
        static System.Reflection.BindingFlags BinderGetSetProperty = 12288;
        static System.Reflection.BindingFlags BinderSetInvokeProperty = 8448;
        static System.Reflection.BindingFlags BinderGetSetField = 3072;
        static System.Reflection.BindingFlags BinderSetInvokeField = 2304;
        static System.Reflection.BindingFlags BinderNonFieldGetSet = 16773888;
        static System.Reflection.BindingFlags ClassicBindingMask = 61696;
        static /*0x0*/ System.RuntimeType ValueType;
        static /*0x8*/ System.RuntimeType EnumType;
        static /*0x10*/ System.RuntimeType ObjectType;
        static /*0x18*/ System.RuntimeType StringType;
        static /*0x20*/ System.RuntimeType DelegateType;
        static /*0x28*/ System.Type[] s_SICtorParamTypes;
        static /*0x30*/ System.RuntimeType s_typedRef;
        /*0x18*/ System.MonoTypeInfo type_info;
        /*0x20*/ object GenericCache;
        /*0x28*/ System.Reflection.RuntimeConstructorInfo m_serializationCtor;

        static /*0x2160814*/ RuntimeType();
        static /*0x215679c*/ void ThrowIfTypeNeverValidGenericArgument(System.RuntimeType type);
        static /*0x2156904*/ void SanityCheckGenericArguments(System.RuntimeType[] genericArguments, System.RuntimeType[] genericParamters);
        static /*0x2156b48*/ void SplitName(string fullname, ref string name, ref string ns);
        static /*0x2156c38*/ void FilterHelper(System.Reflection.BindingFlags bindingFlags, ref string name, bool allowPrefixLookup, ref bool prefixLookup, ref bool ignoreCase, ref System.RuntimeType.MemberListType listType);
        static /*0x2156d6c*/ void FilterHelper(System.Reflection.BindingFlags bindingFlags, ref string name, ref bool ignoreCase, ref System.RuntimeType.MemberListType listType);
        static /*0x2156e04*/ bool FilterApplyPrefixLookup(System.Reflection.MemberInfo memberInfo, string name, bool ignoreCase);
        static /*0x2156e68*/ bool FilterApplyBase(System.Reflection.MemberInfo memberInfo, System.Reflection.BindingFlags bindingFlags, bool isPublic, bool isNonProtectedInternal, bool isStatic, string name, bool prefixLookup);
        static /*0x215705c*/ bool FilterApplyType(System.Type type, System.Reflection.BindingFlags bindingFlags, string name, bool prefixLookup, string ns);
        static /*0x2157188*/ bool FilterApplyMethodInfo(System.Reflection.RuntimeMethodInfo method, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes);
        static /*0x21574b4*/ bool FilterApplyConstructorInfo(System.Reflection.RuntimeConstructorInfo constructor, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes);
        static /*0x2157218*/ bool FilterApplyMethodBase(System.Reflection.MethodBase methodBase, System.Reflection.BindingFlags methodFlags, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes);
        static /*0x2156b3c*/ bool op_Equality(System.RuntimeType left, System.RuntimeType right);
        static /*0x2157860*/ bool op_Inequality(System.RuntimeType left, System.RuntimeType right);
        static /*0x215f59c*/ object IsConvertibleToPrimitiveType(object value, System.Type targetType);
        static /*0x2160120*/ System.Type MakePointerType(System.Type type);
        static /*0x2160398*/ object CreateInstanceForAnotherGenericParameter(System.Type genericType, System.RuntimeType genericArgument);
        static /*0x215c314*/ System.Type MakeGenericType(System.Type gt, System.Type[] types);
        static /*0x21605a4*/ System.TypeCode GetTypeCodeImplInternal(System.Type type);
        static /*0x215f16c*/ object CreateInstanceInternal(System.Type type);
        /*0x2157544*/ RuntimeType();
        /*0x215758c*/ bool IsSpecialSerializableType();
        /*0x215786c*/ System.RuntimeType.ListBuilder<System.Reflection.MethodInfo> GetMethodCandidates(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, bool allowPrefixLookup);
        /*0x2157d28*/ System.RuntimeType.ListBuilder<System.Reflection.ConstructorInfo> GetConstructorCandidates(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, bool allowPrefixLookup);
        /*0x21581d4*/ System.RuntimeType.ListBuilder<System.Reflection.PropertyInfo> GetPropertyCandidates(string name, System.Reflection.BindingFlags bindingAttr, System.Type[] types, bool allowPrefixLookup);
        /*0x2158688*/ System.RuntimeType.ListBuilder<System.Reflection.EventInfo> GetEventCandidates(string name, System.Reflection.BindingFlags bindingAttr, bool allowPrefixLookup);
        /*0x2158afc*/ System.RuntimeType.ListBuilder<System.Reflection.FieldInfo> GetFieldCandidates(string name, System.Reflection.BindingFlags bindingAttr, bool allowPrefixLookup);
        /*0x2158f70*/ System.RuntimeType.ListBuilder<System.Type> GetNestedTypeCandidates(string fullname, System.Reflection.BindingFlags bindingAttr, bool allowPrefixLookup);
        /*0x21594bc*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
        /*0x2159548*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
        /*0x21595e4*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
        /*0x215966c*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
        /*0x21596f0*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConv, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x2159978*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x2159b94*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x2159e14*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x2159fb4*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x215a27c*/ System.Type GetNestedType(string fullname, System.Reflection.BindingFlags bindingAttr);
        /*0x215a494*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
        /*0x215a97c*/ System.Reflection.Module get_Module();
        /*0x21535f8*/ System.Reflection.RuntimeModule GetRuntimeModule();
        /*0x215a980*/ System.Reflection.Assembly get_Assembly();
        /*0x215a984*/ System.Reflection.RuntimeAssembly GetRuntimeAssembly();
        /*0x215a98c*/ System.RuntimeTypeHandle get_TypeHandle();
        /*0x215a9c0*/ bool IsInstanceOfType(object o);
        /*0x215a9c8*/ bool IsSubclassOf(System.Type type);
        /*0x215ab5c*/ bool IsAssignableFrom(System.Reflection.TypeInfo typeInfo);
        /*0x215ac1c*/ bool IsAssignableFrom(System.Type c);
        /*0x215ad18*/ bool IsEquivalentTo(System.Type other);
        /*0x215adc8*/ System.Type get_BaseType();
        /*0x215766c*/ System.RuntimeType GetBaseType();
        /*0x215add4*/ System.Type get_UnderlyingSystemType();
        /*0x215add8*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
        /*0x215ade0*/ bool IsContextfulImpl();
        /*0x215ae7c*/ bool IsByRefImpl();
        /*0x215ae84*/ bool IsPrimitiveImpl();
        /*0x215ae8c*/ bool IsPointerImpl();
        /*0x215ae94*/ bool IsCOMObjectImpl();
        /*0x215aea8*/ bool IsValueTypeImpl();
        /*0x215afe4*/ bool get_IsEnum();
        /*0x215b064*/ bool HasElementTypeImpl();
        /*0x215b0ac*/ System.Reflection.GenericParameterAttributes get_GenericParameterAttributes();
        /*0x215b158*/ bool get_IsSzArray();
        /*0x215b1ac*/ bool IsArrayImpl();
        /*0x215b1b4*/ int GetArrayRank();
        /*0x215b23c*/ System.Type GetElementType();
        /*0x215b244*/ string[] GetEnumNames();
        /*0x215b370*/ System.Array GetEnumValues();
        /*0x215b548*/ System.Type GetEnumUnderlyingType();
        /*0x215b628*/ bool IsEnumDefined(object value);
        /*0x215bb94*/ string GetEnumName(object value);
        /*0x215bdac*/ System.RuntimeType[] GetGenericArgumentsInternal();
        /*0x215be28*/ System.Type[] GetGenericArguments();
        /*0x215bea0*/ System.Type MakeGenericType(System.Type[] instantiation);
        /*0x215c318*/ bool get_IsGenericTypeDefinition();
        /*0x215c320*/ bool get_IsGenericParameter();
        /*0x215c324*/ int get_GenericParameterPosition();
        /*0x215c3ac*/ System.Type GetGenericTypeDefinition();
        /*0x215c434*/ bool get_IsGenericType();
        /*0x215c43c*/ bool get_IsConstructedGenericType();
        /*0x215c490*/ object InvokeMember(string name, System.Reflection.BindingFlags bindingFlags, System.Reflection.Binder binder, object target, object[] providedArgs, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParams);
        /*0x215d634*/ bool Equals(object obj);
        /*0x215d640*/ object Clone();
        /*0x215d644*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x215d6b0*/ object[] GetCustomAttributes(bool inherit);
        /*0x215d764*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
        /*0x215d90c*/ bool IsDefined(System.Type attributeType, bool inherit);
        /*0x215dab4*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData();
        /*0x215dabc*/ string FormatTypeName(bool serialization);
        /*0x215dcb0*/ System.Reflection.MemberTypes get_MemberType();
        /*0x215dcfc*/ System.Type get_ReflectedType();
        /*0x215dd08*/ int get_MetadataToken();
        /*0x215dd10*/ void CreateInstanceCheckThis();
        /*0x215df3c*/ object CreateInstanceImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, ref System.Threading.StackCrawlMark stackMark);
        /*0x215e944*/ object CreateInstanceDefaultCtor(bool publicOnly, bool skipCheckThis, bool fillCache, ref System.Threading.StackCrawlMark stackMark);
        /*0x215eaa4*/ System.Reflection.MonoCMethod GetDefaultConstructor();
        /*0x215d540*/ string GetDefaultMemberName();
        /*0x215ec4c*/ System.Reflection.RuntimeConstructorInfo GetSerializationCtor();
        /*0x215ea6c*/ object CreateInstanceSlow(bool publicOnly, bool skipCheckThis, bool fillCache, ref System.Threading.StackCrawlMark stackMark);
        /*0x215ee4c*/ object CreateInstanceMono(bool nonPublic);
        /*0x215f170*/ object CheckValue(object value, System.Reflection.Binder binder, System.Globalization.CultureInfo culture, System.Reflection.BindingFlags invokeAttr);
        /*0x215f308*/ object TryConvertToType(object value, ref bool failed);
        /*0x215dc5c*/ string GetCachedName(System.TypeNameKind kind);
        /*0x216004c*/ System.Type make_array_type(int rank);
        /*0x2160050*/ System.Type MakeArrayType();
        /*0x2160058*/ System.Type MakeArrayType(int rank);
        /*0x21600a8*/ System.Type make_byref_type();
        /*0x21600ac*/ System.Type MakeByRefType();
        /*0x2160124*/ System.Type MakePointerType();
        /*0x2160184*/ bool get_ContainsGenericParameters();
        /*0x2160298*/ System.Type[] GetGenericParameterConstraints();
        /*0x21604bc*/ nint GetMethodsByName_native(nint namePtr, System.Reflection.BindingFlags bindingAttr, bool ignoreCase);
        /*0x2157a68*/ System.Reflection.RuntimeMethodInfo[] GetMethodsByName(string name, System.Reflection.BindingFlags bindingAttr, bool ignoreCase, System.RuntimeType reflectedType);
        /*0x2160538*/ nint GetPropertiesByName_native(nint name, System.Reflection.BindingFlags bindingAttr, bool icase);
        /*0x2160540*/ nint GetConstructors_native(System.Reflection.BindingFlags bindingAttr);
        /*0x2157fc8*/ System.Reflection.RuntimeConstructorInfo[] GetConstructors_internal(System.Reflection.BindingFlags bindingAttr, System.RuntimeType reflectedType);
        /*0x21583c8*/ System.Reflection.RuntimePropertyInfo[] GetPropertiesByName(string name, System.Reflection.BindingFlags bindingAttr, bool icase, System.RuntimeType reflectedType);
        /*0x2160544*/ System.TypeCode GetTypeCodeImpl();
        /*0x21605a8*/ string ToString();
        /*0x215e93c*/ bool IsGenericCOMObjectImpl();
        /*0x21605c0*/ System.Reflection.MethodBase get_DeclaringMethod();
        /*0x21605b4*/ string getFullName(bool full_name, bool assembly_qualified);
        /*0x215be20*/ System.Type[] GetGenericArgumentsInternal(bool runtimeArray);
        /*0x215b130*/ System.Reflection.GenericParameterAttributes GetGenericParameterAttributes();
        /*0x215c3a8*/ int GetGenericParameterPosition();
        /*0x21605c4*/ nint GetEvents_native(nint name, System.Reflection.BindingFlags bindingAttr);
        /*0x21605c8*/ nint GetFields_native(nint name, System.Reflection.BindingFlags bindingAttr);
        /*0x2158cb8*/ System.Reflection.RuntimeFieldInfo[] GetFields_internal(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType reflectedType);
        /*0x2158844*/ System.Reflection.RuntimeEventInfo[] GetEvents_internal(string name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType reflectedType);
        /*0x21605cc*/ System.Type[] GetInterfaces();
        /*0x21605d0*/ nint GetNestedTypes_native(nint name, System.Reflection.BindingFlags bindingAttr);
        /*0x2159148*/ System.RuntimeType[] GetNestedTypes_internal(string displayName, System.Reflection.BindingFlags bindingAttr);
        /*0x21605d4*/ string get_AssemblyQualifiedName();
        /*0x21605e0*/ System.Type get_DeclaringType();
        /*0x21605e4*/ string get_Name();
        /*0x21605e8*/ string get_Namespace();
        /*0x21605ec*/ int GetHashCode();
        /*0x21606d8*/ string get_FullName();
        /*0x21607b0*/ bool get_IsSZArray();

        enum MemberListType
        {
            All = 0,
            CaseSensitive = 1,
            CaseInsensitive = 2,
            HandleToInfo = 3,
        }

        struct ListBuilder<T>
        {
            /*0x0*/ T[] _items;
            /*0x0*/ T _item;
            /*0x0*/ int _count;
            /*0x0*/ int _capacity;

            ListBuilder(int capacity);
            T get_Item(int index);
            T[] ToArray();
            void CopyTo(object[] array, int index);
            int get_Count();
            void Add(T item);
        }
    }

    class ReflectionOnlyType : System.RuntimeType
    {
        /*0x198ed1c*/ ReflectionOnlyType();
        /*0x198ed80*/ System.RuntimeTypeHandle get_TypeHandle();
    }

    struct SByte : System.IComparable, System.IFormattable, System.IConvertible, System.IComparable<sbyte>, System.IEquatable<sbyte>
    {
        static sbyte MaxValue = 127;
        static sbyte MinValue = -128;
        /*0x10*/ sbyte m_value;

        static /*0x216159c*/ sbyte Parse(string s, System.IFormatProvider provider);
        static /*0x2161728*/ sbyte Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x21615d0*/ sbyte Parse(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x2161778*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref sbyte result);
        static /*0x21617d0*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref sbyte result);
        /*0xae1ee4*/ int CompareTo(object obj);
        /*0xae1eec*/ int CompareTo(sbyte value);
        /*0xae1ef8*/ bool Equals(object obj);
        /*0xae1f00*/ bool Equals(sbyte obj);
        /*0xae1f10*/ int GetHashCode();
        /*0xae1f1c*/ string ToString();
        /*0xae1f50*/ string ToString(System.IFormatProvider provider);
        /*0xae1f88*/ string ToString(string format, System.IFormatProvider provider);
        /*0xae1fc0*/ string ToString(string format, System.Globalization.NumberFormatInfo info);
        /*0xae1fc8*/ System.TypeCode GetTypeCode();
        /*0xae1fd0*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xae1fd8*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xae1fe0*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xae1fe8*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xae1ff0*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xae1ff8*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xae2000*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xae2008*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xae2010*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xae2018*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xae2020*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xae2028*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xae2030*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xae2038*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xae2044*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class SerializableAttribute : System.Attribute
    {
        /*0x2053ff0*/ SerializableAttribute();
    }

    class SharedStatics
    {
        static /*0x0*/ System.SharedStatics _sharedStatics;
        /*0x10*/ System.Security.Util.Tokenizer.StringMaker _maker;

        static /*0x2058550*/ SharedStatics();
        static /*0x204edc8*/ System.Security.Util.Tokenizer.StringMaker GetSharedStringMaker();
        static /*0x204ef80*/ void ReleaseSharedStringMaker(ref System.Security.Util.Tokenizer.StringMaker maker);
        /*0x2058548*/ SharedStatics();
    }

    struct Single : System.IComparable, System.IFormattable, System.IConvertible, System.IComparable<float>, System.IEquatable<float>
    {
        static float MinValue = -3.4028234663852886e+38;
        static float Epsilon = 1.401298464324817e-45;
        static float MaxValue = 3.4028234663852886e+38;
        static float PositiveInfinity = Infinity;
        static float NegativeInfinity = -Infinity;
        static float NaN = NaN;
        /*0x10*/ float m_value;

        static /*0x205dd00*/ bool IsInfinity(float f);
        static /*0x205dd18*/ bool IsPositiveInfinity(float f);
        static /*0x205dd2c*/ bool IsNegativeInfinity(float f);
        static /*0x205dd3c*/ bool IsNaN(float f);
        static /*0x205dd54*/ bool IsFinite(float f);
        static /*0x205e0e4*/ float Parse(string s);
        static /*0x205e120*/ float Parse(string s, System.IFormatProvider provider);
        static /*0x205e158*/ float Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x205e118*/ float Parse(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x205e1ac*/ bool TryParse(string s, ref float result);
        static /*0x205e2a8*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref float result);
        static /*0x205e1e4*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref float result);
        /*0xae0280*/ int CompareTo(object value);
        /*0xae0288*/ int CompareTo(float value);
        /*0xae02e4*/ bool Equals(object obj);
        /*0xae02ec*/ bool Equals(float obj);
        /*0xae0338*/ int GetHashCode();
        /*0xae034c*/ string ToString();
        /*0xae0380*/ string ToString(System.IFormatProvider provider);
        /*0xae03b8*/ string ToString(string format);
        /*0xae03f8*/ string ToString(string format, System.IFormatProvider provider);
        /*0xae043c*/ System.TypeCode GetTypeCode();
        /*0xae0444*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xae044c*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xae0458*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xae0460*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xae0468*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xae0470*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xae0478*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xae0480*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xae0488*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xae0490*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xae0498*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xae04a0*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xae04a8*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xae04b0*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xae04bc*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class StackOverflowException : System.SystemException
    {
        /*0x24a103c*/ StackOverflowException();
        /*0x24a10ac*/ StackOverflowException(string message);
        /*0x24a10e0*/ StackOverflowException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class String : System.IComparable, System.ICloneable, System.IConvertible, System.Collections.IEnumerable, System.IComparable<string>, System.Collections.Generic.IEnumerable<char>, System.IEquatable<string>
    {
        static int TrimHead = 0;
        static int TrimTail = 1;
        static int TrimBoth = 2;
        static int charPtrAlignConst = 1;
        static int alignConst = 3;
        static /*0x0*/ string Empty;
        /*0x10*/ int m_stringLength;
        /*0x14*/ char m_firstChar;

        static /*0x24a70fc*/ string Join(string separator, string[] value);
        static /*0x24a7410*/ string Join(string separator, object[] values);
        static string Join<T>(string separator, System.Collections.Generic.IEnumerable<T> values);
        static /*0x24a75c0*/ string Join(string separator, System.Collections.Generic.IEnumerable<string> values);
        static /*0x24a7160*/ string Join(string separator, string[] value, int startIndex, int count);
        static /*0x24a7b0c*/ int CompareOrdinalIgnoreCaseHelper(string strA, string strB);
        static /*0x24a7bf4*/ bool EqualsHelper(string strA, string strB);
        static /*0x24a7d40*/ int CompareOrdinalHelper(string strA, string strB);
        static /*0x24a8318*/ bool Equals(string a, string b);
        static /*0x24a8354*/ bool Equals(string a, string b, System.StringComparison comparisonType);
        static /*0x24a8614*/ bool op_Equality(string a, string b);
        static /*0x24a8618*/ bool op_Inequality(string a, string b);
        static /*0x24a8828*/ bool IsNullOrEmpty(string value);
        static /*0x24a8844*/ bool IsNullOrWhiteSpace(string value);
        static /*0x24a9ca0*/ string CreateStringFromEncoding(byte* bytes, int byteLength, System.Text.Encoding encoding);
        static /*0x24a7b08*/ string FastAllocateString(int length);
        static /*0x24a9e48*/ void FillStringChecked(string dest, int destPos, string src);
        static /*0x24a8634*/ void wstrcpy(char* dmem, char* smem, int charCount);
        static /*0x24aa134*/ int wcslen(char* ptr);
        static /*0x24aa59c*/ int Compare(string strA, string strB);
        static /*0x24aa638*/ int Compare(string strA, string strB, bool ignoreCase);
        static /*0x24aa71c*/ int Compare(string strA, string strB, System.StringComparison comparisonType);
        static /*0x24aaa24*/ int Compare(string strA, string strB, bool ignoreCase, System.Globalization.CultureInfo culture);
        static /*0x24aaac8*/ int Compare(string strA, int indexA, string strB, int indexB, int length, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);
        static /*0x24aabd4*/ int Compare(string strA, int indexA, string strB, int indexB, int length, System.StringComparison comparisonType);
        static /*0x24ab2a4*/ int CompareOrdinal(string strA, string strB);
        static /*0x24a990c*/ int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length);
        static /*0x24aca08*/ bool IsBOMWhitespace(char c);
        static /*0x24a21c4*/ string Format(string format, object arg0);
        static /*0x24a2214*/ string Format(string format, object arg0, object arg1);
        static /*0x24a1c28*/ string Format(string format, object arg0, object arg1, object arg2);
        static /*0x24ad170*/ string Format(string format, object[] args);
        static /*0x24ad21c*/ string Format(System.IFormatProvider provider, string format, object arg0);
        static /*0x24ad274*/ string Format(System.IFormatProvider provider, string format, object arg0, object arg1);
        static /*0x24ad2d0*/ string Format(System.IFormatProvider provider, string format, object arg0, object arg1, object arg2);
        static /*0x24ad330*/ string Format(System.IFormatProvider provider, string format, object[] args);
        static /*0x24ad0a4*/ string FormatHelper(System.IFormatProvider provider, string format, System.ParamsArray args);
        static /*0x24adbe4*/ string Copy(string str);
        static /*0x24adc84*/ string Concat(object arg0, object arg1);
        static /*0x24add44*/ string Concat(object arg0, object arg1, object arg2);
        static /*0x24a0748*/ string Concat(object[] args);
        static string Concat<T>(System.Collections.Generic.IEnumerable<T> values);
        static /*0x24adff4*/ string Concat(System.Collections.Generic.IEnumerable<string> values);
        static /*0x24a2530*/ string Concat(string str0, string str1);
        static /*0x24ade40*/ string Concat(string str0, string str1, string str2);
        static /*0x24ae378*/ string Concat(string str0, string str1, string str2, string str3);
        static /*0x24adf4c*/ string ConcatArray(string[] values, int totalLength);
        static /*0x24ae4e0*/ string Concat(string[] values);
        static /*0x24aee2c*/ int CompareOrdinalUnchecked(string strA, int indexA, int lenA, string strB, int indexB, int lenB);
        static /*0x24aaff0*/ int nativeCompareOrdinalEx(string strA, int indexA, string strB, int indexB, int count);
        static /*0x24af5e0*/ void CharCopy(char* dest, char* src, int count);
        static /*0x24afb3c*/ void memset(byte* dest, int val, int len);
        static /*0x24afbf8*/ void memcpy(byte* dest, byte* src, int size);
        static /*0x24afc00*/ void bzero(byte* dest, int len);
        static /*0x24afc0c*/ void bzero_aligned_1(byte* dest, int len);
        static /*0x24afc14*/ void bzero_aligned_2(byte* dest, int len);
        static /*0x24afc1c*/ void bzero_aligned_4(byte* dest, int len);
        static /*0x24afc24*/ void bzero_aligned_8(byte* dest, int len);
        static /*0x24afc2c*/ void memcpy_aligned_1(byte* dest, byte* src, int size);
        static /*0x24afc38*/ void memcpy_aligned_2(byte* dest, byte* src, int size);
        static /*0x24afc44*/ void memcpy_aligned_4(byte* dest, byte* src, int size);
        static /*0x24afc50*/ void memcpy_aligned_8(byte* dest, byte* src, int size);
        /*0x24a9c94*/ String(char* value);
        /*0x24a9c98*/ String(char* value, int startIndex, int length);
        /*0x24a9c9c*/ String(sbyte* value, int startIndex, int length, System.Text.Encoding enc);
        /*0x24a9ecc*/ String(char[] value, int startIndex, int length);
        /*0x24a9ed0*/ String(char[] value);
        /*0x24aa598*/ String(char c, int count);
        /*0x24a7ecc*/ bool Equals(object obj);
        /*0x24a7fac*/ bool Equals(string value);
        /*0x24a8020*/ bool Equals(string value, System.StringComparison comparisonType);
        /*0x24a2168*/ char get_Chars(int index);
        /*0x24a6d90*/ void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count);
        /*0x24a8640*/ char[] ToCharArray();
        /*0x24a86d4*/ char[] ToCharArray(int startIndex, int length);
        /*0x24a88fc*/ int GetHashCode();
        /*0x24a8974*/ int GetLegacyNonRandomizedHashCode();
        /*0x24a89ec*/ string[] Split(char[] separator);
        /*0x24a8c64*/ string[] Split(char[] separator, System.StringSplitOptions options);
        /*0x24a8c70*/ string[] Split(char[] separator, int count, System.StringSplitOptions options);
        /*0x24a89f8*/ string[] SplitInternal(char[] separator, int count, System.StringSplitOptions options);
        /*0x24a934c*/ string[] Split(string[] separator, System.StringSplitOptions options);
        /*0x24a9358*/ string[] Split(string[] separator, int count, System.StringSplitOptions options);
        /*0x24a9120*/ string[] InternalSplitKeepEmptyEntries(int[] sepList, int[] lengthList, int numReplaces, int count);
        /*0x24a8e3c*/ string[] InternalSplitOmitEmptyEntries(int[] sepList, int[] lengthList, int numReplaces, int count);
        /*0x24a8c74*/ int MakeSeparatorList(char[] separator, ref int[] sepList);
        /*0x24a95f8*/ int MakeSeparatorList(string[] separators, ref int[] sepList, ref int[] lengthList);
        /*0x24a9900*/ string Substring(int startIndex);
        /*0x24a979c*/ string Substring(int startIndex, int length);
        /*0x24a9938*/ string InternalSubString(int startIndex, int length);
        /*0x24a9994*/ string Trim(char[] trimChars);
        /*0x24a9c5c*/ string TrimStart(char[] trimChars);
        /*0x24a9c78*/ string TrimEnd(char[] trimChars);
        /*0x24a9d74*/ string Normalize(System.Text.NormalizationForm normalizationForm);
        /*0x24a9ed4*/ string CtorCharArray(char[] value);
        /*0x24a9f74*/ string CtorCharArrayStartLength(char[] value, int startIndex, int length);
        /*0x24aa1ac*/ string CtorCharPtr(char* ptr);
        /*0x24aa364*/ string CtorCharPtrStartLength(char* ptr, int startIndex, int length);
        /*0x24ab11c*/ int CompareTo(object value);
        /*0x24ab1f0*/ int CompareTo(string strB);
        /*0x24ab2ec*/ bool Contains(string value);
        /*0x24ab324*/ bool EndsWith(string value);
        /*0x24ab32c*/ bool EndsWith(string value, System.StringComparison comparisonType);
        /*0x24ab5d0*/ bool EndsWith(char value);
        /*0x24ab614*/ int IndexOf(char value);
        /*0x24ab738*/ int IndexOf(char value, int startIndex);
        /*0x24ab744*/ int IndexOfAny(char[] anyOf);
        /*0x24ab828*/ int IndexOfAny(char[] anyOf, int startIndex);
        /*0x24ab834*/ int IndexOf(string value);
        /*0x24ab844*/ int IndexOf(string value, int startIndex);
        /*0x24ab314*/ int IndexOf(string value, System.StringComparison comparisonType);
        /*0x24ab854*/ int IndexOf(string value, int startIndex, System.StringComparison comparisonType);
        /*0x24ab864*/ int IndexOf(string value, int startIndex, int count, System.StringComparison comparisonType);
        /*0x24abc1c*/ int LastIndexOf(char value);
        /*0x24abd3c*/ int LastIndexOf(char value, int startIndex);
        /*0x24abd44*/ int LastIndexOfAny(char[] anyOf);
        /*0x24abe78*/ int LastIndexOfAny(char[] anyOf, int startIndex);
        /*0x24abe80*/ int LastIndexOf(string value);
        /*0x24ac2c0*/ int LastIndexOf(string value, System.StringComparison comparisonType);
        /*0x24abe90*/ int LastIndexOf(string value, int startIndex, int count, System.StringComparison comparisonType);
        /*0x24ac2d0*/ string PadLeft(int totalWidth, char paddingChar);
        /*0x24ac418*/ string PadRight(int totalWidth, char paddingChar);
        /*0x24ac420*/ bool StartsWith(string value);
        /*0x24ac480*/ bool StartsWith(string value, System.StringComparison comparisonType);
        /*0x24ac72c*/ string ToLower();
        /*0x24ac798*/ string ToLower(System.Globalization.CultureInfo culture);
        /*0x24ac828*/ string ToLowerInvariant();
        /*0x24ac894*/ string ToUpper();
        /*0x24ac900*/ string ToUpper(System.Globalization.CultureInfo culture);
        /*0x24ac990*/ string ToUpperInvariant();
        /*0x24ac9fc*/ string ToString();
        /*0x24aca00*/ string ToString(System.IFormatProvider provider);
        /*0x24aca04*/ object Clone();
        /*0x24aca10*/ string Trim();
        /*0x24a99b0*/ string TrimHelper(int trimType);
        /*0x24a9b10*/ string TrimHelper(char[] trimChars, int trimType);
        /*0x24aca18*/ string CreateTrimmedString(int start, int end);
        /*0x24acaac*/ string Insert(int startIndex, string value);
        /*0x24acc1c*/ string Replace(char oldChar, char newChar);
        /*0x24acd10*/ string Replace(string oldValue, string newValue);
        /*0x24ace80*/ string Remove(int startIndex, int count);
        /*0x24ad004*/ string Remove(int startIndex);
        /*0x24ae688*/ System.TypeCode GetTypeCode();
        /*0x24ae690*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0x24ae704*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0x24ae778*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0x24ae7ec*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0x24ae860*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0x24ae8d4*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0x24ae948*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0x24ae9bc*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0x24aea30*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0x24aeaa4*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0x24aeb18*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0x24aeb8c*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0x24aec00*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0x24aec74*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0x24aece8*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
        /*0x24aed64*/ System.Collections.Generic.IEnumerator<char> System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator();
        /*0x24aedc4*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
        /*0x24aee24*/ int get_Length();
        /*0x24ab620*/ int IndexOf(char value, int startIndex, int count);
        /*0x24aefac*/ int IndexOfUnchecked(char value, int startIndex, int count);
        /*0x24af168*/ int IndexOfUnchecked(string value, int startIndex, int count);
        /*0x24ab750*/ int IndexOfAny(char[] anyOf, int startIndex, int count);
        /*0x24af288*/ int IndexOfAnyUnchecked(char[] anyOf, int startIndex, int count);
        /*0x24abc28*/ int LastIndexOf(char value, int startIndex, int count);
        /*0x24af378*/ int LastIndexOfUnchecked(char value, int startIndex, int count);
        /*0x24abd50*/ int LastIndexOfAny(char[] anyOf, int startIndex, int count);
        /*0x24af53c*/ int LastIndexOfAnyUnchecked(char[] anyOf, int startIndex, int count);
        /*0x24acc20*/ string ReplaceInternal(char oldChar, char newChar);
        /*0x24acd6c*/ string ReplaceInternal(string oldValue, string newValue);
        /*0x24af628*/ string ReplaceUnchecked(string oldValue, string newValue);
        /*0x24af9b4*/ string ReplaceFallback(string oldValue, string newValue, int testedCount);
        /*0x24ac2d8*/ string PadHelper(int totalWidth, char paddingChar, bool isRightPadded);
        /*0x24afaf0*/ bool StartsWithOrdinalUnchecked(string value);
        /*0x24a82d8*/ bool IsAscii();
        /*0x24afc5c*/ string CreateString(sbyte* value);
        /*0x24b000c*/ string CreateString(sbyte* value, int startIndex, int length);
        /*0x24b0014*/ string CreateString(char* value);
        /*0x24b0018*/ string CreateString(char* value, int startIndex, int length);
        /*0x24a5b5c*/ string CreateString(char[] val, int startIndex, int length);
        /*0x24b001c*/ string CreateString(char[] val);
        /*0x24b0020*/ string CreateString(char c, int count);
        /*0x24afcec*/ string CreateString(sbyte* value, int startIndex, int length, System.Text.Encoding enc);
    }

    enum StringSplitOptions
    {
        None = 0,
        RemoveEmptyEntries = 1,
    }

    class StringComparer : System.Collections.IComparer, System.Collections.IEqualityComparer, System.Collections.Generic.IComparer<string>, System.Collections.Generic.IEqualityComparer<string>
    {
        static /*0x0*/ System.StringComparer _invariantCulture;
        static /*0x8*/ System.StringComparer _invariantCultureIgnoreCase;
        static /*0x10*/ System.StringComparer _ordinal;
        static /*0x18*/ System.StringComparer _ordinalIgnoreCase;

        static /*0x1e1ff24*/ StringComparer();
        static /*0x1e1f958*/ System.StringComparer get_InvariantCultureIgnoreCase();
        static /*0x1e1f9bc*/ System.StringComparer get_CurrentCultureIgnoreCase();
        static /*0x1e1fa58*/ System.StringComparer get_Ordinal();
        static /*0x1e1fabc*/ System.StringComparer get_OrdinalIgnoreCase();
        static /*0x1e1fb20*/ System.StringComparer Create(System.Globalization.CultureInfo culture, bool ignoreCase);
        /*0x1e1ff1c*/ StringComparer();
        /*0x1e1fbdc*/ int Compare(object x, object y);
        /*0x1e1fd7c*/ bool Equals(object x, object y);
        /*0x1e1fe48*/ int GetHashCode(object obj);
        int Compare(string x, string y);
        bool Equals(string x, string y);
        int GetHashCode(string obj);
    }

    class CultureAwareComparer : System.StringComparer
    {
        /*0x10*/ System.Globalization.CompareInfo _compareInfo;
        /*0x18*/ bool _ignoreCase;
        /*0x1c*/ System.Globalization.CompareOptions _options;

        /*0x251b814*/ CultureAwareComparer(System.Globalization.CultureInfo culture, bool ignoreCase);
        /*0x251b8b8*/ int Compare(string x, string y);
        /*0x251b908*/ bool Equals(string x, string y);
        /*0x251b95c*/ int GetHashCode(string obj);
        /*0x251b9d8*/ bool Equals(object obj);
        /*0x251ba9c*/ int GetHashCode();
    }

    class OrdinalComparer : System.StringComparer
    {
        /*0x10*/ bool _ignoreCase;

        /*0x214a920*/ OrdinalComparer(bool ignoreCase);
        /*0x214a99c*/ int Compare(string x, string y);
        /*0x214a9f4*/ bool Equals(string x, string y);
        /*0x214aa74*/ int GetHashCode(string obj);
        /*0x214aaf4*/ bool Equals(object obj);
        /*0x214ab88*/ int GetHashCode();
    }

    class SystemException : System.Exception
    {
        /*0x1e23e00*/ SystemException();
        /*0x1e23cb8*/ SystemException(string message);
        /*0x1e23ea4*/ SystemException(string message, System.Exception innerException);
        /*0x1e23d74*/ SystemException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class STAThreadAttribute : System.Attribute
    {
        /*0x2166ed4*/ STAThreadAttribute();
    }

    class ThreadStaticAttribute : System.Attribute
    {
        /*0x1d32530*/ ThreadStaticAttribute();
    }

    enum ExceptionArgument
    {
        obj = 0,
        dictionary = 1,
        dictionaryCreationThreshold = 2,
        array = 3,
        info = 4,
        key = 5,
        collection = 6,
        list = 7,
        match = 8,
        converter = 9,
        queue = 10,
        stack = 11,
        capacity = 12,
        index = 13,
        startIndex = 14,
        value = 15,
        count = 16,
        arrayIndex = 17,
        name = 18,
        mode = 19,
        item = 20,
        options = 21,
        view = 22,
        sourceBytesToCopy = 23,
        start = 24,
        pointer = 25,
        ownedMemory = 26,
        text = 27,
    }

    enum ExceptionResource
    {
        Argument_ImplementIComparable = 0,
        Argument_InvalidType = 1,
        Argument_InvalidArgumentForComparison = 2,
        Argument_InvalidRegistryKeyPermissionCheck = 3,
        ArgumentOutOfRange_NeedNonNegNum = 4,
        Arg_ArrayPlusOffTooSmall = 5,
        Arg_NonZeroLowerBound = 6,
        Arg_RankMultiDimNotSupported = 7,
        Arg_RegKeyDelHive = 8,
        Arg_RegKeyStrLenBug = 9,
        Arg_RegSetStrArrNull = 10,
        Arg_RegSetMismatchedKind = 11,
        Arg_RegSubKeyAbsent = 12,
        Arg_RegSubKeyValueAbsent = 13,
        Argument_AddingDuplicate = 14,
        Serialization_InvalidOnDeser = 15,
        Serialization_MissingKeys = 16,
        Serialization_NullKey = 17,
        Argument_InvalidArrayType = 18,
        NotSupported_KeyCollectionSet = 19,
        NotSupported_ValueCollectionSet = 20,
        ArgumentOutOfRange_SmallCapacity = 21,
        ArgumentOutOfRange_Index = 22,
        Argument_InvalidOffLen = 23,
        Argument_ItemNotExist = 24,
        ArgumentOutOfRange_Count = 25,
        ArgumentOutOfRange_InvalidThreshold = 26,
        ArgumentOutOfRange_ListInsert = 27,
        NotSupported_ReadOnlyCollection = 28,
        InvalidOperation_CannotRemoveFromStackOrQueue = 29,
        InvalidOperation_EmptyQueue = 30,
        InvalidOperation_EnumOpCantHappen = 31,
        InvalidOperation_EnumFailedVersion = 32,
        InvalidOperation_EmptyStack = 33,
        ArgumentOutOfRange_BiggerThanCollection = 34,
        InvalidOperation_EnumNotStarted = 35,
        InvalidOperation_EnumEnded = 36,
        NotSupported_SortedListNestedWrite = 37,
        InvalidOperation_NoValue = 38,
        InvalidOperation_RegRemoveSubKey = 39,
        Security_RegistryPermission = 40,
        UnauthorizedAccess_RegistryNoWrite = 41,
        ObjectDisposed_RegKeyClosed = 42,
        NotSupported_InComparableType = 43,
        Argument_InvalidRegistryOptionsCheck = 44,
        Argument_InvalidRegistryViewCheck = 45,
    }

    class TimeoutException : System.SystemException
    {
        /*0x1d41894*/ TimeoutException();
        /*0x1d41904*/ TimeoutException(string message);
        /*0x1d41938*/ TimeoutException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct TimeSpan : System.IComparable, System.IComparable<System.TimeSpan>, System.IEquatable<System.TimeSpan>, System.IFormattable
    {
        static long TicksPerMillisecond = 10000;
        static double MillisecondsPerTick = 0.0001;
        static long TicksPerSecond = 10000000;
        static double SecondsPerTick = 1e-7;
        static long TicksPerMinute = 600000000;
        static double MinutesPerTick = 1.6666666666666667e-9;
        static long TicksPerHour = 36000000000;
        static double HoursPerTick = 2.7777777777777777e-11;
        static long TicksPerDay = 864000000000;
        static double DaysPerTick = 1.1574074074074074e-12;
        static int MillisPerSecond = 1000;
        static int MillisPerMinute = 60000;
        static int MillisPerHour = 3600000;
        static int MillisPerDay = 86400000;
        static long MaxSeconds = 922337203685;
        static long MinSeconds = -922337203685;
        static long MaxMilliSeconds = 922337203685477;
        static long MinMilliSeconds = -922337203685477;
        static long TicksPerTenthSecond = 1000000;
        static /*0x0*/ System.TimeSpan Zero;
        static /*0x8*/ System.TimeSpan MaxValue;
        static /*0x10*/ System.TimeSpan MinValue;
        static /*0x18*/ bool _legacyConfigChecked;
        static /*0x19*/ bool _legacyMode;
        /*0x10*/ long _ticks;

        static /*0x1d3415c*/ TimeSpan();
        static /*0x1d33340*/ int Compare(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1d3344c*/ System.TimeSpan FromDays(double value);
        static /*0x1d336bc*/ System.TimeSpan FromHours(double value);
        static /*0x1d334bc*/ System.TimeSpan Interval(double value, int scale);
        static /*0x1d3372c*/ System.TimeSpan FromMilliseconds(double value);
        static /*0x1d33798*/ System.TimeSpan FromMinutes(double value);
        static /*0x1d338d8*/ System.TimeSpan FromSeconds(double value);
        static /*0x1d339bc*/ System.TimeSpan FromTicks(long value);
        static /*0x1d330a8*/ long TimeToTicks(int hour, int minute, int second);
        static /*0x1d339c0*/ System.TimeSpan Parse(string s);
        static /*0x1d33af8*/ System.TimeSpan Parse(string input, System.IFormatProvider formatProvider);
        static /*0x1d34080*/ System.TimeSpan op_Subtraction(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1d340a4*/ System.TimeSpan op_Addition(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1d340c8*/ bool op_Equality(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1d340d4*/ bool op_Inequality(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1d340e0*/ bool op_LessThan(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1d340ec*/ bool op_LessThanOrEqual(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1d340f8*/ bool op_GreaterThan(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1d34104*/ bool op_GreaterThanOrEqual(System.TimeSpan t1, System.TimeSpan t2);
        static /*0x1d34110*/ bool GetLegacyFormatMode();
        static /*0x1d33f7c*/ bool get_LegacyMode();
        /*0xadb0cc*/ TimeSpan(long ticks);
        /*0xadb0d4*/ TimeSpan(int hours, int minutes, int seconds);
        /*0xadb0dc*/ TimeSpan(int days, int hours, int minutes, int seconds);
        /*0xadb0e8*/ TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds);
        /*0xadb0f0*/ long get_Ticks();
        /*0xadb0f8*/ int get_Days();
        /*0xadb124*/ int get_Hours();
        /*0xadb16c*/ int get_Minutes();
        /*0xadb1b4*/ int get_Seconds();
        /*0xadb200*/ double get_TotalDays();
        /*0xadb218*/ double get_TotalHours();
        /*0xadb230*/ double get_TotalMilliseconds();
        /*0xadb264*/ double get_TotalMinutes();
        /*0xadb27c*/ double get_TotalSeconds();
        /*0xadb294*/ System.TimeSpan Add(System.TimeSpan ts);
        /*0xadb29c*/ int CompareTo(object value);
        /*0xadb2a4*/ int CompareTo(System.TimeSpan value);
        /*0xadb2b8*/ bool Equals(object value);
        /*0xadb2c0*/ bool Equals(System.TimeSpan obj);
        /*0xadb2d0*/ int GetHashCode();
        /*0xadb2dc*/ System.TimeSpan Negate();
        /*0xadb2e4*/ System.TimeSpan Subtract(System.TimeSpan ts);
        /*0xadb2ec*/ string ToString();
        /*0xadb2f4*/ string ToString(string format);
        /*0xadb2fc*/ string ToString(string format, System.IFormatProvider formatProvider);
    }

    enum TimeZoneInfoOptions
    {
        None = 1,
        NoThrowOnInvalidTime = 2,
    }

    class TimeZoneInfo : System.IEquatable<System.TimeZoneInfo>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
    {
        static /*0x0*/ System.TimeZoneInfo local;
        static /*0x8*/ bool readlinkNotFound;
        static /*0x10*/ System.TimeZoneInfo utc;
        static /*0x18*/ string timeZoneDirectory;
        static /*0x20*/ Microsoft.Win32.RegistryKey timeZoneKey;
        static /*0x28*/ Microsoft.Win32.RegistryKey localZoneKey;
        static /*0x30*/ System.Collections.ObjectModel.ReadOnlyCollection<System.TimeZoneInfo> systemTimeZones;
        /*0x10*/ System.TimeSpan baseUtcOffset;
        /*0x18*/ string daylightDisplayName;
        /*0x20*/ string displayName;
        /*0x28*/ string id;
        /*0x30*/ System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.DateTime, System.TimeType>> transitions;
        /*0x38*/ string standardDisplayName;
        /*0x40*/ bool supportsDaylightSavingTime;
        /*0x48*/ System.TimeZoneInfo.AdjustmentRule[] adjustmentRules;

        static /*0x1d38b6c*/ bool UtcOffsetOutOfRange(System.TimeSpan offset);
        static /*0x1d38b9c*/ System.Collections.Generic.List<System.TimeZoneInfo.AdjustmentRule> CreateAdjustmentRule(int year, ref long[] data, ref string[] names, string standardNameCurrentYear, string daylightNameCurrentYear);
        static /*0x1d392c0*/ System.TimeZoneInfo CreateLocalUnity();
        static /*0x1d3980c*/ uint EnumDynamicTimeZoneInformation(uint dwIndex, ref System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation);
        static /*0x1d398f0*/ uint GetDynamicTimeZoneInformation(ref System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation);
        static /*0x1d399c4*/ uint GetDynamicTimeZoneInformationWin32(ref System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation);
        static /*0x1d39a98*/ uint GetDynamicTimeZoneInformationEffectiveYears(ref System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation, ref uint FirstYear, ref uint LastYear);
        static /*0x1d39b90*/ bool GetTimeZoneInformationForYear(ushort wYear, ref System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION pdtzi, ref System.TimeZoneInfo.TIME_ZONE_INFORMATION ptzi);
        static /*0x1d39cd0*/ System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRuleFromTimeZoneInformation(ref System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, System.DateTime startDate, System.DateTime endDate, int defaultBaseUtcOffset);
        static /*0x1d39f90*/ bool TransitionTimeFromTimeZoneInformation(System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation, ref System.TimeZoneInfo.TransitionTime transitionTime, bool readStartDate);
        static /*0x1d3a130*/ System.TimeZoneInfo TryCreateTimeZone(System.TimeZoneInfo.DYNAMIC_TIME_ZONE_INFORMATION timeZoneInformation);
        static /*0x1d3ab14*/ System.TimeZoneInfo GetLocalTimeZoneInfoWinRTFallback();
        static /*0x1d3ac94*/ string GetLocalTimeZoneKeyNameWin32Fallback();
        static /*0x1d3ad80*/ System.TimeZoneInfo FindSystemTimeZoneByIdWinRTFallback(string id);
        static /*0x1d3b1b0*/ System.Collections.Generic.List<System.TimeZoneInfo> GetSystemTimeZonesWinRTFallback();
        static /*0x1d3b3a0*/ System.TimeZoneInfo get_Local();
        static /*0x1d3b9c4*/ int readlink(string path, byte[] buffer, int buflen);
        static /*0x1d3ba7c*/ string readlink(string path);
        static /*0x1d3bc48*/ bool TryGetNameFromPath(string path, ref string name);
        static /*0x1d3b454*/ System.TimeZoneInfo CreateLocal();
        static /*0x1d3c508*/ System.TimeZoneInfo FindSystemTimeZoneByIdCore(string id);
        static /*0x1d3c588*/ void GetSystemTimeZonesCore(System.Collections.Generic.List<System.TimeZoneInfo> systemTimeZones);
        static /*0x1d3abfc*/ System.TimeZoneInfo get_Utc();
        static /*0x1d3be94*/ string get_TimeZoneDirectory();
        static /*0x1d3bf08*/ bool get_IsWindows();
        static /*0x1d3c098*/ string TrimSpecial(string str);
        static /*0x1d3d084*/ Microsoft.Win32.RegistryKey get_TimeZoneKey();
        static /*0x1d3bf54*/ Microsoft.Win32.RegistryKey get_LocalZoneKey();
        static /*0x1d3d1e0*/ bool TryAddTicks(System.DateTime date, long ticks, ref System.DateTime result, System.DateTimeKind kind);
        static /*0x1d3d358*/ System.DateTime ConvertTime(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfo destinationTimeZone);
        static /*0x1d3d6dc*/ System.DateTime ConvertTimeFromUtc(System.DateTime dateTime, System.TimeZoneInfo destinationTimeZone);
        static /*0x1d3d8d8*/ System.DateTime ConvertTimeToUtc(System.DateTime dateTime, System.TimeZoneInfoOptions flags);
        static /*0x1d3d6d4*/ System.DateTime ConvertTimeToUtc(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone);
        static /*0x1d3d908*/ System.DateTime ConvertTimeToUtc(System.DateTime dateTime, System.TimeZoneInfo sourceTimeZone, System.TimeZoneInfoOptions flags);
        static /*0x1d3db7c*/ System.TimeSpan GetDateTimeNowUtcOffsetFromUtc(System.DateTime time, ref bool isAmbiguousLocalDst);
        static /*0x1d3d1d0*/ System.TimeZoneInfo CreateCustomTimeZone(string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName);
        static /*0x1d3dc28*/ System.TimeZoneInfo CreateCustomTimeZone(string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules);
        static /*0x1d39760*/ System.TimeZoneInfo CreateCustomTimeZone(string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);
        static /*0x1d3c208*/ System.TimeZoneInfo FindSystemTimeZoneById(string id);
        static /*0x1d3c370*/ System.TimeZoneInfo FindSystemTimeZoneByFileName(string id, string filepath);
        static /*0x1d3de80*/ System.TimeZoneInfo FromRegistryKey(string id, Microsoft.Win32.RegistryKey key);
        static /*0x1d3e4d8*/ void ParseRegTzi(System.Collections.Generic.List<System.TimeZoneInfo.AdjustmentRule> adjustmentRules, int start_year, int end_year, byte[] buffer);
        static /*0x1d3b04c*/ System.Collections.ObjectModel.ReadOnlyCollection<System.TimeZoneInfo> GetSystemTimeZones();
        static /*0x1d3ed30*/ System.TimeSpan GetUtcOffsetHelper(System.DateTime dateTime, System.TimeZoneInfo tz, ref bool isDST, bool forOffset);
        static /*0x1d3fe44*/ void Validate(string id, System.TimeSpan baseUtcOffset, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules);
        static /*0x1d3f828*/ System.DateTime TransitionPoint(System.TimeZoneInfo.TransitionTime transition, int year);
        static /*0x1d3e8cc*/ System.TimeZoneInfo.AdjustmentRule[] ValidateRules(System.Collections.Generic.List<System.TimeZoneInfo.AdjustmentRule> adjustmentRules);
        static /*0x1d3e300*/ System.TimeZoneInfo BuildFromStream(string id, System.IO.Stream stream);
        static /*0x1d40678*/ bool ValidTZFile(byte[] buffer, int length);
        static /*0x1d410fc*/ int SwapInt32(int i);
        static /*0x1d41104*/ int ReadBigEndianInt32(byte[] buffer, int start);
        static /*0x1d40770*/ System.TimeZoneInfo ParseTZBuffer(string id, byte[] buffer, int length);
        static /*0x1d41194*/ System.Collections.Generic.Dictionary<int, string> ParseAbbreviations(byte[] buffer, int index, int count);
        static /*0x1d41384*/ System.Collections.Generic.Dictionary<int, System.TimeType> ParseTimesTypes(byte[] buffer, int index, int count, System.Collections.Generic.Dictionary<int, string> abbreviations);
        static /*0x1d41548*/ System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.DateTime, System.TimeType>> ParseTransitions(byte[] buffer, int index, int count, System.Collections.Generic.Dictionary<int, System.TimeType> time_types);
        static /*0x1d416d0*/ System.DateTime DateTimeFromUnixTime(long unix_time);
        static /*0x1d41718*/ System.TimeSpan GetLocalUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags);
        static /*0x1d3dbc0*/ System.TimeSpan GetUtcOffsetFromUtc(System.DateTime time, System.TimeZoneInfo zone, ref bool isDaylightSavings, ref bool isAmbiguousLocalDst);
        /*0x1d402c8*/ TimeZoneInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1d3a618*/ TimeZoneInfo(string id, System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, System.TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);
        /*0x1d4177c*/ TimeZoneInfo();
        /*0x1d3b388*/ System.TimeSpan get_BaseUtcOffset();
        /*0x1d3b390*/ string get_DisplayName();
        /*0x1d3b398*/ string get_Id();
        /*0x1d3d1c8*/ bool get_SupportsDaylightSavingTime();
        /*0x1d3d744*/ System.DateTime ConvertTimeFromUtc(System.DateTime dateTime);
        /*0x1d3dc30*/ bool Equals(object obj);
        /*0x1d3dca0*/ bool Equals(System.TimeZoneInfo other);
        /*0x1d3ea30*/ System.TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules();
        /*0x1d3eac4*/ int GetHashCode();
        /*0x1d3eb68*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1d3d8b0*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime);
        /*0x1d3da9c*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime, ref bool isDST, bool forOffset);
        /*0x1d3dcf0*/ bool HasSameRules(System.TimeZoneInfo other);
        /*0x1d3f634*/ bool IsAmbiguousTime(System.DateTime dateTime);
        /*0x1d3f9f4*/ bool IsAmbiguousLocalDstFromUtc(System.DateTime dateTime);
        /*0x1d3f560*/ bool IsInDST(System.TimeZoneInfo.AdjustmentRule rule, System.DateTime dateTime);
        /*0x1d3fb4c*/ bool IsInDSTForYear(System.TimeZoneInfo.AdjustmentRule rule, System.DateTime dateTime, int year);
        /*0x1d3d584*/ bool IsInvalidTime(System.DateTime dateTime);
        /*0x1d3fd5c*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        /*0x1d402c0*/ string ToString();
        /*0x1d3f3a8*/ System.TimeZoneInfo.AdjustmentRule GetApplicableRule(System.DateTime dateTime);
        /*0x1d3efc0*/ bool TryGetTransitionOffset(System.DateTime dateTime, ref System.TimeSpan offset, ref bool isDst, bool forOffset);
        /*0x1d41754*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime, System.TimeZoneInfoOptions flags);

        class AdjustmentRule : System.IEquatable<System.TimeZoneInfo.AdjustmentRule>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
        {
            /*0x10*/ System.DateTime m_dateStart;
            /*0x18*/ System.DateTime m_dateEnd;
            /*0x20*/ System.TimeSpan m_daylightDelta;
            /*0x28*/ System.TimeZoneInfo.TransitionTime m_daylightTransitionStart;
            /*0x40*/ System.TimeZoneInfo.TransitionTime m_daylightTransitionEnd;
            /*0x58*/ System.TimeSpan m_baseUtcOffsetDelta;

            static /*0x2a9fb8c*/ System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd);
            static /*0x2aa0020*/ System.TimeZoneInfo.AdjustmentRule CreateAdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd, System.TimeSpan baseUtcOffsetDelta);
            static /*0x2a9fcb4*/ void ValidateAdjustmentRule(System.DateTime dateStart, System.DateTime dateEnd, System.TimeSpan daylightDelta, System.TimeZoneInfo.TransitionTime daylightTransitionStart, System.TimeZoneInfo.TransitionTime daylightTransitionEnd);
            /*0x2a9fb84*/ AdjustmentRule();
            /*0x2aa03a8*/ AdjustmentRule(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x2a9f8b8*/ System.DateTime get_DateStart();
            /*0x2a9f8c0*/ System.DateTime get_DateEnd();
            /*0x2a9f8c8*/ System.TimeSpan get_DaylightDelta();
            /*0x2a9f8d0*/ System.TimeZoneInfo.TransitionTime get_DaylightTransitionStart();
            /*0x2a9f8e4*/ System.TimeZoneInfo.TransitionTime get_DaylightTransitionEnd();
            /*0x2a9f8f8*/ bool Equals(System.TimeZoneInfo.AdjustmentRule other);
            /*0x2a9fb78*/ int GetHashCode();
            /*0x2aa007c*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x2aa01a0*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        struct TransitionTime : System.IEquatable<System.TimeZoneInfo.TransitionTime>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
        {
            /*0x10*/ System.DateTime m_timeOfDay;
            /*0x18*/ byte m_month;
            /*0x19*/ byte m_week;
            /*0x1a*/ byte m_day;
            /*0x1c*/ System.DayOfWeek m_dayOfWeek;
            /*0x20*/ bool m_isFixedDateRule;

            static /*0x2aa07f8*/ bool op_Inequality(System.TimeZoneInfo.TransitionTime t1, System.TimeZoneInfo.TransitionTime t2);
            static /*0x2aa0844*/ System.TimeZoneInfo.TransitionTime CreateFixedDateRule(System.DateTime timeOfDay, int month, int day);
            static /*0x2aa0934*/ System.TimeZoneInfo.TransitionTime CreateFloatingDateRule(System.DateTime timeOfDay, int month, int week, System.DayOfWeek dayOfWeek);
            static /*0x2aa08b8*/ System.TimeZoneInfo.TransitionTime CreateTransitionTime(System.DateTime timeOfDay, int month, int week, int day, System.DayOfWeek dayOfWeek, bool isFixedDateRule);
            static /*0x2aa09a4*/ void ValidateTransitionTime(System.DateTime timeOfDay, int month, int week, int day, System.DayOfWeek dayOfWeek);
            /*0xb21554*/ TransitionTime(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0xb214c0*/ System.DateTime get_TimeOfDay();
            /*0xb214c8*/ int get_Month();
            /*0xb214d0*/ int get_Week();
            /*0xb214d8*/ int get_Day();
            /*0xb214e0*/ System.DayOfWeek get_DayOfWeek();
            /*0xb214e8*/ bool get_IsFixedDateRule();
            /*0xb214f0*/ bool Equals(object obj);
            /*0xb214f8*/ bool Equals(System.TimeZoneInfo.TransitionTime other);
            /*0xb21530*/ int GetHashCode();
            /*0xb21544*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0xb2154c*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        struct SYSTEMTIME
        {
            /*0x10*/ ushort wYear;
            /*0x12*/ ushort wMonth;
            /*0x14*/ ushort wDayOfWeek;
            /*0x16*/ ushort wDay;
            /*0x18*/ ushort wHour;
            /*0x1a*/ ushort wMinute;
            /*0x1c*/ ushort wSecond;
            /*0x1e*/ ushort wMilliseconds;
        }

        struct TIME_ZONE_INFORMATION
        {
            /*0x10*/ int Bias;
            /*0x18*/ string StandardName;
            /*0x20*/ System.TimeZoneInfo.SYSTEMTIME StandardDate;
            /*0x30*/ int StandardBias;
            /*0x38*/ string DaylightName;
            /*0x40*/ System.TimeZoneInfo.SYSTEMTIME DaylightDate;
            /*0x50*/ int DaylightBias;
        }

        struct DYNAMIC_TIME_ZONE_INFORMATION
        {
            /*0x10*/ System.TimeZoneInfo.TIME_ZONE_INFORMATION TZI;
            /*0x58*/ string TimeZoneKeyName;
            /*0x60*/ byte DynamicDaylightTimeDisabled;
        }

        class <>c
        {
            static /*0x0*/ System.TimeZoneInfo.<> <>9;
            static /*0x8*/ System.Comparison<System.TimeZoneInfo.AdjustmentRule> <>9__19_0;

            static /*0x2a9f810*/ <>c();
            /*0x2a9f870*/ <>c();
            /*0x2a9f878*/ int <CreateLocalUnity>b__19_0(System.TimeZoneInfo.AdjustmentRule rule1, System.TimeZoneInfo.AdjustmentRule rule2);
        }
    }

    class TimeZoneNotFoundException : System.Exception
    {
        /*0x1d3e284*/ TimeZoneNotFoundException(string message, System.Exception innerException);
        /*0x1d417b8*/ TimeZoneNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x1d3b14c*/ TimeZoneNotFoundException();
    }

    class Type : System.Reflection.MemberInfo, System.Runtime.InteropServices._Type
    {
        static System.Reflection.BindingFlags DefaultLookup = 28;
        static System.Reflection.BindingFlags DeclaredOnlyLookup = 62;
        static /*0x0*/ System.Reflection.MemberFilter FilterAttribute;
        static /*0x8*/ System.Reflection.MemberFilter FilterName;
        static /*0x10*/ System.Reflection.MemberFilter FilterNameIgnoreCase;
        static /*0x18*/ object Missing;
        static /*0x20*/ char Delimiter;
        static /*0x28*/ System.Type[] EmptyTypes;
        static /*0x30*/ System.Reflection.Binder defaultBinder;
        /*0x10*/ System.RuntimeTypeHandle _impl;

        static /*0x207f04c*/ Type();
        static /*0x207b6a4*/ System.Type GetType(string typeName, System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> assemblyResolver, System.Func<System.Reflection.Assembly, string, bool, System.Type> typeResolver, bool throwOnError);
        static /*0x207b7fc*/ System.TypeCode GetTypeCode(System.Type type);
        static /*0x207b9a8*/ System.Reflection.Binder get_DefaultBinder();
        static /*0x207ba4c*/ void CreateBinder();
        static /*0x207bb54*/ System.RuntimeTypeHandle GetTypeHandle(object o);
        static /*0x207e1c8*/ int BinarySearch(System.Array array, object value);
        static /*0x207def4*/ bool IsIntegerType(System.Type t);
        static /*0x207b880*/ bool op_Equality(System.Type left, System.Type right);
        static /*0x207b99c*/ bool op_Inequality(System.Type left, System.Type right);
        static /*0x207ed08*/ System.Type internal_from_name(string name, bool throwOnError, bool ignoreCase);
        static /*0x207ed14*/ System.Type GetType(string typeName);
        static /*0x207edac*/ System.Type GetType(string typeName, bool throwOnError);
        static /*0x207ee50*/ System.Type GetType(string typeName, bool throwOnError, bool ignoreCase);
        static /*0x2079428*/ System.Type GetTypeFromHandle(System.RuntimeTypeHandle handle);
        static /*0x207f048*/ System.Type internal_from_handle(nint handle);
        /*0x207b67c*/ Type();
        /*0x207b684*/ System.Reflection.MemberTypes get_MemberType();
        /*0x207b68c*/ System.Type get_DeclaringType();
        /*0x207b694*/ System.Reflection.MethodBase get_DeclaringMethod();
        /*0x207b69c*/ System.Type get_ReflectedType();
        /*0x207b6fc*/ System.Type MakePointerType();
        /*0x207b73c*/ System.Type MakeByRefType();
        /*0x207b77c*/ System.Type MakeArrayType();
        /*0x207b7bc*/ System.Type MakeArrayType(int rank);
        /*0x207b88c*/ System.TypeCode GetTypeCodeImpl();
        object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
        System.Reflection.Module get_Module();
        System.Reflection.Assembly get_Assembly();
        /*0x207bb14*/ System.RuntimeTypeHandle get_TypeHandle();
        string get_FullName();
        string get_Namespace();
        string get_AssemblyQualifiedName();
        /*0x207bc58*/ int GetArrayRank();
        System.Type get_BaseType();
        /*0x207bcb4*/ System.Reflection.ConstructorInfo GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x207bdf4*/ System.Reflection.ConstructorInfo GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x207bf30*/ System.Reflection.ConstructorInfo GetConstructor(System.Type[] types);
        System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x207bf44*/ System.Reflection.ConstructorInfo[] GetConstructors();
        System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
        /*0x207bf58*/ System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x207c0c0*/ System.Reflection.MethodInfo GetMethod(string name, System.Type[] types);
        /*0x2079ff4*/ System.Reflection.MethodInfo GetMethod(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x207c214*/ System.Reflection.MethodInfo GetMethod(string name);
        System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x207c290*/ System.Reflection.MethodInfo[] GetMethods();
        System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
        System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x207c2a4*/ System.Reflection.FieldInfo GetField(string name);
        /*0x207c2b8*/ System.Reflection.FieldInfo[] GetFields();
        System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
        System.Type[] GetInterfaces();
        /*0x207c2cc*/ System.Reflection.EventInfo GetEvent(string name);
        System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x207c2e0*/ System.Reflection.PropertyInfo GetProperty(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        /*0x207c374*/ System.Reflection.PropertyInfo GetProperty(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x207c3ec*/ System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType, System.Type[] types);
        /*0x207c494*/ System.Reflection.PropertyInfo GetProperty(string name, System.Type returnType);
        /*0x207c598*/ System.Reflection.PropertyInfo GetProperty(string name);
        System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
        System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
        /*0x207c614*/ System.Reflection.PropertyInfo[] GetProperties();
        System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x207c628*/ System.Reflection.MemberInfo[] GetMember(string name);
        /*0x207c63c*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.BindingFlags bindingAttr);
        /*0x207c654*/ System.Reflection.MemberInfo[] GetMember(string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
        /*0x207c6b0*/ bool get_IsNested();
        /*0x207c72c*/ System.Reflection.TypeAttributes get_Attributes();
        /*0x207c73c*/ System.Reflection.GenericParameterAttributes get_GenericParameterAttributes();
        /*0x207c77c*/ bool get_IsVisible();
        /*0x207c958*/ bool get_IsNotPublic();
        /*0x207c92c*/ bool get_IsPublic();
        /*0x207c900*/ bool get_IsNestedPublic();
        /*0x207c980*/ bool get_IsNestedAssembly();
        /*0x207c9ac*/ bool get_IsExplicitLayout();
        /*0x207c9d8*/ bool get_IsClass();
        /*0x207ca3c*/ bool get_IsInterface();
        /*0x207ca2c*/ bool get_IsValueType();
        /*0x207cb0c*/ bool get_IsAbstract();
        /*0x207cb30*/ bool get_IsSealed();
        /*0x207cb54*/ bool get_IsEnum();
        /*0x207cbcc*/ bool get_IsSerializable();
        /*0x207ccc8*/ bool get_IsArray();
        /*0x207ccd8*/ bool get_IsSzArray();
        /*0x207cce0*/ bool get_IsGenericType();
        /*0x207cce8*/ bool get_IsGenericTypeDefinition();
        /*0x207ccf0*/ bool get_IsConstructedGenericType();
        /*0x207cd30*/ bool get_IsGenericParameter();
        /*0x207cd38*/ int get_GenericParameterPosition();
        /*0x207cd94*/ bool get_ContainsGenericParameters();
        /*0x207cef4*/ System.Type[] GetGenericParameterConstraints();
        /*0x207cf98*/ bool get_IsByRef();
        /*0x207cfa8*/ bool get_IsPointer();
        /*0x207cfb8*/ bool get_IsPrimitive();
        /*0x207cfc8*/ bool get_IsCOMObject();
        /*0x207c8f0*/ bool get_HasElementType();
        /*0x2079c9c*/ bool get_IsContextful();
        /*0x207cfd8*/ bool get_IsMarshalByRef();
        /*0x207cfe8*/ bool IsValueTypeImpl();
        System.Reflection.TypeAttributes GetAttributeFlagsImpl();
        bool IsArrayImpl();
        bool IsByRefImpl();
        bool IsPointerImpl();
        bool IsPrimitiveImpl();
        bool IsCOMObjectImpl();
        /*0x207d060*/ System.Type MakeGenericType(System.Type[] typeArguments);
        /*0x207d0bc*/ bool IsContextfulImpl();
        /*0x207d150*/ bool IsMarshalByRefImpl();
        System.Type GetElementType();
        /*0x207d1e4*/ System.Type[] GetGenericArguments();
        /*0x207d240*/ System.Type[] get_GenericTypeArguments();
        /*0x207d2f4*/ System.Type GetGenericTypeDefinition();
        bool HasElementTypeImpl();
        /*0x207ce98*/ System.Type GetRootElementType();
        /*0x207d350*/ string[] GetEnumNames();
        /*0x207d808*/ System.Array GetEnumValues();
        /*0x207d8c0*/ System.Array GetEnumRawConstantValues();
        /*0x207d404*/ void GetEnumData(ref string[] enumNames, ref System.Array enumValues);
        /*0x207d8ec*/ System.Type GetEnumUnderlyingType();
        /*0x207d9cc*/ bool IsEnumDefined(object value);
        /*0x207e340*/ string GetEnumName(object value);
        System.Type get_UnderlyingSystemType();
        /*0x207e57c*/ bool IsSubclassOf(System.Type c);
        /*0x207e650*/ bool IsInstanceOfType(object o);
        /*0x207e698*/ bool IsAssignableFrom(System.Type c);
        /*0x207ea3c*/ bool IsEquivalentTo(System.Type other);
        /*0x207e8c4*/ bool ImplementInterface(System.Type ifaceType);
        /*0x207eaac*/ string FormatTypeName();
        /*0x207eac0*/ string FormatTypeName(bool serialization);
        /*0x207eb00*/ string ToString();
        /*0x207eb64*/ bool Equals(object o);
        /*0x207ec10*/ bool Equals(System.Type o);
        /*0x207ec68*/ int GetHashCode();
        /*0x207ecc0*/ System.Type GetType();
        /*0x207ecc8*/ bool get_IsSZArray();
    }

    class TypeAccessException : System.TypeLoadException
    {
        /*0x207f230*/ TypeAccessException();
        /*0x207f2b8*/ TypeAccessException(string message);
        /*0x207f304*/ TypeAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct TypedReference
    {
        /*0x10*/ System.RuntimeTypeHandle type;
        /*0x18*/ nint Value;
        /*0x20*/ nint Type;

        static /*0x2083420*/ System.TypedReference MakeTypedReference(object target, System.Reflection.FieldInfo[] flds);
        static /*0x2083834*/ System.TypedReference MakeTypedReferenceInternal(object target, System.Reflection.FieldInfo[] fields);
        static /*0x2083990*/ void SetTypedReference(System.TypedReference target, object value);
        /*0xae0934*/ int GetHashCode();
        /*0xae093c*/ bool Equals(object o);
        /*0xae0948*/ bool get_IsNull();
    }

    class TypeInitializationException : System.SystemException
    {
        /*0x88*/ string _typeName;

        /*0x2080c98*/ TypeInitializationException();
        /*0x2080d08*/ TypeInitializationException(string fullTypeName, System.Exception innerException);
        /*0x2080dfc*/ TypeInitializationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x2080e90*/ string get_TypeName();
        /*0x2080ee8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class TypeLoadException : System.SystemException, System.Runtime.Serialization.ISerializable
    {
        /*0x88*/ string ClassName;
        /*0x90*/ string AssemblyName;
        /*0x98*/ string MessageArg;
        /*0xa0*/ int ResourceId;

        /*0x2081004*/ TypeLoadException();
        /*0x207f014*/ TypeLoadException(string message);
        /*0x20811bc*/ TypeLoadException(string className, string assemblyName);
        /*0x20811c8*/ TypeLoadException(string className, string assemblyName, string messageArg, int resourceId);
        /*0x207f334*/ TypeLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x2081074*/ string get_Message();
        /*0x2081098*/ void SetMessageField();
        /*0x2081234*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct UInt16 : System.IComparable, System.IFormattable, System.IConvertible, System.IComparable<ushort>, System.IEquatable<ushort>
    {
        static ushort MaxValue = 65535;
        static ushort MinValue = 0;
        /*0x10*/ ushort m_value;

        static /*0x2083c04*/ ushort Parse(string s, System.IFormatProvider provider);
        static /*0x2083d7c*/ ushort Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x2083c38*/ ushort Parse(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info);
        static /*0x2083dcc*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref ushort result);
        static /*0x2083e64*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.Globalization.NumberFormatInfo info, ref ushort result);
        /*0xae098c*/ int CompareTo(object value);
        /*0xae0994*/ int CompareTo(ushort value);
        /*0xae09a0*/ bool Equals(object obj);
        /*0xae09a8*/ bool Equals(ushort obj);
        /*0xae09b8*/ int GetHashCode();
        /*0xae09c0*/ string ToString();
        /*0xae09f4*/ string ToString(System.IFormatProvider provider);
        /*0xae0a2c*/ string ToString(string format, System.IFormatProvider provider);
        /*0xae0a68*/ System.TypeCode GetTypeCode();
        /*0xae0a70*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xae0a78*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xae0a80*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xae0a88*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xae0a90*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xae0a98*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xae0aa0*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xae0aa8*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xae0ab0*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xae0ab8*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xae0ac0*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xae0ac8*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xae0ad0*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xae0ad8*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xae0ae4*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct UInt32 : System.IComparable, System.IFormattable, System.IConvertible, System.IComparable<uint>, System.IEquatable<uint>
    {
        static uint MaxValue = 4294967295;
        static uint MinValue = 0;
        /*0x10*/ uint m_value;

        static /*0x2084790*/ uint Parse(string s);
        static /*0x20847c4*/ uint Parse(string s, System.IFormatProvider provider);
        static /*0x20847fc*/ uint Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x2084850*/ bool TryParse(string s, ref uint result);
        static /*0x208488c*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref uint result);
        /*0xae0aec*/ int CompareTo(object value);
        /*0xae0af4*/ int CompareTo(uint value);
        /*0xae0b08*/ bool Equals(object obj);
        /*0xae0b10*/ bool Equals(uint obj);
        /*0xae0b20*/ int GetHashCode();
        /*0xae0b28*/ string ToString();
        /*0xae0b5c*/ string ToString(System.IFormatProvider provider);
        /*0xae0b94*/ string ToString(string format, System.IFormatProvider provider);
        /*0xae0bd0*/ System.TypeCode GetTypeCode();
        /*0xae0bd8*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xae0be0*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xae0be8*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xae0bf0*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xae0bf8*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xae0c00*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xae0c08*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xae0c10*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xae0c18*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xae0c20*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xae0c28*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xae0c30*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xae0c38*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xae0c40*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xae0c4c*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    struct UInt64 : System.IComparable, System.IFormattable, System.IConvertible, System.IComparable<ulong>, System.IEquatable<ulong>
    {
        static ulong MaxValue = 18446744073709551615;
        static ulong MinValue = 0;
        /*0x10*/ ulong m_value;

        static /*0x20851f8*/ ulong Parse(string s);
        static /*0x208522c*/ ulong Parse(string s, System.IFormatProvider provider);
        static /*0x2085264*/ ulong Parse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider);
        static /*0x20852b8*/ bool TryParse(string s, System.Globalization.NumberStyles style, System.IFormatProvider provider, ref ulong result);
        /*0xae0c54*/ int CompareTo(object value);
        /*0xae0c5c*/ int CompareTo(ulong value);
        /*0xae0c70*/ bool Equals(object obj);
        /*0xae0c78*/ bool Equals(ulong obj);
        /*0xae0c88*/ int GetHashCode();
        /*0xae0c94*/ string ToString();
        /*0xae0cc8*/ string ToString(System.IFormatProvider provider);
        /*0xae0d00*/ string ToString(string format);
        /*0xae0d38*/ string ToString(string format, System.IFormatProvider provider);
        /*0xae0d74*/ System.TypeCode GetTypeCode();
        /*0xae0d7c*/ bool System.IConvertible.ToBoolean(System.IFormatProvider provider);
        /*0xae0d84*/ char System.IConvertible.ToChar(System.IFormatProvider provider);
        /*0xae0d8c*/ sbyte System.IConvertible.ToSByte(System.IFormatProvider provider);
        /*0xae0d94*/ byte System.IConvertible.ToByte(System.IFormatProvider provider);
        /*0xae0d9c*/ short System.IConvertible.ToInt16(System.IFormatProvider provider);
        /*0xae0da4*/ ushort System.IConvertible.ToUInt16(System.IFormatProvider provider);
        /*0xae0dac*/ int System.IConvertible.ToInt32(System.IFormatProvider provider);
        /*0xae0db4*/ uint System.IConvertible.ToUInt32(System.IFormatProvider provider);
        /*0xae0dbc*/ long System.IConvertible.ToInt64(System.IFormatProvider provider);
        /*0xae0dc4*/ ulong System.IConvertible.ToUInt64(System.IFormatProvider provider);
        /*0xae0dcc*/ float System.IConvertible.ToSingle(System.IFormatProvider provider);
        /*0xae0dd4*/ double System.IConvertible.ToDouble(System.IFormatProvider provider);
        /*0xae0ddc*/ decimal System.IConvertible.ToDecimal(System.IFormatProvider provider);
        /*0xae0de4*/ System.DateTime System.IConvertible.ToDateTime(System.IFormatProvider provider);
        /*0xae0df0*/ object System.IConvertible.ToType(System.Type type, System.IFormatProvider provider);
    }

    class UnauthorizedAccessException : System.SystemException
    {
        /*0x2064628*/ UnauthorizedAccessException();
        /*0x2064698*/ UnauthorizedAccessException(string message);
        /*0x20646cc*/ UnauthorizedAccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class UnhandledExceptionEventArgs : System.EventArgs
    {
        /*0x10*/ object _Exception;
        /*0x18*/ bool _IsTerminating;

        /*0x2065240*/ UnhandledExceptionEventArgs(object exception, bool isTerminating);
        /*0x20652c4*/ object get_ExceptionObject();
        /*0x20652cc*/ bool get_IsTerminating();
    }

    class UnhandledExceptionEventHandler : System.MulticastDelegate
    {
        /*0x20652d4*/ UnhandledExceptionEventHandler(object object, nint method);
        /*0x2065334*/ void Invoke(object sender, System.UnhandledExceptionEventArgs e);
        /*0x20656c8*/ System.IAsyncResult BeginInvoke(object sender, System.UnhandledExceptionEventArgs e, System.AsyncCallback callback, object object);
        /*0x20656f8*/ void EndInvoke(System.IAsyncResult result);
    }

    class UnitySerializationHolder : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
    {
        /*0x10*/ System.Type[] m_instantiation;
        /*0x18*/ int[] m_elementTypes;
        /*0x20*/ int m_genericParameterPosition;
        /*0x28*/ System.Type m_declaringType;
        /*0x30*/ System.Reflection.MethodBase m_declaringMethod;
        /*0x38*/ string m_data;
        /*0x40*/ string m_assemblyName;
        /*0x48*/ int m_unityType;

        static /*0x2068f20*/ void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, System.Reflection.Missing missing);
        static /*0x2068fdc*/ System.RuntimeType AddElementTypes(System.Runtime.Serialization.SerializationInfo info, System.RuntimeType type);
        static /*0x206935c*/ void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, System.RuntimeType type);
        static /*0x20696f4*/ void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, int unityType, string data, System.Reflection.RuntimeAssembly assembly);
        /*0x206988c*/ UnitySerializationHolder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x206925c*/ System.Type MakeElementTypes(System.Type type);
        /*0x2069c60*/ void ThrowInsufficientInformation(string field);
        /*0x2069cfc*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x2069d58*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
    }

    struct UnSafeCharBuffer
    {
        /*0x10*/ char* m_buffer;
        /*0x18*/ int m_totalSize;
        /*0x1c*/ int m_length;

        /*0xae05c4*/ UnSafeCharBuffer(char* buffer, int bufferSize);
        /*0xae05d0*/ void AppendString(string stringToAppend);
    }

    class Version : System.ICloneable, System.IComparable, System.IComparable<System.Version>, System.IEquatable<System.Version>
    {
        static int ZERO_CHAR_VALUE = 48;
        static /*0x0*/ char[] SeparatorsArray;
        /*0x10*/ int _Major;
        /*0x14*/ int _Minor;
        /*0x18*/ int _Build;
        /*0x1c*/ int _Revision;

        static /*0x20727f8*/ Version();
        static /*0x207222c*/ void AppendPositiveNumber(int num, System.Text.StringBuilder sb);
        static /*0x207181c*/ System.Version Parse(string input);
        static /*0x2072568*/ bool TryParse(string input, ref System.Version result);
        static /*0x20722b4*/ bool TryParseVersion(string version, ref System.Version.VersionResult result);
        static /*0x2072628*/ bool TryParseComponent(string component, string componentName, ref System.Version.VersionResult result, ref int parsedComponent);
        static /*0x2071b4c*/ bool op_Equality(System.Version v1, System.Version v2);
        static /*0x20726fc*/ bool op_Inequality(System.Version v1, System.Version v2);
        static /*0x207278c*/ bool op_LessThan(System.Version v1, System.Version v2);
        /*0x20713f4*/ Version(int major, int minor, int build, int revision);
        /*0x2071564*/ Version(int major, int minor, int build);
        /*0x207168c*/ Version(int major, int minor);
        /*0x2071770*/ Version(string version);
        /*0x2071938*/ Version();
        /*0x2071968*/ int get_Major();
        /*0x2071970*/ int get_Minor();
        /*0x2071978*/ int get_Build();
        /*0x2071980*/ int get_Revision();
        /*0x2071988*/ object Clone();
        /*0x2071a18*/ int CompareTo(object version);
        /*0x2071b60*/ int CompareTo(System.Version value);
        /*0x2071c3c*/ bool Equals(object obj);
        /*0x2071d14*/ bool Equals(System.Version obj);
        /*0x2071ddc*/ int GetHashCode();
        /*0x2071df8*/ string ToString();
        /*0x2071e20*/ string ToString(int fieldCount);

        enum ParseFailureKind
        {
            ArgumentNullException = 0,
            ArgumentException = 1,
            ArgumentOutOfRangeException = 2,
            FormatException = 3,
        }

        struct VersionResult
        {
            /*0x10*/ System.Version m_parsedVersion;
            /*0x18*/ System.Version.ParseFailureKind m_failure;
            /*0x20*/ string m_exceptionArgument;
            /*0x28*/ string m_argumentName;
            /*0x30*/ bool m_canThrow;

            /*0xb216d8*/ void Init(string argumentName, bool canThrow);
            /*0xb216e8*/ void SetFailure(System.Version.ParseFailureKind failure);
            /*0xb216f0*/ void SetFailure(System.Version.ParseFailureKind failure, string argument);
            /*0xb216f8*/ System.Exception GetVersionParseException();
        }
    }

    class AppContextDefaultValues
    {
        static /*0x1c8a640*/ void PopulateDefaultValues();
        static /*0x1c8a9bc*/ bool TryGetSwitchOverride(string switchName, ref bool overrideValue);
    }

    class AppDomain : System.MarshalByRefObject
    {
        static /*0x0*/ string _process_guid;
        static /*0x8*/ System.AppDomain default_domain;
        [ThreadStatic] static System.Collections.Generic.Dictionary<string, object> type_resolve_in_progress;
        [ThreadStatic] static System.Collections.Generic.Dictionary<string, object> assembly_resolve_in_progress;
        [ThreadStatic] static System.Collections.Generic.Dictionary<string, object> assembly_resolve_in_progress_refonly;
        [ThreadStatic] static object _principal;
        /*0x18*/ nint _mono_app_domain;
        /*0x20*/ object _evidence;
        /*0x28*/ object _granted;
        /*0x30*/ int _principalPolicy;
        /*0x38*/ System.AssemblyLoadEventHandler AssemblyLoad;
        /*0x40*/ System.ResolveEventHandler AssemblyResolve;
        /*0x48*/ System.EventHandler DomainUnload;
        /*0x50*/ System.EventHandler ProcessExit;
        /*0x58*/ System.ResolveEventHandler ResourceResolve;
        /*0x60*/ System.ResolveEventHandler TypeResolve;
        /*0x68*/ System.UnhandledExceptionEventHandler UnhandledException;
        /*0x70*/ System.EventHandler<System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs> FirstChanceException;
        /*0x78*/ object _domain_manager;
        /*0x80*/ System.ResolveEventHandler ReflectionOnlyAssemblyResolve;
        /*0x88*/ object _activation;
        /*0x90*/ object _applicationIdentity;
        /*0x98*/ System.Collections.Generic.List<string> compatibility_switch;

        static /*0x1c8aa6c*/ System.AppDomain getCurDomain();
        static /*0x1c8aa70*/ System.AppDomain get_CurrentDomain();
        static /*0x1c8b62c*/ System.AppDomain InternalSetDomainByID(int domain_id);
        static /*0x1c8b630*/ System.AppDomain InternalSetDomain(System.AppDomain context);
        static /*0x1c8b634*/ void InternalPushDomainRefByID(int domain_id);
        static /*0x1c8b638*/ void InternalPopDomainRef();
        static /*0x1c8b63c*/ System.Runtime.Remoting.Contexts.Context InternalSetContext(System.Runtime.Remoting.Contexts.Context context);
        static /*0x1c8b640*/ System.Runtime.Remoting.Contexts.Context InternalGetContext();
        static /*0x1c8b644*/ System.Runtime.Remoting.Contexts.Context InternalGetDefaultContext();
        static /*0x1c8b648*/ string InternalGetProcessGuid(string newguid);
        static /*0x1c8b64c*/ object InvokeInDomainByID(int domain_id, System.Reflection.MethodInfo method, object obj, object[] args);
        static /*0x1c8b7ec*/ string GetProcessGuid();
        static /*0x1c8b8a8*/ bool InternalIsFinalizingForUnload(int domain_id);
        /*0x1c8aa60*/ AppDomain();
        /*0x1c8aa68*/ string getFriendlyName();
        /*0x1c8aa74*/ System.Reflection.Assembly[] GetAssemblies(bool refOnly);
        /*0x1c8aa7c*/ System.Reflection.Assembly[] GetAssemblies();
        /*0x1c8aa84*/ object GetData(string name);
        /*0x1c8aa88*/ object InitializeLifetimeService();
        /*0x1c8aa90*/ System.Reflection.Assembly LoadAssembly(string assemblyRef, System.Security.Policy.Evidence securityEvidence, bool refOnly);
        /*0x1c8aa98*/ System.Reflection.Assembly Load(System.Reflection.AssemblyName assemblyRef);
        /*0x1c8aedc*/ System.Reflection.Assembly LoadSatellite(System.Reflection.AssemblyName assemblyRef, bool throwOnError);
        /*0x1c8aaa0*/ System.Reflection.Assembly Load(System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity);
        /*0x1c8b528*/ System.Reflection.Assembly Load(string assemblyString);
        /*0x1c8b534*/ System.Reflection.Assembly Load(string assemblyString, System.Security.Policy.Evidence assemblySecurity, bool refonly);
        /*0x1c8b8ac*/ bool IsFinalizingForUnload();
        /*0x1c8b8c4*/ int getDomainID();
        /*0x1c8b8cc*/ string ToString();
        /*0x1c8b8d0*/ void DoAssemblyLoad(System.Reflection.Assembly assembly);
        /*0x1c8bd64*/ System.Reflection.Assembly DoAssemblyResolve(string name, System.Reflection.Assembly requestingAssembly, bool refonly);
        /*0x1c8c044*/ System.Reflection.Assembly DoTypeResolve(object name_or_tb);
        /*0x1c8c308*/ System.Reflection.Assembly DoResourceResolve(string name, System.Reflection.Assembly requesting);
        /*0x1c8c444*/ void DoDomainUnload();
        /*0x1c8c460*/ byte[] GetMarshalledDomainObjRef();
        /*0x1c8c54c*/ void ProcessMessageInDomain(byte[] arrRequest, System.Runtime.Remoting.Messaging.CADMethodCallMessage cadMsg, ref byte[] arrResponse, ref System.Runtime.Remoting.Messaging.CADMethodReturnMessage cadMrm);
        /*0x1c8c688*/ void add_DomainUnload(System.EventHandler value);
        /*0x1c8c728*/ void remove_DomainUnload(System.EventHandler value);
        /*0x1c8c7c8*/ void add_ProcessExit(System.EventHandler value);
        /*0x1c8c868*/ void remove_ProcessExit(System.EventHandler value);
        /*0x1c8c908*/ void add_UnhandledException(System.UnhandledExceptionEventHandler value);
        /*0x1c8c9a8*/ void remove_UnhandledException(System.UnhandledExceptionEventHandler value);
        /*0x1c8ca48*/ bool get_IsHomogenous();
        /*0x1c8ca50*/ bool get_IsFullyTrusted();
    }

    class CLRConfig
    {
        static /*0x1c5ff7c*/ bool CheckThrowUnobservedTaskExceptions();
    }

    class CompatibilitySwitches
    {
        static /*0x0*/ bool IsAppEarlierThanSilverlight4;
        static /*0x1*/ bool IsAppEarlierThanWindowsPhone8;
    }

    class Environment
    {
        static int mono_corlib_version = 1051100001;
        static /*0x0*/ string nl;
        static /*0x8*/ System.OperatingSystem os;

        static /*0x244ce2c*/ string GetResourceString(string key);
        static /*0x24576a8*/ string GetResourceString(string key, object[] values);
        static /*0x24594f4*/ string GetResourceStringEncodingName(int codePage);
        static /*0x2459684*/ int get_CurrentManagedThreadId();
        static /*0x24596a8*/ bool get_HasShutdownStarted();
        static /*0x24596ac*/ string get_MachineName();
        static /*0x24596b0*/ string GetNewLine();
        static /*0x24596b4*/ string get_NewLine();
        static /*0x2459720*/ System.PlatformID get_Platform();
        static /*0x2459724*/ string GetOSVersionString();
        static /*0x2459728*/ System.OperatingSystem get_OSVersion();
        static /*0x24597e4*/ System.Version CreateVersionFromString(string info);
        static /*0x2459a00*/ string get_StackTrace();
        static /*0x2459a70*/ int get_TickCount();
        static /*0x2459a74*/ string get_UserDomainName();
        static /*0x2459a78*/ string get_UserName();
        static /*0x2459a7c*/ System.Version get_Version();
        static /*0x2459aec*/ void Exit(int exitCode);
        static /*0x2459af0*/ string ExpandEnvironmentVariables(string name);
        static /*0x2459edc*/ string internalGetEnvironmentVariable_native(nint variable);
        static /*0x2459ee0*/ string internalGetEnvironmentVariable(string variable);
        static /*0x2459db8*/ string GetEnvironmentVariable(string variable);
        static /*0x2459dd8*/ System.Collections.Hashtable GetEnvironmentVariablesNoCase();
        static /*0x2459f80*/ string GetFolderPath(System.Environment.SpecialFolder folder);
        static /*0x2459fcc*/ string GetWindowsFolderPath(int folder);
        static /*0x2459f88*/ string GetFolderPath(System.Environment.SpecialFolder folder, System.Environment.SpecialFolderOption option);
        static /*0x245a504*/ string ReadXdgUserDir(string config_dir, string home_dir, string key, string fallback);
        static /*0x2459fd0*/ string UnixGetFolderPath(System.Environment.SpecialFolder folder, System.Environment.SpecialFolderOption option);
        static /*0x245a9a4*/ void FailFast(string message);
        static /*0x245a9e4*/ void FailFast(string message, System.Exception exception);
        static /*0x245aa38*/ bool get_Is64BitProcess();
        static /*0x245aa58*/ int get_ProcessorCount();
        static /*0x2459dbc*/ bool get_IsRunningOnWindows();
        static /*0x2459f7c*/ string[] GetEnvironmentVariableNames();
        static /*0x245aa5c*/ string GetMachineConfigPath();
        static /*0x245a9a0*/ string internalGetHome();
        static /*0x245aa60*/ int GetPageSize();
        static /*0x245aa64*/ bool get_IsUnix();
        static /*0x245aaa0*/ string GetStackTrace(System.Exception e, bool needFileInfo);

        enum SpecialFolder
        {
            MyDocuments = 5,
            Desktop = 0,
            MyComputer = 17,
            Programs = 2,
            Personal = 5,
            Favorites = 6,
            Startup = 7,
            Recent = 8,
            SendTo = 9,
            StartMenu = 11,
            MyMusic = 13,
            DesktopDirectory = 16,
            Templates = 21,
            ApplicationData = 26,
            LocalApplicationData = 28,
            InternetCache = 32,
            Cookies = 33,
            History = 34,
            CommonApplicationData = 35,
            System = 37,
            ProgramFiles = 38,
            MyPictures = 39,
            CommonProgramFiles = 43,
            MyVideos = 14,
            NetworkShortcuts = 19,
            Fonts = 20,
            CommonStartMenu = 22,
            CommonPrograms = 23,
            CommonStartup = 24,
            CommonDesktopDirectory = 25,
            PrinterShortcuts = 27,
            Windows = 36,
            UserProfile = 40,
            SystemX86 = 41,
            ProgramFilesX86 = 42,
            CommonProgramFilesX86 = 44,
            CommonTemplates = 45,
            CommonDocuments = 46,
            CommonAdminTools = 47,
            AdminTools = 48,
            CommonMusic = 53,
            CommonPictures = 54,
            CommonVideos = 55,
            Resources = 56,
            LocalizedResources = 57,
            CommonOemLinks = 58,
            CDBurning = 59,
        }

        enum SpecialFolderOption
        {
            None = 0,
            DoNotVerify = 16384,
            Create = 32768,
        }
    }

    class ParseNumbers
    {
        static /*0x2528394*/ int StringToInt(string value, int fromBase, int flags);
        static /*0x252839c*/ int StringToInt(string value, int fromBase, int flags, int* parsePos);
        static /*0x25287c8*/ long StringToLong(string value, int fromBase, int flags);
        static /*0x25287d0*/ long StringToLong(string value, int fromBase, int flags, int* parsePos);
        static /*0x2528c28*/ string IntToString(int value, int toBase, int width, char paddingChar, int flags);
        static /*0x2529364*/ void EndianSwap(ref byte[] value);
        static /*0x2528e68*/ System.Text.StringBuilder ConvertToBase2(byte[] value);
        static /*0x2528fb4*/ System.Text.StringBuilder ConvertToBase8(byte[] value);
        static /*0x25291a0*/ System.Text.StringBuilder ConvertToBase16(byte[] value);
    }

    class MonoTypeInfo
    {
        /*0x10*/ string full_name;
        /*0x18*/ System.Reflection.MonoCMethod default_ctor;

        /*0x22a5500*/ MonoTypeInfo();
    }

    class TypeNameParser
    {
        static /*0x207b6b0*/ System.Type GetType(string typeName, System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> assemblyResolver, System.Func<System.Reflection.Assembly, string, bool, System.Type> typeResolver, bool throwOnError, bool ignoreCase, ref System.Threading.StackCrawlMark stackMark);
    }

    class AppDomainSetup
    {
        /*0x10*/ string application_base;
        /*0x18*/ string application_name;
        /*0x20*/ string cache_path;
        /*0x28*/ string configuration_file;
        /*0x30*/ string dynamic_base;
        /*0x38*/ string license_file;
        /*0x40*/ string private_bin_path;
        /*0x48*/ string private_bin_path_probe;
        /*0x50*/ string shadow_copy_directories;
        /*0x58*/ string shadow_copy_files;
        /*0x60*/ bool publisher_policy;
        /*0x61*/ bool path_changed;
        /*0x64*/ int loader_optimization;
        /*0x68*/ bool disallow_binding_redirects;
        /*0x69*/ bool disallow_code_downloads;
        /*0x70*/ object _activationArguments;
        /*0x78*/ object domain_initializer;
        /*0x80*/ object application_trust;
        /*0x88*/ string[] domain_initializer_args;
        /*0x90*/ bool disallow_appbase_probe;
        /*0x98*/ byte[] configuration_bytes;
        /*0xa0*/ byte[] serialized_non_primitives;
        /*0xa8*/ string <TargetFrameworkName>k__BackingField;

        /*0x1c8cf90*/ AppDomainSetup();
    }

    struct ArgIterator
    {
        /*0x10*/ nint sig;
        /*0x18*/ nint args;
        /*0x20*/ int next_arg;
        /*0x24*/ int num_args;

        /*0xad9ec8*/ bool Equals(object o);
        /*0xad9ed4*/ int GetHashCode();
    }

    class AssemblyLoadEventArgs : System.EventArgs
    {
        /*0x10*/ System.Reflection.Assembly m_loadedAssembly;

        /*0x1c8b958*/ AssemblyLoadEventArgs(System.Reflection.Assembly loadedAssembly);
    }

    class AssemblyLoadEventHandler : System.MulticastDelegate
    {
        /*0x1c95094*/ AssemblyLoadEventHandler(object object, nint method);
        /*0x1c8b9d0*/ void Invoke(object sender, System.AssemblyLoadEventArgs args);
        /*0x1c950f4*/ System.IAsyncResult BeginInvoke(object sender, System.AssemblyLoadEventArgs args, System.AsyncCallback callback, object object);
        /*0x1c95124*/ void EndInvoke(System.IAsyncResult result);
    }

    class Console
    {
        static /*0x0*/ System.IO.TextWriter stdout;
        static /*0x8*/ System.IO.TextWriter stderr;
        static /*0x10*/ System.IO.TextReader stdin;
        static /*0x18*/ System.Text.Encoding inputEncoding;
        static /*0x20*/ System.Text.Encoding outputEncoding;
        static /*0x28*/ System.ConsoleCancelEventHandler cancel_event;
        static /*0x30*/ System.Console.InternalCancelHandler cancel_handler;

        static /*0x161fdf8*/ Console();
        static /*0x1620060*/ void SetupStreams(System.Text.Encoding inputEncoding, System.Text.Encoding outputEncoding);
        static /*0x16207d0*/ System.IO.TextWriter get_Error();
        static /*0x1620834*/ System.IO.Stream Open(nint handle, System.IO.FileAccess access, int bufferSize);
        static /*0x162072c*/ System.IO.Stream OpenStandardError(int bufferSize);
        static /*0x16205e4*/ System.IO.Stream OpenStandardInput(int bufferSize);
        static /*0x1620688*/ System.IO.Stream OpenStandardOutput(int bufferSize);
        static /*0x1620974*/ void SetOut(System.IO.TextWriter newOut);
        static /*0x1620a28*/ void WriteLine(string value);
        static /*0x1620aa8*/ System.Text.Encoding get_InputEncoding();
        static /*0x1620b0c*/ System.Text.Encoding get_OutputEncoding();
        static /*0x1620b70*/ System.ConsoleKeyInfo ReadKey();
        static /*0x1620bd4*/ System.ConsoleKeyInfo ReadKey(bool intercept);
        static /*0x1620d28*/ void DoConsoleCancelEvent();

        class WindowsConsole
        {
            static /*0x0*/ bool ctrlHandlerAdded;
            static /*0x8*/ System.Console.WindowsConsole.WindowsCancelHandler cancelHandler;

            static /*0x180d628*/ WindowsConsole();
            static /*0x180d41c*/ int GetConsoleCP();
            static /*0x180d490*/ int GetConsoleOutputCP();
            static /*0x180d508*/ bool DoWindowsConsoleCancelEvent(int keyCode);
            static /*0x180d578*/ int GetInputCodePage();
            static /*0x180d5d0*/ int GetOutputCodePage();

            class WindowsCancelHandler : System.MulticastDelegate
            {
                /*0x2aa4ccc*/ WindowsCancelHandler(object object, nint method);
                /*0x2aa4d2c*/ bool Invoke(int keyCode);
                /*0x2aa4f64*/ System.IAsyncResult BeginInvoke(int keyCode, System.AsyncCallback callback, object object);
                /*0x2aa4fec*/ bool EndInvoke(System.IAsyncResult result);
            }
        }

        class InternalCancelHandler : System.MulticastDelegate
        {
            /*0x180d178*/ InternalCancelHandler(object object, nint method);
            /*0x180d1d8*/ void Invoke();
            /*0x180d3e4*/ System.IAsyncResult BeginInvoke(System.AsyncCallback callback, object object);
            /*0x180d410*/ void EndInvoke(System.IAsyncResult result);
        }
    }

    class ConsoleDriver
    {
        static /*0x0*/ System.IConsoleDriver driver;
        static /*0x8*/ bool is_console;
        static /*0x9*/ bool called_isatty;

        static /*0x1621440*/ ConsoleDriver();
        static /*0x1621514*/ System.IConsoleDriver CreateNullConsoleDriver();
        static /*0x162156c*/ System.IConsoleDriver CreateWindowsConsoleDriver();
        static /*0x16215c4*/ System.IConsoleDriver CreateTermInfoDriver(string term);
        static /*0x1620c3c*/ System.ConsoleKeyInfo ReadKey(bool intercept);
        static /*0x162045c*/ bool get_IsConsole();
        static /*0x1621624*/ bool Isatty(nint handle);
        static /*0x1621628*/ int InternalKeyAvailable(int ms_timeout);
        static /*0x162162c*/ bool TtySetup(string keypadXmit, string teardown, ref byte[] control_characters, ref int* address);
        static /*0x1621630*/ bool SetEcho(bool wantEcho);
    }

    class DelegateData
    {
        /*0x10*/ System.Type target_type;
        /*0x18*/ string method_name;
        /*0x20*/ bool curried_first_arg;

        /*0x203f010*/ DelegateData();
    }

    class Delegate : System.ICloneable, System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint method_ptr;
        /*0x18*/ nint invoke_impl;
        /*0x20*/ object m_target;
        /*0x28*/ nint method;
        /*0x30*/ nint delegate_trampoline;
        /*0x38*/ nint extra_arg;
        /*0x40*/ nint method_code;
        /*0x48*/ System.Reflection.MethodInfo method_info;
        /*0x50*/ System.Reflection.MethodInfo original_method_info;
        /*0x58*/ System.DelegateData data;
        /*0x60*/ bool method_is_virtual;

        static /*0x203e238*/ System.Delegate CreateDelegate_internal(System.Type type, object target, System.Reflection.MethodInfo info, bool throwOnBindFailure);
        static /*0x203e240*/ bool arg_type_match(System.Type delArgType, System.Type argType);
        static /*0x203e404*/ bool arg_type_match_this(System.Type delArgType, System.Type argType, bool boxedThis);
        static /*0x203e57c*/ bool return_type_match(System.Type delReturnType, System.Type returnType);
        static /*0x203e7dc*/ System.Delegate CreateDelegate(System.Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);
        static /*0x203e7e8*/ System.Delegate CreateDelegate(System.Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure, bool allowClosed);
        static /*0x203f018*/ System.Delegate CreateDelegate(System.Type type, object firstArgument, System.Reflection.MethodInfo method);
        static /*0x203f024*/ System.Delegate CreateDelegate(System.Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);
        static /*0x203f03c*/ System.Delegate CreateDelegate(System.Type type, System.Reflection.MethodInfo method);
        static /*0x203f050*/ System.Delegate CreateDelegate(System.Type type, object target, string method);
        static /*0x203f068*/ System.Reflection.MethodInfo GetCandidateMethod(System.Type type, System.Type target, string method, System.Reflection.BindingFlags bflags, bool ignoreCase, bool throwOnBindFailure);
        static /*0x203f4b0*/ System.Delegate CreateDelegate(System.Type type, System.Type target, string method, bool ignoreCase, bool throwOnBindFailure);
        static /*0x203f5d8*/ System.Delegate CreateDelegate(System.Type type, System.Type target, string method);
        static /*0x203f5e4*/ System.Delegate CreateDelegate(System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);
        static /*0x203f05c*/ System.Delegate CreateDelegate(System.Type type, object target, string method, bool ignoreCase);
        static /*0x203fd04*/ System.Delegate Combine(System.Delegate a, System.Delegate b);
        static /*0x203fef4*/ System.Delegate Combine(System.Delegate[] delegates);
        static /*0x203ffc4*/ System.Delegate Remove(System.Delegate source, System.Delegate value);
        static /*0x20401e0*/ bool op_Equality(System.Delegate d1, System.Delegate d2);
        static /*0x2040208*/ System.Delegate CreateDelegateNoSecurityCheck(System.RuntimeType type, object firstArgument, System.Reflection.MethodInfo method);
        static /*0x2040210*/ System.MulticastDelegate AllocDelegateLike_internal(System.Delegate d);
        /*0x203e220*/ System.Reflection.MethodInfo get_Method();
        /*0x203e22c*/ System.Reflection.MethodInfo GetVirtualMethod_internal();
        /*0x203e230*/ object get_Target();
        /*0x203f6c8*/ object Clone();
        /*0x203f6d0*/ bool Equals(object obj);
        /*0x203f8a0*/ int GetHashCode();
        /*0x203f920*/ System.Reflection.MethodInfo GetMethodImpl();
        /*0x203f9f4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x203fc68*/ System.Delegate[] GetInvocationList();
        /*0x203ff6c*/ System.Delegate CombineImpl(System.Delegate d);
        /*0x20401b0*/ System.Delegate RemoveImpl(System.Delegate d);
    }

    class DelegateSerializationHolder : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
    {
        /*0x10*/ System.Delegate _delegate;

        static /*0x203f9f8*/ void GetDelegateData(System.Delegate instance, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext ctx);
        /*0x2040214*/ DelegateSerializationHolder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext ctx);
        /*0x2040444*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x2040484*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);

        class DelegateEntry
        {
            /*0x10*/ string type;
            /*0x18*/ string assembly;
            /*0x20*/ object target;
            /*0x28*/ string targetTypeAssembly;
            /*0x30*/ string targetTypeName;
            /*0x38*/ string methodName;
            /*0x40*/ System.DelegateSerializationHolder.DelegateEntry delegateEntry;

            /*0x180fa34*/ DelegateEntry(System.Delegate del, string targetLabel);
            /*0x180fb60*/ System.Delegate DeserializeDelegate(System.Runtime.Serialization.SerializationInfo info, int index);
        }
    }

    class EmptyArray<T>
    {
        static /*0x0*/ T[] Value;

        static EmptyArray();
    }

    enum SByteEnum
    {
    }

    enum Int16Enum
    {
    }

    enum Int32Enum
    {
    }

    enum Int64Enum
    {
    }

    enum ByteEnum
    {
    }

    enum UInt16Enum
    {
    }

    enum UInt32Enum
    {
    }

    enum UInt64Enum
    {
    }

    interface IConsoleDriver
    {
        System.ConsoleKeyInfo ReadKey(bool intercept);
    }

    struct IntPtr : System.Runtime.Serialization.ISerializable
    {
        static /*0x0*/ nint Zero;
        /*0x10*/ void* m_value;

        static /*0x1a8800c*/ int get_Size();
        static /*0x1a881d8*/ bool op_Equality(nint value1, nint value2);
        static /*0x1a881e4*/ bool op_Inequality(nint value1, nint value2);
        static /*0x1a881f0*/ nint op_Explicit(int value);
        static /*0x1a881f8*/ nint op_Explicit(long value);
        static /*0x1a881fc*/ nint op_Explicit(void* value);
        static /*0x1a88200*/ int op_Explicit(nint value);
        static /*0x1a88204*/ long op_Explicit(nint value);
        static /*0x1a88208*/ void* op_Explicit(nint value);
        static /*0x1a8820c*/ nint op_Addition(nint pointer, int offset);
        static /*0x1a88214*/ nint op_Subtraction(nint pointer, int offset);
        /*0xad1088*/ IntPtr(int value);
        /*0xad1094*/ IntPtr(long value);
        /*0xad109c*/ IntPtr(void* value);
        /*0xad10a4*/ IntPtr(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xad10ac*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xad10b4*/ bool Equals(object obj);
        /*0xad10bc*/ int GetHashCode();
        /*0xad10c4*/ int ToInt32();
        /*0xad10cc*/ long ToInt64();
        /*0xad10d4*/ void* ToPointer();
        /*0xad10dc*/ string ToString();
        /*0xad1114*/ string ToString(string format);
        /*0xad1150*/ bool IsNull();
    }

    class KnownTerminals
    {
        static /*0x1a91c98*/ byte[] get_linux();
        static /*0x1a91d0c*/ byte[] get_xterm();
        static /*0x1a91d80*/ byte[] get_ansi();
    }

    class MarshalByRefObject
    {
        /*0x10*/ object _identity;

        /*0x1c13940*/ MarshalByRefObject();
        /*0x1c13948*/ System.Runtime.Remoting.ServerIdentity get_ObjectIdentity();
        /*0x1c13988*/ void set_ObjectIdentity(System.Runtime.Remoting.ServerIdentity value);
        /*0x1c139c8*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
        /*0x1c13a08*/ object InitializeLifetimeService();
    }

    class MonoAsyncCall
    {
        /*0x10*/ object msg;
        /*0x18*/ nint cb_method;
        /*0x20*/ object cb_target;
        /*0x28*/ object state;
        /*0x30*/ object res;
        /*0x38*/ object out_args;

        /*0x1c20044*/ MonoAsyncCall();
    }

    class MonoCustomAttrs
    {
        static /*0x0*/ System.Reflection.Assembly corlib;
        static /*0x8*/ System.AttributeUsageAttribute DefaultAttributeUsage;
        [ThreadStatic] static System.Collections.Generic.Dictionary<System.Type, System.AttributeUsageAttribute> usage_cache;

        static /*0x1c23078*/ MonoCustomAttrs();
        static /*0x1c21a38*/ bool IsUserCattrProvider(object obj);
        static /*0x1c21c38*/ object[] GetCustomAttributesInternal(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool pseudoAttrs);
        static /*0x1c21c40*/ object[] GetPseudoCustomAttributes(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType);
        static /*0x1c220e8*/ object[] GetPseudoCustomAttributes(System.Type type);
        static /*0x1c2225c*/ object[] GetCustomAttributesBase(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inheritedOnly);
        static /*0x1c20e08*/ object[] GetCustomAttributes(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inherit);
        static /*0x1c20bec*/ object[] GetCustomAttributes(System.Reflection.ICustomAttributeProvider obj, bool inherit);
        static /*0x1c22818*/ System.Reflection.CustomAttributeData[] GetCustomAttributesDataInternal(System.Reflection.ICustomAttributeProvider obj);
        static /*0x1c2281c*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData(System.Reflection.ICustomAttributeProvider obj);
        static /*0x1c208a0*/ bool IsDefined(System.Reflection.ICustomAttributeProvider obj, System.Type attributeType, bool inherit);
        static /*0x1c228e4*/ bool IsDefinedInternal(System.Reflection.ICustomAttributeProvider obj, System.Type AttributeType);
        static /*0x1c228e8*/ System.Reflection.PropertyInfo GetBasePropertyDefinition(System.Reflection.MonoProperty property);
        static /*0x1c22bcc*/ System.Reflection.EventInfo GetBaseEventDefinition(System.Reflection.MonoEvent evt);
        static /*0x1c22428*/ System.Reflection.ICustomAttributeProvider GetBase(System.Reflection.ICustomAttributeProvider obj);
        static /*0x1c22df0*/ System.AttributeUsageAttribute RetrieveAttributeUsageNoCache(System.Type attributeType);
        static /*0x1c2268c*/ System.AttributeUsageAttribute RetrieveAttributeUsage(System.Type attributeType);

        class AttributeInfo
        {
            /*0x10*/ System.AttributeUsageAttribute _usage;
            /*0x18*/ int _inheritanceLevel;

            /*0x181517c*/ AttributeInfo(System.AttributeUsageAttribute usage, int inheritanceLevel);
            /*0x18151b8*/ System.AttributeUsageAttribute get_Usage();
            /*0x18151c0*/ int get_InheritanceLevel();
        }
    }

    class MonoListItem
    {
        /*0x10*/ System.MonoListItem next;
        /*0x18*/ object data;

        /*0x1c2526c*/ MonoListItem();
    }

    class MonoType : System.RuntimeType
    {
    }

    class MulticastDelegate : System.Delegate
    {
        /*0x68*/ System.Delegate[] delegates;

        /*0x22a5504*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x22a550c*/ bool Equals(object obj);
        /*0x22a5680*/ int GetHashCode();
        /*0x22a5688*/ System.Reflection.MethodInfo GetMethodImpl();
        /*0x22a56dc*/ System.Delegate[] GetInvocationList();
        /*0x22a57c4*/ System.Delegate CombineImpl(System.Delegate follow);
        /*0x22a5a3c*/ int LastIndexOf(System.Delegate[] haystack, System.Delegate[] needle);
        /*0x22a5b7c*/ System.Delegate RemoveImpl(System.Delegate value);
    }

    class NullConsoleDriver : System.IConsoleDriver
    {
        static /*0x0*/ System.ConsoleKeyInfo EmptyConsoleKeyInfo;

        static /*0x22a89c0*/ NullConsoleDriver();
        /*0x22a89bc*/ NullConsoleDriver();
        /*0x22a8954*/ System.ConsoleKeyInfo ReadKey(bool intercept);
    }

    class Nullable
    {
        static /*0x22a8b28*/ System.Type GetUnderlyingType(System.Type nullableType);
    }

    struct Nullable<T>
    {
        /*0x0*/ T value;
        /*0x0*/ bool has_value;

        static object Box(System.Nullable<T> o);
        static System.Nullable<T> Unbox(object o);
        Nullable(T value);
        bool get_HasValue();
        T get_Value();
        bool Equals(object other);
        bool Equals(System.Nullable<T> other);
        int GetHashCode();
        T GetValueOrDefault();
        T GetValueOrDefault(T defaultValue);
        string ToString();
    }

    class NumberFormatter
    {
        static /*0x0*/ ulong* MantissaBitsTable;
        static /*0x8*/ int* TensExponentTable;
        static /*0x10*/ char* DigitLowerTable;
        static /*0x18*/ char* DigitUpperTable;
        static /*0x20*/ long* TenPowersList;
        static /*0x28*/ int* DecHexDigits;
        [ThreadStatic] static System.NumberFormatter threadNumberFormatter;
        [ThreadStatic] static System.NumberFormatter userFormatProvider;
        /*0x10*/ System.Globalization.NumberFormatInfo _nfi;
        /*0x18*/ char[] _cbuf;
        /*0x20*/ bool _NaN;
        /*0x21*/ bool _infinity;
        /*0x22*/ bool _isCustomFormat;
        /*0x23*/ bool _specifierIsUpper;
        /*0x24*/ bool _positive;
        /*0x26*/ char _specifier;
        /*0x28*/ int _precision;
        /*0x2c*/ int _defPrecision;
        /*0x30*/ int _digitsLen;
        /*0x34*/ int _offset;
        /*0x38*/ int _decPointPos;
        /*0x3c*/ uint _val1;
        /*0x40*/ uint _val2;
        /*0x44*/ uint _val3;
        /*0x48*/ uint _val4;
        /*0x4c*/ int _ind;

        static /*0x22ac42c*/ NumberFormatter();
        static /*0x22ac428*/ void GetFormatterTables(ref ulong* MantissaBitsTable, ref int* TensExponentTable, ref char* DigitLowerTable, ref char* DigitUpperTable, ref long* TenPowersList, ref int* DecHexDigits);
        static /*0x22ac488*/ long GetTenPowerOf(int i);
        static /*0x22ac5b8*/ uint FastToDecHex(int val);
        static /*0x22ac684*/ uint ToDecHex(int val);
        static /*0x22aca2c*/ int FastDecHexLen(int val);
        static /*0x22aca54*/ int DecHexLen(uint val);
        static /*0x22acc38*/ int ScaleOrder(long hi);
        static /*0x22acda0*/ int ParsePrecision(string format);
        static /*0x22ade9c*/ uint AddOneToDecHex(uint val);
        static /*0x22adf44*/ int CountTrailingZeros(uint val);
        static /*0x22adf98*/ System.NumberFormatter GetInstance(System.IFormatProvider fp);
        static /*0x22a916c*/ string NumberToString(string format, uint value, System.IFormatProvider fp);
        static /*0x22a9044*/ string NumberToString(string format, int value, System.IFormatProvider fp);
        static /*0x22a93b8*/ string NumberToString(string format, ulong value, System.IFormatProvider fp);
        static /*0x22a9294*/ string NumberToString(string format, long value, System.IFormatProvider fp);
        static /*0x22a94e4*/ string NumberToString(string format, float value, System.IFormatProvider fp);
        static /*0x22a8eac*/ string NumberToString(string format, double value, System.IFormatProvider fp);
        static /*0x22a8d5c*/ string NumberToString(string format, decimal value, System.IFormatProvider fp);
        static /*0x22b0094*/ void ZeroTrimEnd(System.Text.StringBuilder sb, bool canEmpty);
        static /*0x22affa8*/ bool IsZeroOnly(System.Text.StringBuilder sb);
        static /*0x22afdfc*/ void AppendNonNegativeNumber(System.Text.StringBuilder sb, int v);
        /*0x22ace3c*/ NumberFormatter(System.Threading.Thread current);
        /*0x22ac4f4*/ void InitDecHexDigits(uint value);
        /*0x22ac744*/ void InitDecHexDigits(ulong value);
        /*0x22ac864*/ void InitDecHexDigits(uint hi, ulong lo);
        /*0x22acb18*/ int DecHexLen();
        /*0x22accc8*/ int InitialFloatingPrecision();
        /*0x22acf38*/ void Init(string format);
        /*0x22ad05c*/ void InitHex(ulong value);
        /*0x22ad0a4*/ void Init(string format, int value, int defPrecision);
        /*0x22ad148*/ void Init(string format, uint value, int defPrecision);
        /*0x22ad1d0*/ void Init(string format, long value);
        /*0x22ad25c*/ void Init(string format, ulong value);
        /*0x22ad2e0*/ void Init(string format, double value, int defPrecision);
        /*0x22ad6ec*/ void Init(string format, decimal value);
        /*0x22ad85c*/ void ResetCharBuf(int size);
        /*0x22ad8d8*/ void Resize(int len);
        /*0x22ad934*/ void Append(char c);
        /*0x22ad9b8*/ void Append(char c, int cnt);
        /*0x22ada5c*/ void Append(string s);
        /*0x22adb1c*/ System.Globalization.NumberFormatInfo GetNumberFormatInstance(System.IFormatProvider fp);
        /*0x22aceec*/ void set_CurrentCulture(System.Globalization.CultureInfo value);
        /*0x22adb34*/ int get_IntegerDigits();
        /*0x22adb44*/ int get_DecimalDigits();
        /*0x22adb58*/ bool get_IsFloatingSource();
        /*0x22adb6c*/ bool get_IsZero();
        /*0x22adb7c*/ bool get_IsZeroInteger();
        /*0x22adb9c*/ void RoundPos(int pos);
        /*0x22add14*/ bool RoundDecimal(int decimals);
        /*0x22adba8*/ bool RoundBits(int shift);
        /*0x22ade58*/ void RemoveTrailingZeros();
        /*0x22add28*/ void AddOneToDecHex();
        /*0x22ad5cc*/ int CountTrailingZeros();
        /*0x22ae10c*/ void Release();
        /*0x22ae1a0*/ string IntegerToString(string format, System.IFormatProvider fp);
        /*0x22ae3d8*/ string NumberToString(string format, System.Globalization.NumberFormatInfo nfi);
        /*0x22ae5c4*/ string FormatCurrency(int precision, System.Globalization.NumberFormatInfo nfi);
        /*0x22ae828*/ string FormatDecimal(int precision, System.Globalization.NumberFormatInfo nfi);
        /*0x22aee4c*/ string FormatHexadecimal(int precision);
        /*0x22ae940*/ string FormatFixedPoint(int precision, System.Globalization.NumberFormatInfo nfi);
        /*0x22ae4c4*/ string FormatRoundtrip(double origval, System.Globalization.NumberFormatInfo nfi);
        /*0x22ae344*/ string FormatRoundtrip(float origval, System.Globalization.NumberFormatInfo nfi);
        /*0x22aea28*/ string FormatGeneral(int precision, System.Globalization.NumberFormatInfo nfi);
        /*0x22aeb78*/ string FormatNumber(int precision, System.Globalization.NumberFormatInfo nfi);
        /*0x22aece8*/ string FormatPercent(int precision, System.Globalization.NumberFormatInfo nfi);
        /*0x22ae8ec*/ string FormatExponential(int precision, System.Globalization.NumberFormatInfo nfi);
        /*0x22afab0*/ string FormatExponential(int precision, System.Globalization.NumberFormatInfo nfi, int expDigits);
        /*0x22aefbc*/ string FormatCustom(string format, System.Globalization.NumberFormatInfo nfi);
        /*0x22aff04*/ void AppendIntegerString(int minLength, System.Text.StringBuilder sb);
        /*0x22af9e4*/ void AppendIntegerString(int minLength);
        /*0x22aff88*/ void AppendDecimalString(int precision, System.Text.StringBuilder sb);
        /*0x22af758*/ void AppendDecimalString(int precision);
        /*0x22af510*/ void AppendIntegerStringWithGroupSeparator(int[] groups, string groupSeparator);
        /*0x22afc7c*/ void AppendExponent(System.Globalization.NumberFormatInfo nfi, int exponent, int minDigits);
        /*0x22afba0*/ void AppendOneDigit(int start);
        /*0x22af770*/ void AppendDigits(int start, int end);
        /*0x22b0168*/ void AppendDigits(int start, int end, System.Text.StringBuilder sb);
        /*0x22afb80*/ void Multiply10(int count);
        /*0x22afddc*/ void Divide10(int count);
        /*0x22afa4c*/ System.NumberFormatter GetClone();

        class CustomInfo
        {
            /*0x10*/ bool UseGroup;
            /*0x14*/ int DecimalDigits;
            /*0x18*/ int DecimalPointPos;
            /*0x1c*/ int DecimalTailSharpDigits;
            /*0x20*/ int IntegerDigits;
            /*0x24*/ int IntegerHeadSharpDigits;
            /*0x28*/ int IntegerHeadPos;
            /*0x2c*/ bool UseExponent;
            /*0x30*/ int ExponentDigits;
            /*0x34*/ int ExponentTailSharpDigits;
            /*0x38*/ bool ExponentNegativeSignOnly;
            /*0x3c*/ int DividePlaces;
            /*0x40*/ int Percents;
            /*0x44*/ int Permilles;

            static /*0x1815668*/ void GetActiveSection(string format, ref bool positive, bool zero, ref int offset, ref int length);
            static /*0x1815950*/ System.NumberFormatter.CustomInfo Parse(string format, int offset, int length, System.Globalization.NumberFormatInfo nfi);
            /*0x1815de0*/ CustomInfo();
            /*0x1815df8*/ string Format(string format, int offset, int length, System.Globalization.NumberFormatInfo nfi, bool positive, System.Text.StringBuilder sb_int, System.Text.StringBuilder sb_dec, System.Text.StringBuilder sb_exp);
        }
    }

    class Object
    {
        static /*0x22b17a4*/ bool Equals(object objA, object objB);
        static /*0x22b1800*/ bool ReferenceEquals(object objA, object objB);
        static /*0x22b17d8*/ int InternalGetHashCode(object o);
        /*0x22a31b4*/ Object();
        /*0x22b1798*/ bool Equals(object obj);
        /*0x22b17d0*/ void Finalize();
        /*0x22b17d4*/ int GetHashCode();
        /*0x22a43ac*/ System.Type GetType();
        /*0x22abfc0*/ object MemberwiseClone();
        /*0x22b17dc*/ string ToString();
        /*0x22b180c*/ void FieldGetter(string typeName, string fieldName, ref object val);
        /*0x22b1810*/ void FieldSetter(string typeName, string fieldName, object val);
    }

    class OperatingSystem : System.ICloneable, System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ System.PlatformID _platform;
        /*0x18*/ System.Version _version;
        /*0x20*/ string _servicePack;

        /*0x214a124*/ OperatingSystem(System.PlatformID platform, System.Version version);
        /*0x214a298*/ OperatingSystem(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
        /*0x214a460*/ System.PlatformID get_Platform();
        /*0x214a468*/ System.Version get_Version();
        /*0x214a470*/ string get_ServicePack();
        /*0x214a478*/ object Clone();
        /*0x214a4e8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x214a5cc*/ string ToString();
    }

    enum PlatformID
    {
        Win32S = 0,
        Win32Windows = 1,
        Win32NT = 2,
        WinCE = 3,
        Unix = 4,
        Xbox = 5,
        MacOSX = 6,
    }

    class ResolveEventArgs : System.EventArgs
    {
        /*0x10*/ string m_Name;
        /*0x18*/ System.Reflection.Assembly m_Requesting;

        /*0x1998b64*/ ResolveEventArgs(string name);
        /*0x1998bdc*/ ResolveEventArgs(string name, System.Reflection.Assembly requestingAssembly);
    }

    class ResolveEventHandler : System.MulticastDelegate
    {
        /*0x1998c58*/ ResolveEventHandler(object object, nint method);
        /*0x1998cb8*/ System.Reflection.Assembly Invoke(object sender, System.ResolveEventArgs args);
        /*0x1999054*/ System.IAsyncResult BeginInvoke(object sender, System.ResolveEventArgs args, System.AsyncCallback callback, object object);
        /*0x1999084*/ System.Reflection.Assembly EndInvoke(System.IAsyncResult result);
    }

    struct RuntimeArgumentHandle
    {
        /*0x10*/ nint args;
    }

    struct RuntimeFieldHandle : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint value;

        static /*0x2153b60*/ void SetValueInternal(System.Reflection.FieldInfo fi, object obj, object value);
        static /*0x2152ae4*/ void SetValue(System.Reflection.RtFieldInfo field, object obj, object value, System.RuntimeType fieldType, System.Reflection.FieldAttributes fieldAttr, System.RuntimeType declaringType, ref bool domainInitialized);
        static /*0x2152c44*/ void SetValueDirect(System.Reflection.RtFieldInfo field, System.RuntimeType fieldType, void* pTypedRef, object value, System.RuntimeType contextType);
        /*0xae1d20*/ RuntimeFieldHandle(nint v);
        /*0xae1d28*/ RuntimeFieldHandle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xae1d30*/ nint get_Value();
        /*0xae1d38*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xae1d40*/ bool Equals(object obj);
        /*0xae1d48*/ int GetHashCode();
    }

    struct RuntimeMethodHandle : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint value;

        static /*0x2154808*/ string ConstructInstantiation(System.Reflection.RuntimeMethodInfo method, System.TypeNameFormatFlags format);
        /*0xae1e0c*/ RuntimeMethodHandle(nint v);
        /*0xae1e14*/ RuntimeMethodHandle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xae1e1c*/ nint get_Value();
        /*0xae1e24*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xae1e2c*/ bool Equals(object obj);
        /*0xae1e34*/ int GetHashCode();
        /*0xae1e40*/ bool IsNullHandle();
    }

    struct RuntimeTypeHandle : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ nint value;

        static /*0x215addc*/ System.Reflection.TypeAttributes GetAttributes(System.RuntimeType type);
        static /*0x2160f58*/ int GetMetadataToken(System.RuntimeType type);
        static /*0x215dd0c*/ int GetToken(System.RuntimeType type);
        static /*0x2160f5c*/ System.Type GetGenericTypeDefinition_impl(System.RuntimeType type);
        static /*0x215c430*/ System.Type GetGenericTypeDefinition(System.RuntimeType type);
        static /*0x215b068*/ bool HasElementType(System.RuntimeType type);
        static /*0x215c438*/ bool HasInstantiation(System.RuntimeType type);
        static /*0x215b1b0*/ bool IsArray(System.RuntimeType type);
        static /*0x215ae80*/ bool IsByRef(System.RuntimeType type);
        static /*0x2160f60*/ bool IsComObject(System.RuntimeType type);
        static /*0x215a9c4*/ bool IsInstanceOfType(System.RuntimeType type, object o);
        static /*0x215ae90*/ bool IsPointer(System.RuntimeType type);
        static /*0x215ae88*/ bool IsPrimitive(System.RuntimeType type);
        static /*0x2160f64*/ bool HasReferences(System.RuntimeType type);
        static /*0x215ae98*/ bool IsComObject(System.RuntimeType type, bool isGenericCOM);
        static /*0x215ade4*/ bool IsContextful(System.RuntimeType type);
        static /*0x215adc0*/ bool IsEquivalentTo(System.RuntimeType rtType1, System.RuntimeType rtType2);
        static /*0x215b15c*/ bool IsSzArray(System.RuntimeType type);
        static /*0x2160f68*/ bool IsInterface(System.RuntimeType type);
        static /*0x215b238*/ int GetArrayRank(System.RuntimeType type);
        static /*0x215a988*/ System.Reflection.RuntimeAssembly GetAssembly(System.RuntimeType type);
        static /*0x215b240*/ System.RuntimeType GetElementType(System.RuntimeType type);
        static /*0x2153074*/ System.Reflection.RuntimeModule GetModule(System.RuntimeType type);
        static /*0x215adcc*/ bool IsGenericVariable(System.RuntimeType type);
        static /*0x215add0*/ System.RuntimeType GetBaseType(System.RuntimeType type);
        static /*0x215ad08*/ bool CanCastTo(System.RuntimeType type, System.RuntimeType target);
        static /*0x2160f8c*/ bool type_is_assignable_from(System.Type a, System.Type b);
        static /*0x215c31c*/ bool IsGenericTypeDefinition(System.RuntimeType type);
        static /*0x2160394*/ nint GetGenericParameterInfo(System.RuntimeType type);
        /*0xae1e88*/ RuntimeTypeHandle(nint val);
        /*0xae1e90*/ RuntimeTypeHandle(System.RuntimeType type);
        /*0xae1eac*/ RuntimeTypeHandle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xae1eb4*/ nint get_Value();
        /*0xae1ebc*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0xae1ec4*/ bool Equals(object obj);
        /*0xae1ecc*/ bool Equals(System.RuntimeTypeHandle handle);
        /*0xae1ed8*/ int GetHashCode();
    }

    enum StringComparison
    {
        CurrentCulture = 0,
        CurrentCultureIgnoreCase = 1,
        InvariantCulture = 2,
        InvariantCultureIgnoreCase = 3,
        Ordinal = 4,
        OrdinalIgnoreCase = 5,
    }

    class TermInfoDriver : System.IConsoleDriver
    {
        static /*0x0*/ int* native_terminal_size;
        static /*0x8*/ int terminal_size;
        static /*0x10*/ string[] locations;
        static /*0x18*/ int[] _consoleColorToAnsiCode;
        /*0x10*/ System.TermInfoReader reader;
        /*0x18*/ int cursorLeft;
        /*0x1c*/ int cursorTop;
        /*0x20*/ string title;
        /*0x28*/ string titleFormat;
        /*0x30*/ bool cursorVisible;
        /*0x38*/ string csrVisible;
        /*0x40*/ string csrInvisible;
        /*0x48*/ string clear;
        /*0x50*/ string bell;
        /*0x58*/ string term;
        /*0x60*/ System.IO.StreamReader stdin;
        /*0x68*/ System.IO.CStreamWriter stdout;
        /*0x70*/ int windowWidth;
        /*0x74*/ int windowHeight;
        /*0x78*/ int bufferHeight;
        /*0x7c*/ int bufferWidth;
        /*0x80*/ char[] buffer;
        /*0x88*/ int readpos;
        /*0x8c*/ int writepos;
        /*0x90*/ string keypadXmit;
        /*0x98*/ string keypadLocal;
        /*0xa0*/ bool inited;
        /*0xa8*/ object initLock;
        /*0xb0*/ bool initKeys;
        /*0xb8*/ string origPair;
        /*0xc0*/ string origColors;
        /*0xc8*/ string cursorAddress;
        /*0xd0*/ System.ConsoleColor fgcolor;
        /*0xd8*/ string setfgcolor;
        /*0xe0*/ string setbgcolor;
        /*0xe8*/ int maxColors;
        /*0xec*/ bool noGetPosition;
        /*0xf0*/ System.Collections.Hashtable keymap;
        /*0xf8*/ System.ByteMatcher rootmap;
        /*0x100*/ int rl_startx;
        /*0x104*/ int rl_starty;
        /*0x108*/ byte[] control_characters;
        /*0x110*/ char[] echobuf;
        /*0x118*/ int echon;

        static /*0x1e3596c*/ TermInfoDriver();
        static /*0x1e30e5c*/ string TryTermInfoDir(string dir, string term);
        static /*0x1e30f94*/ string SearchTerminfo(string term);
        /*0x1e31154*/ TermInfoDriver(string term);
        /*0x1e31130*/ void WriteConsole(string str);
        /*0x1e31824*/ bool get_Initialized();
        /*0x1e3182c*/ void Init();
        /*0x1e32370*/ void IncrementX();
        /*0x1e32450*/ void WriteSpecialKey(System.ConsoleKeyInfo key);
        /*0x1e32754*/ void WriteSpecialKey(char c);
        /*0x1e3290c*/ bool IsSpecialKey(System.ConsoleKeyInfo key);
        /*0x1e32994*/ bool IsSpecialKey(char c);
        /*0x1e320b8*/ void GetCursorPosition();
        /*0x1e32ad4*/ void CheckWindowDimensions();
        /*0x1e32418*/ int get_WindowHeight();
        /*0x1e323e0*/ int get_WindowWidth();
        /*0x1e329c8*/ void AddToBuffer(int b);
        /*0x1e32c30*/ void AdjustBuffer();
        /*0x1e32788*/ System.ConsoleKeyInfo CreateKeyInfoFromInt(int n, bool alt);
        /*0x1e32c44*/ object GetKeyFromBuffer(bool cooked);
        /*0x1e32f38*/ System.ConsoleKeyInfo ReadKeyInternal(ref bool fresh);
        /*0x1e33298*/ bool InputPending();
        /*0x1e332c8*/ void QueueEcho(char c);
        /*0x1e333bc*/ void Echo(System.ConsoleKeyInfo key);
        /*0x1e33420*/ void EchoFlush();
        /*0x1e33460*/ int Read(char[] dest, int index, int count);
        /*0x1e3378c*/ System.ConsoleKeyInfo ReadKey(bool intercept);
        /*0x1e337f4*/ string ReadLine();
        /*0x1e339e0*/ string ReadToEnd();
        /*0x1e337fc*/ string ReadUntilConditionInternal(bool haltOnNewLine);
        /*0x1e32580*/ void SetCursorPosition(int left, int top);
        /*0x1e339e8*/ void CreateKeyMap();
        /*0x1e33114*/ void InitKeys();
        /*0x1e35884*/ void AddStringMapping(System.TermInfoStrings s);
    }

    class ParameterizedStrings
    {
        [ThreadStatic] static System.ParameterizedStrings.LowLevelStack _cachedStack;

        static /*0x2526c20*/ string Evaluate(string format, System.ParameterizedStrings.FormatParam[] args);
        static /*0x2526d68*/ string EvaluateInternal(string format, ref int pos, System.ParameterizedStrings.FormatParam[] args, System.ParameterizedStrings.LowLevelStack stack, ref System.ParameterizedStrings.FormatParam[] dynamicVars, ref System.ParameterizedStrings.FormatParam[] staticVars);
        static /*0x2527998*/ bool AsBool(int i);
        static /*0x2527990*/ int AsInt(bool b);
        static /*0x25279a4*/ string StringFromAsciiBytes(byte[] buffer, int offset, int length);
        static /*0x2527aa8*/ int snprintf(byte* str, nint size, string format, string arg1);
        static /*0x2527b80*/ int snprintf(byte* str, nint size, string format, int arg1);
        static /*0x2527634*/ string FormatPrintF(string format, object arg);
        static /*0x2527878*/ System.ParameterizedStrings.FormatParam[] GetDynamicOrStaticVariables(char c, ref System.ParameterizedStrings.FormatParam[] dynamicVars, ref System.ParameterizedStrings.FormatParam[] staticVars, ref int index);

        struct FormatParam
        {
            /*0x10*/ int _int32;
            /*0x18*/ string _string;

            static /*0x1818834*/ System.ParameterizedStrings.FormatParam op_Implicit(int value);
            /*0xacafb8*/ FormatParam(int value);
            /*0xacafc4*/ FormatParam(int intValue, string stringValue);
            /*0xacafd0*/ int get_Int32();
            /*0xacafd8*/ string get_String();
            /*0xacb030*/ object get_Object();
        }

        class LowLevelStack
        {
            /*0x10*/ System.ParameterizedStrings.FormatParam[] _arr;
            /*0x18*/ int _count;

            /*0x1818908*/ LowLevelStack();
            /*0x1818968*/ System.ParameterizedStrings.FormatParam Pop();
            /*0x1818a0c*/ void Push(System.ParameterizedStrings.FormatParam item);
            /*0x1818af0*/ void Clear();
        }
    }

    class ByteMatcher
    {
        /*0x10*/ System.Collections.Hashtable map;
        /*0x18*/ System.Collections.Hashtable starts;

        /*0x1c5cd84*/ ByteMatcher();
        /*0x1c5c76c*/ void AddMapping(System.TermInfoStrings key, byte[] val);
        /*0x1c5c898*/ void Sort();
        /*0x1c5c89c*/ bool StartsWith(int c);
        /*0x1c5c928*/ System.TermInfoStrings Match(char[] buffer, int offset, int length, ref int used);
    }

    enum TermInfoNumbers
    {
        Columns = 0,
        InitTabs = 1,
        Lines = 2,
        LinesOfMemory = 3,
        MagicCookieGlitch = 4,
        PaddingBaudRate = 5,
        VirtualTerminal = 6,
        WidthStatusLine = 7,
        NumLabels = 8,
        LabelHeight = 9,
        LabelWidth = 10,
        MaxAttributes = 11,
        MaximumWindows = 12,
        MaxColors = 13,
        MaxPairs = 14,
        NoColorVideo = 15,
        BufferCapacity = 16,
        DotVertSpacing = 17,
        DotHorzSpacing = 18,
        MaxMicroAddress = 19,
        MaxMicroJump = 20,
        MicroColSize = 21,
        MicroLineSize = 22,
        NumberOfPins = 23,
        OutputResChar = 24,
        OutputResLine = 25,
        OutputResHorzInch = 26,
        OutputResVertInch = 27,
        PrintRate = 28,
        WideCharSize = 29,
        Buttons = 30,
        BitImageEntwining = 31,
        BitImageType = 32,
        Last = 33,
    }

    class TermInfoReader
    {
        /*0x10*/ int boolSize;
        /*0x14*/ int numSize;
        /*0x18*/ int strOffsets;
        /*0x20*/ byte[] buffer;
        /*0x28*/ int booleansOffset;
        /*0x2c*/ int intOffset;

        /*0x1e314f4*/ TermInfoReader(string term, string filename);
        /*0x1e31784*/ TermInfoReader(string term, byte[] buffer);
        /*0x1e35c54*/ void DetermineVersion(short magic);
        /*0x1e35b48*/ void ReadHeader(byte[] buffer, ref int position);
        /*0x1e35c14*/ void ReadNames(byte[] buffer, ref int position);
        /*0x1e32068*/ int Get(System.TermInfoNumbers number);
        /*0x1e31fd4*/ string Get(System.TermInfoStrings tstr);
        /*0x1e358d8*/ byte[] GetStringBytes(System.TermInfoStrings tstr);
        /*0x1e35cfc*/ short GetInt16(byte[] buffer, int offset);
        /*0x1e35ed4*/ int GetInt32(byte[] buffer, int offset);
        /*0x1e35de8*/ int GetInteger(byte[] buffer, int offset);
        /*0x1e35d58*/ string GetString(byte[] buffer, int offset);
        /*0x1e35e10*/ byte[] GetStringBytes(byte[] buffer, int offset);
    }

    enum TermInfoStrings
    {
        BackTab = 0,
        Bell = 1,
        CarriageReturn = 2,
        ChangeScrollRegion = 3,
        ClearAllTabs = 4,
        ClearScreen = 5,
        ClrEol = 6,
        ClrEos = 7,
        ColumnAddress = 8,
        CommandCharacter = 9,
        CursorAddress = 10,
        CursorDown = 11,
        CursorHome = 12,
        CursorInvisible = 13,
        CursorLeft = 14,
        CursorMemAddress = 15,
        CursorNormal = 16,
        CursorRight = 17,
        CursorToLl = 18,
        CursorUp = 19,
        CursorVisible = 20,
        DeleteCharacter = 21,
        DeleteLine = 22,
        DisStatusLine = 23,
        DownHalfLine = 24,
        EnterAltCharsetMode = 25,
        EnterBlinkMode = 26,
        EnterBoldMode = 27,
        EnterCaMode = 28,
        EnterDeleteMode = 29,
        EnterDimMode = 30,
        EnterInsertMode = 31,
        EnterSecureMode = 32,
        EnterProtectedMode = 33,
        EnterReverseMode = 34,
        EnterStandoutMode = 35,
        EnterUnderlineMode = 36,
        EraseChars = 37,
        ExitAltCharsetMode = 38,
        ExitAttributeMode = 39,
        ExitCaMode = 40,
        ExitDeleteMode = 41,
        ExitInsertMode = 42,
        ExitStandoutMode = 43,
        ExitUnderlineMode = 44,
        FlashScreen = 45,
        FormFeed = 46,
        FromStatusLine = 47,
        Init1string = 48,
        Init2string = 49,
        Init3string = 50,
        InitFile = 51,
        InsertCharacter = 52,
        InsertLine = 53,
        InsertPadding = 54,
        KeyBackspace = 55,
        KeyCatab = 56,
        KeyClear = 57,
        KeyCtab = 58,
        KeyDc = 59,
        KeyDl = 60,
        KeyDown = 61,
        KeyEic = 62,
        KeyEol = 63,
        KeyEos = 64,
        KeyF0 = 65,
        KeyF1 = 66,
        KeyF10 = 67,
        KeyF2 = 68,
        KeyF3 = 69,
        KeyF4 = 70,
        KeyF5 = 71,
        KeyF6 = 72,
        KeyF7 = 73,
        KeyF8 = 74,
        KeyF9 = 75,
        KeyHome = 76,
        KeyIc = 77,
        KeyIl = 78,
        KeyLeft = 79,
        KeyLl = 80,
        KeyNpage = 81,
        KeyPpage = 82,
        KeyRight = 83,
        KeySf = 84,
        KeySr = 85,
        KeyStab = 86,
        KeyUp = 87,
        KeypadLocal = 88,
        KeypadXmit = 89,
        LabF0 = 90,
        LabF1 = 91,
        LabF10 = 92,
        LabF2 = 93,
        LabF3 = 94,
        LabF4 = 95,
        LabF5 = 96,
        LabF6 = 97,
        LabF7 = 98,
        LabF8 = 99,
        LabF9 = 100,
        MetaOff = 101,
        MetaOn = 102,
        Newline = 103,
        PadChar = 104,
        ParmDch = 105,
        ParmDeleteLine = 106,
        ParmDownCursor = 107,
        ParmIch = 108,
        ParmIndex = 109,
        ParmInsertLine = 110,
        ParmLeftCursor = 111,
        ParmRightCursor = 112,
        ParmRindex = 113,
        ParmUpCursor = 114,
        PkeyKey = 115,
        PkeyLocal = 116,
        PkeyXmit = 117,
        PrintScreen = 118,
        PrtrOff = 119,
        PrtrOn = 120,
        RepeatChar = 121,
        Reset1string = 122,
        Reset2string = 123,
        Reset3string = 124,
        ResetFile = 125,
        RestoreCursor = 126,
        RowAddress = 127,
        SaveCursor = 128,
        ScrollForward = 129,
        ScrollReverse = 130,
        SetAttributes = 131,
        SetTab = 132,
        SetWindow = 133,
        Tab = 134,
        ToStatusLine = 135,
        UnderlineChar = 136,
        UpHalfLine = 137,
        InitProg = 138,
        KeyA1 = 139,
        KeyA3 = 140,
        KeyB2 = 141,
        KeyC1 = 142,
        KeyC3 = 143,
        PrtrNon = 144,
        CharPadding = 145,
        AcsChars = 146,
        PlabNorm = 147,
        KeyBtab = 148,
        EnterXonMode = 149,
        ExitXonMode = 150,
        EnterAmMode = 151,
        ExitAmMode = 152,
        XonCharacter = 153,
        XoffCharacter = 154,
        EnaAcs = 155,
        LabelOn = 156,
        LabelOff = 157,
        KeyBeg = 158,
        KeyCancel = 159,
        KeyClose = 160,
        KeyCommand = 161,
        KeyCopy = 162,
        KeyCreate = 163,
        KeyEnd = 164,
        KeyEnter = 165,
        KeyExit = 166,
        KeyFind = 167,
        KeyHelp = 168,
        KeyMark = 169,
        KeyMessage = 170,
        KeyMove = 171,
        KeyNext = 172,
        KeyOpen = 173,
        KeyOptions = 174,
        KeyPrevious = 175,
        KeyPrint = 176,
        KeyRedo = 177,
        KeyReference = 178,
        KeyRefresh = 179,
        KeyReplace = 180,
        KeyRestart = 181,
        KeyResume = 182,
        KeySave = 183,
        KeySuspend = 184,
        KeyUndo = 185,
        KeySbeg = 186,
        KeyScancel = 187,
        KeyScommand = 188,
        KeyScopy = 189,
        KeyScreate = 190,
        KeySdc = 191,
        KeySdl = 192,
        KeySelect = 193,
        KeySend = 194,
        KeySeol = 195,
        KeySexit = 196,
        KeySfind = 197,
        KeyShelp = 198,
        KeyShome = 199,
        KeySic = 200,
        KeySleft = 201,
        KeySmessage = 202,
        KeySmove = 203,
        KeySnext = 204,
        KeySoptions = 205,
        KeySprevious = 206,
        KeySprint = 207,
        KeySredo = 208,
        KeySreplace = 209,
        KeySright = 210,
        KeySrsume = 211,
        KeySsave = 212,
        KeySsuspend = 213,
        KeySundo = 214,
        ReqForInput = 215,
        KeyF11 = 216,
        KeyF12 = 217,
        KeyF13 = 218,
        KeyF14 = 219,
        KeyF15 = 220,
        KeyF16 = 221,
        KeyF17 = 222,
        KeyF18 = 223,
        KeyF19 = 224,
        KeyF20 = 225,
        KeyF21 = 226,
        KeyF22 = 227,
        KeyF23 = 228,
        KeyF24 = 229,
        KeyF25 = 230,
        KeyF26 = 231,
        KeyF27 = 232,
        KeyF28 = 233,
        KeyF29 = 234,
        KeyF30 = 235,
        KeyF31 = 236,
        KeyF32 = 237,
        KeyF33 = 238,
        KeyF34 = 239,
        KeyF35 = 240,
        KeyF36 = 241,
        KeyF37 = 242,
        KeyF38 = 243,
        KeyF39 = 244,
        KeyF40 = 245,
        KeyF41 = 246,
        KeyF42 = 247,
        KeyF43 = 248,
        KeyF44 = 249,
        KeyF45 = 250,
        KeyF46 = 251,
        KeyF47 = 252,
        KeyF48 = 253,
        KeyF49 = 254,
        KeyF50 = 255,
        KeyF51 = 256,
        KeyF52 = 257,
        KeyF53 = 258,
        KeyF54 = 259,
        KeyF55 = 260,
        KeyF56 = 261,
        KeyF57 = 262,
        KeyF58 = 263,
        KeyF59 = 264,
        KeyF60 = 265,
        KeyF61 = 266,
        KeyF62 = 267,
        KeyF63 = 268,
        ClrBol = 269,
        ClearMargins = 270,
        SetLeftMargin = 271,
        SetRightMargin = 272,
        LabelFormat = 273,
        SetClock = 274,
        DisplayClock = 275,
        RemoveClock = 276,
        CreateWindow = 277,
        GotoWindow = 278,
        Hangup = 279,
        DialPhone = 280,
        QuickDial = 281,
        Tone = 282,
        Pulse = 283,
        FlashHook = 284,
        FixedPause = 285,
        WaitTone = 286,
        User0 = 287,
        User1 = 288,
        User2 = 289,
        User3 = 290,
        User4 = 291,
        User5 = 292,
        User6 = 293,
        User7 = 294,
        User8 = 295,
        User9 = 296,
        OrigPair = 297,
        OrigColors = 298,
        InitializeColor = 299,
        InitializePair = 300,
        SetColorPair = 301,
        SetForeground = 302,
        SetBackground = 303,
        ChangeCharPitch = 304,
        ChangeLinePitch = 305,
        ChangeResHorz = 306,
        ChangeResVert = 307,
        DefineChar = 308,
        EnterDoublewideMode = 309,
        EnterDraftQuality = 310,
        EnterItalicsMode = 311,
        EnterLeftwardMode = 312,
        EnterMicroMode = 313,
        EnterNearLetterQuality = 314,
        EnterNormalQuality = 315,
        EnterShadowMode = 316,
        EnterSubscriptMode = 317,
        EnterSuperscriptMode = 318,
        EnterUpwardMode = 319,
        ExitDoublewideMode = 320,
        ExitItalicsMode = 321,
        ExitLeftwardMode = 322,
        ExitMicroMode = 323,
        ExitShadowMode = 324,
        ExitSubscriptMode = 325,
        ExitSuperscriptMode = 326,
        ExitUpwardMode = 327,
        MicroColumnAddress = 328,
        MicroDown = 329,
        MicroLeft = 330,
        MicroRight = 331,
        MicroRowAddress = 332,
        MicroUp = 333,
        OrderOfPins = 334,
        ParmDownMicro = 335,
        ParmLeftMicro = 336,
        ParmRightMicro = 337,
        ParmUpMicro = 338,
        SelectCharSet = 339,
        SetBottomMargin = 340,
        SetBottomMarginParm = 341,
        SetLeftMarginParm = 342,
        SetRightMarginParm = 343,
        SetTopMargin = 344,
        SetTopMarginParm = 345,
        StartBitImage = 346,
        StartCharSetDef = 347,
        StopBitImage = 348,
        StopCharSetDef = 349,
        SubscriptCharacters = 350,
        SuperscriptCharacters = 351,
        TheseCauseCr = 352,
        ZeroMotion = 353,
        CharSetNames = 354,
        KeyMouse = 355,
        MouseInfo = 356,
        ReqMousePos = 357,
        GetMouse = 358,
        SetAForeground = 359,
        SetABackground = 360,
        PkeyPlab = 361,
        DeviceType = 362,
        CodeSetInit = 363,
        Set0DesSeq = 364,
        Set1DesSeq = 365,
        Set2DesSeq = 366,
        Set3DesSeq = 367,
        SetLrMargin = 368,
        SetTbMargin = 369,
        BitImageRepeat = 370,
        BitImageNewline = 371,
        BitImageCarriageReturn = 372,
        ColorNames = 373,
        DefineBitImageRegion = 374,
        EndBitImageRegion = 375,
        SetColorBand = 376,
        SetPageLength = 377,
        DisplayPcChar = 378,
        EnterPcCharsetMode = 379,
        ExitPcCharsetMode = 380,
        EnterScancodeMode = 381,
        ExitScancodeMode = 382,
        PcTermOptions = 383,
        ScancodeEscape = 384,
        AltScancodeEsc = 385,
        EnterHorizontalHlMode = 386,
        EnterLeftHlMode = 387,
        EnterLowHlMode = 388,
        EnterRightHlMode = 389,
        EnterTopHlMode = 390,
        EnterVerticalHlMode = 391,
        SetAAttributes = 392,
        SetPglenInch = 393,
        Last = 394,
    }

    class TimeZone
    {
        static /*0x0*/ System.TimeZone currentTimeZone;
        static /*0x8*/ object tz_lock;
        static /*0x10*/ long timezone_check;

        static /*0x1d38af8*/ TimeZone();
        static /*0x1d388bc*/ System.TimeZone get_CurrentTimeZone();
        /*0x1d388b4*/ TimeZone();
        System.TimeSpan GetUtcOffset(System.DateTime time);
    }

    class CurrentSystemTimeZone : System.TimeZone
    {
        /*0x10*/ System.TimeZoneInfo LocalTimeZone;

        static /*0x25225d8*/ bool GetTimeZoneData(int year, ref long[] data, ref string[] names, ref bool daylight_inverted);
        /*0x25224c0*/ CurrentSystemTimeZone();
        /*0x2522534*/ System.TimeSpan GetUtcOffset(System.DateTime dateTime);
    }

    class TimeType
    {
        /*0x10*/ int Offset;
        /*0x14*/ bool IsDst;
        /*0x18*/ string Name;

        /*0x1d38664*/ TimeType(int offset, bool is_dst, string abbrev);
        /*0x1d386ac*/ string ToString();
    }

    enum TypeCode
    {
        Empty = 0,
        Object = 1,
        DBNull = 2,
        Boolean = 3,
        Char = 4,
        SByte = 5,
        Byte = 6,
        Int16 = 7,
        UInt16 = 8,
        Int32 = 9,
        UInt32 = 10,
        Int64 = 11,
        UInt64 = 12,
        Single = 13,
        Double = 14,
        Decimal = 15,
        DateTime = 16,
        String = 18,
    }

    interface TypeName : System.IEquatable<System.TypeName>
    {
        string get_DisplayName();
    }

    interface TypeIdentifier : System.TypeName, System.IEquatable<System.TypeName>
    {
        string get_InternalName();
    }

    class TypeNames
    {
        class ATypeName : System.TypeName, System.IEquatable<System.TypeName>
        {
            /*0x2aa26d8*/ ATypeName();
            string get_DisplayName();
            /*0x2aa2970*/ bool Equals(System.TypeName other);
            /*0x2aa2a58*/ int GetHashCode();
            /*0x2aa2a84*/ bool Equals(object other);
        }
    }

    class TypeIdentifiers
    {
        static /*0x2080344*/ System.TypeIdentifier FromDisplay(string displayName);

        class Display : System.TypeNames.ATypeName, System.TypeIdentifier, System.TypeName, System.IEquatable<System.TypeName>
        {
            /*0x10*/ string displayName;
            /*0x18*/ string internal_name;

            /*0x2aa26ac*/ Display(string displayName);
            /*0x2aa26e0*/ string get_DisplayName();
            /*0x2aa26e8*/ string get_InternalName();
            /*0x2aa271c*/ string GetInternalName();
        }
    }

    interface ModifierSpec
    {
        System.Type Resolve(System.Type type);
        System.Text.StringBuilder Append(System.Text.StringBuilder sb);
    }

    class ArraySpec : System.ModifierSpec
    {
        /*0x10*/ int dimensions;
        /*0x14*/ bool bound;

        /*0x1c9376c*/ ArraySpec(int dimensions, bool bound);
        /*0x1c937ac*/ System.Type Resolve(System.Type type);
        /*0x1c93820*/ System.Text.StringBuilder Append(System.Text.StringBuilder sb);
        /*0x1c938d0*/ string ToString();
    }

    class PointerSpec : System.ModifierSpec
    {
        /*0x10*/ int pointer_level;

        /*0x252fe78*/ PointerSpec(int pointer_level);
        /*0x252fea4*/ System.Type Resolve(System.Type type);
        /*0x252fefc*/ System.Text.StringBuilder Append(System.Text.StringBuilder sb);
        /*0x252ff24*/ string ToString();
    }

    class TypeSpec
    {
        /*0x10*/ System.TypeIdentifier name;
        /*0x18*/ string assembly_name;
        /*0x20*/ System.Collections.Generic.List<System.TypeIdentifier> nested;
        /*0x28*/ System.Collections.Generic.List<System.TypeSpec> generic_params;
        /*0x30*/ System.Collections.Generic.List<System.ModifierSpec> modifier_spec;
        /*0x38*/ bool is_byref;
        /*0x40*/ string display_fullname;

        static /*0x2081428*/ System.TypeSpec Parse(string typeName);
        static /*0x2083038*/ string UnescapeInternalName(string displayName);
        static /*0x20832cc*/ void SkipSpace(string name, ref int pos);
        static /*0x2083390*/ void BoundCheck(int idx, string s);
        static /*0x208321c*/ System.TypeIdentifier ParsedTypeIdentifier(string displayName);
        static /*0x2082480*/ System.TypeSpec Parse(string name, ref int p, bool is_recurse, bool allow_aqn);
        /*0x2083418*/ TypeSpec();
        /*0x2081df8*/ bool get_HasModifiers();
        /*0x2081e08*/ string GetDisplayFullName(System.TypeSpec.DisplayNameFormat flags);
        /*0x20822c0*/ System.Text.StringBuilder GetModifierString(System.Text.StringBuilder sb);
        /*0x208228c*/ string get_DisplayFullName();
        /*0x2081504*/ System.Type Resolve(System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly> assemblyResolver, System.Func<System.Reflection.Assembly, string, bool, System.Type> typeResolver, bool throwOnError, bool ignoreCase);
        /*0x2083138*/ void AddName(string type_name);
        /*0x2083220*/ void AddModifier(System.ModifierSpec md);

        enum DisplayNameFormat
        {
            Default = 0,
            WANT_ASSEMBLY = 1,
            NO_MODIFIERS = 2,
        }
    }

    struct UIntPtr : System.Runtime.Serialization.ISerializable
    {
        static /*0x0*/ nuint Zero;
        /*0x10*/ void* _pointer;

        static /*0x2085cc0*/ UIntPtr();
        static /*0x2085c00*/ bool op_Equality(nuint value1, nuint value2);
        static /*0x2085c0c*/ bool op_Inequality(nuint value1, nuint value2);
        static /*0x2085c18*/ ulong op_Explicit(nuint value);
        static /*0x2085c1c*/ uint op_Explicit(nuint value);
        static /*0x2085c20*/ nuint op_Explicit(ulong value);
        static /*0x2085c4c*/ nuint op_Explicit(void* value);
        static /*0x2085c50*/ void* op_Explicit(nuint value);
        static /*0x2085a1c*/ int get_Size();
        static /*0x2085c54*/ nuint op_Subtraction(nuint pointer, int offset);
        /*0xae0df8*/ UIntPtr(ulong value);
        /*0xae0e00*/ UIntPtr(uint value);
        /*0xae0e0c*/ UIntPtr(void* value);
        /*0xae0e14*/ bool Equals(object obj);
        /*0xae0e1c*/ int GetHashCode();
        /*0xae0e24*/ uint ToUInt32();
        /*0xae0e2c*/ ulong ToUInt64();
        /*0xae0e34*/ void* ToPointer();
        /*0xae0e3c*/ string ToString();
        /*0xae0e44*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    class ValueType
    {
        static /*0x2070f44*/ bool InternalEquals(object o1, object o2, ref object[] fields);
        static /*0x2070f48*/ bool DefaultEquals(object o1, object o2);
        static /*0x2071110*/ int InternalGetHashCode(object o, ref object[] fields);
        /*0x2070f3c*/ ValueType();
        /*0x207110c*/ bool Equals(object obj);
        /*0x2071114*/ int GetHashCode();
        /*0x20711a0*/ string ToString();
    }

    struct Variant
    {
        /*0x10*/ short vt;
        /*0x12*/ ushort wReserved1;
        /*0x14*/ ushort wReserved2;
        /*0x16*/ ushort wReserved3;
        /*0x18*/ long llVal;
        /*0x18*/ int lVal;
        /*0x18*/ byte bVal;
        /*0x18*/ short iVal;
        /*0x18*/ float fltVal;
        /*0x18*/ double dblVal;
        /*0x18*/ short boolVal;
        /*0x18*/ nint bstrVal;
        /*0x18*/ sbyte cVal;
        /*0x18*/ ushort uiVal;
        /*0x18*/ uint ulVal;
        /*0x18*/ ulong ullVal;
        /*0x18*/ int intVal;
        /*0x18*/ uint uintVal;
        /*0x18*/ nint pdispVal;
        /*0x18*/ System.BRECORD bRecord;

        /*0xae076c*/ void Clear();
    }

    struct BRECORD
    {
        /*0x10*/ nint pvRecord;
        /*0x18*/ nint pRecInfo;
    }

    struct Void
    {
    }

    class WeakReference : System.Runtime.Serialization.ISerializable
    {
        /*0x10*/ bool isLongReference;
        /*0x14*/ System.Runtime.InteropServices.GCHandle gcHandle;

        /*0x20741ec*/ WeakReference();
        /*0x20741f4*/ WeakReference(object target);
        /*0x2074228*/ WeakReference(object target, bool trackResurrection);
        /*0x207426c*/ WeakReference(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        /*0x20741b8*/ void AllocateHandle(object target);
        /*0x20743ac*/ bool get_IsAlive();
        /*0x20743d0*/ object get_Target();
        /*0x2074414*/ void set_Target(object value);
        /*0x2074420*/ bool get_TrackResurrection();
        /*0x2074428*/ void Finalize();
        /*0x2074498*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    }

    struct InputRecord
    {
        /*0x10*/ short EventType;
        /*0x12*/ bool KeyDown;
        /*0x14*/ short RepeatCount;
        /*0x16*/ short VirtualKeyCode;
        /*0x18*/ short VirtualScanCode;
        /*0x1a*/ char Character;
        /*0x1c*/ int ControlKeyState;
        /*0x20*/ int pad1;
        /*0x24*/ bool pad2;
    }

    struct Coord
    {
        /*0x10*/ short X;
        /*0x12*/ short Y;
    }

    struct SmallRect
    {
        /*0x10*/ short Left;
        /*0x12*/ short Top;
        /*0x14*/ short Right;
        /*0x16*/ short Bottom;
    }

    struct ConsoleScreenBufferInfo
    {
        /*0x10*/ System.Coord Size;
        /*0x14*/ System.Coord CursorPosition;
        /*0x18*/ short Attribute;
        /*0x1a*/ System.SmallRect Window;
        /*0x22*/ System.Coord MaxWindowSize;
    }

    enum Handles
    {
        STD_INPUT = -10,
        STD_OUTPUT = -11,
        STD_ERROR = -12,
    }

    class WindowsConsoleDriver : System.IConsoleDriver
    {
        /*0x10*/ nint inputHandle;
        /*0x18*/ nint outputHandle;
        /*0x20*/ short defaultAttribute;

        static /*0x20761f4*/ bool IsModifierKey(short virtualKeyCode);
        static /*0x2075e6c*/ nint GetStdHandle(System.Handles handle);
        static /*0x2075ef4*/ bool GetConsoleScreenBufferInfo(nint handle, ref System.ConsoleScreenBufferInfo info);
        static /*0x2076104*/ bool ReadConsoleInput(nint handle, ref System.InputRecord record, int length, ref int nread);
        /*0x2075e0c*/ WindowsConsoleDriver();
        /*0x2075f94*/ System.ConsoleKeyInfo ReadKey(bool intercept);
    }

    class __ComObject
    {
        /*0x2269fec*/ __ComObject();
    }

    namespace Configuration
    {
        namespace Assemblies
        {
            enum AssemblyHashAlgorithm
            {
                None = 0,
                MD5 = 32771,
                SHA1 = 32772,
                SHA256 = 32780,
                SHA384 = 32781,
                SHA512 = 32782,
            }

            enum AssemblyVersionCompatibility
            {
                SameMachine = 1,
                SameProcess = 2,
                SameDomain = 3,
            }
        }
    }

    namespace Text
    {
        class ASCIIEncoding : System.Text.Encoding
        {
            /*0x1c82c24*/ ASCIIEncoding();
            /*0x1c82c30*/ void SetDefaultFallbacks();
            /*0x1c82c64*/ int GetByteCount(char[] chars, int index, int count);
            /*0x1c82e4c*/ int GetByteCount(string chars);
            /*0x1c82ed8*/ int GetByteCount(char* chars, int count);
            /*0x1c82fb4*/ int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x1c83220*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x1c834bc*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x1c835c8*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x1c8375c*/ int GetCharCount(byte* bytes, int count);
            /*0x1c83838*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x1c83ad4*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x1c83be0*/ string GetString(byte[] bytes, int byteIndex, int byteCount);
            /*0x1c83db8*/ int GetByteCount(char* chars, int charCount, System.Text.EncoderNLS encoder);
            /*0x1c84144*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x1c845d0*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS decoder);
            /*0x1c84748*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS decoder);
            /*0x1c84a18*/ int GetMaxByteCount(int charCount);
            /*0x1c84afc*/ int GetMaxCharCount(int byteCount);
            /*0x1c84bdc*/ bool get_IsSingleByte();
            /*0x1c84be4*/ System.Text.Decoder GetDecoder();
            /*0x1c84c44*/ System.Text.Encoder GetEncoder();
        }

        class Decoder
        {
            /*0x10*/ System.Text.DecoderFallback m_fallback;
            /*0x18*/ System.Text.DecoderFallbackBuffer m_fallbackBuffer;

            /*0x20366f8*/ Decoder();
            /*0x2036690*/ void SerializeDecoder(System.Runtime.Serialization.SerializationInfo info);
            /*0x2036700*/ System.Text.DecoderFallback get_Fallback();
            /*0x2036708*/ System.Text.DecoderFallbackBuffer get_FallbackBuffer();
            /*0x20368b0*/ bool get_InternalHasFallbackBuffer();
            /*0x20368c0*/ void Reset();
            int GetCharCount(byte[] bytes, int index, int count);
            /*0x203699c*/ int GetCharCount(byte[] bytes, int index, int count, bool flush);
            /*0x20369a8*/ int GetCharCount(byte* bytes, int count, bool flush);
            int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x2036b20*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
            /*0x2036b2c*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush);
            /*0x2036d60*/ void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
            /*0x2037094*/ void Convert(byte* bytes, int byteCount, char* chars, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
        }

        class InternalDecoderBestFitFallback : System.Text.DecoderFallback
        {
            /*0x18*/ System.Text.Encoding encoding;
            /*0x20*/ char[] arrayBestFit;
            /*0x28*/ char cReplacement;

            /*0x1a887d4*/ InternalDecoderBestFitFallback(System.Text.Encoding encoding);
            /*0x1a88810*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x1a88998*/ int get_MaxCharCount();
            /*0x1a889a0*/ bool Equals(object value);
            /*0x1a88a54*/ int GetHashCode();
        }

        class InternalDecoderBestFitFallbackBuffer : System.Text.DecoderFallbackBuffer
        {
            static /*0x0*/ object s_InternalSyncObject;
            /*0x20*/ char cBestFit;
            /*0x24*/ int iCount;
            /*0x28*/ int iSize;
            /*0x30*/ System.Text.InternalDecoderBestFitFallback oFallback;

            static /*0x1a88a78*/ object get_InternalSyncObject();
            /*0x1a8886c*/ InternalDecoderBestFitFallbackBuffer(System.Text.InternalDecoderBestFitFallback fallback);
            /*0x1a88b10*/ bool Fallback(byte[] bytesUnknown, int index);
            /*0x1a88ca8*/ char GetNextChar();
            /*0x1a88ce8*/ int get_Remaining();
            /*0x1a88cf4*/ void Reset();
            /*0x1a88d04*/ int InternalFallback(byte[] bytes, byte* pBytes);
            /*0x1a88b5c*/ char TryBestFit(byte[] bytesCheck);
        }

        class DecoderExceptionFallback : System.Text.DecoderFallback
        {
            /*0x20372d8*/ DecoderExceptionFallback();
            /*0x20372e8*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x2037348*/ int get_MaxCharCount();
            /*0x2037350*/ bool Equals(object value);
            /*0x20373b0*/ int GetHashCode();
        }

        class DecoderExceptionFallbackBuffer : System.Text.DecoderFallbackBuffer
        {
            /*0x2037340*/ DecoderExceptionFallbackBuffer();
            /*0x20373b8*/ bool Fallback(byte[] bytesUnknown, int index);
            /*0x2037628*/ char GetNextChar();
            /*0x2037630*/ int get_Remaining();
            /*0x20373c4*/ void Throw(byte[] bytesUnknown, int index);
        }

        class DecoderFallbackException : System.ArgumentException
        {
            /*0x90*/ byte[] bytesUnknown;
            /*0x98*/ int index;

            /*0x2037eb8*/ DecoderFallbackException();
            /*0x2037f28*/ DecoderFallbackException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x2037638*/ DecoderFallbackException(string message, byte[] bytesUnknown, int index);
        }

        class DecoderFallback
        {
            static /*0x0*/ System.Text.DecoderFallback replacementFallback;
            static /*0x8*/ System.Text.DecoderFallback exceptionFallback;
            static /*0x10*/ object s_InternalSyncObject;
            /*0x10*/ bool bIsMicrosoftBestFitFallback;

            static /*0x203767c*/ object get_InternalSyncObject();
            static /*0x2036750*/ System.Text.DecoderFallback get_ReplacementFallback();
            static /*0x2037764*/ System.Text.DecoderFallback get_ExceptionFallback();
            /*0x20372e0*/ DecoderFallback();
            System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            int get_MaxCharCount();
        }

        class DecoderFallbackBuffer
        {
            /*0x10*/ byte* byteStart;
            /*0x18*/ char* charEnd;

            /*0x2037674*/ DecoderFallbackBuffer();
            bool Fallback(byte[] bytesUnknown, int index);
            char GetNextChar();
            int get_Remaining();
            /*0x20378c8*/ void Reset();
            /*0x20378fc*/ void InternalReset();
            /*0x203790c*/ void InternalInitialize(byte* byteStart, char* charEnd);
            /*0x2037914*/ bool InternalFallback(byte[] bytes, byte* pBytes, ref char* chars);
            /*0x2037abc*/ int InternalFallback(byte[] bytes, byte* pBytes);
            /*0x2037c4c*/ void ThrowLastBytesRecursive(byte[] bytesUnknown);
        }

        class DecoderNLS : System.Text.Decoder, System.Runtime.Serialization.ISerializable
        {
            /*0x20*/ System.Text.Encoding m_encoding;
            /*0x28*/ bool m_mustFlush;
            /*0x29*/ bool m_throwOnOverflow;
            /*0x2c*/ int m_bytesUsed;

            /*0x2037f30*/ DecoderNLS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x20380d8*/ DecoderNLS(System.Text.Encoding encoding);
            /*0x2038120*/ DecoderNLS();
            /*0x2038004*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x2038154*/ void Reset();
            /*0x203816c*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x203817c*/ int GetCharCount(byte[] bytes, int index, int count, bool flush);
            /*0x2038368*/ int GetCharCount(byte* bytes, int count, bool flush);
            /*0x203846c*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x203847c*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
            /*0x2038734*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush);
            /*0x2038868*/ void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
            /*0x2038b74*/ void Convert(byte* bytes, int byteCount, char* chars, int charCount, bool flush, ref int bytesUsed, ref int charsUsed, ref bool completed);
            /*0x2038d2c*/ bool get_MustFlush();
            /*0x2038d34*/ bool get_HasState();
            /*0x2038d3c*/ void ClearMustFlush();
        }

        class DecoderReplacementFallback : System.Text.DecoderFallback
        {
            /*0x18*/ string strDefault;

            /*0x2037718*/ DecoderReplacementFallback();
            /*0x2038d44*/ DecoderReplacementFallback(string replacement);
            /*0x2038f38*/ string get_DefaultString();
            /*0x2038f40*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
            /*0x2038fdc*/ int get_MaxCharCount();
            /*0x2038ff8*/ bool Equals(object value);
            /*0x2039088*/ int GetHashCode();
        }

        class DecoderReplacementFallbackBuffer : System.Text.DecoderFallbackBuffer
        {
            /*0x20*/ string strDefault;
            /*0x28*/ int fallbackCount;
            /*0x2c*/ int fallbackIndex;

            /*0x2038f9c*/ DecoderReplacementFallbackBuffer(System.Text.DecoderReplacementFallback fallback);
            /*0x20390a8*/ bool Fallback(byte[] bytesUnknown, int index);
            /*0x20390f0*/ char GetNextChar();
            /*0x203913c*/ int get_Remaining();
            /*0x2039148*/ void Reset();
            /*0x2039158*/ int InternalFallback(byte[] bytes, byte* pBytes);
        }

        class Encoder
        {
            /*0x10*/ System.Text.EncoderFallback m_fallback;
            /*0x18*/ System.Text.EncoderFallbackBuffer m_fallbackBuffer;

            /*0x2045978*/ Encoder();
            /*0x2045910*/ void SerializeEncoder(System.Runtime.Serialization.SerializationInfo info);
            /*0x2045980*/ System.Text.EncoderFallback get_Fallback();
            /*0x2045988*/ System.Text.EncoderFallbackBuffer get_FallbackBuffer();
            /*0x2045b30*/ bool get_InternalHasFallbackBuffer();
            /*0x2045b40*/ void Reset();
            int GetByteCount(char[] chars, int index, int count, bool flush);
            /*0x2045c1c*/ int GetByteCount(char* chars, int count, bool flush);
            int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
            /*0x2045da4*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush);
            /*0x2045fd8*/ void Convert(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
            /*0x204630c*/ void Convert(char* chars, int charCount, byte* bytes, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
        }

        class InternalEncoderBestFitFallback : System.Text.EncoderFallback
        {
            /*0x18*/ System.Text.Encoding encoding;
            /*0x20*/ char[] arrayBestFit;

            /*0x1a88d0c*/ InternalEncoderBestFitFallback(System.Text.Encoding encoding);
            /*0x1a88d40*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x1a88ec8*/ int get_MaxCharCount();
            /*0x1a88ed0*/ bool Equals(object value);
            /*0x1a88fa0*/ int GetHashCode();
        }

        class InternalEncoderBestFitFallbackBuffer : System.Text.EncoderFallbackBuffer
        {
            static /*0x0*/ object s_InternalSyncObject;
            /*0x30*/ char cBestFit;
            /*0x38*/ System.Text.InternalEncoderBestFitFallback oFallback;
            /*0x40*/ int iCount;
            /*0x44*/ int iSize;

            static /*0x1a88fc4*/ object get_InternalSyncObject();
            /*0x1a88d9c*/ InternalEncoderBestFitFallbackBuffer(System.Text.InternalEncoderBestFitFallback fallback);
            /*0x1a8905c*/ bool Fallback(char charUnknown, int index);
            /*0x1a89178*/ bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x1a8941c*/ char GetNextChar();
            /*0x1a8945c*/ bool MovePrevious();
            /*0x1a89488*/ int get_Remaining();
            /*0x1a89494*/ void Reset();
            /*0x1a89098*/ char TryBestFit(char cUnknown);
        }

        class EncoderExceptionFallback : System.Text.EncoderFallback
        {
            /*0x2046550*/ EncoderExceptionFallback();
            /*0x2046560*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x20465c0*/ int get_MaxCharCount();
            /*0x20465c8*/ bool Equals(object value);
            /*0x2046628*/ int GetHashCode();
        }

        class EncoderExceptionFallbackBuffer : System.Text.EncoderFallbackBuffer
        {
            /*0x20465b8*/ EncoderExceptionFallbackBuffer();
            /*0x2046638*/ bool Fallback(char charUnknown, int index);
            /*0x2046784*/ bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x2046e18*/ char GetNextChar();
            /*0x2046e20*/ bool MovePrevious();
            /*0x2046e28*/ int get_Remaining();
        }

        class EncoderFallbackException : System.ArgumentException
        {
            /*0x90*/ char charUnknown;
            /*0x92*/ char charUnknownHigh;
            /*0x94*/ char charUnknownLow;
            /*0x98*/ int index;

            /*0x20473c4*/ EncoderFallbackException();
            /*0x2047434*/ EncoderFallbackException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x2046748*/ EncoderFallbackException(string message, char charUnknown, int index);
            /*0x2046b5c*/ EncoderFallbackException(string message, char charUnknownHigh, char charUnknownLow, int index);
        }

        class EncoderFallback
        {
            static /*0x0*/ System.Text.EncoderFallback replacementFallback;
            static /*0x8*/ System.Text.EncoderFallback exceptionFallback;
            static /*0x10*/ object s_InternalSyncObject;
            /*0x10*/ bool bIsMicrosoftBestFitFallback;

            static /*0x2046e30*/ object get_InternalSyncObject();
            static /*0x20459d0*/ System.Text.EncoderFallback get_ReplacementFallback();
            static /*0x2046f18*/ System.Text.EncoderFallback get_ExceptionFallback();
            /*0x2046558*/ EncoderFallback();
            System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            int get_MaxCharCount();
        }

        class EncoderFallbackBuffer
        {
            /*0x10*/ char* charStart;
            /*0x18*/ char* charEnd;
            /*0x20*/ System.Text.EncoderNLS encoder;
            /*0x28*/ bool setEncoder;
            /*0x29*/ bool bUsedEncoder;
            /*0x2a*/ bool bFallingBack;
            /*0x2c*/ int iRecursionCount;

            /*0x2046630*/ EncoderFallbackBuffer();
            bool Fallback(char charUnknown, int index);
            bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            char GetNextChar();
            bool MovePrevious();
            int get_Remaining();
            /*0x204707c*/ void Reset();
            /*0x20470b0*/ void InternalReset();
            /*0x20470c8*/ void InternalInitialize(char* charStart, char* charEnd, System.Text.EncoderNLS encoder, bool setEncoder);
            /*0x20470e4*/ char InternalGetNextChar();
            /*0x2047124*/ bool InternalFallback(char ch, ref char* chars);
            /*0x20472f0*/ void ThrowLastCharRecursive(int charRecursive);
        }

        class EncoderNLS : System.Text.Encoder, System.Runtime.Serialization.ISerializable
        {
            /*0x20*/ char charLeftOver;
            /*0x28*/ System.Text.Encoding m_encoding;
            /*0x30*/ bool m_mustFlush;
            /*0x31*/ bool m_throwOnOverflow;
            /*0x34*/ int m_charsUsed;

            /*0x204743c*/ EncoderNLS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x204760c*/ EncoderNLS(System.Text.Encoding encoding);
            /*0x2047654*/ EncoderNLS();
            /*0x2047510*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x2047688*/ void Reset();
            /*0x20476a8*/ int GetByteCount(char[] chars, int index, int count, bool flush);
            /*0x2047894*/ int GetByteCount(char* chars, int count, bool flush);
            /*0x2047998*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
            /*0x2047c50*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush);
            /*0x2047d84*/ void Convert(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
            /*0x2048090*/ void Convert(char* chars, int charCount, byte* bytes, int byteCount, bool flush, ref int charsUsed, ref int bytesUsed, ref bool completed);
            /*0x2048244*/ System.Text.Encoding get_Encoding();
            /*0x204824c*/ bool get_MustFlush();
            /*0x2048254*/ bool get_HasState();
            /*0x2048264*/ void ClearMustFlush();
        }

        class EncoderReplacementFallback : System.Text.EncoderFallback
        {
            /*0x18*/ string strDefault;

            /*0x2046ecc*/ EncoderReplacementFallback();
            /*0x204826c*/ EncoderReplacementFallback(string replacement);
            /*0x2048460*/ string get_DefaultString();
            /*0x2048468*/ System.Text.EncoderFallbackBuffer CreateFallbackBuffer();
            /*0x2048510*/ int get_MaxCharCount();
            /*0x204852c*/ bool Equals(object value);
            /*0x20485bc*/ int GetHashCode();
        }

        class EncoderReplacementFallbackBuffer : System.Text.EncoderFallbackBuffer
        {
            /*0x30*/ string strDefault;
            /*0x38*/ int fallbackCount;
            /*0x3c*/ int fallbackIndex;

            /*0x20484c4*/ EncoderReplacementFallbackBuffer(System.Text.EncoderReplacementFallback fallback);
            /*0x20485dc*/ bool Fallback(char charUnknown, int index);
            /*0x2048738*/ bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
            /*0x2048a24*/ char GetNextChar();
            /*0x2048a70*/ bool MovePrevious();
            /*0x2048aa0*/ int get_Remaining();
            /*0x2048aac*/ void Reset();
        }

        class Encoding : System.ICloneable
        {
            static /*0x0*/ System.Text.Encoding defaultEncoding;
            static /*0x8*/ System.Text.Encoding unicodeEncoding;
            static /*0x10*/ System.Text.Encoding bigEndianUnicode;
            static /*0x18*/ System.Text.Encoding utf7Encoding;
            static /*0x20*/ System.Text.Encoding utf8Encoding;
            static /*0x28*/ System.Text.Encoding utf32Encoding;
            static /*0x30*/ System.Text.Encoding asciiEncoding;
            static /*0x38*/ System.Text.Encoding latin1Encoding;
            static /*0x40*/ System.Collections.Hashtable encodings;
            static /*0x48*/ object s_InternalSyncObject;
            /*0x10*/ int m_codePage;
            /*0x18*/ System.Globalization.CodePageDataItem dataItem;
            /*0x20*/ bool m_deserializedFromEverett;
            /*0x21*/ bool m_isReadOnly;
            /*0x28*/ System.Text.EncoderFallback encoderFallback;
            /*0x30*/ System.Text.DecoderFallback decoderFallback;

            static /*0x204922c*/ object get_InternalSyncObject();
            static /*0x20492c8*/ System.Text.Encoding GetEncoding(int codepage);
            static /*0x204a938*/ System.Text.Encoding GetEncoding(int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);
            static /*0x204abcc*/ System.Text.Encoding GetEncoding(string name);
            static /*0x204a020*/ System.Text.Encoding get_ASCII();
            static /*0x204a0c8*/ System.Text.Encoding get_Latin1();
            static /*0x204be88*/ System.Text.Encoding CreateDefaultEncoding();
            static /*0x2049c3c*/ System.Text.Encoding get_Default();
            static /*0x2049cbc*/ System.Text.Encoding get_Unicode();
            static /*0x2049d6c*/ System.Text.Encoding get_BigEndianUnicode();
            static /*0x2049e1c*/ System.Text.Encoding get_UTF7();
            static /*0x2049f74*/ System.Text.Encoding get_UTF8();
            static /*0x2049ec4*/ System.Text.Encoding get_UTF32();
            /*0x2048ac0*/ Encoding();
            /*0x2048afc*/ Encoding(int codePage);
            /*0x2048b88*/ void SetDefaultFallbacks();
            /*0x2048c18*/ void OnDeserializing();
            /*0x2048c28*/ void OnDeserialized();
            /*0x2048c70*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x2048c80*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x2048cc8*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x2048cd0*/ void DeserializeEncoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x2049090*/ void SerializeEncoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x204ac7c*/ byte[] GetPreamble();
            /*0x204ace0*/ void GetDataItem();
            /*0x204ae14*/ string get_BodyName();
            /*0x204ae50*/ string get_EncodingName();
            /*0x204ae5c*/ string get_HeaderName();
            /*0x204ae98*/ string get_WebName();
            /*0x204aed4*/ int get_WindowsCodePage();
            /*0x204af14*/ bool get_IsBrowserDisplay();
            /*0x204af50*/ bool get_IsBrowserSave();
            /*0x204af8c*/ bool get_IsMailNewsDisplay();
            /*0x204afc8*/ bool get_IsMailNewsSave();
            /*0x204b004*/ bool get_IsSingleByte();
            /*0x204b00c*/ System.Text.EncoderFallback get_EncoderFallback();
            /*0x204aa4c*/ void set_EncoderFallback(System.Text.EncoderFallback value);
            /*0x204b014*/ System.Text.DecoderFallback get_DecoderFallback();
            /*0x204ab0c*/ void set_DecoderFallback(System.Text.DecoderFallback value);
            /*0x204b01c*/ object Clone();
            /*0x204b0a8*/ bool get_IsReadOnly();
            /*0x204b0b0*/ int GetByteCount(char[] chars);
            /*0x204b13c*/ int GetByteCount(string s);
            int GetByteCount(char[] chars, int index, int count);
            /*0x204b1d4*/ int GetByteCount(char* chars, int count);
            /*0x204b350*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS encoder);
            /*0x204b360*/ byte[] GetBytes(char[] chars);
            /*0x204b3ec*/ byte[] GetBytes(char[] chars, int index, int count);
            int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x204b4ac*/ byte[] GetBytes(string s);
            /*0x204b5bc*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x204b674*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x204b684*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            int GetCharCount(byte[] bytes, int index, int count);
            /*0x204b8ac*/ int GetCharCount(byte* bytes, int count);
            /*0x204ba28*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS decoder);
            /*0x204ba38*/ char[] GetChars(byte[] bytes, int index, int count);
            int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x204baf8*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x204bd20*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS decoder);
            /*0x204bd30*/ string GetString(byte* bytes, int byteCount);
            /*0x204be18*/ int get_CodePage();
            /*0x204be20*/ bool IsAlwaysNormalized(System.Text.NormalizationForm form);
            /*0x204be28*/ System.Text.Decoder GetDecoder();
            /*0x204c0a4*/ void setReadOnly(bool value);
            /*0x204c0b0*/ System.Text.Encoder GetEncoder();
            int GetMaxByteCount(int charCount);
            int GetMaxCharCount(int byteCount);
            /*0x204c110*/ string GetString(byte[] bytes);
            /*0x204c19c*/ string GetString(byte[] bytes, int index, int count);
            /*0x204c1c8*/ bool Equals(object value);
            /*0x204c2a8*/ int GetHashCode();
            /*0x204c304*/ char[] GetBestFitUnicodeToBytesData();
            /*0x204c368*/ char[] GetBestFitBytesToUnicodeData();
            /*0x204c3cc*/ void ThrowBytesOverflow();
            /*0x204c4d8*/ void ThrowBytesOverflow(System.Text.EncoderNLS encoder, bool nothingEncoded);
            /*0x204c554*/ void ThrowCharsOverflow();
            /*0x204c660*/ void ThrowCharsOverflow(System.Text.DecoderNLS decoder, bool nothingDecoded);

            class DefaultEncoder : System.Text.Encoder, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
            {
                /*0x20*/ System.Text.Encoding m_encoding;
                /*0x28*/ bool m_hasInitializedEncoding;
                /*0x2a*/ char charLeftOver;

                /*0x1810430*/ DefaultEncoder(System.Text.Encoding encoding);
                /*0x1810464*/ DefaultEncoder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x1810780*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x181083c*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x18108e8*/ int GetByteCount(char[] chars, int index, int count, bool flush);
                /*0x181090c*/ int GetByteCount(char* chars, int count, bool flush);
                /*0x1810930*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);
                /*0x1810954*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, bool flush);
            }

            class DefaultDecoder : System.Text.Decoder, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
            {
                /*0x20*/ System.Text.Encoding m_encoding;
                /*0x28*/ bool m_hasInitializedEncoding;

                /*0x180ffc4*/ DefaultDecoder(System.Text.Encoding encoding);
                /*0x180fff8*/ DefaultDecoder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x181027c*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x18102d4*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x1810380*/ int GetCharCount(byte[] bytes, int index, int count);
                /*0x1810390*/ int GetCharCount(byte[] bytes, int index, int count, bool flush);
                /*0x18103b4*/ int GetCharCount(byte* bytes, int count, bool flush);
                /*0x18103d8*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
                /*0x18103e8*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);
                /*0x181040c*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, bool flush);
            }

            class EncodingCharBuffer
            {
                /*0x10*/ char* chars;
                /*0x18*/ char* charStart;
                /*0x20*/ char* charEnd;
                /*0x28*/ int charCountResult;
                /*0x30*/ System.Text.Encoding enc;
                /*0x38*/ System.Text.DecoderNLS decoder;
                /*0x40*/ byte* byteStart;
                /*0x48*/ byte* byteEnd;
                /*0x50*/ byte* bytes;
                /*0x58*/ System.Text.DecoderFallbackBuffer fallbackBuffer;

                /*0x1810d9c*/ EncodingCharBuffer(System.Text.Encoding enc, System.Text.DecoderNLS decoder, char* charStart, int charCount, byte* byteStart, int byteCount);
                /*0x1810e50*/ bool AddChar(char ch, int numBytes);
                /*0x1810ec8*/ bool AddChar(char ch);
                /*0x1810ed0*/ void AdjustBytes(int count);
                /*0x1810ee0*/ bool get_MoreData();
                /*0x1810ef0*/ byte GetNextByte();
                /*0x1810f14*/ int get_BytesUsed();
                /*0x1810f24*/ bool Fallback(byte fallbackByte);
                /*0x1810fa8*/ bool Fallback(byte[] byteBuffer);
                /*0x1811094*/ int get_Count();
            }

            class EncodingByteBuffer
            {
                /*0x10*/ byte* bytes;
                /*0x18*/ byte* byteStart;
                /*0x20*/ byte* byteEnd;
                /*0x28*/ char* chars;
                /*0x30*/ char* charStart;
                /*0x38*/ char* charEnd;
                /*0x40*/ int byteCountResult;
                /*0x48*/ System.Text.Encoding enc;
                /*0x50*/ System.Text.EncoderNLS encoder;
                /*0x58*/ System.Text.EncoderFallbackBuffer fallbackBuffer;

                /*0x1810978*/ EncodingByteBuffer(System.Text.Encoding inEncoding, System.Text.EncoderNLS inEncoder, byte* inByteStart, int inByteCount, char* inCharStart, int inCharCount);
                /*0x1810b88*/ bool AddByte(byte b, int moreBytesExpected);
                /*0x1810c64*/ bool AddByte(byte b1);
                /*0x1810c6c*/ bool AddByte(byte b1, byte b2);
                /*0x1810c74*/ bool AddByte(byte b1, byte b2, int moreBytesExpected);
                /*0x1810bdc*/ void MovePrevious(bool bThrow);
                /*0x1810ccc*/ bool get_MoreData();
                /*0x1810d20*/ char GetNextChar();
                /*0x1810d7c*/ int get_CharsUsed();
                /*0x1810d94*/ int get_Count();
            }
        }

        class EncodingNLS : System.Text.Encoding
        {
            /*0x244cc9c*/ EncodingNLS(int codePage);
            /*0x244cca4*/ int GetByteCount(char[] chars, int index, int count);
            /*0x244ce30*/ int GetByteCount(string s);
            /*0x244cec0*/ int GetByteCount(char* chars, int count);
            /*0x244cf94*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x244d1ec*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x244d474*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x244d578*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x244d700*/ int GetCharCount(byte* bytes, int count);
            /*0x244d7d4*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x244da5c*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x244db60*/ string GetString(byte[] bytes, int index, int count);
            /*0x244dd2c*/ System.Text.Decoder GetDecoder();
            /*0x244dd8c*/ System.Text.Encoder GetEncoder();
        }

        class EncodingProvider
        {
            static /*0x0*/ object s_InternalSyncObject;
            static /*0x8*/ System.Text.EncodingProvider[] s_providers;

            static /*0x244e210*/ EncodingProvider();
            static /*0x244def8*/ System.Text.Encoding GetEncodingFromProvider(int codepage);
            static /*0x244dff8*/ System.Text.Encoding GetEncodingFromProvider(string encodingName);
            static /*0x244e0f8*/ System.Text.Encoding GetEncodingFromProvider(int codepage, System.Text.EncoderFallback enc, System.Text.DecoderFallback dec);
            System.Text.Encoding GetEncoding(string name);
            System.Text.Encoding GetEncoding(int codepage);
            /*0x244ddec*/ System.Text.Encoding GetEncoding(int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);
        }

        class Latin1Encoding : System.Text.EncodingNLS, System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ char[] arrayCharBestFit;

            static /*0x1a927fc*/ Latin1Encoding();
            /*0x1a91e80*/ Latin1Encoding();
            /*0x1a91e8c*/ Latin1Encoding(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1a91edc*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1a91fd0*/ int GetByteCount(char* chars, int charCount, System.Text.EncoderNLS encoder);
            /*0x1a921bc*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x1a92534*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS decoder);
            /*0x1a9253c*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS decoder);
            /*0x1a925b8*/ int GetMaxByteCount(int charCount);
            /*0x1a926a0*/ int GetMaxCharCount(int byteCount);
            /*0x1a92784*/ bool get_IsSingleByte();
            /*0x1a9278c*/ bool IsAlwaysNormalized(System.Text.NormalizationForm form);
            /*0x1a92798*/ char[] GetBestFitUnicodeToBytesData();
        }

        class StringBuilder : System.Runtime.Serialization.ISerializable
        {
            static int DefaultCapacity = 16;
            static string CapacityField = "Capacity";
            static string MaxCapacityField = "m_MaxCapacity";
            static string StringValueField = "m_StringValue";
            static string ThreadIDField = "m_currentThread";
            static int MaxChunkSize = 8000;
            /*0x10*/ char[] m_ChunkChars;
            /*0x18*/ System.Text.StringBuilder m_ChunkPrevious;
            /*0x20*/ int m_ChunkLength;
            /*0x24*/ int m_ChunkOffset;
            /*0x28*/ int m_MaxCapacity;

            static /*0x24b23d0*/ void FormatError();
            static /*0x24b03f0*/ void ThreadSafeCopy(char* sourcePtr, char[] destination, int destinationIndex, int count);
            static /*0x24b2a8c*/ void ThreadSafeCopy(char[] source, int sourceIndex, char[] destination, int destinationIndex, int count);
            /*0x24a0e04*/ StringBuilder();
            /*0x24a5178*/ StringBuilder(int capacity);
            /*0x24b013c*/ StringBuilder(string value);
            /*0x24b0110*/ StringBuilder(string value, int capacity);
            /*0x24b0144*/ StringBuilder(string value, int startIndex, int length, int capacity);
            /*0x24b04cc*/ StringBuilder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x24b2b64*/ StringBuilder(System.Text.StringBuilder from);
            /*0x24b2bbc*/ StringBuilder(int size, int maxCapacity, System.Text.StringBuilder previousBlock);
            /*0x24b0798*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x24b08e0*/ int get_Capacity();
            /*0x24b0904*/ int get_MaxCapacity();
            /*0x24b090c*/ string ToString();
            /*0x24b0a68*/ string ToString(int startIndex, int length);
            /*0x24b0c8c*/ System.Text.StringBuilder Clear();
            /*0x24b0a5c*/ int get_Length();
            /*0x24b0cb4*/ void set_Length(int value);
            /*0x24b0f88*/ char get_Chars(int index);
            /*0x24b1024*/ void set_Chars(int index, char value);
            /*0x24b0e54*/ System.Text.StringBuilder Append(char value, int repeatCount);
            /*0x24a51dc*/ System.Text.StringBuilder Append(char[] value, int startIndex, int charCount);
            /*0x24a0e0c*/ System.Text.StringBuilder Append(string value);
            /*0x24b13c0*/ void AppendHelper(string value);
            /*0x24b13fc*/ System.Text.StringBuilder Append(string value, int startIndex, int count);
            /*0x24b15a0*/ System.Text.StringBuilder AppendLine();
            /*0x24b15cc*/ System.Text.StringBuilder AppendLine(string value);
            /*0x24b15fc*/ System.Text.StringBuilder Insert(int index, string value, int count);
            /*0x24b1ba0*/ System.Text.StringBuilder Remove(int startIndex, int length);
            /*0x24b1dec*/ System.Text.StringBuilder Append(byte value);
            /*0x24b1e78*/ System.Text.StringBuilder Append(char value);
            /*0x24a0f14*/ System.Text.StringBuilder Append(int value);
            /*0x24b1ed8*/ System.Text.StringBuilder Append(long value);
            /*0x24b1f64*/ System.Text.StringBuilder Append(float value);
            /*0x24b1ff0*/ System.Text.StringBuilder Append(object value);
            /*0x24b203c*/ System.Text.StringBuilder Append(char[] value);
            /*0x24b2070*/ System.Text.StringBuilder Insert(int index, string value);
            /*0x24b2214*/ System.Text.StringBuilder Insert(int index, char value);
            /*0x24a210c*/ System.Text.StringBuilder AppendFormat(string format, object arg0);
            /*0x24a0fa0*/ System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1);
            /*0x24a1c78*/ System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2);
            /*0x24b2244*/ System.Text.StringBuilder AppendFormat(string format, object[] args);
            /*0x24b22fc*/ System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, string format, object arg0);
            /*0x24b2364*/ System.Text.StringBuilder AppendFormat(System.IFormatProvider provider, string format, object arg0, object arg1);
            /*0x24ad3e4*/ System.Text.StringBuilder AppendFormatHelper(System.IFormatProvider provider, string format, System.ParamsArray args);
            /*0x24b242c*/ System.Text.StringBuilder Replace(string oldValue, string newValue);
            /*0x24b243c*/ System.Text.StringBuilder Replace(string oldValue, string newValue, int startIndex, int count);
            /*0x24b12a4*/ System.Text.StringBuilder Append(char* value, int valueCount);
            /*0x24b2134*/ void Insert(int index, char* value, int valueCount);
            /*0x24b287c*/ void ReplaceAllInChunk(int[] replacements, int replacementsCount, System.Text.StringBuilder sourceChunk, int removeCount, string value);
            /*0x24b2798*/ bool StartsWith(System.Text.StringBuilder chunk, int indexInChunk, int count, string value);
            /*0x24b1a8c*/ void ReplaceInPlaceAtChunk(ref System.Text.StringBuilder chunk, ref int indexInChunk, char* value, int count);
            /*0x24b0f60*/ System.Text.StringBuilder FindChunkForIndex(int index);
            /*0x24b2a48*/ System.Text.StringBuilder Next(System.Text.StringBuilder chunk);
            /*0x24b10f0*/ void ExpandByABlock(int minBlockCharCount);
            /*0x24b1794*/ void MakeRoom(int index, int count, ref System.Text.StringBuilder chunk, ref int indexInChunk, bool doneMoveFollowingChars);
            /*0x24b1cf4*/ void Remove(int startIndex, int count, ref System.Text.StringBuilder chunk, ref int indexInChunk);
        }

        class StringBuilderCache
        {
            [ThreadStatic] static System.Text.StringBuilder CachedInstance;

            static /*0x1e1f7e8*/ System.Text.StringBuilder Acquire(int capacity);
            static /*0x1e1f8ac*/ void Release(System.Text.StringBuilder sb);
            static /*0x1e1f918*/ string GetStringAndRelease(System.Text.StringBuilder sb);
        }

        class UnicodeEncoding : System.Text.Encoding
        {
            static /*0x0*/ ulong highLowPatternMask;
            /*0x38*/ bool isThrowException;
            /*0x39*/ bool bigEndian;
            /*0x3a*/ bool byteOrderMark;

            static /*0x2068e74*/ UnicodeEncoding();
            /*0x2065704*/ UnicodeEncoding();
            /*0x2065714*/ UnicodeEncoding(bool bigEndian, bool byteOrderMark);
            /*0x2065724*/ UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);
            /*0x20657b0*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x20657b8*/ void SetDefaultFallbacks();
            /*0x2065888*/ int GetByteCount(char[] chars, int index, int count);
            /*0x2065a28*/ int GetByteCount(string s);
            /*0x2065ab8*/ int GetByteCount(char* chars, int count);
            /*0x2065b9c*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x2065e14*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x20660bc*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x20661d0*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x2066370*/ int GetCharCount(byte* bytes, int count);
            /*0x2066454*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x20666fc*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x2066810*/ string GetString(byte[] bytes, int index, int count);
            /*0x20669f4*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS encoder);
            /*0x2067000*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x206780c*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x2067f84*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x2068910*/ System.Text.Encoder GetEncoder();
            /*0x2068970*/ System.Text.Decoder GetDecoder();
            /*0x20689d0*/ byte[] GetPreamble();
            /*0x2068abc*/ int GetMaxByteCount(int charCount);
            /*0x2068ba4*/ int GetMaxCharCount(int byteCount);
            /*0x2068c90*/ bool Equals(object value);
            /*0x2068dd4*/ int GetHashCode();

            class Decoder : System.Text.DecoderNLS, System.Runtime.Serialization.ISerializable
            {
                /*0x30*/ int lastByte;
                /*0x34*/ char lastChar;

                /*0x2aa3e8c*/ Decoder(System.Text.UnicodeEncoding encoding);
                /*0x2aa3e9c*/ Decoder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x2aa4324*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x2aa44c0*/ void Reset();
                /*0x2aa44e8*/ bool get_HasState();
            }
        }

        class UTF32Encoding : System.Text.Encoding
        {
            /*0x38*/ bool emitUTF32ByteOrderMark;
            /*0x39*/ bool isThrowException;
            /*0x3a*/ bool bigEndian;

            /*0x2085cf8*/ UTF32Encoding();
            /*0x2085db8*/ UTF32Encoding(bool bigEndian, bool byteOrderMark);
            /*0x2085d34*/ UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);
            /*0x2085dc8*/ void SetDefaultFallbacks();
            /*0x2085e98*/ int GetByteCount(char[] chars, int index, int count);
            /*0x2086038*/ int GetByteCount(string s);
            /*0x20860c8*/ int GetByteCount(char* chars, int count);
            /*0x20861ac*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x2086424*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x20866cc*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x20867e0*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x2086980*/ int GetCharCount(byte* bytes, int count);
            /*0x2086a64*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x2086d0c*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x2086e20*/ string GetString(byte[] bytes, int index, int count);
            /*0x2087004*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS encoder);
            /*0x208733c*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS encoder);
            /*0x20877b4*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x2087b4c*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x2087798*/ uint GetSurrogate(char cHigh, char cLow);
            /*0x2087f88*/ char GetHighSurrogate(uint iChar);
            /*0x2087f9c*/ char GetLowSurrogate(uint iChar);
            /*0x2087fa8*/ System.Text.Decoder GetDecoder();
            /*0x2088008*/ System.Text.Encoder GetEncoder();
            /*0x2088068*/ int GetMaxByteCount(int charCount);
            /*0x2088150*/ int GetMaxCharCount(int byteCount);
            /*0x2088228*/ byte[] GetPreamble();
            /*0x208831c*/ bool Equals(object value);
            /*0x2088410*/ int GetHashCode();

            class UTF32Decoder : System.Text.DecoderNLS
            {
                /*0x30*/ int iChar;
                /*0x34*/ int readByteCount;

                /*0x2aa2ae8*/ UTF32Decoder(System.Text.UTF32Encoding encoding);
                /*0x2aa2af0*/ void Reset();
                /*0x2aa2b10*/ bool get_HasState();
            }
        }

        class UTF7Encoding : System.Text.Encoding
        {
            /*0x38*/ byte[] base64Bytes;
            /*0x40*/ sbyte[] base64Values;
            /*0x48*/ bool[] directEncode;
            /*0x50*/ bool m_allowOptionals;

            /*0x20884b0*/ UTF7Encoding();
            /*0x20884e0*/ UTF7Encoding(bool allowOptionals);
            /*0x2088518*/ void MakeTables();
            /*0x20887ac*/ void SetDefaultFallbacks();
            /*0x2088860*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x2088868*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x208890c*/ bool Equals(object value);
            /*0x20889fc*/ int GetHashCode();
            /*0x2088a6c*/ int GetByteCount(char[] chars, int index, int count);
            /*0x2088c0c*/ int GetByteCount(string s);
            /*0x2088c9c*/ int GetByteCount(char* chars, int count);
            /*0x2088d80*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x2088ff8*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x20892a0*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x20893b4*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x2089554*/ int GetCharCount(byte* bytes, int count);
            /*0x2089638*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x20898e0*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x20899f4*/ string GetString(byte[] bytes, int index, int count);
            /*0x2089bd8*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS baseEncoder);
            /*0x2089bf4*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS baseEncoder);
            /*0x2089fc0*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x2089fdc*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x208a2a4*/ System.Text.Decoder GetDecoder();
            /*0x208a304*/ System.Text.Encoder GetEncoder();
            /*0x208a364*/ int GetMaxByteCount(int charCount);
            /*0x208a408*/ int GetMaxCharCount(int byteCount);

            class Decoder : System.Text.DecoderNLS, System.Runtime.Serialization.ISerializable
            {
                /*0x30*/ int bits;
                /*0x34*/ int bitCount;
                /*0x38*/ bool firstByte;

                /*0x2aa2b20*/ Decoder(System.Text.UTF7Encoding encoding);
                /*0x2aa2b28*/ Decoder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x2aa2de8*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x2aa2f0c*/ void Reset();
                /*0x2aa2f34*/ bool get_HasState();
            }

            class Encoder : System.Text.EncoderNLS, System.Runtime.Serialization.ISerializable
            {
                /*0x38*/ int bits;
                /*0x3c*/ int bitCount;

                /*0x2aa313c*/ Encoder(System.Text.UTF7Encoding encoding);
                /*0x2aa3144*/ Encoder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x2aa3380*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x2aa347c*/ void Reset();
                /*0x2aa34a0*/ bool get_HasState();
            }

            class DecoderUTF7Fallback : System.Text.DecoderFallback
            {
                /*0x2aa2f44*/ DecoderUTF7Fallback();
                /*0x2aa2f4c*/ System.Text.DecoderFallbackBuffer CreateFallbackBuffer();
                /*0x2aa2fbc*/ int get_MaxCharCount();
                /*0x2aa2fc4*/ bool Equals(object value);
                /*0x2aa3024*/ int GetHashCode();
            }

            class DecoderUTF7FallbackBuffer : System.Text.DecoderFallbackBuffer
            {
                /*0x20*/ char cFallback;
                /*0x24*/ int iCount;
                /*0x28*/ int iSize;

                /*0x2aa2fac*/ DecoderUTF7FallbackBuffer(System.Text.UTF7Encoding.DecoderUTF7Fallback fallback);
                /*0x2aa302c*/ bool Fallback(byte[] bytesUnknown, int index);
                /*0x2aa3078*/ char GetNextChar();
                /*0x2aa3098*/ int get_Remaining();
                /*0x2aa30a4*/ void Reset();
                /*0x2aa30b4*/ int InternalFallback(byte[] bytes, byte* pBytes);
            }
        }

        class UTF8Encoding : System.Text.Encoding
        {
            /*0x38*/ bool emitUTF8Identifier;
            /*0x39*/ bool isThrowException;

            static /*0x208bd8c*/ int PtrDiff(char* a, char* b);
            static /*0x208bd98*/ int PtrDiff(byte* a, byte* b);
            static /*0x208bd78*/ bool InRange(int ch, int start, int end);
            /*0x208a488*/ UTF8Encoding();
            /*0x208a4b4*/ UTF8Encoding(bool encoderShouldEmitUTF8Identifier);
            /*0x208a4ec*/ UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);
            /*0x208a554*/ void SetDefaultFallbacks();
            /*0x208a624*/ int GetByteCount(char[] chars, int index, int count);
            /*0x208a7c4*/ int GetByteCount(string chars);
            /*0x208a854*/ int GetByteCount(char* chars, int count);
            /*0x208a938*/ int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x208abb0*/ int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
            /*0x208ae58*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount);
            /*0x208af6c*/ int GetCharCount(byte[] bytes, int index, int count);
            /*0x208b10c*/ int GetCharCount(byte* bytes, int count);
            /*0x208b1f0*/ int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
            /*0x208b498*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount);
            /*0x208b5ac*/ string GetString(byte[] bytes, int index, int count);
            /*0x208b790*/ int GetByteCount(char* chars, int count, System.Text.EncoderNLS baseEncoder);
            /*0x208bda0*/ int GetBytes(char* chars, int charCount, byte* bytes, int byteCount, System.Text.EncoderNLS baseEncoder);
            /*0x208c564*/ int GetCharCount(byte* bytes, int count, System.Text.DecoderNLS baseDecoder);
            /*0x208caa4*/ int GetChars(byte* bytes, int byteCount, char* chars, int charCount, System.Text.DecoderNLS baseDecoder);
            /*0x208d2dc*/ bool FallbackInvalidByteSequence(ref byte* pSrc, int ch, System.Text.DecoderFallbackBuffer fallback, ref char* pTarget);
            /*0x208ca60*/ int FallbackInvalidByteSequence(byte* pSrc, int ch, System.Text.DecoderFallbackBuffer fallback);
            /*0x208d354*/ byte[] GetBytesUnknown(ref byte* pSrc, int ch);
            /*0x208d58c*/ System.Text.Decoder GetDecoder();
            /*0x208d5ec*/ System.Text.Encoder GetEncoder();
            /*0x208d64c*/ int GetMaxByteCount(int charCount);
            /*0x208d734*/ int GetMaxCharCount(int byteCount);
            /*0x208d81c*/ byte[] GetPreamble();
            /*0x208d8d8*/ bool Equals(object value);
            /*0x208d9c8*/ int GetHashCode();

            class UTF8Encoder : System.Text.EncoderNLS, System.Runtime.Serialization.ISerializable
            {
                /*0x38*/ int surrogateChar;

                /*0x2aa39b0*/ UTF8Encoder(System.Text.UTF8Encoding encoding);
                /*0x2aa39b8*/ UTF8Encoder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x2aa3cc4*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x2aa3e18*/ void Reset();
                /*0x2aa3e38*/ bool get_HasState();
            }

            class UTF8Decoder : System.Text.DecoderNLS, System.Runtime.Serialization.ISerializable
            {
                /*0x30*/ int bits;

                /*0x2aa34c0*/ UTF8Decoder(System.Text.UTF8Encoding encoding);
                /*0x2aa34c8*/ UTF8Decoder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x2aa37e4*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x2aa3980*/ void Reset();
                /*0x2aa39a0*/ bool get_HasState();
            }
        }

        enum NormalizationCheck
        {
            Yes = 0,
            No = 1,
            Maybe = 2,
        }

        class Normalization
        {
            static /*0x0*/ byte* props;
            static /*0x8*/ int* mappedChars;
            static /*0x10*/ short* charMapIndex;
            static /*0x18*/ short* helperIndex;
            static /*0x20*/ ushort* mapIdxToComposite;
            static /*0x28*/ byte* combiningClass;
            static /*0x30*/ object forLock;
            static /*0x38*/ bool isReady;

            static /*0x22a8244*/ Normalization();
            static /*0x22a67f0*/ uint PropValue(int cp);
            static /*0x22a690c*/ int CharMapIdx(int cp);
            static /*0x22a6a28*/ byte GetCombiningClass(int c);
            static /*0x22a6aec*/ int GetPrimaryCompositeFromMapIndex(int src);
            static /*0x22a6bb0*/ int GetPrimaryCompositeHelperIndex(int cp);
            static /*0x22a6c74*/ string Compose(string source, int checkType);
            static /*0x22a6ed0*/ System.Text.StringBuilder Combine(string source, int start, int checkType);
            static /*0x22a7020*/ void Combine(System.Text.StringBuilder sb, int i, int checkType);
            static /*0x22a72b4*/ int CombineHangul(System.Text.StringBuilder sb, string s, int current);
            static /*0x22a76e8*/ int Fetch(System.Text.StringBuilder sb, string s, int i);
            static /*0x22a748c*/ int TryComposeWithPreviousStarter(System.Text.StringBuilder sb, string s, int current);
            static /*0x22a7728*/ int TryCompose(int i, int starter, int candidate);
            static /*0x22a7874*/ string Decompose(string source, int checkType);
            static /*0x22a6d78*/ void Decompose(string source, ref System.Text.StringBuilder sb, int checkType);
            static /*0x22a7b00*/ void ReorderCanonical(string src, ref System.Text.StringBuilder sb, int start);
            static /*0x22a790c*/ void DecomposeChar(ref System.Text.StringBuilder sb, ref int[] buf, string s, int i, int checkType, ref int start);
            static /*0x22a7154*/ System.Text.NormalizationCheck QuickCheck(char c, int type);
            static /*0x22a7fa0*/ int GetCanonicalHangul(int s, int[] buf, int bufIdx);
            static /*0x22a7da4*/ int GetCanonical(int c, int[] buf, int bufIdx, int checkType);
            static /*0x22a80a4*/ string Normalize(string source, System.Text.NormalizationForm normalizationForm);
            static /*0x22a818c*/ string Normalize(string source, int type);
            static /*0x22a8240*/ void load_normalization_resource(ref nint props, ref nint mappedChars, ref nint charMapIndex, ref nint helperIndex, ref nint mapIdxToComposite, ref nint combiningClass);
        }

        class EncodingHelper
        {
            static /*0x0*/ System.Text.Encoding utf8EncodingWithoutMarkers;
            static /*0x8*/ object lockobj;
            static /*0x10*/ System.Reflection.Assembly i18nAssembly;
            static /*0x18*/ bool i18nDisabled;

            static /*0x204c8e8*/ EncodingHelper();
            static /*0x204c6d4*/ System.Text.Encoding get_UTF8Unmarked();
            static /*0x204c8e4*/ string InternalCodePage(ref int code_page);
            static /*0x204bef4*/ System.Text.Encoding GetDefaultEncoding();
            static /*0x204a170*/ object InvokeI18N(string name, object[] args);
        }

        enum NormalizationForm
        {
            FormC = 1,
            FormD = 2,
            FormKC = 5,
            FormKD = 6,
        }
    }

    namespace Resources
    {
        class FastResourceComparer : System.Collections.IComparer, System.Collections.IEqualityComparer, System.Collections.Generic.IComparer<string>, System.Collections.Generic.IEqualityComparer<string>
        {
            static /*0x0*/ System.Resources.FastResourceComparer Default;

            static /*0x20dfcfc*/ FastResourceComparer();
            static /*0x20df8c4*/ int HashFunction(string key);
            static /*0x20dfb14*/ int CompareOrdinal(string a, byte[] bytes, int bCharLength);
            static /*0x20dfbd4*/ int CompareOrdinal(byte[] bytes, int aCharLength, string b);
            static /*0x20dfc54*/ int CompareOrdinal(byte* a, int byteLen, string b);
            /*0x20dfcf4*/ FastResourceComparer();
            /*0x20df82c*/ int GetHashCode(object key);
            /*0x20df93c*/ int GetHashCode(string key);
            /*0x20df99c*/ int Compare(object a, object b);
            /*0x20dfa48*/ int Compare(string a, string b);
            /*0x20dfa58*/ bool Equals(string a, string b);
            /*0x20dfa68*/ bool Equals(object a, object b);
        }

        class FileBasedResourceGroveler : System.Resources.IResourceGroveler
        {
            /*0x10*/ System.Resources.ResourceManager.ResourceManagerMediator _mediator;

            /*0x20e1678*/ FileBasedResourceGroveler(System.Resources.ResourceManager.ResourceManagerMediator mediator);
            /*0x20e16a4*/ System.Resources.ResourceSet GrovelForResourceSet(System.Globalization.CultureInfo culture, System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> localResourceSets, bool tryParents, bool createIfNotExists, ref System.Threading.StackCrawlMark stackMark);
            /*0x20e1a04*/ string FindResourceFile(System.Globalization.CultureInfo culture, string fileName);
            /*0x20e1ad0*/ System.Resources.ResourceSet CreateResourceSet(string file);
        }

        interface IResourceGroveler
        {
            System.Resources.ResourceSet GrovelForResourceSet(System.Globalization.CultureInfo culture, System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> localResourceSets, bool tryParents, bool createIfNotExists, ref System.Threading.StackCrawlMark stackMark);
        }

        interface IResourceReader : System.Collections.IEnumerable, System.IDisposable
        {
            void Close();
            System.Collections.IDictionaryEnumerator GetEnumerator();
        }

        class ManifestBasedResourceGroveler : System.Resources.IResourceGroveler
        {
            /*0x10*/ System.Resources.ResourceManager.ResourceManagerMediator _mediator;

            static /*0x1c10ffc*/ System.Globalization.CultureInfo GetNeutralResourcesLanguage(System.Reflection.Assembly a, ref System.Resources.UltimateResourceFallbackLocation fallbackLocation);
            static /*0x1c11374*/ bool GetNeutralResourcesLanguageAttribute(System.Reflection.Assembly assembly, ref string cultureName, ref short fallbackLocation);
            /*0x1c0f8d8*/ ManifestBasedResourceGroveler(System.Resources.ResourceManager.ResourceManagerMediator mediator);
            /*0x1c0f904*/ System.Resources.ResourceSet GrovelForResourceSet(System.Globalization.CultureInfo culture, System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> localResourceSets, bool tryParents, bool createIfNotExists, ref System.Threading.StackCrawlMark stackMark);
            /*0x1c0fba0*/ System.Globalization.CultureInfo UltimateFallbackFixup(System.Globalization.CultureInfo lookForCulture);
            /*0x1c102f8*/ System.Resources.ResourceSet CreateResourceSet(System.IO.Stream store, System.Reflection.Assembly assembly);
            /*0x1c10204*/ System.IO.Stream GetManifestResourceStream(System.Reflection.RuntimeAssembly satellite, string fileName, ref System.Threading.StackCrawlMark stackMark);
            /*0x1c11578*/ System.IO.Stream CaseInsensitiveManifestResourceStreamLookup(System.Reflection.RuntimeAssembly satellite, string name);
            /*0x1c0fccc*/ System.Reflection.RuntimeAssembly GetSatelliteAssembly(System.Globalization.CultureInfo lookForCulture, ref System.Threading.StackCrawlMark stackMark);
            /*0x1c113ec*/ bool CanUseDefaultResourceClasses(string readerTypeName, string resSetTypeName);
            /*0x1c11968*/ string GetSatelliteAssemblyName();
            /*0x1c0fe68*/ void HandleSatelliteMissing();
            /*0x1c10cc0*/ void HandleResourceStreamMissing(string fileName);
        }

        class MissingManifestResourceException : System.SystemException
        {
            /*0x1c1ecc0*/ MissingManifestResourceException();
            /*0x1c11934*/ MissingManifestResourceException(string message);
            /*0x1c1ed30*/ MissingManifestResourceException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class MissingSatelliteAssemblyException : System.SystemException
        {
            /*0x88*/ string _cultureName;

            /*0x1c1f114*/ MissingSatelliteAssemblyException();
            /*0x1c119d4*/ MissingSatelliteAssemblyException(string message, string cultureName);
            /*0x1c1f184*/ MissingSatelliteAssemblyException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class NeutralResourcesLanguageAttribute : System.Attribute
        {
            /*0x10*/ string _culture;
            /*0x18*/ System.Resources.UltimateResourceFallbackLocation _fallbackLoc;

            /*0x22a66e8*/ NeutralResourcesLanguageAttribute(string cultureName);
            /*0x22a6764*/ string get_CultureName();
            /*0x22a676c*/ System.Resources.UltimateResourceFallbackLocation get_Location();
        }

        class ResourceFallbackManager : System.Collections.Generic.IEnumerable<System.Globalization.CultureInfo>, System.Collections.IEnumerable
        {
            /*0x10*/ System.Globalization.CultureInfo m_startingCulture;
            /*0x18*/ System.Globalization.CultureInfo m_neutralResourcesCulture;
            /*0x20*/ bool m_useParents;

            /*0x1999090*/ ResourceFallbackManager(System.Globalization.CultureInfo startingCulture, System.Globalization.CultureInfo neutralResourcesCulture, bool useParents);
            /*0x1999130*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x1999134*/ System.Collections.Generic.IEnumerator<System.Globalization.CultureInfo> GetEnumerator();

            class <GetEnumerator>d__5 : System.Collections.Generic.IEnumerator<System.Globalization.CultureInfo>, System.IDisposable, System.Collections.IEnumerator
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Globalization.CultureInfo <>2__current;
                /*0x20*/ System.Resources.ResourceFallbackManager <>4__this;
                /*0x28*/ System.Globalization.CultureInfo <currentCulture>5__1;
                /*0x30*/ bool <reachedNeutralResourcesCulture>5__2;

                /*0x18191cc*/ <GetEnumerator>d__5(int <>1__state);
                /*0x18191f8*/ void System.IDisposable.Dispose();
                /*0x18191fc*/ bool MoveNext();
                /*0x18193dc*/ System.Globalization.CultureInfo System.Collections.Generic.IEnumerator<System.Globalization.CultureInfo>.get_Current();
                /*0x18193e4*/ void System.Collections.IEnumerator.Reset();
                /*0x1819424*/ object System.Collections.IEnumerator.get_Current();
            }
        }

        class ResourceManager
        {
            static /*0x0*/ int MagicNumber;
            static /*0x4*/ int HeaderVersionNumber;
            static /*0x8*/ System.Type _minResourceSet;
            static /*0x10*/ string ResReaderTypeName;
            static /*0x18*/ string ResSetTypeName;
            static /*0x20*/ string MscorlibName;
            static /*0x28*/ int DEBUG;
            /*0x10*/ string BaseNameField;
            /*0x18*/ System.Collections.Hashtable ResourceSets;
            /*0x20*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> _resourceSets;
            /*0x28*/ string moduleDir;
            /*0x30*/ System.Reflection.Assembly MainAssembly;
            /*0x38*/ System.Type _locationInfo;
            /*0x40*/ System.Type _userResourceSet;
            /*0x48*/ System.Globalization.CultureInfo _neutralResourcesCulture;
            /*0x50*/ System.Resources.ResourceManager.CultureNameResourceSetPair _lastUsedResourceCache;
            /*0x58*/ bool _ignoreCase;
            /*0x59*/ bool UseManifest;
            /*0x5a*/ bool UseSatelliteAssem;
            /*0x5c*/ System.Resources.UltimateResourceFallbackLocation _fallbackLoc;
            /*0x60*/ System.Version _satelliteContractVersion;
            /*0x68*/ bool _lookedForSatelliteContractVersion;
            /*0x70*/ System.Reflection.Assembly _callingAssembly;
            /*0x78*/ System.Reflection.RuntimeAssembly m_callingAssembly;
            /*0x80*/ System.Resources.IResourceGroveler resourceGroveler;

            static /*0x199b748*/ ResourceManager();
            static /*0x199a694*/ void AddResourceSet(System.Collections.Generic.Dictionary<string, System.Resources.ResourceSet> localResourceSets, string cultureName, ref System.Resources.ResourceSet rs);
            static /*0x199a858*/ System.Version GetSatelliteContractVersion(System.Reflection.Assembly a);
            static /*0x199b004*/ bool CompareNames(string asmTypeName1, string typeName2, System.Reflection.AssemblyName asmName2);
            /*0x1999254*/ ResourceManager();
            /*0x1999328*/ ResourceManager(System.Type resourceSource);
            /*0x19991d0*/ void Init();
            /*0x19996f0*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x1999700*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x19998c0*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x19995a0*/ void CommonAssemblyInit();
            /*0x199992c*/ string get_BaseName();
            /*0x1999934*/ System.Resources.UltimateResourceFallbackLocation get_FallbackLocation();
            /*0x199993c*/ string GetResourceFileName(System.Globalization.CultureInfo culture);
            /*0x1999a84*/ System.Resources.ResourceSet GetFirstResourceSet(System.Globalization.CultureInfo culture);
            /*0x1999e60*/ System.Resources.ResourceSet InternalGetResourceSet(System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents);
            /*0x1999e90*/ System.Resources.ResourceSet InternalGetResourceSet(System.Globalization.CultureInfo requestedCulture, bool createIfNotExists, bool tryParents, ref System.Threading.StackCrawlMark stackMark);
            /*0x199959c*/ void SetAppXConfiguration();
            /*0x199b278*/ string GetString(string name);
            /*0x199b288*/ string GetString(string name, System.Globalization.CultureInfo culture);

            class CultureNameResourceSetPair
            {
                /*0x10*/ string lastCultureName;
                /*0x18*/ System.Resources.ResourceSet lastResourceSet;

                /*0x181942c*/ CultureNameResourceSetPair();
            }

            class ResourceManagerMediator
            {
                /*0x10*/ System.Resources.ResourceManager _rm;

                /*0x1819434*/ ResourceManagerMediator(System.Resources.ResourceManager rm);
                /*0x18194ac*/ string get_ModuleDir();
                /*0x18194c8*/ System.Type get_LocationInfo();
                /*0x18194e4*/ System.Type get_UserResourceSet();
                /*0x1819500*/ string get_BaseNameField();
                /*0x181951c*/ System.Globalization.CultureInfo get_NeutralResourcesCulture();
                /*0x1819538*/ string GetResourceFileName(System.Globalization.CultureInfo culture);
                /*0x1819558*/ bool get_LookedForSatelliteContractVersion();
                /*0x1819574*/ void set_LookedForSatelliteContractVersion(bool value);
                /*0x1819594*/ System.Version get_SatelliteContractVersion();
                /*0x18195b0*/ void set_SatelliteContractVersion(System.Version value);
                /*0x18195cc*/ System.Version ObtainSatelliteContractVersion(System.Reflection.Assembly a);
                /*0x1819630*/ System.Resources.UltimateResourceFallbackLocation get_FallbackLoc();
                /*0x181964c*/ System.Reflection.RuntimeAssembly get_CallingAssembly();
                /*0x1819668*/ System.Reflection.RuntimeAssembly get_MainAssembly();
                /*0x18196f0*/ string get_BaseName();
            }
        }

        struct ResourceLocator
        {
            /*0x10*/ object _value;
            /*0x18*/ int _dataPos;

            static /*0x19991c4*/ bool CanCache(System.Resources.ResourceTypeCode value);
            /*0xace650*/ ResourceLocator(int dataPos, object value);
            /*0xace65c*/ int get_DataPosition();
            /*0xace664*/ object get_Value();
            /*0xace66c*/ void set_Value(object value);
        }

        class ResourceReader : System.Resources.IResourceReader, System.Collections.IEnumerable, System.IDisposable
        {
            /*0x10*/ System.IO.BinaryReader _store;
            /*0x18*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> _resCache;
            /*0x20*/ long _nameSectionOffset;
            /*0x28*/ long _dataSectionOffset;
            /*0x30*/ int[] _nameHashes;
            /*0x38*/ int* _nameHashesPtr;
            /*0x40*/ int[] _namePositions;
            /*0x48*/ int* _namePositionsPtr;
            /*0x50*/ System.RuntimeType[] _typeTable;
            /*0x58*/ int[] _typeNamePositions;
            /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _objFormatter;
            /*0x68*/ int _numResources;
            /*0x70*/ System.IO.UnmanagedMemoryStream _ums;
            /*0x78*/ int _version;

            static /*0x199bc04*/ int ReadUnalignedI4(int* p);
            /*0x199b8d0*/ ResourceReader(System.IO.Stream stream, System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> resCache);
            /*0x199bb28*/ void Close();
            /*0x199bbbc*/ void Dispose();
            /*0x199bb70*/ void Dispose(bool disposing);
            /*0x199bc0c*/ void SkipString();
            /*0x199bcc0*/ int GetNameHash(int index);
            /*0x199bd10*/ int GetNamePosition(int index);
            /*0x199be3c*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x199be40*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x199bef8*/ System.Resources.ResourceReader.ResourceEnumerator GetEnumeratorInternal();
            /*0x199bf58*/ int FindPosForResource(string name);
            /*0x199c338*/ bool CompareStringEqualsName(string name);
            /*0x199c560*/ string AllocateStringForNameIndex(int index, ref int dataOffset);
            /*0x199ce44*/ object GetValueForNameIndex(int index);
            /*0x199d2f8*/ string LoadString(int pos);
            /*0x199d964*/ object LoadObject(int pos);
            /*0x199d99c*/ object LoadObject(int pos, ref System.Resources.ResourceTypeCode typeCode);
            /*0x199d0f0*/ object LoadObjectV1(int pos);
            /*0x199da38*/ object _LoadObjectV1(int pos);
            /*0x199d1f4*/ object LoadObjectV2(int pos, ref System.Resources.ResourceTypeCode typeCode);
            /*0x199e4d0*/ object _LoadObjectV2(int pos, ref System.Resources.ResourceTypeCode typeCode);
            /*0x199e2ec*/ object DeserializeObject(int typeIndex);
            /*0x199b9b8*/ void ReadResources();
            /*0x199ebf8*/ void _ReadResources();
            /*0x199d5c0*/ System.RuntimeType FindType(int typeIndex);

            class ResourceEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
            {
                /*0x10*/ System.Resources.ResourceReader _reader;
                /*0x18*/ bool _currentIsValid;
                /*0x1c*/ int _currentName;
                /*0x20*/ int _dataPosition;

                /*0x1819710*/ ResourceEnumerator(System.Resources.ResourceReader reader);
                /*0x1819748*/ bool MoveNext();
                /*0x18197a4*/ object get_Key();
                /*0x181985c*/ object get_Current();
                /*0x1819bac*/ int get_DataPosition();
                /*0x18198c4*/ System.Collections.DictionaryEntry get_Entry();
                /*0x1819bb4*/ object get_Value();
                /*0x1819c64*/ void Reset();
            }
        }

        class ResourceSet : System.IDisposable, System.Collections.IEnumerable
        {
            /*0x10*/ System.Resources.IResourceReader Reader;
            /*0x18*/ System.Collections.Hashtable Table;
            /*0x20*/ System.Collections.Hashtable _caseInsensitiveTable;

            /*0x199f2d8*/ ResourceSet();
            /*0x199f35c*/ ResourceSet(bool junk);
            /*0x199f300*/ void CommonInit();
            /*0x199f364*/ void Dispose(bool disposing);
            /*0x199a848*/ void Dispose();
            /*0x199f42c*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x199f4a8*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x199f430*/ System.Collections.IDictionaryEnumerator GetEnumeratorHelper();
            /*0x199f4ac*/ string GetString(string name);
            /*0x199f6e4*/ string GetString(string name, bool ignoreCase);
            /*0x199fbe4*/ object GetObject(string name);
            /*0x199fbe8*/ object GetObject(string name, bool ignoreCase);
            /*0x199f618*/ object GetObjectInternal(string name);
            /*0x199f8e4*/ object GetCaseInsensitiveObjectInternal(string name);
        }

        enum ResourceTypeCode
        {
            Null = 0,
            String = 1,
            Boolean = 2,
            Char = 3,
            Byte = 4,
            SByte = 5,
            Int16 = 6,
            UInt16 = 7,
            Int32 = 8,
            UInt32 = 9,
            Int64 = 10,
            UInt64 = 11,
            Single = 12,
            Double = 13,
            Decimal = 14,
            DateTime = 15,
            TimeSpan = 16,
            LastPrimitive = 16,
            ByteArray = 32,
            Stream = 33,
            StartOfUserTypes = 64,
        }

        class RuntimeResourceSet : System.Resources.ResourceSet, System.Collections.IEnumerable
        {
            static int Version = 2;
            /*0x28*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> _resCache;
            /*0x30*/ System.Resources.ResourceReader _defaultReader;
            /*0x38*/ System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> _caseInsensitiveTable;
            /*0x40*/ bool _haveReadFromReader;

            /*0x21556d8*/ RuntimeResourceSet(string fileName);
            /*0x2155814*/ RuntimeResourceSet(System.IO.Stream stream);
            /*0x2155914*/ void Dispose(bool disposing);
            /*0x2155a38*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x2155b4c*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x2155a3c*/ System.Collections.IDictionaryEnumerator GetEnumeratorHelper();
            /*0x2155b50*/ string GetString(string key);
            /*0x215658c*/ string GetString(string key, bool ignoreCase);
            /*0x215660c*/ object GetObject(string key);
            /*0x2156618*/ object GetObject(string key, bool ignoreCase);
            /*0x2155bcc*/ object GetObject(string key, bool ignoreCase, bool isString);
            /*0x2156624*/ object ResolveResourceLocator(System.Resources.ResourceLocator resLocation, string key, System.Collections.Generic.Dictionary<string, System.Resources.ResourceLocator> copyOfCache, bool keyInWrongCase);
        }

        class SatelliteContractVersionAttribute : System.Attribute
        {
            /*0x10*/ string _version;

            /*0x204e22c*/ SatelliteContractVersionAttribute(string version);
            /*0x204e2a4*/ string get_Version();
        }

        enum UltimateResourceFallbackLocation
        {
            MainAssembly = 0,
            Satellite = 1,
        }
    }

    namespace Reflection
    {
        class CustomAttributeExtensions
        {
            static /*0x2523f84*/ System.Attribute GetCustomAttribute(System.Reflection.Assembly element, System.Type attributeType);
            static /*0x2523f8c*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType);
            static T GetCustomAttribute<T>(System.Reflection.Assembly element);
            static T GetCustomAttribute<T>(System.Reflection.MemberInfo element);
            static /*0x2523f94*/ System.Attribute GetCustomAttribute(System.Reflection.MemberInfo element, System.Type attributeType, bool inherit);
            static T GetCustomAttribute<T>(System.Reflection.MemberInfo element, bool inherit);
            static /*0x2523fa0*/ System.Collections.Generic.IEnumerable<System.Attribute> GetCustomAttributes(System.Reflection.MemberInfo element, System.Type attributeType);
            static System.Collections.Generic.IEnumerable<T> GetCustomAttributes<T>(System.Reflection.MemberInfo element);
        }

        class RuntimeReflectionExtensions
        {
            static /*0x2155404*/ void CheckAndThrow(System.Type t);
            static /*0x2155550*/ System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo> GetRuntimeProperties(System.Type type);
            static /*0x215558c*/ System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> GetRuntimeMethods(System.Type type);
            static /*0x21555c8*/ System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo> GetRuntimeFields(System.Type type);
            static /*0x2155604*/ System.Reflection.PropertyInfo GetRuntimeProperty(System.Type type, string name);
            static /*0x215563c*/ System.Reflection.MethodInfo GetRuntimeMethod(System.Type type, string name, System.Type[] parameters);
            static /*0x2155684*/ System.Reflection.FieldInfo GetRuntimeField(System.Type type, string name);
        }

        class AmbiguousMatchException : System.SystemException
        {
            /*0x1c8a430*/ AmbiguousMatchException();
            /*0x1c8a4a0*/ AmbiguousMatchException(string message);
            /*0x1c8a4d4*/ AmbiguousMatchException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class AssemblyCopyrightAttribute : System.Attribute
        {
            /*0x10*/ string m_copyright;

            /*0x1c94f14*/ AssemblyCopyrightAttribute(string copyright);
        }

        class AssemblyTrademarkAttribute : System.Attribute
        {
            /*0x10*/ string m_trademark;

            /*0x1c962b4*/ AssemblyTrademarkAttribute(string trademark);
        }

        class AssemblyProductAttribute : System.Attribute
        {
            /*0x10*/ string m_product;

            /*0x1c9625c*/ AssemblyProductAttribute(string product);
        }

        class AssemblyCompanyAttribute : System.Attribute
        {
            /*0x10*/ string m_company;

            /*0x1c94ebc*/ AssemblyCompanyAttribute(string company);
        }

        class AssemblyDescriptionAttribute : System.Attribute
        {
            /*0x10*/ string m_description;

            /*0x1c94f9c*/ AssemblyDescriptionAttribute(string description);
        }

        class AssemblyTitleAttribute : System.Attribute
        {
            /*0x10*/ string m_title;

            /*0x1c96288*/ AssemblyTitleAttribute(string title);
        }

        class AssemblyConfigurationAttribute : System.Attribute
        {
            /*0x10*/ string m_configuration;

            /*0x1c94ee8*/ AssemblyConfigurationAttribute(string configuration);
        }

        class AssemblyDefaultAliasAttribute : System.Attribute
        {
            /*0x10*/ string m_defaultAlias;

            /*0x1c94f40*/ AssemblyDefaultAliasAttribute(string defaultAlias);
        }

        class AssemblyInformationalVersionAttribute : System.Attribute
        {
            /*0x10*/ string m_informationalVersion;

            /*0x1c9503c*/ AssemblyInformationalVersionAttribute(string informationalVersion);
        }

        class AssemblyFileVersionAttribute : System.Attribute
        {
            /*0x10*/ string _version;

            /*0x1c94fc8*/ AssemblyFileVersionAttribute(string version);
        }

        class AssemblyKeyFileAttribute : System.Attribute
        {
            /*0x10*/ string m_keyFile;

            /*0x1c95068*/ AssemblyKeyFileAttribute(string keyFile);
        }

        class AssemblyDelaySignAttribute : System.Attribute
        {
            /*0x10*/ bool m_delaySign;

            /*0x1c94f6c*/ AssemblyDelaySignAttribute(bool delaySign);
        }

        class AssemblyMetadataAttribute : System.Attribute
        {
            /*0x10*/ string m_key;
            /*0x18*/ string m_value;

            /*0x1c95130*/ AssemblyMetadataAttribute(string key, string value);
        }

        enum AssemblyNameFlags
        {
            None = 0,
            PublicKey = 1,
            EnableJITcompileOptimizer = 16384,
            EnableJITcompileTracking = 32768,
            Retargetable = 256,
        }

        enum AssemblyContentType
        {
            Default = 0,
            WindowsRuntime = 1,
        }

        enum ProcessorArchitecture
        {
            None = 0,
            MSIL = 1,
            X86 = 2,
            IA64 = 3,
            Amd64 = 4,
            Arm = 5,
        }

        class Binder
        {
            /*0x1c57d74*/ Binder();
            System.Reflection.MethodBase BindToMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, ref object state);
            System.Reflection.FieldInfo BindToField(System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);
            System.Reflection.MethodBase SelectMethod(System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
            System.Reflection.PropertyInfo SelectProperty(System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, System.Type returnType, System.Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
            object ChangeType(object value, System.Type type, System.Globalization.CultureInfo culture);
            void ReorderArgumentArray(ref object[] args, object state);
        }

        enum BindingFlags
        {
            Default = 0,
            IgnoreCase = 1,
            DeclaredOnly = 2,
            Instance = 4,
            Static = 8,
            Public = 16,
            NonPublic = 32,
            FlattenHierarchy = 64,
            InvokeMethod = 256,
            CreateInstance = 512,
            GetField = 1024,
            SetField = 2048,
            GetProperty = 4096,
            SetProperty = 8192,
            PutDispProperty = 16384,
            PutRefDispProperty = 32768,
            ExactBinding = 65536,
            SuppressChangeType = 131072,
            OptionalParamBinding = 262144,
            IgnoreReturn = 16777216,
        }

        enum CallingConventions
        {
            Standard = 1,
            VarArgs = 2,
            Any = 3,
            HasThis = 32,
            ExplicitThis = 64,
        }

        class DefaultMemberAttribute : System.Attribute
        {
            /*0x10*/ string m_memberName;

            /*0x203e1ec*/ DefaultMemberAttribute(string memberName);
            /*0x203e218*/ string get_MemberName();
        }

        enum EventAttributes
        {
            None = 0,
            SpecialName = 512,
            ReservedMask = 1024,
            RTSpecialName = 1024,
        }

        enum FieldAttributes
        {
            FieldAccessMask = 7,
            PrivateScope = 0,
            Private = 1,
            FamANDAssem = 2,
            Assembly = 3,
            Family = 4,
            FamORAssem = 5,
            Public = 6,
            Static = 16,
            InitOnly = 32,
            Literal = 64,
            NotSerialized = 128,
            SpecialName = 512,
            PinvokeImpl = 8192,
            ReservedMask = 38144,
            RTSpecialName = 1024,
            HasFieldMarshal = 4096,
            HasDefault = 32768,
            HasFieldRVA = 256,
        }

        enum GenericParameterAttributes
        {
            None = 0,
            VarianceMask = 3,
            Covariant = 1,
            Contravariant = 2,
            SpecialConstraintMask = 28,
            ReferenceTypeConstraint = 4,
            NotNullableValueTypeConstraint = 8,
            DefaultConstructorConstraint = 16,
        }

        interface ICustomAttributeProvider
        {
            object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            object[] GetCustomAttributes(bool inherit);
            bool IsDefined(System.Type attributeType, bool inherit);
        }

        class IntrospectionExtensions
        {
            static /*0x1a89c48*/ System.Reflection.TypeInfo GetTypeInfo(System.Type type);
        }

        class InvalidFilterCriteriaException : System.ApplicationException
        {
            /*0x1a89ef8*/ InvalidFilterCriteriaException();
            /*0x1a89f68*/ InvalidFilterCriteriaException(string message);
            /*0x1a89f9c*/ InvalidFilterCriteriaException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        interface IReflectableType
        {
            System.Reflection.TypeInfo GetTypeInfo();
        }

        class ManifestResourceInfo
        {
            /*0x10*/ System.Reflection.Assembly _containingAssembly;
            /*0x18*/ string _containingFileName;
            /*0x20*/ System.Reflection.ResourceLocation _resourceLocation;

            /*0x1c11a14*/ ManifestResourceInfo(System.Reflection.Assembly containingAssembly, string containingFileName, System.Reflection.ResourceLocation resourceLocation);
            /*0x1c11a54*/ System.Reflection.Assembly get_ReferencedAssembly();
            /*0x1c11a5c*/ string get_FileName();
            /*0x1c11a64*/ System.Reflection.ResourceLocation get_ResourceLocation();
        }

        enum ResourceLocation
        {
            Embedded = 1,
            ContainedInAnotherAssembly = 2,
            ContainedInManifestFile = 4,
        }

        enum PInvokeAttributes
        {
            NoMangle = 1,
            CharSetMask = 6,
            CharSetNotSpec = 0,
            CharSetAnsi = 2,
            CharSetUnicode = 4,
            CharSetAuto = 6,
            BestFitUseAssem = 0,
            BestFitEnabled = 16,
            BestFitDisabled = 32,
            BestFitMask = 48,
            ThrowOnUnmappableCharUseAssem = 0,
            ThrowOnUnmappableCharEnabled = 4096,
            ThrowOnUnmappableCharDisabled = 8192,
            ThrowOnUnmappableCharMask = 12288,
            SupportsLastError = 64,
            CallConvMask = 1792,
            CallConvWinapi = 256,
            CallConvCdecl = 512,
            CallConvStdcall = 768,
            CallConvThiscall = 1024,
            CallConvFastcall = 1280,
            MaxValue = 65535,
        }

        class MemberFilter : System.MulticastDelegate
        {
            /*0x1c14c3c*/ MemberFilter(object object, nint method);
            /*0x1c14c9c*/ bool Invoke(System.Reflection.MemberInfo m, object filterCriteria);
            /*0x1c1503c*/ System.IAsyncResult BeginInvoke(System.Reflection.MemberInfo m, object filterCriteria, System.AsyncCallback callback, object object);
            /*0x1c1506c*/ bool EndInvoke(System.IAsyncResult result);
        }

        class MemberInfo : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo
        {
            static /*0x1c152a4*/ bool op_Equality(System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);
            static /*0x1c1594c*/ bool op_Inequality(System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);
            /*0x1c151a4*/ MemberInfo();
            System.Reflection.MemberTypes get_MemberType();
            string get_Name();
            System.Type get_DeclaringType();
            System.Type get_ReflectedType();
            object[] GetCustomAttributes(bool inherit);
            object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            bool IsDefined(System.Type attributeType, bool inherit);
            /*0x1c151ac*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData();
            /*0x1c151ec*/ int get_MetadataToken();
            /*0x1c151f0*/ System.Reflection.Module get_Module();
            /*0x1c15968*/ bool Equals(object obj);
            /*0x1c15970*/ int GetHashCode();
        }

        class MemberInfoSerializationHolder : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IObjectReference
        {
            /*0x10*/ string m_memberName;
            /*0x18*/ System.RuntimeType m_reflectedType;
            /*0x20*/ string m_signature;
            /*0x28*/ string m_signature2;
            /*0x30*/ System.Reflection.MemberTypes m_memberType;
            /*0x38*/ System.Runtime.Serialization.SerializationInfo m_info;

            static /*0x1c15978*/ void GetSerializationInfo(System.Runtime.Serialization.SerializationInfo info, string name, System.RuntimeType reflectedClass, string signature, System.Reflection.MemberTypes type);
            static /*0x1c15988*/ void GetSerializationInfo(System.Runtime.Serialization.SerializationInfo info, string name, System.RuntimeType reflectedClass, string signature, string signature2, System.Reflection.MemberTypes type, System.Type[] genericArguments);
            /*0x1c15c94*/ MemberInfoSerializationHolder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1c15fa8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1c16004*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
        }

        enum MemberTypes
        {
            Constructor = 1,
            Event = 2,
            Field = 4,
            Method = 8,
            Property = 16,
            TypeInfo = 32,
            Custom = 64,
            NestedType = 128,
            All = 191,
        }

        enum MethodAttributes
        {
            MemberAccessMask = 7,
            PrivateScope = 0,
            Private = 1,
            FamANDAssem = 2,
            Assembly = 3,
            Family = 4,
            FamORAssem = 5,
            Public = 6,
            Static = 16,
            Final = 32,
            Virtual = 64,
            HideBySig = 128,
            CheckAccessOnOverride = 512,
            VtableLayoutMask = 256,
            ReuseSlot = 0,
            NewSlot = 256,
            Abstract = 1024,
            SpecialName = 2048,
            PinvokeImpl = 8192,
            UnmanagedExport = 8,
            RTSpecialName = 4096,
            ReservedMask = 53248,
            HasSecurity = 16384,
            RequireSecObject = 32768,
        }

        class MethodBase : System.Reflection.MemberInfo, System.Runtime.InteropServices._MethodBase
        {
            static /*0x1c1a2d4*/ System.Reflection.MethodBase GetMethodFromHandle(System.RuntimeMethodHandle handle);
            static /*0x1c1a504*/ System.Reflection.MethodBase GetCurrentMethod();
            static /*0x1c1572c*/ bool op_Equality(System.Reflection.MethodBase left, System.Reflection.MethodBase right);
            static /*0x1c15710*/ bool op_Inequality(System.Reflection.MethodBase left, System.Reflection.MethodBase right);
            static /*0x1c1a800*/ string ConstructParameters(System.Type[] parameterTypes, System.Reflection.CallingConventions callingConvention, bool serialization);
            static /*0x1c1ac94*/ System.Reflection.MethodBase GetMethodFromHandleNoGenericCheck(System.RuntimeMethodHandle handle);
            static /*0x1c1ace4*/ System.Reflection.MethodBase GetMethodFromHandleNoGenericCheck(System.RuntimeMethodHandle handle, System.RuntimeTypeHandle reflectedType);
            static /*0x1c1a4fc*/ System.Reflection.MethodBase GetMethodFromHandleInternalType(nint method_handle, nint type_handle);
            static /*0x1c1acdc*/ System.Reflection.MethodBase GetMethodFromHandleInternalType_native(nint method_handle, nint type_handle, bool genericCheck);
            /*0x1c1a558*/ MethodBase();
            /*0x1c1a57c*/ bool Equals(object obj);
            /*0x1c1a584*/ int GetHashCode();
            /*0x1c1a58c*/ System.Reflection.ParameterInfo[] GetParametersNoCopy();
            System.Reflection.ParameterInfo[] GetParameters();
            System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
            System.RuntimeMethodHandle get_MethodHandle();
            System.Reflection.MethodAttributes get_Attributes();
            object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x1c1a59c*/ System.Reflection.CallingConventions get_CallingConvention();
            /*0x1c1a5a4*/ System.Type[] GetGenericArguments();
            /*0x1c1a600*/ bool get_IsGenericMethodDefinition();
            /*0x1c1a608*/ bool get_ContainsGenericParameters();
            /*0x1c1a610*/ bool get_IsGenericMethod();
            /*0x1c1a618*/ bool get_IsSecurityCritical();
            /*0x1c1a658*/ object Invoke(object obj, object[] parameters);
            /*0x1c1a678*/ bool get_IsPublic();
            /*0x1c1a6a4*/ bool get_IsStatic();
            /*0x1c1a6c8*/ bool get_IsFinal();
            /*0x1c1a6ec*/ bool get_IsVirtual();
            /*0x1c1a710*/ bool get_IsAbstract();
            /*0x1c1a734*/ bool get_IsSpecialName();
            /*0x1c1a758*/ bool get_IsConstructor();
            /*0x1c1aa1c*/ string FormatNameAndSig(bool serialization);
            /*0x1c1ab44*/ System.Type[] GetParameterTypes();
            /*0x1c1ac58*/ System.Reflection.ParameterInfo[] GetParametersInternal();
            /*0x1c1ac68*/ int GetParametersCount();
        }

        enum ExceptionHandlingClauseOptions
        {
            Clause = 0,
            Filter = 1,
            Finally = 2,
            Fault = 4,
        }

        enum MethodImplAttributes
        {
            CodeTypeMask = 3,
            IL = 0,
            Native = 1,
            OPTIL = 2,
            Runtime = 3,
            ManagedMask = 4,
            Unmanaged = 4,
            Managed = 0,
            ForwardRef = 16,
            PreserveSig = 128,
            InternalCall = 4096,
            Synchronized = 32,
            NoInlining = 8,
            AggressiveInlining = 256,
            NoOptimization = 64,
            MaxMethodImplVal = 65535,
        }

        class MethodInfo : System.Reflection.MethodBase, System.Runtime.InteropServices._MethodInfo
        {
            static /*0x1c16838*/ bool op_Equality(System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);
            static /*0x1c1a560*/ bool op_Inequality(System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);
            /*0x1c1cb88*/ MethodInfo();
            /*0x1c1cb90*/ bool Equals(object obj);
            /*0x1c1cb98*/ int GetHashCode();
            /*0x1c1cba0*/ System.Reflection.MemberTypes get_MemberType();
            /*0x1c1cba8*/ System.Type get_ReturnType();
            System.Reflection.MethodInfo GetBaseDefinition();
            /*0x1c1cbe8*/ System.Type[] GetGenericArguments();
            /*0x1c1cc44*/ System.Reflection.MethodInfo GetGenericMethodDefinition();
            /*0x1c1cca0*/ System.Reflection.MethodInfo MakeGenericMethod(System.Type[] typeArguments);
            /*0x1c1ccfc*/ System.Delegate CreateDelegate(System.Type delegateType);
            /*0x1c1cd58*/ System.Delegate CreateDelegate(System.Type delegateType, object target);
            /*0x1c1cdb4*/ System.Reflection.MethodInfo GetBaseMethod();
        }

        class Missing : System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Reflection.Missing Value;

            static /*0x1c1e674*/ Missing();
            /*0x1c1e600*/ Missing();
            /*0x1c1e608*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum ParameterAttributes
        {
            None = 0,
            In = 1,
            Out = 2,
            Lcid = 4,
            Retval = 8,
            Optional = 16,
            ReservedMask = 61440,
            HasDefault = 4096,
            HasFieldMarshal = 8192,
            Reserved3 = 16384,
            Reserved4 = 32768,
        }

        struct ParameterModifier
        {
            /*0x10*/ bool[] _byRef;
        }

        class Pointer : System.Runtime.Serialization.ISerializable
        {
            /*0x10*/ void* _ptr;
            /*0x18*/ System.RuntimeType _ptrType;

            static /*0x252fbd8*/ object Box(void* ptr, System.Type type);
            /*0x252fa38*/ Pointer();
            /*0x252fa40*/ Pointer(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x252fdbc*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum PropertyAttributes
        {
            None = 0,
            SpecialName = 512,
            ReservedMask = 62464,
            RTSpecialName = 1024,
            HasDefault = 4096,
            Reserved2 = 8192,
            Reserved3 = 16384,
            Reserved4 = 32768,
        }

        class ReflectionTypeLoadException : System.SystemException, System.Runtime.Serialization.ISerializable
        {
            /*0x88*/ System.Type[] _classes;
            /*0x90*/ System.Exception[] _exceptions;

            /*0x198eddc*/ ReflectionTypeLoadException();
            /*0x198ee4c*/ ReflectionTypeLoadException(System.Type[] classes, System.Exception[] exceptions);
            /*0x198ee98*/ ReflectionTypeLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x198f03c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class TargetException : System.ApplicationException
        {
            /*0x1e24c6c*/ TargetException();
            /*0x1e24ca0*/ TargetException(string message);
            /*0x1e24cd4*/ TargetException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class TargetInvocationException : System.ApplicationException
        {
            /*0x1e24d5c*/ TargetInvocationException();
            /*0x1e24dcc*/ TargetInvocationException(System.Exception inner);
            /*0x1e24e4c*/ TargetInvocationException(string message, System.Exception inner);
            /*0x1e24e80*/ TargetInvocationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class TargetParameterCountException : System.ApplicationException
        {
            /*0x1e24e88*/ TargetParameterCountException();
            /*0x1e24ef8*/ TargetParameterCountException(string message);
            /*0x1e24f2c*/ TargetParameterCountException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        enum TypeAttributes
        {
            VisibilityMask = 7,
            NotPublic = 0,
            Public = 1,
            NestedPublic = 2,
            NestedPrivate = 3,
            NestedFamily = 4,
            NestedAssembly = 5,
            NestedFamANDAssem = 6,
            NestedFamORAssem = 7,
            LayoutMask = 24,
            AutoLayout = 0,
            SequentialLayout = 8,
            ExplicitLayout = 16,
            ClassSemanticsMask = 32,
            Class = 0,
            Interface = 32,
            Abstract = 128,
            Sealed = 256,
            SpecialName = 1024,
            Import = 4096,
            Serializable = 8192,
            WindowsRuntime = 16384,
            StringFormatMask = 196608,
            AnsiClass = 0,
            UnicodeClass = 65536,
            AutoClass = 131072,
            CustomFormatClass = 196608,
            CustomFormatMask = 12582912,
            BeforeFieldInit = 1048576,
            ReservedMask = 264192,
            RTSpecialName = 2048,
            HasSecurity = 262144,
        }

        class TypeFilter : System.MulticastDelegate
        {
            /*0x207fe5c*/ TypeFilter(object object, nint method);
            /*0x207febc*/ bool Invoke(System.Type m, object filterCriteria);
            /*0x208025c*/ System.IAsyncResult BeginInvoke(System.Type m, object filterCriteria, System.AsyncCallback callback, object object);
            /*0x208028c*/ bool EndInvoke(System.IAsyncResult result);
        }

        class TypeInfo : System.Type, System.Reflection.IReflectableType
        {
            /*0x20803a4*/ TypeInfo();
            /*0x2080408*/ System.Reflection.TypeInfo System.Reflection.IReflectableType.GetTypeInfo();
            /*0x208040c*/ System.Type AsType();
            /*0x2080410*/ bool IsAssignableFrom(System.Reflection.TypeInfo typeInfo);
            /*0x2080588*/ System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> GetDeclaredMethods(string name);
            /*0x2080604*/ System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo> get_DeclaredConstructors();
            /*0x2080618*/ System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo> get_DeclaredFields();
            /*0x208062c*/ System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo> get_DeclaredMethods();
            /*0x2080640*/ System.Collections.Generic.IEnumerable<System.Type> get_ImplementedInterfaces();

            class <GetDeclaredMethods>d__9 : System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<System.Reflection.MethodInfo>, System.IDisposable, System.Collections.IEnumerator
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Reflection.MethodInfo <>2__current;
                /*0x20*/ int <>l__initialThreadId;
                /*0x28*/ System.Reflection.TypeInfo <>4__this;
                /*0x30*/ string name;
                /*0x38*/ string <>3__name;
                /*0x40*/ System.Reflection.MethodInfo[] <>7__wrap1;
                /*0x48*/ int <>7__wrap2;

                /*0x2aa2728*/ <GetDeclaredMethods>d__9(int <>1__state);
                /*0x2aa2760*/ void System.IDisposable.Dispose();
                /*0x2aa2764*/ bool MoveNext();
                /*0x2aa286c*/ System.Reflection.MethodInfo System.Collections.Generic.IEnumerator<System.Reflection.MethodInfo>.get_Current();
                /*0x2aa2874*/ void System.Collections.IEnumerator.Reset();
                /*0x2aa28b4*/ object System.Collections.IEnumerator.get_Current();
                /*0x2aa28bc*/ System.Collections.Generic.IEnumerator<System.Reflection.MethodInfo> System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>.GetEnumerator();
                /*0x2aa296c*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            }
        }

        class Assembly : System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Assembly
        {
            /*0x10*/ nint _mono_assembly;
            /*0x18*/ System.Reflection.Assembly.ResolveEventHolder resolve_event_holder;
            /*0x20*/ object _evidence;
            /*0x28*/ object _minimum;
            /*0x30*/ object _optional;
            /*0x38*/ object _refuse;
            /*0x40*/ object _granted;
            /*0x48*/ object _denied;
            /*0x50*/ bool fromByteArray;
            /*0x58*/ string assemblyName;

            static /*0x1c939f8*/ string GetAotId();
            static /*0x1c94430*/ System.Reflection.Assembly GetAssembly(System.Type type);
            static /*0x1c94a1c*/ System.Reflection.Assembly LoadFrom(string assemblyFile, bool refonly);
            static /*0x1c94a14*/ System.Reflection.Assembly LoadFrom(string assemblyFile);
            static /*0x1c8b3d4*/ System.Reflection.Assembly LoadFrom(string assemblyFile, System.Security.Policy.Evidence securityEvidence);
            static /*0x1c8718c*/ System.Reflection.Assembly Load(string assemblyString);
            static /*0x1c94a24*/ System.Reflection.Assembly Load(System.Reflection.AssemblyName assemblyRef);
            static /*0x1c94a54*/ System.Reflection.Assembly LoadWithPartialName(string partialName);
            static /*0x1c94a68*/ System.Reflection.Assembly load_with_partial_name(string name, System.Security.Policy.Evidence e);
            static /*0x1c94a60*/ System.Reflection.Assembly LoadWithPartialName(string partialName, System.Security.Policy.Evidence securityEvidence);
            static /*0x1c94a6c*/ System.Reflection.Assembly LoadWithPartialName(string partialName, System.Security.Policy.Evidence securityEvidence, bool oldBehavior);
            static /*0x1c94ae8*/ System.Reflection.Assembly GetExecutingAssembly();
            static /*0x1c94b2c*/ System.Reflection.Assembly GetCallingAssembly();
            static /*0x1c94d00*/ System.Exception CreateNIE();
            static /*0x1c8b388*/ bool op_Equality(System.Reflection.Assembly left, System.Reflection.Assembly right);
            static /*0x1c8b3dc*/ bool op_Inequality(System.Reflection.Assembly left, System.Reflection.Assembly right);
            /*0x1c93980*/ Assembly();
            /*0x1c939e8*/ string get_code_base(bool escaped);
            /*0x1c939f0*/ string get_fullname();
            /*0x1c939f4*/ string get_location();
            /*0x1c939fc*/ string GetCodeBase(bool escaped);
            /*0x1c93a04*/ string get_CodeBase();
            /*0x1c93a0c*/ string get_EscapedCodeBase();
            /*0x1c93a14*/ string get_FullName();
            /*0x1c93a20*/ string get_Location();
            /*0x1c93a84*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1c93ac4*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x1c93b40*/ object[] GetCustomAttributes(bool inherit);
            /*0x1c93bb4*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x1c93c30*/ object GetFilesInternal(string name, bool getResourceModules);
            /*0x1c93c38*/ System.IO.FileStream GetFile(string name);
            /*0x1c93d7c*/ nint GetManifestResourceInternal(string name, ref int size, ref System.Reflection.Module module);
            /*0x1c93d80*/ System.IO.Stream GetManifestResourceStream(string name);
            /*0x1c940e0*/ System.IO.Stream GetManifestResourceStream(System.Type type, string name, bool skipSecurityCheck, ref System.Threading.StackCrawlMark stackMark);
            /*0x1c94284*/ System.IO.Stream GetManifestResourceStream(string name, ref System.Threading.StackCrawlMark stackMark, bool skipSecurityCheck);
            /*0x1c94294*/ string GetSimpleName();
            /*0x1c942c4*/ byte[] GetPublicKey();
            /*0x1c942f4*/ System.Version GetVersion();
            /*0x1c94324*/ System.Reflection.AssemblyNameFlags GetFlags();
            /*0x1c94354*/ System.Type[] GetTypes(bool exportedOnly);
            /*0x1c9435c*/ System.Type[] GetTypes();
            /*0x1c94370*/ System.Type GetType(string name, bool throwOnError);
            /*0x1c94388*/ System.Type GetType(string name);
            /*0x1c943a0*/ System.Type InternalGetType(System.Reflection.Module module, string name, bool throwOnError, bool ignoreCase);
            /*0x1c943ac*/ System.Reflection.AssemblyName GetName(bool copiedName);
            /*0x1c943ec*/ System.Reflection.AssemblyName GetName();
            /*0x1c94400*/ string ToString();
            /*0x1c944fc*/ System.Reflection.RuntimeAssembly InternalGetSatelliteAssembly(string name, System.Globalization.CultureInfo culture, System.Version version, bool throwOnFileNotFound, ref System.Threading.StackCrawlMark stackMark);
            /*0x1c94ae0*/ System.Reflection.Module[] GetModulesInternal();
            /*0x1c94ae4*/ string[] GetManifestResourceNames();
            /*0x1c94b30*/ bool GetManifestResourceInfoInternal(string name, System.Reflection.ManifestResourceInfo info);
            /*0x1c94b34*/ System.Reflection.ManifestResourceInfo GetManifestResourceInfo(string resourceName);
            /*0x1c94c3c*/ bool get_ReflectionOnly();
            /*0x1c94c40*/ int GetHashCode();
            /*0x1c94c48*/ bool Equals(object o);
            /*0x1c94d70*/ bool get_IsFullyTrusted();
            /*0x1c94d78*/ System.Type GetType(string name, bool throwOnError, bool ignoreCase);
            /*0x1c94da4*/ System.Reflection.Module GetModule(string name);
            /*0x1c94dd0*/ System.Reflection.Module[] GetModules(bool getResourceModules);

            class ResolveEventHolder
            {
                /*0x22716c8*/ ResolveEventHolder();
            }

            class UnmanagedMemoryStreamForModule : System.IO.UnmanagedMemoryStream
            {
                /*0x68*/ System.Reflection.Module module;

                /*0x22716d0*/ UnmanagedMemoryStreamForModule(byte* pointer, long length, System.Reflection.Module module);
                /*0x22716fc*/ void Dispose(bool disposing);
            }
        }

        class AssemblyName : System.ICloneable, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.InteropServices._AssemblyName
        {
            /*0x10*/ string name;
            /*0x18*/ string codebase;
            /*0x20*/ int major;
            /*0x24*/ int minor;
            /*0x28*/ int build;
            /*0x2c*/ int revision;
            /*0x30*/ System.Globalization.CultureInfo cultureinfo;
            /*0x38*/ System.Reflection.AssemblyNameFlags flags;
            /*0x3c*/ System.Configuration.Assemblies.AssemblyHashAlgorithm hashalg;
            /*0x40*/ System.Reflection.StrongNameKeyPair keypair;
            /*0x48*/ byte[] publicKey;
            /*0x50*/ byte[] keyToken;
            /*0x58*/ System.Configuration.Assemblies.AssemblyVersionCompatibility versioncompat;
            /*0x60*/ System.Version version;
            /*0x68*/ System.Reflection.ProcessorArchitecture processor_architecture;
            /*0x6c*/ System.Reflection.AssemblyContentType contentType;

            static /*0x1c95168*/ bool ParseAssemblyName(nint name, ref Mono.MonoAssemblyName aname, ref bool is_version_definited, ref bool is_token_defined);
            static /*0x1c95d8c*/ void get_public_token(byte* token, byte* pubkey, int len);
            static /*0x1c96190*/ Mono.MonoAssemblyName* GetNativeName(nint assembly_ptr);
            static /*0x1c96194*/ System.Reflection.AssemblyName Create(System.Reflection.Assembly assembly, bool fillCodebase);
            /*0x1c94918*/ AssemblyName();
            /*0x1c9516c*/ AssemblyName(string assemblyName);
            /*0x1c9565c*/ AssemblyName(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc);
            /*0x1c95afc*/ string get_Name();
            /*0x1c95b04*/ void set_Name(string value);
            /*0x1c95b0c*/ string get_CodeBase();
            /*0x1c95b14*/ System.Globalization.CultureInfo get_CultureInfo();
            /*0x1c95b1c*/ void set_CultureInfo(System.Globalization.CultureInfo value);
            /*0x1c95b24*/ System.Reflection.AssemblyNameFlags get_Flags();
            /*0x1c95b2c*/ void set_Flags(System.Reflection.AssemblyNameFlags value);
            /*0x1c8afcc*/ string get_FullName();
            /*0x1c95c24*/ System.Version get_Version();
            /*0x1c94964*/ void set_Version(System.Version value);
            /*0x1c95c2c*/ string ToString();
            /*0x1c95c64*/ byte[] GetPublicKey();
            /*0x1c8b438*/ byte[] GetPublicKeyToken();
            /*0x1c95c6c*/ bool get_IsPublicKeyValid();
            /*0x1c95b34*/ byte[] InternalGetPublicKeyToken();
            /*0x1c95cfc*/ byte[] ComputePublicKeyToken();
            /*0x1c94944*/ void SetPublicKey(byte[] publicKey);
            /*0x1c95d90*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1c960a4*/ object Clone();
            /*0x1c96188*/ void OnDeserialization(object sender);
            /*0x1c953a0*/ void FillName(Mono.MonoAssemblyName* native, string codeBase, bool addVersion, bool addPublickey, bool defaultToken, bool assemblyRef);
        }

        class ConstructorInfo : System.Reflection.MethodBase, System.Runtime.InteropServices._ConstructorInfo
        {
            static /*0x0*/ string ConstructorName;
            static /*0x8*/ string TypeConstructorName;

            static /*0x1622fa4*/ ConstructorInfo();
            static /*0x160ff30*/ bool op_Equality(System.Reflection.ConstructorInfo left, System.Reflection.ConstructorInfo right);
            static /*0x1622f48*/ bool op_Inequality(System.Reflection.ConstructorInfo left, System.Reflection.ConstructorInfo right);
            /*0x1622f24*/ ConstructorInfo();
            /*0x1622f2c*/ System.Reflection.MemberTypes get_MemberType();
            /*0x160ff7c*/ object Invoke(object[] parameters);
            object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x1622f34*/ bool Equals(object obj);
            /*0x1622f40*/ int GetHashCode();
        }

        class CustomAttributeData
        {
            /*0x10*/ System.Reflection.ConstructorInfo ctorInfo;
            /*0x18*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> ctorArgs;
            /*0x20*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> namedArgs;
            /*0x28*/ System.Reflection.CustomAttributeData.LazyCAttrData lazyData;

            static /*0x25226dc*/ void ResolveArgumentsInternal(System.Reflection.ConstructorInfo ctor, System.Reflection.Assembly assembly, nint data, uint data_length, ref object[] ctorArgs, ref object[] namedArgs);
            static /*0x252288c*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.Assembly target);
            static /*0x25228f0*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.MemberInfo target);
            static /*0x2522954*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesInternal(System.RuntimeType target);
            static /*0x25229b8*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.Module target);
            static /*0x2522a1c*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes(System.Reflection.ParameterInfo target);
            static T[] UnboxValues<T>(object[] values);
            /*0x2522624*/ CustomAttributeData();
            /*0x252262c*/ CustomAttributeData(System.Reflection.ConstructorInfo ctorInfo, System.Reflection.Assembly assembly, nint data, uint data_length);
            /*0x25226e0*/ void ResolveArguments();
            /*0x252283c*/ System.Reflection.ConstructorInfo get_Constructor();
            /*0x2522844*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> get_ConstructorArguments();
            /*0x2522868*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> get_NamedArguments();
            /*0x2522a80*/ System.Type get_AttributeType();
            /*0x2522aa0*/ string ToString();
            /*0x2523320*/ bool Equals(object obj);
            /*0x2523bb8*/ int GetHashCode();

            class LazyCAttrData
            {
                /*0x10*/ System.Reflection.Assembly assembly;
                /*0x18*/ nint data;
                /*0x20*/ uint data_length;

                /*0x180f0fc*/ LazyCAttrData();
            }
        }

        class CustomAttributeFormatException : System.FormatException
        {
            /*0x2523fa8*/ CustomAttributeFormatException();
            /*0x2524004*/ CustomAttributeFormatException(string message);
            /*0x252400c*/ CustomAttributeFormatException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        struct CustomAttributeNamedArgument
        {
            /*0x10*/ System.Reflection.CustomAttributeTypedArgument typedArgument;
            /*0x20*/ System.Reflection.MemberInfo memberInfo;

            /*0xae6fa8*/ CustomAttributeNamedArgument(System.Reflection.MemberInfo memberInfo, object value);
            /*0xae6fb0*/ string ToString();
            /*0xae6fb8*/ bool Equals(object obj);
            /*0xae6fc0*/ int GetHashCode();
        }

        struct CustomAttributeTypedArgument
        {
            /*0x10*/ System.Type argumentType;
            /*0x18*/ object value;

            /*0xae7004*/ CustomAttributeTypedArgument(System.Type argumentType, object value);
            /*0xae700c*/ object get_Value();
            /*0xae7014*/ string ToString();
            /*0xae701c*/ bool Equals(object obj);
            /*0xae7024*/ int GetHashCode();
        }

        class EventInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._EventInfo
        {
            /*0x10*/ System.Reflection.EventInfo.AddEventAdapter cached_add_event;

            static /*0x245b7fc*/ bool op_Equality(System.Reflection.EventInfo left, System.Reflection.EventInfo right);
            static /*0x245b848*/ bool op_Inequality(System.Reflection.EventInfo left, System.Reflection.EventInfo right);
            static /*0x245b8a4*/ System.Reflection.EventInfo internal_from_handle_type(nint event_handle, nint type_handle);
            static /*0x245b8a8*/ System.Reflection.EventInfo GetEventFromHandle(Mono.RuntimeEventHandle handle, System.RuntimeTypeHandle reflectedType);
            /*0x245b504*/ EventInfo();
            /*0x245b488*/ System.Type get_EventHandlerType();
            /*0x245b4fc*/ System.Reflection.MemberTypes get_MemberType();
            /*0x245b50c*/ void AddEventHandler(object target, System.Delegate handler);
            /*0x245b688*/ System.Reflection.MethodInfo GetAddMethod();
            System.Reflection.MethodInfo GetAddMethod(bool nonPublic);
            System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic);
            /*0x245b69c*/ System.Reflection.MethodInfo GetRemoveMethod();
            System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic);
            /*0x245b6b0*/ void RemoveEventHandler(object target, System.Delegate handler);
            /*0x245b7e8*/ bool Equals(object obj);
            /*0x245b7f4*/ int GetHashCode();

            class AddEventAdapter : System.MulticastDelegate
            {
                /*0x1811350*/ AddEventAdapter(object object, nint method);
                /*0x18113b0*/ void Invoke(object _this, System.Delegate dele);
                /*0x1811744*/ System.IAsyncResult BeginInvoke(object _this, System.Delegate dele, System.AsyncCallback callback, object object);
                /*0x1811774*/ void EndInvoke(System.IAsyncResult result);
            }
        }

        class ExceptionHandlingClause
        {
            /*0x10*/ System.Type catch_type;
            /*0x18*/ int filter_offset;
            /*0x1c*/ System.Reflection.ExceptionHandlingClauseOptions flags;
            /*0x20*/ int try_offset;
            /*0x24*/ int try_length;
            /*0x28*/ int handler_offset;
            /*0x2c*/ int handler_length;

            /*0x245d638*/ ExceptionHandlingClause();
            /*0x245d640*/ string ToString();
        }

        class FieldInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._FieldInfo
        {
            static /*0x20e01c4*/ System.Reflection.FieldInfo internal_from_handle_type(nint field_handle, nint type_handle);
            static /*0x20e01c8*/ System.Reflection.FieldInfo GetFieldFromHandle(System.RuntimeFieldHandle handle);
            static /*0x20e0268*/ System.Reflection.FieldInfo GetFieldFromHandle(System.RuntimeFieldHandle handle, System.RuntimeTypeHandle declaringType);
            static /*0x20e034c*/ bool op_Equality(System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);
            static /*0x20e0700*/ bool op_Inequality(System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);
            /*0x20e00b0*/ FieldInfo();
            System.Reflection.FieldAttributes get_Attributes();
            System.RuntimeFieldHandle get_FieldHandle();
            System.Type get_FieldType();
            object GetValue(object obj);
            /*0x20e00b8*/ System.Reflection.MemberTypes get_MemberType();
            /*0x20e00c0*/ bool get_IsLiteral();
            /*0x20e00e4*/ bool get_IsStatic();
            /*0x20e0108*/ bool get_IsInitOnly();
            /*0x20e012c*/ bool get_IsPublic();
            /*0x20e0158*/ bool get_IsPrivate();
            /*0x20e0184*/ bool get_IsNotSerialized();
            void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0x20e01a8*/ void SetValue(object obj, object value);
            /*0x20e0398*/ int GetFieldOffset();
            /*0x20e03ec*/ void SetValueDirect(System.TypedReference obj, object value);
            /*0x20e0448*/ System.Runtime.InteropServices.MarshalAsAttribute get_marshal_info();
            /*0x20e044c*/ object[] GetPseudoCustomAttributes();
            /*0x20e0698*/ object GetRawConstantValue();
            /*0x20e06ec*/ bool Equals(object obj);
            /*0x20e06f8*/ int GetHashCode();
        }

        class LocalVariableInfo
        {
            /*0x10*/ System.Type type;
            /*0x18*/ bool is_pinned;
            /*0x1a*/ ushort position;

            /*0x1a960a4*/ LocalVariableInfo();
            /*0x1a960ac*/ int get_LocalIndex();
            /*0x1a960b4*/ string ToString();
        }

        class MethodBody
        {
            /*0x10*/ System.Reflection.ExceptionHandlingClause[] clauses;
            /*0x18*/ System.Reflection.LocalVariableInfo[] locals;
            /*0x20*/ byte[] il;
            /*0x28*/ bool init_locals;
            /*0x2c*/ int sig_token;
            /*0x30*/ int max_stack;

            /*0x1c1acec*/ MethodBody();
        }

        class Module : System.Runtime.Serialization.ISerializable, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._Module
        {
            static System.Reflection.BindingFlags defaultBindingFlags = 28;
            static /*0x0*/ System.Reflection.TypeFilter FilterTypeName;
            static /*0x8*/ System.Reflection.TypeFilter FilterTypeNameIgnoreCase;
            /*0x10*/ nint _impl;
            /*0x18*/ System.Reflection.Assembly assembly;
            /*0x20*/ string fqname;
            /*0x28*/ string name;
            /*0x30*/ string scopename;
            /*0x38*/ bool is_resource;
            /*0x3c*/ int token;

            static /*0x1c1f7b4*/ Module();
            static /*0x1c1f214*/ bool filter_by_type_name(System.Type m, object filterCriteria);
            static /*0x1c1f314*/ bool filter_by_type_name_ignore_case(System.Type m, object filterCriteria);
            static /*0x1c1f43c*/ bool op_Equality(System.Reflection.Module left, System.Reflection.Module right);
            static /*0x1c1f4ec*/ System.Exception CreateNIE();
            /*0x1c1f18c*/ Module();
            /*0x1c1f194*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1c1f1d4*/ string ToString();
            /*0x1c1f1dc*/ System.Guid GetModuleVersionId();
            /*0x1c1f210*/ string GetGuidInternal();
            /*0x1c1f428*/ bool Equals(object o);
            /*0x1c1f434*/ int GetHashCode();
            /*0x1c1f488*/ System.Reflection.Assembly get_Assembly();
            /*0x1c1f55c*/ string get_ScopeName();
            /*0x1c1f5c0*/ System.Guid get_ModuleVersionId();
            /*0x1c1f624*/ bool IsResource();
            /*0x1c1f688*/ object[] GetCustomAttributes(bool inherit);
            /*0x1c1f6ec*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x1c1f750*/ bool IsDefined(System.Type attributeType, bool inherit);
        }

        class RuntimeAssembly : System.Reflection.Assembly
        {
            static /*0x2152d64*/ System.Reflection.RuntimeAssembly LoadWithPartialNameInternal(string partialName, System.Security.Policy.Evidence securityEvidence, ref System.Threading.StackCrawlMark stackMark);
            static /*0x2152df8*/ System.Reflection.RuntimeAssembly LoadWithPartialNameInternal(System.Reflection.AssemblyName an, System.Security.Policy.Evidence securityEvidence, ref System.Threading.StackCrawlMark stackMark);
            /*0x2152e38*/ RuntimeAssembly();
            /*0x2152cd8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x2152e2c*/ System.Reflection.AssemblyName GetName(bool copiedName);
        }

        class MonoAssembly : System.Reflection.RuntimeAssembly
        {
            /*0x1c2003c*/ MonoAssembly();
            /*0x1c1fcf4*/ System.Type GetType(string name, bool throwOnError, bool ignoreCase);
            /*0x1c1fdb4*/ System.Reflection.Module GetModule(string name);
            /*0x1c1fee8*/ System.Reflection.Module[] GetModules(bool getResourceModules);
        }

        struct MonoEventInfo
        {
            /*0x10*/ System.Type declaring_type;
            /*0x18*/ System.Type reflected_type;
            /*0x20*/ string name;
            /*0x28*/ System.Reflection.MethodInfo add_method;
            /*0x30*/ System.Reflection.MethodInfo remove_method;
            /*0x38*/ System.Reflection.MethodInfo raise_method;
            /*0x40*/ System.Reflection.EventAttributes attrs;
            /*0x48*/ System.Reflection.MethodInfo[] other_methods;

            static /*0x1c23558*/ void get_event_info(System.Reflection.MonoEvent ev, ref System.Reflection.MonoEventInfo info);
            static /*0x1c2317c*/ System.Reflection.MonoEventInfo GetEventInfo(System.Reflection.MonoEvent ev);
        }

        class RuntimeEventInfo : System.Reflection.EventInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x21536a0*/ RuntimeEventInfo();
            /*0x21534c0*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x21534c8*/ System.Reflection.Module get_Module();
            /*0x21534e8*/ System.RuntimeType GetDeclaringTypeInternal();
            /*0x2153570*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x21534cc*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x21535fc*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class MonoEvent : System.Reflection.RuntimeEventInfo
        {
            /*0x18*/ nint klass;
            /*0x20*/ nint handle;

            /*0x1c23550*/ MonoEvent();
            /*0x1c230f0*/ System.Reflection.MethodInfo GetAddMethod(bool nonPublic);
            /*0x1c231c4*/ System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic);
            /*0x1c23250*/ System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic);
            /*0x1c232dc*/ System.Type get_DeclaringType();
            /*0x1c2330c*/ System.Type get_ReflectedType();
            /*0x1c2333c*/ string get_Name();
            /*0x1c2336c*/ string ToString();
            /*0x1c233e8*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x1c23460*/ object[] GetCustomAttributes(bool inherit);
            /*0x1c234d0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x1c23548*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData();
        }

        class RuntimeFieldInfo : System.Reflection.FieldInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x2152c50*/ RuntimeFieldInfo();
            /*0x2153b64*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x2153b6c*/ System.Reflection.Module get_Module();
            /*0x2153b8c*/ System.RuntimeType GetDeclaringTypeInternal();
            /*0x2153c14*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x2153b70*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x2153c9c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class RtFieldInfo : System.Reflection.RuntimeFieldInfo
        {
            /*0x2152c48*/ RtFieldInfo();
            /*0x21528ec*/ object UnsafeGetValue(object obj);
            /*0x21528f0*/ void CheckConsistency(object target);
            /*0x2152a98*/ void UnsafeSetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0x2152ae8*/ void SetValueDirect(System.TypedReference obj, object value);
        }

        class MonoField : System.Reflection.RtFieldInfo
        {
            /*0x10*/ nint klass;
            /*0x18*/ System.RuntimeFieldHandle fhandle;
            /*0x20*/ string name;
            /*0x28*/ System.Type type;
            /*0x30*/ System.Reflection.FieldAttributes attrs;

            static /*0x1c23a08*/ void SetValueInternal(System.Reflection.FieldInfo fi, object obj, object value);
            /*0x1c23cd8*/ MonoField();
            /*0x1c2355c*/ System.Reflection.FieldAttributes get_Attributes();
            /*0x1c23564*/ System.RuntimeFieldHandle get_FieldHandle();
            /*0x1c2356c*/ System.Type ResolveType();
            /*0x1c23570*/ System.Type get_FieldType();
            /*0x1c235f8*/ System.Type GetParentType(bool declaring);
            /*0x1c23600*/ System.Type get_ReflectedType();
            /*0x1c23608*/ System.Type get_DeclaringType();
            /*0x1c23610*/ string get_Name();
            /*0x1c23618*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x1c23690*/ object[] GetCustomAttributes(bool inherit);
            /*0x1c23700*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x1c23778*/ int GetFieldOffset();
            /*0x1c2377c*/ object GetValueInternal(object obj);
            /*0x1c23780*/ object GetValue(object obj);
            /*0x1c2399c*/ string ToString();
            /*0x1c23a0c*/ void SetValue(object obj, object val, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            /*0x1c23ccc*/ object GetRawConstantValue();
            /*0x1c23cd0*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData();
            /*0x1c23914*/ void CheckGeneric();
        }

        struct MonoMethodInfo
        {
            /*0x10*/ System.Type parent;
            /*0x18*/ System.Type ret;
            /*0x20*/ System.Reflection.MethodAttributes attrs;
            /*0x24*/ System.Reflection.MethodImplAttributes iattrs;
            /*0x28*/ System.Reflection.CallingConventions callconv;

            static /*0x22a2d64*/ void get_method_info(nint handle, ref System.Reflection.MonoMethodInfo info);
            static /*0x22a2d68*/ int get_method_attributes(nint handle);
            static /*0x22a2d6c*/ System.Reflection.MonoMethodInfo GetMethodInfo(nint handle);
            static /*0x22a2da8*/ System.Type GetDeclaringType(nint handle);
            static /*0x22a2dd4*/ System.Type GetReturnType(nint handle);
            static /*0x22a2e00*/ System.Reflection.MethodAttributes GetAttributes(nint handle);
            static /*0x22a2e04*/ System.Reflection.CallingConventions GetCallingConvention(nint handle);
            static /*0x22a2e30*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags(nint handle);
            static /*0x22a2e5c*/ System.Reflection.ParameterInfo[] get_parameter_info(nint handle, System.Reflection.MemberInfo member);
            static /*0x22a2e60*/ System.Reflection.ParameterInfo[] GetParametersInfo(nint handle, System.Reflection.MemberInfo member);
        }

        class RuntimeMethodInfo : System.Reflection.MethodInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x2154eb8*/ RuntimeMethodInfo();
            /*0x21549b4*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x21549bc*/ System.Reflection.Module get_Module();
            /*0x2154a4c*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x2154ad4*/ string FormatNameAndSig(bool serialization);
            /*0x2154c2c*/ System.Delegate CreateDelegate(System.Type delegateType);
            /*0x2154c40*/ System.Delegate CreateDelegate(System.Type delegateType, object target);
            /*0x2154c58*/ string ToString();
            /*0x21549c0*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x2154cec*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x2154e18*/ string SerializationToString();
        }

        class MonoMethod : System.Reflection.RuntimeMethodInfo
        {
            /*0x10*/ nint mhandle;
            /*0x18*/ string name;
            /*0x20*/ System.Type reftype;

            static /*0x1c20824*/ string get_name(System.Reflection.MethodBase method);
            static /*0x1c2527c*/ System.Reflection.MonoMethod get_base_method(System.Reflection.MonoMethod method, bool definition);
            static /*0x1c20378*/ void ConvertValues(System.Reflection.Binder binder, object[] args, System.Reflection.ParameterInfo[] pinfo, System.Globalization.CultureInfo culture, System.Reflection.BindingFlags invokeAttr);
            static /*0x1c25c5c*/ int get_core_clr_security_level();
            /*0x1c25274*/ MonoMethod();
            /*0x1c25284*/ System.Reflection.MethodInfo GetBaseDefinition();
            /*0x1c2528c*/ System.Reflection.MethodInfo GetBaseMethod();
            /*0x1c25294*/ System.Type get_ReturnType();
            /*0x1c252a0*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
            /*0x1c252ac*/ System.Reflection.ParameterInfo[] GetParameters();
            /*0x1c25344*/ System.Reflection.ParameterInfo[] GetParametersInternal();
            /*0x1c25354*/ int GetParametersCount();
            /*0x1c25380*/ object InternalInvoke(object obj, object[] parameters, ref System.Exception exc);
            /*0x1c25384*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x1c255b4*/ System.RuntimeMethodHandle get_MethodHandle();
            /*0x1c255bc*/ System.Reflection.MethodAttributes get_Attributes();
            /*0x1c255c8*/ System.Reflection.CallingConventions get_CallingConvention();
            /*0x1c255d4*/ System.Type get_ReflectedType();
            /*0x1c255dc*/ System.Type get_DeclaringType();
            /*0x1c255e8*/ string get_Name();
            /*0x1c25610*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x1c25688*/ object[] GetCustomAttributes(bool inherit);
            /*0x1c256f8*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x1c25770*/ void GetPInvoke(ref System.Reflection.PInvokeAttributes flags, ref string entryPoint, ref string dllName);
            /*0x1c21f68*/ object[] GetPseudoCustomAttributes();
            /*0x1c25774*/ System.Reflection.MethodInfo MakeGenericMethod(System.Type[] methodInstantiation);
            /*0x1c25ae4*/ System.Reflection.MethodInfo MakeGenericMethod_impl(System.Type[] types);
            /*0x1c25ae8*/ System.Type[] GetGenericArguments();
            /*0x1c25aec*/ System.Reflection.MethodInfo GetGenericMethodDefinition_impl();
            /*0x1c25af0*/ System.Reflection.MethodInfo GetGenericMethodDefinition();
            /*0x1c25b6c*/ bool get_IsGenericMethodDefinition();
            /*0x1c25b70*/ bool get_IsGenericMethod();
            /*0x1c25b74*/ bool get_ContainsGenericParameters();
            /*0x1c25c54*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData();
            /*0x1c25c64*/ bool get_IsSecurityCritical();
        }

        class RuntimeConstructorInfo : System.Reflection.ConstructorInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x2153324*/ RuntimeConstructorInfo();
            /*0x2152fe8*/ System.Reflection.Module get_Module();
            /*0x2152fec*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x2153078*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x2153080*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x2153108*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x21531ec*/ string SerializationToString();
            /*0x2153200*/ void SerializationInvoke(object target, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class MonoCMethod : System.Reflection.RuntimeConstructorInfo
        {
            /*0x10*/ nint mhandle;
            /*0x18*/ string name;
            /*0x20*/ System.Type reftype;

            static /*0x1c21a20*/ int get_core_clr_security_level();
            /*0x1c21a30*/ MonoCMethod();
            /*0x1c2004c*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
            /*0x1c20058*/ System.Reflection.ParameterInfo[] GetParameters();
            /*0x1c20068*/ System.Reflection.ParameterInfo[] GetParametersInternal();
            /*0x1c20078*/ int GetParametersCount();
            /*0x1c200a0*/ object InternalInvoke(object obj, object[] parameters, ref System.Exception exc);
            /*0x1c200a4*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x1c201ac*/ object DoInvoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x1c2064c*/ object InternalInvoke(object obj, object[] parameters);
            /*0x1c20780*/ object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
            /*0x1c20798*/ System.RuntimeMethodHandle get_MethodHandle();
            /*0x1c207a0*/ System.Reflection.MethodAttributes get_Attributes();
            /*0x1c207ac*/ System.Reflection.CallingConventions get_CallingConvention();
            /*0x1c207b8*/ bool get_ContainsGenericParameters();
            /*0x1c207e8*/ System.Type get_ReflectedType();
            /*0x1c207f0*/ System.Type get_DeclaringType();
            /*0x1c207fc*/ string get_Name();
            /*0x1c20828*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x1c20b7c*/ object[] GetCustomAttributes(bool inherit);
            /*0x1c20d90*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x1c2181c*/ string ToString();
            /*0x1c21a18*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData();
            /*0x1c21a28*/ bool get_IsSecurityCritical();
        }

        class RuntimeModule : System.Reflection.Module
        {
            /*0x2154ec0*/ RuntimeModule();
        }

        class MonoModule : System.Reflection.RuntimeModule
        {
            /*0x22a3dd4*/ MonoModule();
            /*0x22a3b28*/ System.Reflection.Assembly get_Assembly();
            /*0x22a3b30*/ string get_ScopeName();
            /*0x22a3b38*/ System.Guid get_ModuleVersionId();
            /*0x22a3b44*/ bool IsResource();
            /*0x22a3b4c*/ object[] GetCustomAttributes(bool inherit);
            /*0x22a3bc0*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x22a3c3c*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x22a3cb8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x22a3d58*/ System.Reflection.RuntimeAssembly GetRuntimeAssembly();
        }

        class RuntimeParameterInfo : System.Reflection.ParameterInfo
        {
            /*0x2154f24*/ RuntimeParameterInfo();
        }

        class MonoParameterInfo : System.Reflection.RuntimeParameterInfo
        {
            /*0x22a3ddc*/ MonoParameterInfo(System.Reflection.ParameterInfo pinfo, System.Reflection.MemberInfo member);
            /*0x22a3e74*/ object get_DefaultValue();
            /*0x22a4108*/ object[] GetCustomAttributes(bool inherit);
            /*0x22a417c*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x22a41f8*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x22a4274*/ bool get_HasDefaultValue();
        }

        struct MonoPropertyInfo
        {
            /*0x10*/ System.Type parent;
            /*0x18*/ System.Type declaring_type;
            /*0x20*/ string name;
            /*0x28*/ System.Reflection.MethodInfo get_method;
            /*0x30*/ System.Reflection.MethodInfo set_method;
            /*0x38*/ System.Reflection.PropertyAttributes attrs;

            static /*0x22a43f4*/ void get_property_info(System.Reflection.MonoProperty prop, ref System.Reflection.MonoPropertyInfo info, System.Reflection.PInfo req_info);
            static /*0x22a543c*/ System.Type[] GetTypeModifiers(System.Reflection.MonoProperty prop, bool optional);
            static /*0x22a4adc*/ object get_default_value(System.Reflection.MonoProperty prop);
        }

        enum PInfo
        {
            Attributes = 1,
            GetMethod = 2,
            SetMethod = 4,
            ReflectedType = 8,
            DeclaringType = 16,
            Name = 32,
        }

        class RuntimePropertyInfo : System.Reflection.PropertyInfo, System.Runtime.Serialization.ISerializable
        {
            /*0x21553fc*/ RuntimePropertyInfo();
            /*0x2155064*/ System.Reflection.BindingFlags get_BindingFlags();
            /*0x215506c*/ System.Reflection.Module get_Module();
            /*0x215508c*/ System.RuntimeType GetDeclaringTypeInternal();
            /*0x2155114*/ System.RuntimeType get_ReflectedTypeInternal();
            /*0x2155070*/ System.Reflection.RuntimeModule GetRuntimeModule();
            /*0x215519c*/ string ToString();
            /*0x21551a4*/ string FormatNameAndSig(bool serialization);
            /*0x215531c*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x21553f4*/ string SerializationToString();
        }

        class MonoProperty : System.Reflection.RuntimePropertyInfo
        {
            /*0x10*/ nint klass;
            /*0x18*/ nint prop;
            /*0x20*/ System.Reflection.MonoPropertyInfo info;
            /*0x50*/ System.Reflection.PInfo cached;
            /*0x58*/ System.Reflection.MonoProperty.GetterAdapter cached_getter;

            static object GetterAdapterFrame<T, R>(System.Reflection.MonoProperty.Getter<T, R> getter, object obj);
            static object StaticGetterAdapterFrame<R>(System.Reflection.MonoProperty.StaticGetter<R> getter, object obj);
            static /*0x22a4c3c*/ System.Reflection.MonoProperty.GetterAdapter CreateGetterDelegate(System.Reflection.MethodInfo method);
            /*0x22a54c4*/ MonoProperty();
            /*0x22a43b0*/ void CachePropertyInfo(System.Reflection.PInfo flags);
            /*0x22a43f8*/ System.Reflection.PropertyAttributes get_Attributes();
            /*0x22a443c*/ bool get_CanRead();
            /*0x22a4488*/ bool get_CanWrite();
            /*0x22a44d4*/ System.Type get_PropertyType();
            /*0x22a4598*/ System.Type get_ReflectedType();
            /*0x22a45dc*/ System.Type get_DeclaringType();
            /*0x22a4620*/ string get_Name();
            /*0x22a4664*/ System.Reflection.MethodInfo[] GetAccessors(bool nonPublic);
            /*0x22a47ec*/ System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
            /*0x22a4874*/ System.Reflection.ParameterInfo[] GetIndexParameters();
            /*0x22a4a50*/ System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
            /*0x22a4ad8*/ object GetConstantValue();
            /*0x22a4ae0*/ object GetRawConstantValue();
            /*0x22a4ae4*/ bool IsDefined(System.Type attributeType, bool inherit);
            /*0x22a4b5c*/ object[] GetCustomAttributes(bool inherit);
            /*0x22a4bc4*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x22a4f8c*/ object GetValue(object obj, object[] index);
            /*0x22a4fac*/ object GetValue(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x22a51ac*/ void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x22a53c4*/ System.Type[] GetOptionalCustomModifiers();
            /*0x22a5444*/ System.Type[] GetRequiredCustomModifiers();
            /*0x22a54bc*/ System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData();

            class GetterAdapter : System.MulticastDelegate
            {
                /*0x18151c8*/ GetterAdapter(object object, nint method);
                /*0x1815228*/ object Invoke(object _this);
                /*0x18155a8*/ System.IAsyncResult BeginInvoke(object _this, System.AsyncCallback callback, object object);
                /*0x18155cc*/ object EndInvoke(System.IAsyncResult result);
            }

            class Getter<T, R> : System.MulticastDelegate
            {
                Getter(object object, nint method);
                R Invoke(T _this);
                System.IAsyncResult BeginInvoke(T _this, System.AsyncCallback callback, object object);
                R EndInvoke(System.IAsyncResult result);
            }

            class StaticGetter<R> : System.MulticastDelegate
            {
                StaticGetter(object object, nint method);
                R Invoke();
                System.IAsyncResult BeginInvoke(System.AsyncCallback callback, object object);
                R EndInvoke(System.IAsyncResult result);
            }
        }

        class ParameterInfo : System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.IObjectReference, System.Runtime.InteropServices._ParameterInfo
        {
            /*0x10*/ System.Type ClassImpl;
            /*0x18*/ object DefaultValueImpl;
            /*0x20*/ System.Reflection.MemberInfo MemberImpl;
            /*0x28*/ string NameImpl;
            /*0x30*/ int PositionImpl;
            /*0x34*/ System.Reflection.ParameterAttributes AttrsImpl;
            /*0x38*/ System.Runtime.InteropServices.MarshalAsAttribute marshalAs;

            static /*0x2526540*/ void FormatParameters(System.Text.StringBuilder sb, System.Reflection.ParameterInfo[] p, System.Reflection.CallingConventions callingConvention, bool serialization);
            static /*0x2526bb0*/ System.Reflection.ParameterInfo New(System.Reflection.ParameterInfo pinfo, System.Reflection.MemberInfo member);
            /*0x2526350*/ ParameterInfo();
            /*0x2526358*/ string ToString();
            /*0x2526760*/ System.Type get_ParameterType();
            /*0x2526768*/ System.Reflection.ParameterAttributes get_Attributes();
            /*0x2526770*/ bool get_IsIn();
            /*0x2526790*/ bool get_IsOptional();
            /*0x25267b0*/ bool get_IsOut();
            /*0x2526520*/ bool get_IsRetval();
            /*0x25267d0*/ System.Reflection.MemberInfo get_Member();
            /*0x25267d8*/ string get_Name();
            /*0x25267e0*/ int get_Position();
            /*0x25267e8*/ object[] GetPseudoCustomAttributes();
            /*0x2526a50*/ object GetDefaultValueImpl();
            /*0x2526a58*/ bool get_HasDefaultValue();
            /*0x2526a98*/ object get_DefaultValue();
            /*0x2526ad8*/ object[] GetCustomAttributes(bool inherit);
            /*0x2526b20*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
            /*0x2526b68*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
            /*0x2526ba8*/ bool IsDefined(System.Type attributeType, bool inherit);
        }

        class PropertyInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._PropertyInfo
        {
            static /*0x253195c*/ System.NotImplementedException CreateNIE();
            static /*0x2531a20*/ bool op_Equality(System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);
            static /*0x2531a6c*/ bool op_Inequality(System.Reflection.PropertyInfo left, System.Reflection.PropertyInfo right);
            static /*0x2531ac8*/ System.Reflection.PropertyInfo internal_from_handle_type(nint event_handle, nint type_handle);
            static /*0x2531acc*/ System.Reflection.PropertyInfo GetPropertyFromHandle(Mono.RuntimePropertyHandle handle, System.RuntimeTypeHandle reflectedType);
            /*0x25317e4*/ PropertyInfo();
            System.Reflection.PropertyAttributes get_Attributes();
            bool get_CanRead();
            bool get_CanWrite();
            /*0x25317b4*/ System.Reflection.MethodInfo get_GetMethod();
            /*0x25317c8*/ System.Reflection.MethodInfo get_SetMethod();
            /*0x25317dc*/ System.Reflection.MemberTypes get_MemberType();
            System.Type get_PropertyType();
            System.Reflection.MethodInfo[] GetAccessors(bool nonPublic);
            /*0x25317ec*/ System.Reflection.MethodInfo GetGetMethod();
            System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
            System.Reflection.ParameterInfo[] GetIndexParameters();
            /*0x2531800*/ System.Reflection.MethodInfo GetSetMethod();
            System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
            /*0x2531814*/ object GetValue(object obj, object[] index);
            /*0x2531834*/ object GetValue(object obj);
            object GetValue(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x2531854*/ void SetValue(object obj, object value, object[] index);
            /*0x2531874*/ void SetValue(object obj, object value);
            void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            /*0x2531894*/ System.Type[] GetOptionalCustomModifiers();
            /*0x25318f8*/ System.Type[] GetRequiredCustomModifiers();
            /*0x25319b4*/ object GetConstantValue();
            /*0x25319e0*/ object GetRawConstantValue();
            /*0x2531a0c*/ bool Equals(object obj);
            /*0x2531a18*/ int GetHashCode();
        }

        class StrongNameKeyPair : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
        {
            /*0x10*/ byte[] _publicKey;
            /*0x18*/ string _keyPairContainer;
            /*0x20*/ bool _keyPairExported;
            /*0x28*/ byte[] _keyPairArray;

            /*0x1e20c00*/ StrongNameKeyPair(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1e20dbc*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1e20f10*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
        }

        namespace Emit
        {
            class AssemblyBuilder : System.Reflection.Assembly
            {
                static /*0x1c94dfc*/ System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access);
                /*0x1c94e3c*/ System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name);
                /*0x1c94e7c*/ void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder);
            }

            enum AssemblyBuilderAccess
            {
                Run = 1,
                Save = 2,
                RunAndSave = 3,
                ReflectionOnly = 6,
                RunAndCollect = 9,
            }

            class ConstructorBuilder : System.Reflection.ConstructorInfo
            {
                /*0x1622c04*/ System.Reflection.MethodAttributes get_Attributes();
                /*0x1622c44*/ System.Type get_DeclaringType();
                /*0x1622c84*/ string get_Name();
                /*0x1622cc4*/ System.Reflection.Emit.ILGenerator GetILGenerator();
                /*0x1622d04*/ System.Reflection.ParameterInfo[] GetParameters();
                /*0x1622d44*/ System.RuntimeMethodHandle get_MethodHandle();
                /*0x1622d80*/ System.Type get_ReflectedType();
                /*0x1622dbc*/ object[] GetCustomAttributes(bool inherit);
                /*0x1622df8*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x1622e34*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
                /*0x1622e70*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0x1622eac*/ object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0x1622ee8*/ bool IsDefined(System.Type attributeType, bool inherit);
            }

            class CustomAttributeBuilder
            {
                /*0x25225dc*/ CustomAttributeBuilder(System.Reflection.ConstructorInfo con, object[] constructorArgs);
            }

            class EnumBuilder : System.Reflection.TypeInfo
            {
                /*0x2458d90*/ System.Reflection.Assembly get_Assembly();
                /*0x2458dd0*/ string get_AssemblyQualifiedName();
                /*0x2458e10*/ System.Type get_BaseType();
                /*0x2458e50*/ string get_FullName();
                /*0x2458e90*/ System.Reflection.Module get_Module();
                /*0x2458ed0*/ string get_Name();
                /*0x2458f10*/ string get_Namespace();
                /*0x2458f50*/ System.Type GetElementType();
                /*0x2458f90*/ System.Type get_UnderlyingSystemType();
                /*0x2458fcc*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
                /*0x2459008*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x2459044*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
                /*0x2459080*/ object[] GetCustomAttributes(bool inherit);
                /*0x24590bc*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x24590f8*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x2459134*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x2459170*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
                /*0x24591ac*/ System.Type[] GetInterfaces();
                /*0x24591e8*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x2459224*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
                /*0x2459260*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x245929c*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
                /*0x24592d8*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x2459314*/ bool HasElementTypeImpl();
                /*0x2459350*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
                /*0x245938c*/ bool IsArrayImpl();
                /*0x24593c8*/ bool IsByRefImpl();
                /*0x2459404*/ bool IsCOMObjectImpl();
                /*0x2459440*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x245947c*/ bool IsPointerImpl();
                /*0x24594b8*/ bool IsPrimitiveImpl();
            }

            class EventBuilder
            {
            }

            class FieldBuilder : System.Reflection.FieldInfo
            {
                /*0x20dfe08*/ System.Reflection.FieldAttributes get_Attributes();
                /*0x20dfe48*/ System.Type get_DeclaringType();
                /*0x20dfe88*/ System.Type get_FieldType();
                /*0x20dfec8*/ string get_Name();
                /*0x20dff08*/ object GetValue(object obj);
                /*0x20dff48*/ System.RuntimeFieldHandle get_FieldHandle();
                /*0x20dff84*/ System.Type get_ReflectedType();
                /*0x20dffc0*/ object[] GetCustomAttributes(bool inherit);
                /*0x20dfffc*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x20e0038*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x20e0074*/ void SetValue(object obj, object val, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
            }

            class GenericTypeParameterBuilder : System.Reflection.TypeInfo
            {
                /*0x20ea030*/ System.Reflection.Assembly get_Assembly();
                /*0x20ea070*/ string get_AssemblyQualifiedName();
                /*0x20ea0b0*/ System.Type get_BaseType();
                /*0x20ea0f0*/ string get_FullName();
                /*0x20ea130*/ System.Reflection.Module get_Module();
                /*0x20ea170*/ string get_Name();
                /*0x20ea1b0*/ string get_Namespace();
                /*0x20ea1f0*/ System.Type GetElementType();
                /*0x20ea230*/ System.Type get_UnderlyingSystemType();
                /*0x20ea26c*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
                /*0x20ea2a8*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x20ea2e4*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
                /*0x20ea320*/ object[] GetCustomAttributes(bool inherit);
                /*0x20ea35c*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x20ea398*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x20ea3d4*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x20ea410*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
                /*0x20ea44c*/ System.Type[] GetInterfaces();
                /*0x20ea488*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x20ea4c4*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
                /*0x20ea500*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x20ea53c*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
                /*0x20ea578*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x20ea5b4*/ bool HasElementTypeImpl();
                /*0x20ea5f0*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
                /*0x20ea62c*/ bool IsArrayImpl();
                /*0x20ea668*/ bool IsByRefImpl();
                /*0x20ea6a4*/ bool IsCOMObjectImpl();
                /*0x20ea6e0*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x20ea71c*/ bool IsPointerImpl();
                /*0x20ea758*/ bool IsPrimitiveImpl();
            }

            class ILGenerator
            {
                /*0x1a83ff4*/ System.Reflection.Emit.LocalBuilder DeclareLocal(System.Type localType);
                /*0x1a84034*/ System.Reflection.Emit.Label DefineLabel();
                /*0x1a84074*/ void Emit(System.Reflection.Emit.OpCode opcode);
                /*0x1a840b4*/ void Emit(System.Reflection.Emit.OpCode opcode, byte arg);
                /*0x1a840f4*/ void Emit(System.Reflection.Emit.OpCode opcode, short arg);
                /*0x1a84134*/ void Emit(System.Reflection.Emit.OpCode opcode, int arg);
                /*0x1a84174*/ void Emit(System.Reflection.Emit.OpCode opcode, long arg);
                /*0x1a841b4*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.ConstructorInfo con);
                /*0x1a841f4*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label label);
                /*0x1a84234*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label[] labels);
                /*0x1a84274*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.LocalBuilder local);
                /*0x1a842b4*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.FieldInfo field);
                /*0x1a842f4*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo meth);
                /*0x1a84334*/ void Emit(System.Reflection.Emit.OpCode opcode, sbyte arg);
                /*0x1a84374*/ void Emit(System.Reflection.Emit.OpCode opcode, string str);
                /*0x1a843b4*/ void Emit(System.Reflection.Emit.OpCode opcode, System.Type cls);
                /*0x1a843f4*/ void MarkLabel(System.Reflection.Emit.Label loc);
            }

            struct Label
            {
                /*0x10*/ int label;

                /*0xad1298*/ bool Equals(object obj);
                /*0xad12a0*/ int GetHashCode();
            }

            class LocalBuilder : System.Reflection.LocalVariableInfo
            {
                /*0x20*/ string name;
                /*0x28*/ System.Reflection.Emit.ILGenerator ilgen;
                /*0x30*/ int startOffset;
                /*0x34*/ int endOffset;
            }

            class MethodBuilder : System.Reflection.MethodInfo
            {
                /*0x1c1acf4*/ System.Reflection.MethodAttributes get_Attributes();
                /*0x1c1ad34*/ System.Type get_DeclaringType();
                /*0x1c1ad74*/ string get_Name();
                /*0x1c1adb4*/ System.Reflection.Emit.ParameterBuilder DefineParameter(int position, System.Reflection.ParameterAttributes attributes, string strParamName);
                /*0x1c1adf4*/ System.Reflection.Emit.ILGenerator GetILGenerator();
                /*0x1c1ae34*/ System.Reflection.ParameterInfo[] GetParameters();
                /*0x1c1ae74*/ System.RuntimeMethodHandle get_MethodHandle();
                /*0x1c1aeb0*/ System.Type get_ReflectedType();
                /*0x1c1aeec*/ System.Reflection.MethodInfo GetBaseDefinition();
                /*0x1c1af28*/ object[] GetCustomAttributes(bool inherit);
                /*0x1c1af64*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x1c1afa0*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
                /*0x1c1afdc*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0x1c1b018*/ bool IsDefined(System.Type attributeType, bool inherit);
            }

            class ModuleBuilder : System.Reflection.Module
            {
                /*0x1c1f888*/ System.Reflection.Emit.TypeBuilder DefineType(string name, System.Reflection.TypeAttributes attr);
                /*0x1c1f8c8*/ System.Reflection.Emit.TypeBuilder DefineType(string name, System.Reflection.TypeAttributes attr, System.Type parent);
                /*0x1c1f908*/ System.Reflection.Emit.TypeBuilder DefineType(string name, System.Reflection.TypeAttributes attr, System.Type parent, System.Type[] interfaces);
            }

            struct OpCode
            {
                /*0x10*/ byte op1;
                /*0x11*/ byte op2;
                /*0x12*/ byte push;
                /*0x13*/ byte pop;
                /*0x14*/ byte size;
                /*0x15*/ byte type;
                /*0x16*/ byte args;
                /*0x17*/ byte flow;

                /*0xae1c20*/ OpCode(int p, int q);
                /*0xae1c5c*/ int GetHashCode();
                /*0xae1c64*/ bool Equals(object obj);
                /*0xae1c6c*/ string ToString();
                /*0xae1c74*/ string get_Name();
            }

            class OpCodeNames
            {
                static /*0x0*/ string[] names;

                static /*0x2145800*/ OpCodeNames();
            }

            class OpCodes
            {
                static /*0x0*/ System.Reflection.Emit.OpCode Nop;
                static /*0x8*/ System.Reflection.Emit.OpCode Break;
                static /*0x10*/ System.Reflection.Emit.OpCode Ldarg_0;
                static /*0x18*/ System.Reflection.Emit.OpCode Ldarg_1;
                static /*0x20*/ System.Reflection.Emit.OpCode Ldarg_2;
                static /*0x28*/ System.Reflection.Emit.OpCode Ldarg_3;
                static /*0x30*/ System.Reflection.Emit.OpCode Ldloc_0;
                static /*0x38*/ System.Reflection.Emit.OpCode Ldloc_1;
                static /*0x40*/ System.Reflection.Emit.OpCode Ldloc_2;
                static /*0x48*/ System.Reflection.Emit.OpCode Ldloc_3;
                static /*0x50*/ System.Reflection.Emit.OpCode Stloc_0;
                static /*0x58*/ System.Reflection.Emit.OpCode Stloc_1;
                static /*0x60*/ System.Reflection.Emit.OpCode Stloc_2;
                static /*0x68*/ System.Reflection.Emit.OpCode Stloc_3;
                static /*0x70*/ System.Reflection.Emit.OpCode Ldarg_S;
                static /*0x78*/ System.Reflection.Emit.OpCode Ldarga_S;
                static /*0x80*/ System.Reflection.Emit.OpCode Starg_S;
                static /*0x88*/ System.Reflection.Emit.OpCode Ldloc_S;
                static /*0x90*/ System.Reflection.Emit.OpCode Ldloca_S;
                static /*0x98*/ System.Reflection.Emit.OpCode Stloc_S;
                static /*0xa0*/ System.Reflection.Emit.OpCode Ldnull;
                static /*0xa8*/ System.Reflection.Emit.OpCode Ldc_I4_M1;
                static /*0xb0*/ System.Reflection.Emit.OpCode Ldc_I4_0;
                static /*0xb8*/ System.Reflection.Emit.OpCode Ldc_I4_1;
                static /*0xc0*/ System.Reflection.Emit.OpCode Ldc_I4_2;
                static /*0xc8*/ System.Reflection.Emit.OpCode Ldc_I4_3;
                static /*0xd0*/ System.Reflection.Emit.OpCode Ldc_I4_4;
                static /*0xd8*/ System.Reflection.Emit.OpCode Ldc_I4_5;
                static /*0xe0*/ System.Reflection.Emit.OpCode Ldc_I4_6;
                static /*0xe8*/ System.Reflection.Emit.OpCode Ldc_I4_7;
                static /*0xf0*/ System.Reflection.Emit.OpCode Ldc_I4_8;
                static /*0xf8*/ System.Reflection.Emit.OpCode Ldc_I4_S;
                static /*0x100*/ System.Reflection.Emit.OpCode Ldc_I4;
                static /*0x108*/ System.Reflection.Emit.OpCode Ldc_I8;
                static /*0x110*/ System.Reflection.Emit.OpCode Ldc_R4;
                static /*0x118*/ System.Reflection.Emit.OpCode Ldc_R8;
                static /*0x120*/ System.Reflection.Emit.OpCode Dup;
                static /*0x128*/ System.Reflection.Emit.OpCode Pop;
                static /*0x130*/ System.Reflection.Emit.OpCode Jmp;
                static /*0x138*/ System.Reflection.Emit.OpCode Call;
                static /*0x140*/ System.Reflection.Emit.OpCode Calli;
                static /*0x148*/ System.Reflection.Emit.OpCode Ret;
                static /*0x150*/ System.Reflection.Emit.OpCode Br_S;
                static /*0x158*/ System.Reflection.Emit.OpCode Brfalse_S;
                static /*0x160*/ System.Reflection.Emit.OpCode Brtrue_S;
                static /*0x168*/ System.Reflection.Emit.OpCode Beq_S;
                static /*0x170*/ System.Reflection.Emit.OpCode Bge_S;
                static /*0x178*/ System.Reflection.Emit.OpCode Bgt_S;
                static /*0x180*/ System.Reflection.Emit.OpCode Ble_S;
                static /*0x188*/ System.Reflection.Emit.OpCode Blt_S;
                static /*0x190*/ System.Reflection.Emit.OpCode Bne_Un_S;
                static /*0x198*/ System.Reflection.Emit.OpCode Bge_Un_S;
                static /*0x1a0*/ System.Reflection.Emit.OpCode Bgt_Un_S;
                static /*0x1a8*/ System.Reflection.Emit.OpCode Ble_Un_S;
                static /*0x1b0*/ System.Reflection.Emit.OpCode Blt_Un_S;
                static /*0x1b8*/ System.Reflection.Emit.OpCode Br;
                static /*0x1c0*/ System.Reflection.Emit.OpCode Brfalse;
                static /*0x1c8*/ System.Reflection.Emit.OpCode Brtrue;
                static /*0x1d0*/ System.Reflection.Emit.OpCode Beq;
                static /*0x1d8*/ System.Reflection.Emit.OpCode Bge;
                static /*0x1e0*/ System.Reflection.Emit.OpCode Bgt;
                static /*0x1e8*/ System.Reflection.Emit.OpCode Ble;
                static /*0x1f0*/ System.Reflection.Emit.OpCode Blt;
                static /*0x1f8*/ System.Reflection.Emit.OpCode Bne_Un;
                static /*0x200*/ System.Reflection.Emit.OpCode Bge_Un;
                static /*0x208*/ System.Reflection.Emit.OpCode Bgt_Un;
                static /*0x210*/ System.Reflection.Emit.OpCode Ble_Un;
                static /*0x218*/ System.Reflection.Emit.OpCode Blt_Un;
                static /*0x220*/ System.Reflection.Emit.OpCode Switch;
                static /*0x228*/ System.Reflection.Emit.OpCode Ldind_I1;
                static /*0x230*/ System.Reflection.Emit.OpCode Ldind_U1;
                static /*0x238*/ System.Reflection.Emit.OpCode Ldind_I2;
                static /*0x240*/ System.Reflection.Emit.OpCode Ldind_U2;
                static /*0x248*/ System.Reflection.Emit.OpCode Ldind_I4;
                static /*0x250*/ System.Reflection.Emit.OpCode Ldind_U4;
                static /*0x258*/ System.Reflection.Emit.OpCode Ldind_I8;
                static /*0x260*/ System.Reflection.Emit.OpCode Ldind_I;
                static /*0x268*/ System.Reflection.Emit.OpCode Ldind_R4;
                static /*0x270*/ System.Reflection.Emit.OpCode Ldind_R8;
                static /*0x278*/ System.Reflection.Emit.OpCode Ldind_Ref;
                static /*0x280*/ System.Reflection.Emit.OpCode Stind_Ref;
                static /*0x288*/ System.Reflection.Emit.OpCode Stind_I1;
                static /*0x290*/ System.Reflection.Emit.OpCode Stind_I2;
                static /*0x298*/ System.Reflection.Emit.OpCode Stind_I4;
                static /*0x2a0*/ System.Reflection.Emit.OpCode Stind_I8;
                static /*0x2a8*/ System.Reflection.Emit.OpCode Stind_R4;
                static /*0x2b0*/ System.Reflection.Emit.OpCode Stind_R8;
                static /*0x2b8*/ System.Reflection.Emit.OpCode Add;
                static /*0x2c0*/ System.Reflection.Emit.OpCode Sub;
                static /*0x2c8*/ System.Reflection.Emit.OpCode Mul;
                static /*0x2d0*/ System.Reflection.Emit.OpCode Div;
                static /*0x2d8*/ System.Reflection.Emit.OpCode Div_Un;
                static /*0x2e0*/ System.Reflection.Emit.OpCode Rem;
                static /*0x2e8*/ System.Reflection.Emit.OpCode Rem_Un;
                static /*0x2f0*/ System.Reflection.Emit.OpCode And;
                static /*0x2f8*/ System.Reflection.Emit.OpCode Or;
                static /*0x300*/ System.Reflection.Emit.OpCode Xor;
                static /*0x308*/ System.Reflection.Emit.OpCode Shl;
                static /*0x310*/ System.Reflection.Emit.OpCode Shr;
                static /*0x318*/ System.Reflection.Emit.OpCode Shr_Un;
                static /*0x320*/ System.Reflection.Emit.OpCode Neg;
                static /*0x328*/ System.Reflection.Emit.OpCode Not;
                static /*0x330*/ System.Reflection.Emit.OpCode Conv_I1;
                static /*0x338*/ System.Reflection.Emit.OpCode Conv_I2;
                static /*0x340*/ System.Reflection.Emit.OpCode Conv_I4;
                static /*0x348*/ System.Reflection.Emit.OpCode Conv_I8;
                static /*0x350*/ System.Reflection.Emit.OpCode Conv_R4;
                static /*0x358*/ System.Reflection.Emit.OpCode Conv_R8;
                static /*0x360*/ System.Reflection.Emit.OpCode Conv_U4;
                static /*0x368*/ System.Reflection.Emit.OpCode Conv_U8;
                static /*0x370*/ System.Reflection.Emit.OpCode Callvirt;
                static /*0x378*/ System.Reflection.Emit.OpCode Cpobj;
                static /*0x380*/ System.Reflection.Emit.OpCode Ldobj;
                static /*0x388*/ System.Reflection.Emit.OpCode Ldstr;
                static /*0x390*/ System.Reflection.Emit.OpCode Newobj;
                static /*0x398*/ System.Reflection.Emit.OpCode Castclass;
                static /*0x3a0*/ System.Reflection.Emit.OpCode Isinst;
                static /*0x3a8*/ System.Reflection.Emit.OpCode Conv_R_Un;
                static /*0x3b0*/ System.Reflection.Emit.OpCode Unbox;
                static /*0x3b8*/ System.Reflection.Emit.OpCode Throw;
                static /*0x3c0*/ System.Reflection.Emit.OpCode Ldfld;
                static /*0x3c8*/ System.Reflection.Emit.OpCode Ldflda;
                static /*0x3d0*/ System.Reflection.Emit.OpCode Stfld;
                static /*0x3d8*/ System.Reflection.Emit.OpCode Ldsfld;
                static /*0x3e0*/ System.Reflection.Emit.OpCode Ldsflda;
                static /*0x3e8*/ System.Reflection.Emit.OpCode Stsfld;
                static /*0x3f0*/ System.Reflection.Emit.OpCode Stobj;
                static /*0x3f8*/ System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;
                static /*0x400*/ System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;
                static /*0x408*/ System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;
                static /*0x410*/ System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;
                static /*0x418*/ System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;
                static /*0x420*/ System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;
                static /*0x428*/ System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;
                static /*0x430*/ System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;
                static /*0x438*/ System.Reflection.Emit.OpCode Conv_Ovf_I_Un;
                static /*0x440*/ System.Reflection.Emit.OpCode Conv_Ovf_U_Un;
                static /*0x448*/ System.Reflection.Emit.OpCode Box;
                static /*0x450*/ System.Reflection.Emit.OpCode Newarr;
                static /*0x458*/ System.Reflection.Emit.OpCode Ldlen;
                static /*0x460*/ System.Reflection.Emit.OpCode Ldelema;
                static /*0x468*/ System.Reflection.Emit.OpCode Ldelem_I1;
                static /*0x470*/ System.Reflection.Emit.OpCode Ldelem_U1;
                static /*0x478*/ System.Reflection.Emit.OpCode Ldelem_I2;
                static /*0x480*/ System.Reflection.Emit.OpCode Ldelem_U2;
                static /*0x488*/ System.Reflection.Emit.OpCode Ldelem_I4;
                static /*0x490*/ System.Reflection.Emit.OpCode Ldelem_U4;
                static /*0x498*/ System.Reflection.Emit.OpCode Ldelem_I8;
                static /*0x4a0*/ System.Reflection.Emit.OpCode Ldelem_I;
                static /*0x4a8*/ System.Reflection.Emit.OpCode Ldelem_R4;
                static /*0x4b0*/ System.Reflection.Emit.OpCode Ldelem_R8;
                static /*0x4b8*/ System.Reflection.Emit.OpCode Ldelem_Ref;
                static /*0x4c0*/ System.Reflection.Emit.OpCode Stelem_I;
                static /*0x4c8*/ System.Reflection.Emit.OpCode Stelem_I1;
                static /*0x4d0*/ System.Reflection.Emit.OpCode Stelem_I2;
                static /*0x4d8*/ System.Reflection.Emit.OpCode Stelem_I4;
                static /*0x4e0*/ System.Reflection.Emit.OpCode Stelem_I8;
                static /*0x4e8*/ System.Reflection.Emit.OpCode Stelem_R4;
                static /*0x4f0*/ System.Reflection.Emit.OpCode Stelem_R8;
                static /*0x4f8*/ System.Reflection.Emit.OpCode Stelem_Ref;
                static /*0x500*/ System.Reflection.Emit.OpCode Ldelem;
                static /*0x508*/ System.Reflection.Emit.OpCode Stelem;
                static /*0x510*/ System.Reflection.Emit.OpCode Unbox_Any;
                static /*0x518*/ System.Reflection.Emit.OpCode Conv_Ovf_I1;
                static /*0x520*/ System.Reflection.Emit.OpCode Conv_Ovf_U1;
                static /*0x528*/ System.Reflection.Emit.OpCode Conv_Ovf_I2;
                static /*0x530*/ System.Reflection.Emit.OpCode Conv_Ovf_U2;
                static /*0x538*/ System.Reflection.Emit.OpCode Conv_Ovf_I4;
                static /*0x540*/ System.Reflection.Emit.OpCode Conv_Ovf_U4;
                static /*0x548*/ System.Reflection.Emit.OpCode Conv_Ovf_I8;
                static /*0x550*/ System.Reflection.Emit.OpCode Conv_Ovf_U8;
                static /*0x558*/ System.Reflection.Emit.OpCode Refanyval;
                static /*0x560*/ System.Reflection.Emit.OpCode Ckfinite;
                static /*0x568*/ System.Reflection.Emit.OpCode Mkrefany;
                static /*0x570*/ System.Reflection.Emit.OpCode Ldtoken;
                static /*0x578*/ System.Reflection.Emit.OpCode Conv_U2;
                static /*0x580*/ System.Reflection.Emit.OpCode Conv_U1;
                static /*0x588*/ System.Reflection.Emit.OpCode Conv_I;
                static /*0x590*/ System.Reflection.Emit.OpCode Conv_Ovf_I;
                static /*0x598*/ System.Reflection.Emit.OpCode Conv_Ovf_U;
                static /*0x5a0*/ System.Reflection.Emit.OpCode Add_Ovf;
                static /*0x5a8*/ System.Reflection.Emit.OpCode Add_Ovf_Un;
                static /*0x5b0*/ System.Reflection.Emit.OpCode Mul_Ovf;
                static /*0x5b8*/ System.Reflection.Emit.OpCode Mul_Ovf_Un;
                static /*0x5c0*/ System.Reflection.Emit.OpCode Sub_Ovf;
                static /*0x5c8*/ System.Reflection.Emit.OpCode Sub_Ovf_Un;
                static /*0x5d0*/ System.Reflection.Emit.OpCode Endfinally;
                static /*0x5d8*/ System.Reflection.Emit.OpCode Leave;
                static /*0x5e0*/ System.Reflection.Emit.OpCode Leave_S;
                static /*0x5e8*/ System.Reflection.Emit.OpCode Stind_I;
                static /*0x5f0*/ System.Reflection.Emit.OpCode Conv_U;
                static /*0x5f8*/ System.Reflection.Emit.OpCode Prefix7;
                static /*0x600*/ System.Reflection.Emit.OpCode Prefix6;
                static /*0x608*/ System.Reflection.Emit.OpCode Prefix5;
                static /*0x610*/ System.Reflection.Emit.OpCode Prefix4;
                static /*0x618*/ System.Reflection.Emit.OpCode Prefix3;
                static /*0x620*/ System.Reflection.Emit.OpCode Prefix2;
                static /*0x628*/ System.Reflection.Emit.OpCode Prefix1;
                static /*0x630*/ System.Reflection.Emit.OpCode Prefixref;
                static /*0x638*/ System.Reflection.Emit.OpCode Arglist;
                static /*0x640*/ System.Reflection.Emit.OpCode Ceq;
                static /*0x648*/ System.Reflection.Emit.OpCode Cgt;
                static /*0x650*/ System.Reflection.Emit.OpCode Cgt_Un;
                static /*0x658*/ System.Reflection.Emit.OpCode Clt;
                static /*0x660*/ System.Reflection.Emit.OpCode Clt_Un;
                static /*0x668*/ System.Reflection.Emit.OpCode Ldftn;
                static /*0x670*/ System.Reflection.Emit.OpCode Ldvirtftn;
                static /*0x678*/ System.Reflection.Emit.OpCode Ldarg;
                static /*0x680*/ System.Reflection.Emit.OpCode Ldarga;
                static /*0x688*/ System.Reflection.Emit.OpCode Starg;
                static /*0x690*/ System.Reflection.Emit.OpCode Ldloc;
                static /*0x698*/ System.Reflection.Emit.OpCode Ldloca;
                static /*0x6a0*/ System.Reflection.Emit.OpCode Stloc;
                static /*0x6a8*/ System.Reflection.Emit.OpCode Localloc;
                static /*0x6b0*/ System.Reflection.Emit.OpCode Endfilter;
                static /*0x6b8*/ System.Reflection.Emit.OpCode Unaligned;
                static /*0x6c0*/ System.Reflection.Emit.OpCode Volatile;
                static /*0x6c8*/ System.Reflection.Emit.OpCode Tailcall;
                static /*0x6d0*/ System.Reflection.Emit.OpCode Initobj;
                static /*0x6d8*/ System.Reflection.Emit.OpCode Constrained;
                static /*0x6e0*/ System.Reflection.Emit.OpCode Cpblk;
                static /*0x6e8*/ System.Reflection.Emit.OpCode Initblk;
                static /*0x6f0*/ System.Reflection.Emit.OpCode Rethrow;
                static /*0x6f8*/ System.Reflection.Emit.OpCode Sizeof;
                static /*0x700*/ System.Reflection.Emit.OpCode Refanytype;
                static /*0x708*/ System.Reflection.Emit.OpCode Readonly;

                static /*0x2149160*/ OpCodes();
            }

            class ParameterBuilder
            {
            }

            class PropertyBuilder : System.Reflection.PropertyInfo
            {
                /*0x25313f4*/ System.Reflection.PropertyAttributes get_Attributes();
                /*0x2531430*/ bool get_CanRead();
                /*0x253146c*/ bool get_CanWrite();
                /*0x25314a8*/ System.Type get_DeclaringType();
                /*0x25314e4*/ string get_Name();
                /*0x2531520*/ System.Type get_PropertyType();
                /*0x253155c*/ System.Reflection.ParameterInfo[] GetIndexParameters();
                /*0x2531598*/ System.Type get_ReflectedType();
                /*0x25315d4*/ System.Reflection.MethodInfo[] GetAccessors(bool nonPublic);
                /*0x2531610*/ object[] GetCustomAttributes(bool inherit);
                /*0x253164c*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x2531688*/ System.Reflection.MethodInfo GetGetMethod(bool nonPublic);
                /*0x25316c4*/ System.Reflection.MethodInfo GetSetMethod(bool nonPublic);
                /*0x2531700*/ object GetValue(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
                /*0x253173c*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x2531778*/ void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);
            }

            class SignatureHelper
            {
            }

            class TypeBuilder : System.Reflection.TypeInfo
            {
                static int UnspecifiedTypeSize = 0;

                /*0x207f484*/ System.Reflection.Assembly get_Assembly();
                /*0x207f4c4*/ string get_AssemblyQualifiedName();
                /*0x207f504*/ System.Type get_BaseType();
                /*0x207f544*/ string get_FullName();
                /*0x207f584*/ System.Reflection.Module get_Module();
                /*0x207f5c4*/ string get_Name();
                /*0x207f604*/ string get_Namespace();
                /*0x207f644*/ System.Reflection.TypeInfo CreateTypeInfo();
                /*0x207f684*/ System.Reflection.Emit.ConstructorBuilder DefineConstructor(System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type[] parameterTypes);
                /*0x207f6c4*/ System.Reflection.Emit.FieldBuilder DefineField(string fieldName, System.Type type, System.Reflection.FieldAttributes attributes);
                /*0x207f704*/ System.Reflection.Emit.MethodBuilder DefineMethod(string name, System.Reflection.MethodAttributes attributes, System.Type returnType, System.Type[] parameterTypes);
                /*0x207f744*/ System.Reflection.Emit.TypeBuilder DefineNestedType(string name, System.Reflection.TypeAttributes attr, System.Type parent, System.Type[] interfaces);
                /*0x207f784*/ void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder);
                /*0x207f7c4*/ System.Type GetElementType();
                /*0x207f804*/ System.Type get_UnderlyingSystemType();
                /*0x207f840*/ System.Reflection.TypeAttributes GetAttributeFlagsImpl();
                /*0x207f87c*/ System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x207f8b8*/ System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr);
                /*0x207f8f4*/ object[] GetCustomAttributes(bool inherit);
                /*0x207f930*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x207f96c*/ System.Reflection.EventInfo GetEvent(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x207f9a8*/ System.Reflection.FieldInfo GetField(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x207f9e4*/ System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr);
                /*0x207fa20*/ System.Type[] GetInterfaces();
                /*0x207fa5c*/ System.Reflection.MethodInfo GetMethodImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x207fa98*/ System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr);
                /*0x207fad4*/ System.Type GetNestedType(string name, System.Reflection.BindingFlags bindingAttr);
                /*0x207fb10*/ System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr);
                /*0x207fb4c*/ System.Reflection.PropertyInfo GetPropertyImpl(string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers);
                /*0x207fb88*/ bool HasElementTypeImpl();
                /*0x207fbc4*/ object InvokeMember(string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
                /*0x207fc00*/ bool IsArrayImpl();
                /*0x207fc3c*/ bool IsByRefImpl();
                /*0x207fc78*/ bool IsCOMObjectImpl();
                /*0x207fcb4*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x207fcf0*/ bool IsPointerImpl();
                /*0x207fd2c*/ bool IsPrimitiveImpl();
            }

            class TypeBuilderInstantiation : System.Reflection.TypeInfo
            {
                static /*0x207fd68*/ System.Type MakeGenericType(System.Type type, System.Type[] typeArguments);
            }
        }
    }

    namespace IO
    {
        class __Error
        {
            static /*0x22668c0*/ void EndOfFile();
            static /*0x226b398*/ void FileNotOpen();
            static /*0x226b3f8*/ void StreamIsClosed();
            static /*0x226b458*/ void MemoryStreamNotExpandable();
            static /*0x226b4b4*/ void ReaderClosed();
            static /*0x226b514*/ void ReadNotSupported();
            static /*0x226b570*/ void WrongAsyncResult();
            static /*0x226b5cc*/ void EndReadCalledTwice();
            static /*0x226b628*/ void EndWriteCalledTwice();
            static /*0x226b684*/ string GetDisplayablePath(string path, bool isInvalidPath);
            static /*0x226b7d0*/ void WinIOError(int errorCode, string maybeFullPath);
            static /*0x226bd50*/ void WriteNotSupported();
            static /*0x226bdac*/ void WriterClosed();
        }

        class BinaryReader : System.IDisposable
        {
            /*0x10*/ System.IO.Stream m_stream;
            /*0x18*/ byte[] m_buffer;
            /*0x20*/ System.Text.Decoder m_decoder;
            /*0x28*/ byte[] m_charBytes;
            /*0x30*/ char[] m_singleChar;
            /*0x38*/ char[] m_charBuffer;
            /*0x40*/ int m_maxCharsSize;
            /*0x44*/ bool m_2BytesPerChar;
            /*0x45*/ bool m_isMemoryStream;
            /*0x46*/ bool m_leaveOpen;

            /*0x1c55410*/ BinaryReader(System.IO.Stream input);
            /*0x1c55708*/ BinaryReader(System.IO.Stream input, System.Text.Encoding encoding);
            /*0x1c55484*/ BinaryReader(System.IO.Stream input, System.Text.Encoding encoding, bool leaveOpen);
            /*0x1c55710*/ System.IO.Stream get_BaseStream();
            /*0x1c55718*/ void Close();
            /*0x1c55728*/ void Dispose(bool disposing);
            /*0x1c55778*/ void Dispose();
            /*0x1c55788*/ int Read();
            /*0x1c55a44*/ bool ReadBoolean();
            /*0x1c55aa0*/ byte ReadByte();
            /*0x1c55afc*/ sbyte ReadSByte();
            /*0x1c55b50*/ char ReadChar();
            /*0x1c55b8c*/ short ReadInt16();
            /*0x1c55be8*/ ushort ReadUInt16();
            /*0x1c55c44*/ int ReadInt32();
            /*0x1c55d4c*/ uint ReadUInt32();
            /*0x1c55dd0*/ long ReadInt64();
            /*0x1c55e94*/ ulong ReadUInt64();
            /*0x1c55f58*/ float ReadSingle();
            /*0x1c55fd0*/ double ReadDouble();
            /*0x1c56048*/ decimal ReadDecimal();
            /*0x1c5619c*/ string ReadString();
            /*0x1c564e4*/ int InternalReadChars(char[] buffer, int index, int count);
            /*0x1c557b8*/ int InternalReadOneChar();
            /*0x1c567f4*/ char[] ReadChars(int count);
            /*0x1c56964*/ int Read(byte[] buffer, int index, int count);
            /*0x1c56b08*/ byte[] ReadBytes(int count);
            /*0x1c56cac*/ void FillBuffer(int numBytes);
            /*0x1c56438*/ int Read7BitEncodedInt();
        }

        class BinaryWriter : System.IDisposable
        {
            static /*0x0*/ System.IO.BinaryWriter Null;
            /*0x10*/ System.IO.Stream OutStream;
            /*0x18*/ byte[] _buffer;
            /*0x20*/ System.Text.Encoding _encoding;
            /*0x28*/ System.Text.Encoder _encoder;
            /*0x30*/ bool _leaveOpen;
            /*0x38*/ byte[] _largeByteBuffer;
            /*0x40*/ int _maxChars;

            static /*0x1c57d18*/ BinaryWriter();
            /*0x1c56e00*/ BinaryWriter();
            /*0x1c56ef0*/ BinaryWriter(System.IO.Stream output);
            /*0x1c570e0*/ BinaryWriter(System.IO.Stream output, System.Text.Encoding encoding);
            /*0x1c56f6c*/ BinaryWriter(System.IO.Stream output, System.Text.Encoding encoding, bool leaveOpen);
            /*0x1c570e8*/ void Close();
            /*0x1c570f8*/ void Dispose(bool disposing);
            /*0x1c5713c*/ void Dispose();
            /*0x1c5714c*/ void Flush();
            /*0x1c57170*/ long Seek(int offset, System.IO.SeekOrigin origin);
            /*0x1c57198*/ void Write(bool value);
            /*0x1c571f4*/ void Write(byte value);
            /*0x1c57218*/ void Write(byte[] buffer);
            /*0x1c5729c*/ void Write(byte[] buffer, int index, int count);
            /*0x1c572c0*/ void Write(char ch);
            /*0x1c573f0*/ void Write(char[] chars);
            /*0x1c574a0*/ void Write(double value);
            /*0x1c57514*/ void Write(short value);
            /*0x1c57588*/ void Write(ushort value);
            /*0x1c575fc*/ void Write(int value);
            /*0x1c576a8*/ void Write(uint value);
            /*0x1c57754*/ void Write(long value);
            /*0x1c57870*/ void Write(ulong value);
            /*0x1c5798c*/ void Write(float value);
            /*0x1c57a00*/ void Write(string value);
            /*0x1c57cb4*/ void Write7BitEncodedInt(int value);
        }

        class Directory
        {
            static /*0x2040998*/ string[] GetFiles(string path);
            static /*0x2040a60*/ string[] GetFiles(string path, string searchPattern);
            static /*0x2040a44*/ string[] InternalGetFiles(string path, string searchPattern, System.IO.SearchOption searchOption);
            static /*0x2040bf0*/ string[] GetDirectories(string path);
            static /*0x2040cb8*/ string[] GetDirectories(string path, string searchPattern);
            static /*0x2040c9c*/ string[] InternalGetDirectories(string path, string searchPattern, System.IO.SearchOption searchOption);
            static /*0x2040b00*/ string[] InternalGetFileDirectoryNames(string path, string userPathOriginal, string searchPattern, bool includeFiles, bool includeDirs, System.IO.SearchOption searchOption, bool checkHost);
            static /*0x2040d58*/ System.IO.DirectoryInfo CreateDirectory(string path);
            static /*0x2040f94*/ System.IO.DirectoryInfo CreateDirectoriesInternal(string path);
            static /*0x2041270*/ void Delete(string path);
            static /*0x2041504*/ void RecursiveDelete(string path);
            static /*0x204166c*/ void Delete(string path, bool recursive);
            static /*0x2041700*/ bool Exists(string path);
            static /*0x2041840*/ string GetCurrentDirectory();
            static /*0x2041858*/ string InsecureGetCurrentDirectory();
            static /*0x204192c*/ string GetDemandDir(string fullPath, bool thisDirOnly);

            class SearchData
            {
                /*0x10*/ string fullPath;
                /*0x18*/ string userPath;
                /*0x20*/ System.IO.SearchOption searchOption;

                /*0x180fdf8*/ SearchData(string fullPath, string userPath, System.IO.SearchOption searchOption);
            }
        }

        class DirectoryNotFoundException : System.IO.IOException
        {
            /*0x204289c*/ DirectoryNotFoundException();
            /*0x20414d0*/ DirectoryNotFoundException(string message);
            /*0x204290c*/ DirectoryNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class DriveNotFoundException : System.IO.IOException
        {
            /*0x20440e0*/ DriveNotFoundException();
            /*0x2044150*/ DriveNotFoundException(string message);
            /*0x2044184*/ DriveNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class EndOfStreamException : System.IO.IOException
        {
            /*0x2453dc4*/ EndOfStreamException();
            /*0x2453e2c*/ EndOfStreamException(string message);
            /*0x2453e5c*/ EndOfStreamException(string message, System.Exception innerException);
            /*0x2453e8c*/ EndOfStreamException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class FileInfo : System.IO.FileSystemInfo
        {
            /*0x60*/ string _name;

            /*0x20e1db4*/ FileInfo(string fileName);
            /*0x20e1f24*/ FileInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x20e1e8c*/ void Init(string fileName, bool checkHost);
            /*0x20e1f1c*/ string GetDisplayPath(string originalPath);
            /*0x20e2100*/ string get_Name();
            /*0x20e2108*/ long get_Length();
            /*0x20e21b0*/ string get_DirectoryName();
            /*0x20e2218*/ System.IO.DirectoryInfo get_Directory();
            /*0x20e2290*/ bool get_Exists();
            /*0x20e2360*/ string ToString();
        }

        class FileLoadException : System.IO.IOException
        {
            /*0x90*/ string _fileName;
            /*0x98*/ string _fusionLog;

            static /*0x20e2470*/ string FormatFileLoadExceptionMessage(string fileName, int hResult);
            /*0x20e2368*/ FileLoadException();
            /*0x20e23d8*/ FileLoadException(string message);
            /*0x20e27e0*/ FileLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x20e240c*/ string get_Message();
            /*0x20e243c*/ void SetMessageField();
            /*0x20e24f4*/ string ToString();
            /*0x20e2910*/ string get_FusionLog();
            /*0x20e2918*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class FileNotFoundException : System.IO.IOException
        {
            /*0x90*/ string _fileName;
            /*0x98*/ string _fusionLog;

            /*0x20e2adc*/ FileNotFoundException();
            /*0x20e2b4c*/ FileNotFoundException(string message);
            /*0x20e2b80*/ FileNotFoundException(string message, string fileName);
            /*0x20e2f50*/ FileNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x20e2bc0*/ string get_Message();
            /*0x20e2be4*/ void SetMessageField();
            /*0x20e2c64*/ string ToString();
            /*0x20e3080*/ string get_FusionLog();
            /*0x20e3088*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class FileSystemEnumerableFactory
        {
            static /*0x20e693c*/ System.Collections.Generic.IEnumerable<string> CreateFileNameIterator(string path, string originalUserPath, string searchPattern, bool includeFiles, bool includeDirs, System.IO.SearchOption searchOption, bool checkHost);
        }

        class Iterator<TSource> : System.Collections.Generic.IEnumerable<TSource>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<TSource>, System.IDisposable, System.Collections.IEnumerator
        {
            /*0x0*/ int threadId;
            /*0x0*/ int state;
            /*0x0*/ TSource current;

            Iterator();
            TSource get_Current();
            System.IO.Iterator<TSource> Clone();
            void Dispose();
            void Dispose(bool disposing);
            System.Collections.Generic.IEnumerator<TSource> GetEnumerator();
            bool MoveNext();
            object System.Collections.IEnumerator.get_Current();
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            void System.Collections.IEnumerator.Reset();
        }

        class FileSystemEnumerableIterator<TSource> : System.IO.Iterator<TSource>
        {
            /*0x0*/ System.IO.SearchResultHandler<TSource> _resultHandler;
            /*0x0*/ System.Collections.Generic.List<System.IO.Directory.SearchData> searchStack;
            /*0x0*/ System.IO.Directory.SearchData searchData;
            /*0x0*/ string searchCriteria;
            /*0x0*/ Microsoft.Win32.SafeHandles.SafeFindHandle _hnd;
            /*0x0*/ bool needsParentPathDiscoveryDemand;
            /*0x0*/ bool empty;
            /*0x0*/ string userPath;
            /*0x0*/ System.IO.SearchOption searchOption;
            /*0x0*/ string fullPath;
            /*0x0*/ string normalizedSearchPath;
            /*0x0*/ bool _checkHost;

            static string NormalizeSearchPattern(string searchPattern);
            static string GetNormalizedSearchCriteria(string fullSearchString, string fullPathMod);
            static string GetFullSearchString(string fullPath, string searchPattern);
            FileSystemEnumerableIterator(string path, string originalUserPath, string searchPattern, System.IO.SearchOption searchOption, System.IO.SearchResultHandler<TSource> resultHandler, bool checkHost);
            FileSystemEnumerableIterator(string fullPath, string normalizedSearchPath, string searchCriteria, string userPath, System.IO.SearchOption searchOption, System.IO.SearchResultHandler<TSource> resultHandler, bool checkHost);
            void CommonInit();
            System.IO.Iterator<TSource> Clone();
            void Dispose(bool disposing);
            bool MoveNext();
            System.IO.SearchResult CreateSearchResult(System.IO.Directory.SearchData localSearchData, Microsoft.Win32.Win32Native.WIN32_FIND_DATA findData);
            void HandleError(int hr, string path);
            void AddSearchableDirsToStack(System.IO.Directory.SearchData localSearchData);
            void DoDemand(string fullPathToDemand);
        }

        class SearchResultHandler<TSource>
        {
            SearchResultHandler();
            bool IsResultIncluded(System.IO.SearchResult result);
            TSource CreateObject(System.IO.SearchResult result);
        }

        class StringResultHandler : System.IO.SearchResultHandler<string>
        {
            /*0x10*/ bool _includeFiles;
            /*0x11*/ bool _includeDirs;

            /*0x1e20570*/ StringResultHandler(bool includeFiles, bool includeDirs);
            /*0x1e205e0*/ bool IsResultIncluded(System.IO.SearchResult result);
            /*0x1e20650*/ string CreateObject(System.IO.SearchResult result);
        }

        class SearchResult
        {
            /*0x10*/ string fullPath;
            /*0x18*/ string userPath;
            /*0x20*/ Microsoft.Win32.Win32Native.WIN32_FIND_DATA findData;

            /*0x204e2ac*/ SearchResult(string fullPath, string userPath, Microsoft.Win32.Win32Native.WIN32_FIND_DATA findData);
            /*0x204e2ec*/ string get_UserPath();
            /*0x204e2f4*/ Microsoft.Win32.Win32Native.WIN32_FIND_DATA get_FindData();
        }

        class FileSystemEnumerableHelpers
        {
            static /*0x20e6a24*/ bool IsDir(Microsoft.Win32.Win32Native.WIN32_FIND_DATA data);
            static /*0x20e6ac8*/ bool IsFile(Microsoft.Win32.Win32Native.WIN32_FIND_DATA data);
        }

        class FileSystemInfo : System.MarshalByRefObject, System.Runtime.Serialization.ISerializable
        {
            /*0x18*/ System.IO.MonoIOStat _data;
            /*0x40*/ int _dataInitialised;
            /*0x48*/ string FullPath;
            /*0x50*/ string OriginalPath;
            /*0x58*/ string _displayPath;

            /*0x20e1e30*/ FileSystemInfo();
            /*0x20e1fb0*/ FileSystemInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x20e6ae8*/ string get_FullName();
            string get_Name();
            bool get_Exists();
            /*0x20e217c*/ void Refresh();
            /*0x20e6af0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x20e6bf4*/ string get_DisplayPath();
            /*0x20e6bfc*/ void set_DisplayPath(string value);
        }

        class IOException : System.SystemException
        {
            /*0x88*/ string _maybeFullPath;

            /*0x1a84434*/ IOException();
            /*0x1a844a4*/ IOException(string message);
            /*0x1a844d8*/ IOException(string message, int hresult);
            /*0x1a8450c*/ IOException(string message, int hresult, string maybeFullPath);
            /*0x1a84554*/ IOException(string message, System.Exception innerException);
            /*0x1a84588*/ IOException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class MemoryStream : System.IO.Stream
        {
            /*0x28*/ byte[] _buffer;
            /*0x30*/ int _origin;
            /*0x34*/ int _position;
            /*0x38*/ int _length;
            /*0x3c*/ int _capacity;
            /*0x40*/ bool _expandable;
            /*0x41*/ bool _writable;
            /*0x42*/ bool _exposable;
            /*0x43*/ bool _isOpen;
            /*0x48*/ System.Threading.Tasks.Task<int> _lastReadTask;

            /*0x1c16ae0*/ MemoryStream();
            /*0x1c16ae8*/ MemoryStream(int capacity);
            /*0x1c16bf4*/ MemoryStream(byte[] buffer);
            /*0x1c16bfc*/ MemoryStream(byte[] buffer, bool writable);
            /*0x1c16cfc*/ MemoryStream(byte[] buffer, int index, int count);
            /*0x1c16d08*/ MemoryStream(byte[] buffer, int index, int count, bool writable, bool publiclyVisible);
            /*0x1c16f0c*/ bool get_CanRead();
            /*0x1c16f14*/ bool get_CanSeek();
            /*0x1c16f1c*/ bool get_CanWrite();
            /*0x1c16f24*/ void EnsureWriteable();
            /*0x1c16f50*/ void Dispose(bool disposing);
            /*0x1c16f6c*/ bool EnsureCapacity(int value);
            /*0x1c17030*/ void Flush();
            /*0x1c17034*/ byte[] GetBuffer();
            /*0x1c170a0*/ bool TryGetBuffer(ref System.ArraySegment<byte> buffer);
            /*0x1c17138*/ byte[] InternalGetBuffer();
            /*0x1c17140*/ int InternalGetPosition();
            /*0x1c17170*/ int InternalReadInt32();
            /*0x1c17230*/ int InternalEmulateRead(int count);
            /*0x1c1727c*/ int get_Capacity();
            /*0x1c172b4*/ void set_Capacity(int value);
            /*0x1c1741c*/ long get_Length();
            /*0x1c17458*/ long get_Position();
            /*0x1c17490*/ void set_Position(long value);
            /*0x1c1754c*/ int Read(byte[] buffer, int offset, int count);
            /*0x1c17778*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x1c17b5c*/ int ReadByte();
            /*0x1c17bd4*/ long Seek(long offset, System.IO.SeekOrigin loc);
            /*0x1c17d54*/ byte[] ToArray();
            /*0x1c17e14*/ void Write(byte[] buffer, int offset, int count);
            /*0x1c18108*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x1c18468*/ void WriteByte(byte value);
        }

        class PathTooLongException : System.IO.IOException
        {
            /*0x252e554*/ PathTooLongException();
            /*0x252e5c4*/ PathTooLongException(string message);
            /*0x252e5f8*/ PathTooLongException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class PinnedBufferMemoryStream : System.IO.UnmanagedMemoryStream
        {
            /*0x68*/ byte[] _array;
            /*0x70*/ System.Runtime.InteropServices.GCHandle _pinningHandle;

            /*0x252f71c*/ PinnedBufferMemoryStream(byte[] array);
            /*0x252f7fc*/ void Finalize();
            /*0x252f874*/ void Dispose(bool disposing);
        }

        class Stream : System.MarshalByRefObject, System.IDisposable
        {
            static /*0x0*/ System.IO.Stream Null;
            /*0x18*/ System.IO.Stream.ReadWriteTask _activeReadWriteTask;
            /*0x20*/ System.Threading.SemaphoreSlim _asyncActiveSemaphore;

            static /*0x24a40b4*/ Stream();
            static /*0x24a3368*/ int BlockingEndRead(System.IAsyncResult asyncResult);
            static /*0x24a3c28*/ void BlockingEndWrite(System.IAsyncResult asyncResult);
            /*0x24a40ac*/ Stream();
            /*0x24a27d8*/ System.Threading.SemaphoreSlim EnsureAsyncActiveSemaphoreInitialized();
            bool get_CanRead();
            bool get_CanSeek();
            bool get_CanWrite();
            long get_Length();
            long get_Position();
            void set_Position(long value);
            /*0x24a28f4*/ int get_ReadTimeout();
            /*0x24a2950*/ void set_ReadTimeout(int value);
            /*0x24a29ac*/ int get_WriteTimeout();
            /*0x24a2a08*/ void Close();
            /*0x24a2a84*/ void Dispose();
            /*0x24a2a94*/ void Dispose(bool disposing);
            void Flush();
            /*0x24a2a98*/ System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x24a2aa0*/ System.IAsyncResult BeginReadInternal(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state, bool serializeAsynchronously);
            /*0x24a3100*/ int EndRead(System.IAsyncResult asyncResult);
            /*0x24a3370*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x24a3438*/ System.Threading.Tasks.Task<int> BeginEndReadAsync(byte[] buffer, int offset, int count);
            /*0x24a3628*/ System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x24a3630*/ System.IAsyncResult BeginWriteInternal(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state, bool serializeAsynchronously);
            /*0x24a2e48*/ void RunReadWriteTaskWhenReady(System.Threading.Tasks.Task asyncWaiter, System.IO.Stream.ReadWriteTask readWriteTask);
            /*0x24a3038*/ void RunReadWriteTask(System.IO.Stream.ReadWriteTask readWriteTask);
            /*0x24a39d0*/ void EndWrite(System.IAsyncResult asyncResult);
            /*0x24a3c30*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count);
            /*0x24a3cd0*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x24a3d84*/ System.Threading.Tasks.Task BeginEndWriteAsync(byte[] buffer, int offset, int count);
            long Seek(long offset, System.IO.SeekOrigin origin);
            int Read(byte[] buffer, int offset, int count);
            /*0x24a3f74*/ int ReadByte();
            void Write(byte[] buffer, int offset, int count);
            /*0x24a4014*/ void WriteByte(byte value);
            /*0x24a2cdc*/ System.IAsyncResult BlockingBeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
            /*0x24a386c*/ System.IAsyncResult BlockingBeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);

            struct ReadWriteParameters
            {
                /*0x10*/ byte[] Buffer;
                /*0x18*/ int Offset;
                /*0x1c*/ int Count;
            }

            class ReadWriteTask : System.Threading.Tasks.Task<int>, System.Threading.Tasks.ITaskCompletionAction
            {
                static /*0x0*/ System.Threading.ContextCallback s_invokeAsyncCallback;
                /*0x54*/ bool _isRead;
                /*0x58*/ System.IO.Stream _stream;
                /*0x60*/ byte[] _buffer;
                /*0x68*/ int _offset;
                /*0x6c*/ int _count;
                /*0x70*/ System.AsyncCallback _callback;
                /*0x78*/ System.Threading.ExecutionContext _context;

                static /*0x181da20*/ void InvokeAsyncCallback(object completedTask);
                /*0x181d89c*/ ReadWriteTask(bool isRead, System.Func<object, int> function, object state, System.IO.Stream stream, byte[] buffer, int offset, int count, System.AsyncCallback callback);
                /*0x181d194*/ void ClearBeginState();
                /*0x181da98*/ void System.Threading.Tasks.ITaskCompletionAction.Invoke(System.Threading.Tasks.Task completingTask);
            }

            class NullStream : System.IO.Stream
            {
                static /*0x0*/ System.Threading.Tasks.Task<int> s_nullReadTask;

                /*0x181d404*/ NullStream();
                /*0x181d468*/ bool get_CanRead();
                /*0x181d470*/ bool get_CanWrite();
                /*0x181d478*/ bool get_CanSeek();
                /*0x181d480*/ long get_Length();
                /*0x181d488*/ long get_Position();
                /*0x181d490*/ void set_Position(long value);
                /*0x181d494*/ void Dispose(bool disposing);
                /*0x181d498*/ void Flush();
                /*0x181d49c*/ System.IAsyncResult BeginRead(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0x181d514*/ int EndRead(System.IAsyncResult asyncResult);
                /*0x181d5c4*/ System.IAsyncResult BeginWrite(byte[] buffer, int offset, int count, System.AsyncCallback callback, object state);
                /*0x181d63c*/ void EndWrite(System.IAsyncResult asyncResult);
                /*0x181d6ec*/ int Read(byte[] buffer, int offset, int count);
                /*0x181d6f4*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x181d7e4*/ int ReadByte();
                /*0x181d7ec*/ void Write(byte[] buffer, int offset, int count);
                /*0x181d7f0*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x181d890*/ void WriteByte(byte value);
                /*0x181d894*/ long Seek(long offset, System.IO.SeekOrigin origin);
            }

            class SynchronousAsyncResult : System.IAsyncResult
            {
                /*0x10*/ object _stateObject;
                /*0x18*/ bool _isWrite;
                /*0x20*/ System.Threading.ManualResetEvent _waitHandle;
                /*0x28*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo _exceptionInfo;
                /*0x30*/ bool _endXxxCalled;
                /*0x34*/ int _bytesRead;

                static /*0x181dea4*/ int EndRead(System.IAsyncResult asyncResult);
                static /*0x181df44*/ void EndWrite(System.IAsyncResult asyncResult);
                /*0x181dc98*/ SynchronousAsyncResult(int bytesRead, object asyncStateObject);
                /*0x181dcd4*/ SynchronousAsyncResult(object asyncStateObject);
                /*0x181dd08*/ SynchronousAsyncResult(System.Exception ex, object asyncStateObject, bool isWrite);
                /*0x181dd5c*/ bool get_IsCompleted();
                /*0x181dd64*/ System.Threading.WaitHandle get_AsyncWaitHandle();
                /*0x181de80*/ object get_AsyncState();
                /*0x181de88*/ bool get_CompletedSynchronously();
                /*0x181de90*/ void ThrowIfError();

                class <>c
                {
                    static /*0x0*/ System.IO.Stream.SynchronousAsyncResult.<> <>9;
                    static /*0x8*/ System.Func<System.Threading.ManualResetEvent> <>9__12_0;

                    static /*0x2aa5234*/ <>c();
                    /*0x2aa5294*/ <>c();
                    /*0x2aa529c*/ System.Threading.ManualResetEvent <get_AsyncWaitHandle>b__12_0();
                }
            }

            class <>c
            {
                static /*0x0*/ System.IO.Stream.<> <>9;
                static /*0x8*/ System.Func<System.Threading.SemaphoreSlim> <>9__4_0;
                static /*0x10*/ System.Func<object, int> <>9__39_0;
                static /*0x18*/ System.Func<System.IO.Stream, System.IO.Stream.ReadWriteParameters, System.AsyncCallback, object, System.IAsyncResult> <>9__43_0;
                static /*0x20*/ System.Func<System.IO.Stream, System.IAsyncResult, int> <>9__43_1;
                static /*0x28*/ System.Func<object, int> <>9__46_0;
                static /*0x30*/ System.Action<System.Threading.Tasks.Task, object> <>9__47_0;
                static /*0x38*/ System.Func<System.IO.Stream, System.IO.Stream.ReadWriteParameters, System.AsyncCallback, object, System.IAsyncResult> <>9__53_0;
                static /*0x40*/ System.Func<System.IO.Stream, System.IAsyncResult, System.Threading.Tasks.VoidTaskResult> <>9__53_1;

                static /*0x181cfdc*/ <>c();
                /*0x181d03c*/ <>c();
                /*0x181d044*/ System.Threading.SemaphoreSlim <EnsureAsyncActiveSemaphoreInitialized>b__4_0();
                /*0x181d0a4*/ int <BeginReadInternal>b__39_0(object <p0>);
                /*0x181d19c*/ System.IAsyncResult <BeginEndReadAsync>b__43_0(System.IO.Stream stream, System.IO.Stream.ReadWriteParameters args, System.AsyncCallback callback, object state);
                /*0x181d1d0*/ int <BeginEndReadAsync>b__43_1(System.IO.Stream stream, System.IAsyncResult asyncResult);
                /*0x181d1fc*/ int <BeginWriteInternal>b__46_0(object <p0>);
                /*0x181d2f0*/ void <RunReadWriteTaskWhenReady>b__47_0(System.Threading.Tasks.Task t, object state);
                /*0x181d398*/ System.IAsyncResult <BeginEndWriteAsync>b__53_0(System.IO.Stream stream, System.IO.Stream.ReadWriteParameters args, System.AsyncCallback callback, object state);
                /*0x181d3cc*/ System.Threading.Tasks.VoidTaskResult <BeginEndWriteAsync>b__53_1(System.IO.Stream stream, System.IAsyncResult asyncResult);
            }
        }

        class StreamReader : System.IO.TextReader
        {
            static /*0x0*/ System.IO.StreamReader Null;
            /*0x18*/ System.IO.Stream stream;
            /*0x20*/ System.Text.Encoding encoding;
            /*0x28*/ System.Text.Decoder decoder;
            /*0x30*/ byte[] byteBuffer;
            /*0x38*/ char[] charBuffer;
            /*0x40*/ byte[] _preamble;
            /*0x48*/ int charPos;
            /*0x4c*/ int charLen;
            /*0x50*/ int byteLen;
            /*0x54*/ int bytePos;
            /*0x58*/ int _maxCharsPerBuffer;
            /*0x5c*/ bool _detectEncoding;
            /*0x5d*/ bool _checkPreamble;
            /*0x5e*/ bool _isBlocked;
            /*0x5f*/ bool _closable;
            /*0x60*/ System.Threading.Tasks.Task _asyncReadTask;

            static /*0x24a5b60*/ StreamReader();
            static /*0x24a4128*/ int get_DefaultBufferSize();
            /*0x24a41b4*/ StreamReader();
            /*0x24a4218*/ StreamReader(System.IO.Stream stream);
            /*0x24a4220*/ StreamReader(System.IO.Stream stream, bool detectEncodingFromByteOrderMarks);
            /*0x24a4470*/ StreamReader(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x24a42b4*/ StreamReader(System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen);
            /*0x24a4628*/ StreamReader(string path);
            /*0x24a4630*/ StreamReader(string path, bool detectEncodingFromByteOrderMarks);
            /*0x24a46d0*/ StreamReader(string path, System.Text.Encoding encoding);
            /*0x24a46c4*/ StreamReader(string path, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize);
            /*0x24a4754*/ StreamReader(string path, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool checkHost);
            /*0x24a4130*/ void CheckAsyncTaskInProgress();
            /*0x24a44f4*/ void Init(System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen);
            /*0x24a49a0*/ void Init(System.IO.Stream stream);
            /*0x24a49b0*/ void Close();
            /*0x24a49c0*/ void Dispose(bool disposing);
            /*0x24a4abc*/ System.Text.Encoding get_CurrentEncoding();
            /*0x24a4ac4*/ System.IO.Stream get_BaseStream();
            /*0x24a4aac*/ bool get_LeaveOpen();
            /*0x24a4acc*/ bool get_EndOfStream();
            /*0x24a4b30*/ int Peek();
            /*0x24a4bc8*/ bool DataAvailable();
            /*0x24a4bd8*/ int Read();
            /*0x24a4c70*/ int Read(char[] buffer, int index, int count);
            /*0x24a50a8*/ string ReadToEnd();
            /*0x24a5398*/ void CompressBuffer(int n);
            /*0x24a53e0*/ void DetectEncoding();
            /*0x24a56c8*/ bool IsPreamble();
            /*0x24a57e0*/ int ReadBuffer();
            /*0x24a4e90*/ int ReadBuffer(char[] userBuffer, int userOffset, int desiredChars, ref bool readToUserBuffer);
            /*0x24a5950*/ string ReadLine();

            class NullStreamReader : System.IO.StreamReader
            {
                /*0x181dfe8*/ NullStreamReader();
                /*0x181e090*/ System.IO.Stream get_BaseStream();
                /*0x181e0f4*/ System.Text.Encoding get_CurrentEncoding();
                /*0x181e0fc*/ void Dispose(bool disposing);
                /*0x181e100*/ int Peek();
                /*0x181e108*/ int Read();
                /*0x181e110*/ int Read(char[] buffer, int index, int count);
                /*0x181e118*/ string ReadLine();
                /*0x181e120*/ string ReadToEnd();
                /*0x181e16c*/ int ReadBuffer();
            }
        }

        class StreamWriter : System.IO.TextWriter
        {
            static /*0x0*/ System.IO.StreamWriter Null;
            static /*0x8*/ System.Text.Encoding _UTF8NoBOM;
            /*0x28*/ System.IO.Stream stream;
            /*0x30*/ System.Text.Encoding encoding;
            /*0x38*/ System.Text.Encoder encoder;
            /*0x40*/ byte[] byteBuffer;
            /*0x48*/ char[] charBuffer;
            /*0x50*/ int charPos;
            /*0x54*/ int charLen;
            /*0x58*/ bool autoFlush;
            /*0x59*/ bool haveWrittenPreamble;
            /*0x5a*/ bool closable;
            /*0x60*/ System.Threading.Tasks.Task _asyncWriteTask;

            static /*0x24a6f34*/ StreamWriter();
            static /*0x24a5c58*/ System.Text.Encoding get_UTF8NoBOM();
            static /*0x24a6464*/ System.IO.Stream CreateFile(string path, bool append, bool checkHost);
            /*0x24a5d54*/ StreamWriter();
            /*0x24a5dbc*/ StreamWriter(System.IO.Stream stream);
            /*0x24a5fec*/ StreamWriter(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x24a5e3c*/ StreamWriter(System.IO.Stream stream, System.Text.Encoding encoding, int bufferSize, bool leaveOpen);
            /*0x24a6134*/ StreamWriter(string path);
            /*0x24a61c4*/ StreamWriter(string path, bool append);
            /*0x24a624c*/ StreamWriter(string path, bool append, System.Text.Encoding encoding);
            /*0x24a61b8*/ StreamWriter(string path, bool append, System.Text.Encoding encoding, int bufferSize);
            /*0x24a625c*/ StreamWriter(string path, bool append, System.Text.Encoding encoding, int bufferSize, bool checkHost);
            /*0x24a5bd4*/ void CheckAsyncTaskInProgress();
            /*0x24a5ff8*/ void Init(System.IO.Stream streamArg, System.Text.Encoding encodingArg, int bufferSize, bool shouldLeaveOpen);
            /*0x24a655c*/ void Close();
            /*0x24a65d4*/ void Dispose(bool disposing);
            /*0x24a68a4*/ void Flush();
            /*0x24a674c*/ void Flush(bool flushStream, bool flushEncoder);
            /*0x24a68d0*/ void set_AutoFlush(bool value);
            /*0x24a6924*/ System.IO.Stream get_BaseStream();
            /*0x24a673c*/ bool get_LeaveOpen();
            /*0x24a692c*/ System.Text.Encoding get_Encoding();
            /*0x24a6934*/ void Write(char value);
            /*0x24a69d0*/ void Write(char[] buffer);
            /*0x24a6aa8*/ void Write(char[] buffer, int index, int count);
            /*0x24a6cc0*/ void Write(string value);
        }

        class StringReader : System.IO.TextReader
        {
            /*0x18*/ string _s;
            /*0x20*/ int _pos;
            /*0x24*/ int _length;

            /*0x1e20080*/ StringReader(string s);
            /*0x1e20154*/ void Close();
            /*0x1e20164*/ void Dispose(bool disposing);
            /*0x1e20174*/ int Peek();
            /*0x1e201cc*/ int Read();
            /*0x1e2022c*/ int Read(char[] buffer, int index, int count);
            /*0x1e20400*/ string ReadToEnd();
            /*0x1e20454*/ string ReadLine();
        }

        class StringWriter : System.IO.TextWriter
        {
            static /*0x0*/ System.Text.UnicodeEncoding m_encoding;
            /*0x28*/ System.Text.StringBuilder _sb;
            /*0x30*/ bool _isOpen;

            /*0x1e20668*/ StringWriter();
            /*0x1e207f0*/ StringWriter(System.IFormatProvider formatProvider);
            /*0x1e20860*/ StringWriter(System.Text.StringBuilder sb);
            /*0x1e20700*/ StringWriter(System.Text.StringBuilder sb, System.IFormatProvider formatProvider);
            /*0x1e208dc*/ void Close();
            /*0x1e208ec*/ void Dispose(bool disposing);
            /*0x1e208fc*/ System.Text.Encoding get_Encoding();
            /*0x1e209a4*/ void Write(char value);
            /*0x1e209e8*/ void Write(char[] buffer, int index, int count);
            /*0x1e20b88*/ void Write(string value);
            /*0x1e20be0*/ string ToString();
        }

        class TextReader : System.MarshalByRefObject, System.IDisposable
        {
            static /*0x0*/ System.Func<object, string> _ReadLineDelegate;
            static /*0x8*/ System.Func<object, int> _ReadDelegate;
            static /*0x10*/ System.IO.TextReader Null;

            static /*0x1d2dda4*/ TextReader();
            static /*0x1d2dce8*/ System.IO.TextReader Synchronized(System.IO.TextReader reader);
            /*0x1d2d7fc*/ TextReader();
            /*0x1d2d804*/ void Close();
            /*0x1d2d87c*/ void Dispose();
            /*0x1d2d8f4*/ void Dispose(bool disposing);
            /*0x1d2d8f8*/ int Peek();
            /*0x1d2d900*/ int Read();
            /*0x1d2d908*/ int Read(char[] buffer, int index, int count);
            /*0x1d2dae8*/ string ReadToEnd();
            /*0x1d2dbe8*/ string ReadLine();

            class NullTextReader : System.IO.TextReader
            {
                /*0x181fa8c*/ NullTextReader();
                /*0x181faf0*/ int Read(char[] buffer, int index, int count);
                /*0x181faf8*/ string ReadLine();
            }

            class SyncTextReader : System.IO.TextReader
            {
                /*0x18*/ System.IO.TextReader _in;

                /*0x181fb00*/ SyncTextReader(System.IO.TextReader t);
                /*0x181fb78*/ void Close();
                /*0x181fb98*/ void Dispose(bool disposing);
                /*0x181fc64*/ int Peek();
                /*0x181fc84*/ int Read();
                /*0x181fca4*/ int Read(char[] buffer, int index, int count);
                /*0x181fcc4*/ string ReadLine();
                /*0x181fce8*/ string ReadToEnd();
            }

            class <>c
            {
                static /*0x0*/ System.IO.TextReader.<> <>9;

                static /*0x181f8a8*/ <>c();
                /*0x181f908*/ <>c();
                /*0x181f910*/ string <.cctor>b__22_0(object state);
                /*0x181f9c4*/ int <.cctor>b__22_1(object state);
            }
        }

        class TextWriter : System.MarshalByRefObject, System.IDisposable
        {
            static /*0x0*/ System.IO.TextWriter Null;
            static /*0x8*/ System.Action<object> _WriteCharDelegate;
            static /*0x10*/ System.Action<object> _WriteStringDelegate;
            static /*0x18*/ System.Action<object> _WriteCharArrayRangeDelegate;
            static /*0x20*/ System.Action<object> _WriteLineCharDelegate;
            static /*0x28*/ System.Action<object> _WriteLineStringDelegate;
            static /*0x30*/ System.Action<object> _WriteLineCharArrayRangeDelegate;
            static /*0x38*/ System.Action<object> _FlushDelegate;
            /*0x18*/ char[] CoreNewLine;
            /*0x20*/ System.IFormatProvider InternalFormatProvider;

            static /*0x1d2e894*/ TextWriter();
            static /*0x1d2df2c*/ string get_InitialNewLine();
            static /*0x1d2e1d8*/ System.IO.TextWriter Synchronized(System.IO.TextWriter writer);
            /*0x1d2df34*/ TextWriter();
            /*0x1d2dfbc*/ TextWriter(System.IFormatProvider formatProvider);
            /*0x1d2e050*/ System.IFormatProvider get_FormatProvider();
            /*0x1d2e0d0*/ void Close();
            /*0x1d2e148*/ void Dispose(bool disposing);
            /*0x1d2e14c*/ void Dispose();
            /*0x1d2e1c4*/ void Flush();
            System.Text.Encoding get_Encoding();
            /*0x1d2e1c8*/ string get_NewLine();
            /*0x1d2e294*/ void Write(char value);
            /*0x1d2e298*/ void Write(char[] buffer);
            /*0x1d2e2b8*/ void Write(char[] buffer, int index, int count);
            /*0x1d2e4a4*/ void Write(int value);
            /*0x1d2e4f8*/ void Write(string value);
            /*0x1d2e53c*/ void WriteLine();
            /*0x1d2e550*/ void WriteLine(char value);
            /*0x1d2e58c*/ void WriteLine(char[] buffer, int index, int count);
            /*0x1d2e5c8*/ void WriteLine(string value);
            /*0x1d2e76c*/ void WriteLine(string format, object arg0);
            /*0x1d2e7cc*/ void WriteLine(string format, object arg0, object arg1);
            /*0x1d2e834*/ void WriteLine(string format, object[] arg);

            class NullTextWriter : System.IO.TextWriter
            {
                /*0x1820278*/ NullTextWriter();
                /*0x182031c*/ System.Text.Encoding get_Encoding();
                /*0x1820324*/ void Write(char[] buffer, int index, int count);
                /*0x1820328*/ void Write(string value);
                /*0x182032c*/ void WriteLine();
                /*0x1820330*/ void WriteLine(string value);
            }

            class SyncTextWriter : System.IO.TextWriter, System.IDisposable
            {
                /*0x28*/ System.IO.TextWriter _out;

                /*0x1820334*/ SyncTextWriter(System.IO.TextWriter t);
                /*0x18203c8*/ System.Text.Encoding get_Encoding();
                /*0x18203e8*/ System.IFormatProvider get_FormatProvider();
                /*0x1820408*/ string get_NewLine();
                /*0x1820428*/ void Close();
                /*0x1820448*/ void Dispose(bool disposing);
                /*0x1820514*/ void Flush();
                /*0x1820534*/ void Write(char value);
                /*0x1820558*/ void Write(char[] buffer);
                /*0x182057c*/ void Write(char[] buffer, int index, int count);
                /*0x18205a0*/ void Write(int value);
                /*0x18205c4*/ void Write(string value);
                /*0x18205e8*/ void WriteLine();
                /*0x182060c*/ void WriteLine(char value);
                /*0x1820630*/ void WriteLine(char[] buffer, int index, int count);
                /*0x1820654*/ void WriteLine(string value);
                /*0x1820678*/ void WriteLine(string format, object arg0);
                /*0x182069c*/ void WriteLine(string format, object arg0, object arg1);
                /*0x18206c0*/ void WriteLine(string format, object[] arg);
            }

            class <>c
            {
                static /*0x0*/ System.IO.TextWriter.<> <>9;

                static /*0x181fd08*/ <>c();
                /*0x181fd68*/ <>c();
                /*0x181fd70*/ void <.cctor>b__73_0(object state);
                /*0x181fe20*/ void <.cctor>b__73_1(object state);
                /*0x181fed0*/ void <.cctor>b__73_2(object state);
                /*0x181ff9c*/ void <.cctor>b__73_3(object state);
                /*0x182004c*/ void <.cctor>b__73_4(object state);
                /*0x18200fc*/ void <.cctor>b__73_5(object state);
                /*0x18201c8*/ void <.cctor>b__73_6(object state);
            }
        }

        class UnmanagedMemoryStream : System.IO.Stream
        {
            /*0x28*/ System.Runtime.InteropServices.SafeBuffer _buffer;
            /*0x30*/ byte* _mem;
            /*0x38*/ long _length;
            /*0x40*/ long _capacity;
            /*0x48*/ long _position;
            /*0x50*/ long _offset;
            /*0x58*/ System.IO.FileAccess _access;
            /*0x5c*/ bool _isOpen;
            /*0x60*/ System.Threading.Tasks.Task<int> _lastReadTask;

            /*0x206a974*/ UnmanagedMemoryStream();
            /*0x206a9e4*/ UnmanagedMemoryStream(byte* pointer, long length);
            /*0x206aca8*/ UnmanagedMemoryStream(byte* pointer, long length, long capacity, System.IO.FileAccess access, bool skipSecurityCheck);
            /*0x206aa74*/ void Initialize(byte* pointer, long length, long capacity, System.IO.FileAccess access, bool skipSecurityCheck);
            /*0x206ad48*/ bool get_CanRead();
            /*0x206ad64*/ bool get_CanSeek();
            /*0x206ad6c*/ bool get_CanWrite();
            /*0x206ad88*/ void Dispose(bool disposing);
            /*0x206ad9c*/ void Flush();
            /*0x206adb0*/ long get_Length();
            /*0x206ade4*/ long get_Position();
            /*0x206ae20*/ void set_Position(long value);
            /*0x206aecc*/ byte* get_PositionPointer();
            /*0x206afb0*/ int Read(byte[] buffer, int offset, int count);
            /*0x206b2c4*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x206b630*/ int ReadByte();
            /*0x206b7a4*/ long Seek(long offset, System.IO.SeekOrigin loc);
            /*0x206b8dc*/ void Write(byte[] buffer, int offset, int count);
            /*0x206bcb4*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x206bfa8*/ void WriteByte(byte value);
        }

        class PathInternal
        {
            static /*0x252e54c*/ bool IsPartiallyQualified(string path);
            static /*0x252e210*/ bool HasIllegalCharacters(string path, bool checkAdditional);
        }

        class DirectoryInfo : System.IO.FileSystemInfo
        {
            /*0x60*/ string current;
            /*0x68*/ string parent;

            /*0x2041b68*/ DirectoryInfo(string path);
            /*0x2041118*/ DirectoryInfo(string path, bool simpleOriginalPath);
            /*0x2041f60*/ DirectoryInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x2041cdc*/ void Initialize();
            /*0x2041f88*/ bool get_Exists();
            /*0x2041fd4*/ string get_Name();
            /*0x20411f0*/ System.IO.DirectoryInfo get_Parent();
            /*0x2041268*/ void Create();
            /*0x2041fdc*/ System.IO.FileInfo[] GetFiles(string searchPattern);
            /*0x204215c*/ System.IO.DirectoryInfo[] GetDirectories();
            /*0x20421a8*/ System.IO.DirectoryInfo[] GetDirectories(string searchPattern);
            /*0x2042328*/ string ToString();
            /*0x2042330*/ int GetFilesSubdirs(System.Collections.ArrayList l, string pattern);
            /*0x204246c*/ System.IO.FileInfo[] GetFiles(string searchPattern, System.IO.SearchOption searchOption);
            /*0x2041b70*/ void CheckPath(string path);
        }

        class File
        {
            static /*0x20e075c*/ System.IO.FileStream Create(string path);
            static /*0x20e0764*/ System.IO.FileStream Create(string path, int bufferSize);
            static /*0x20e0810*/ System.IO.StreamWriter CreateText(string path);
            static /*0x20e0874*/ void Delete(string path);
            static /*0x20e0b1c*/ bool Exists(string path);
            static /*0x20e0c14*/ System.IO.FileStream Open(string path, System.IO.FileMode mode);
            static /*0x20e0cd0*/ System.IO.FileStream OpenRead(string path);
            static /*0x20e0d4c*/ System.IO.StreamReader OpenText(string path);
            static /*0x20e0dac*/ System.IO.FileStream OpenWrite(string path);
            static /*0x20e0e28*/ byte[] ReadAllBytes(string path);
            static /*0x20e10b0*/ string ReadAllText(string path);
            static /*0x20e1220*/ void WriteAllBytes(string path, byte[] bytes);
            static /*0x20e1378*/ void WriteAllText(string path, string contents);
            static /*0x20e13f4*/ void WriteAllText(string path, string contents, System.Text.Encoding encoding);
            static /*0x20e156c*/ int FillAttributeInfo(string path, ref System.IO.MonoIOStat data, bool tryagain, bool returnErrorOnNotFound);
        }

        enum FileAccess
        {
            Read = 1,
            Write = 2,
            ReadWrite = 3,
        }

        enum FileAttributes
        {
            Archive = 32,
            Compressed = 2048,
            Device = 64,
            Directory = 16,
            Encrypted = 16384,
            Hidden = 2,
            Normal = 128,
            NotContentIndexed = 8192,
            Offline = 4096,
            ReadOnly = 1,
            ReparsePoint = 1024,
            SparseFile = 512,
            System = 4,
            Temporary = 256,
            IntegrityStream = 32768,
            NoScrubData = 131072,
        }

        enum FileMode
        {
            CreateNew = 1,
            Create = 2,
            Open = 3,
            OpenOrCreate = 4,
            Truncate = 5,
            Append = 6,
        }

        enum FileOptions
        {
            None = 0,
            Encrypted = 16384,
            DeleteOnClose = 67108864,
            SequentialScan = 134217728,
            RandomAccess = 268435456,
            Asynchronous = 1073741824,
            WriteThrough = -2147483648,
        }

        enum FileShare
        {
            None = 0,
            Read = 1,
            Write = 2,
            ReadWrite = 3,
            Delete = 4,
            Inheritable = 16,
        }

        class FileStream : System.IO.Stream
        {
            static /*0x0*/ byte[] buf_recycle;
            static /*0x8*/ object buf_recycle_lock;
            /*0x28*/ byte[] buf;
            /*0x30*/ string name;
            /*0x38*/ Microsoft.Win32.SafeHandles.SafeFileHandle safeHandle;
            /*0x40*/ bool isExposed;
            /*0x48*/ long append_startpos;
            /*0x50*/ System.IO.FileAccess access;
            /*0x54*/ bool owner;
            /*0x55*/ bool async;
            /*0x56*/ bool canseek;
            /*0x57*/ bool anonymous;
            /*0x58*/ bool buf_dirty;
            /*0x5c*/ int buf_size;
            /*0x60*/ int buf_length;
            /*0x64*/ int buf_offset;
            /*0x68*/ long buf_start;

            static /*0x20e6810*/ FileStream();
            /*0x20e324c*/ FileStream(nint handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper);
            /*0x20e374c*/ FileStream(string path, System.IO.FileMode mode);
            /*0x20e3f34*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access);
            /*0x20e0ca8*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
            /*0x20e07ec*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize);
            /*0x20e3f94*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool useAsync);
            /*0x20e3fc8*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options);
            /*0x20e3fec*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options, string msgPath, bool bFromProxy, bool useLongPath, bool checkHost);
            /*0x20e3f6c*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool isAsync, bool anonymous);
            /*0x20e378c*/ FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool anonymous, System.IO.FileOptions options);
            /*0x20e33f8*/ void Init(Microsoft.Win32.SafeHandles.SafeFileHandle safeHandle, System.IO.FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper);
            /*0x20e4444*/ bool get_CanRead();
            /*0x20e4458*/ bool get_CanWrite();
            /*0x20e446c*/ bool get_CanSeek();
            /*0x20e4474*/ string get_Name();
            /*0x20e447c*/ long get_Length();
            /*0x20e462c*/ long get_Position();
            /*0x20e47d8*/ void set_Position(long value);
            /*0x20e4860*/ Microsoft.Win32.SafeHandles.SafeFileHandle get_SafeFileHandle();
            /*0x20e4410*/ void ExposeHandle();
            /*0x20e4a70*/ int ReadByte();
            /*0x20e4d5c*/ void WriteByte(byte value);
            /*0x20e4ebc*/ int Read(byte[] array, int offset, int count);
            /*0x20e510c*/ int ReadInternal(byte[] dest, int offset, int count);
            /*0x20e5278*/ System.IAsyncResult BeginRead(byte[] array, int offset, int numBytes, System.AsyncCallback userCallback, object stateObject);
            /*0x20e5508*/ int EndRead(System.IAsyncResult asyncResult);
            /*0x20e567c*/ void Write(byte[] array, int offset, int count);
            /*0x20e58a4*/ void WriteInternal(byte[] src, int offset, int count);
            /*0x20e5b24*/ System.IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, System.AsyncCallback userCallback, object stateObject);
            /*0x20e5ec0*/ void EndWrite(System.IAsyncResult asyncResult);
            /*0x20e6034*/ long Seek(long offset, System.IO.SeekOrigin origin);
            /*0x20e62c8*/ void Flush();
            /*0x20e6348*/ void Finalize();
            /*0x20e63c0*/ void Dispose(bool disposing);
            /*0x20e6800*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x20e6808*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
            /*0x20e51b4*/ int ReadSegment(byte[] dest, int dest_offset, int count);
            /*0x20e5aa8*/ int WriteSegment(byte[] src, int src_offset, int count);
            /*0x20e48a8*/ void FlushBuffer();
            /*0x20e461c*/ void FlushBufferIfDirty();
            /*0x20e4d20*/ void RefillBuffer();
            /*0x20e4bc4*/ int ReadData(System.Runtime.InteropServices.SafeHandle safeHandle, byte[] buf, int offset, int count);
            /*0x20e4164*/ void InitBuffer(int size, bool isZeroSize);
            /*0x20e40c4*/ string GetSecureFileName(string filename);
            /*0x20e3ff8*/ string GetSecureFileName(string filename, bool full);

            class ReadDelegate : System.MulticastDelegate
            {
                /*0x1811bbc*/ ReadDelegate(object object, nint method);
                /*0x1811c1c*/ int Invoke(byte[] buffer, int offset, int count);
                /*0x1811fdc*/ System.IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, System.AsyncCallback callback, object object);
                /*0x181208c*/ int EndInvoke(System.IAsyncResult result);
            }

            class WriteDelegate : System.MulticastDelegate
            {
                /*0x18120b8*/ WriteDelegate(object object, nint method);
                /*0x1812118*/ void Invoke(byte[] buffer, int offset, int count);
                /*0x18124d0*/ System.IAsyncResult BeginInvoke(byte[] buffer, int offset, int count, System.AsyncCallback callback, object object);
                /*0x1812580*/ void EndInvoke(System.IAsyncResult result);
            }
        }

        class FileStreamAsyncResult : System.IAsyncResult
        {
            /*0x10*/ object state;
            /*0x18*/ bool completed;
            /*0x20*/ System.Threading.ManualResetEvent wh;
            /*0x28*/ System.AsyncCallback cb;
            /*0x30*/ bool completedSynch;
            /*0x34*/ int Count;
            /*0x38*/ int OriginalCount;
            /*0x3c*/ int BytesRead;
            /*0x40*/ System.AsyncCallback realcb;

            static /*0x20e6884*/ void CBWrapper(System.IAsyncResult ares);
            /*0x20e5df0*/ FileStreamAsyncResult(System.AsyncCallback cb, object state);
            /*0x20e691c*/ object get_AsyncState();
            /*0x20e6924*/ bool get_CompletedSynchronously();
            /*0x20e692c*/ System.Threading.WaitHandle get_AsyncWaitHandle();
            /*0x20e6934*/ bool get_IsCompleted();
        }

        enum MonoFileType
        {
            Unknown = 0,
            Disk = 1,
            Char = 2,
            Pipe = 3,
            Remote = 32768,
        }

        class MonoIO
        {
            static /*0x0*/ nint InvalidHandle;
            static /*0x8*/ bool dump_handles;

            static /*0x1c251d8*/ MonoIO();
            static /*0x1c23ce0*/ System.Exception GetException(System.IO.MonoIOError error);
            static /*0x1c23e10*/ System.Exception GetException(string path, System.IO.MonoIOError error);
            static /*0x1c245b0*/ bool CreateDirectory(char* path, ref System.IO.MonoIOError error);
            static /*0x1c245b4*/ bool CreateDirectory(string path, ref System.IO.MonoIOError error);
            static /*0x1c24634*/ bool RemoveDirectory(char* path, ref System.IO.MonoIOError error);
            static /*0x1c24638*/ bool RemoveDirectory(string path, ref System.IO.MonoIOError error);
            static /*0x1c246b8*/ string GetCurrentDirectory(ref System.IO.MonoIOError error);
            static /*0x1c246bc*/ bool DeleteFile(char* path, ref System.IO.MonoIOError error);
            static /*0x1c246c0*/ bool DeleteFile(string path, ref System.IO.MonoIOError error);
            static /*0x1c24740*/ System.IO.FileAttributes GetFileAttributes(char* path, ref System.IO.MonoIOError error);
            static /*0x1c24744*/ System.IO.FileAttributes GetFileAttributes(string path, ref System.IO.MonoIOError error);
            static /*0x1c247c4*/ System.IO.MonoFileType GetFileType(nint handle, ref System.IO.MonoIOError error);
            static /*0x1c247c8*/ System.IO.MonoFileType GetFileType(System.Runtime.InteropServices.SafeHandle safeHandle, ref System.IO.MonoIOError error);
            static /*0x1c248f8*/ nint FindFirstFile(char* pathWithPattern, ref string fileName, ref int fileAttr, ref int error);
            static /*0x1c248fc*/ nint FindFirstFile(string pathWithPattern, ref string fileName, ref int fileAttr, ref int error);
            static /*0x1c24994*/ bool FindNextFile(nint hnd, ref string fileName, ref int fileAttr, ref int error);
            static /*0x1c24998*/ bool FindCloseFile(nint hnd);
            static /*0x1c2499c*/ bool ExistsFile(string path, ref System.IO.MonoIOError error);
            static /*0x1c24a28*/ bool ExistsDirectory(string path, ref System.IO.MonoIOError error);
            static /*0x1c24ac4*/ bool ExistsSymlink(string path, ref System.IO.MonoIOError error);
            static /*0x1c24b4c*/ bool GetFileStat(char* path, ref System.IO.MonoIOStat stat, ref System.IO.MonoIOError error);
            static /*0x1c24b50*/ bool GetFileStat(string path, ref System.IO.MonoIOStat stat, ref System.IO.MonoIOError error);
            static /*0x1c24bd8*/ nint Open(char* filename, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.FileOptions options, ref System.IO.MonoIOError error);
            static /*0x1c24bdc*/ nint Open(string filename, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.FileOptions options, ref System.IO.MonoIOError error);
            static /*0x1c24c8c*/ bool Close(nint handle, ref System.IO.MonoIOError error);
            static /*0x1c24c90*/ int Read(nint handle, byte[] dest, int dest_offset, int count, ref System.IO.MonoIOError error);
            static /*0x1c24c94*/ int Read(System.Runtime.InteropServices.SafeHandle safeHandle, byte[] dest, int dest_offset, int count, ref System.IO.MonoIOError error);
            static /*0x1c24de4*/ int Write(nint handle, byte[] src, int src_offset, int count, ref System.IO.MonoIOError error);
            static /*0x1c24de8*/ int Write(System.Runtime.InteropServices.SafeHandle safeHandle, byte[] src, int src_offset, int count, ref System.IO.MonoIOError error);
            static /*0x1c24f38*/ long Seek(nint handle, long offset, System.IO.SeekOrigin origin, ref System.IO.MonoIOError error);
            static /*0x1c24f3c*/ long Seek(System.Runtime.InteropServices.SafeHandle safeHandle, long offset, System.IO.SeekOrigin origin, ref System.IO.MonoIOError error);
            static /*0x1c25084*/ long GetLength(nint handle, ref System.IO.MonoIOError error);
            static /*0x1c25088*/ long GetLength(System.Runtime.InteropServices.SafeHandle safeHandle, ref System.IO.MonoIOError error);
            static /*0x1c251b8*/ nint get_ConsoleOutput();
            static /*0x1c251bc*/ nint get_ConsoleInput();
            static /*0x1c251c0*/ nint get_ConsoleError();
            static /*0x1c251c4*/ char get_VolumeSeparatorChar();
            static /*0x1c251c8*/ char get_DirectorySeparatorChar();
            static /*0x1c251cc*/ char get_AltDirectorySeparatorChar();
            static /*0x1c251d0*/ char get_PathSeparator();
            static /*0x1c245ac*/ void DumpHandles();
            static /*0x1c251d4*/ bool RemapPath(string path, ref string newPath);
        }

        enum MonoIOError
        {
            ERROR_SUCCESS = 0,
            ERROR_FILE_NOT_FOUND = 2,
            ERROR_PATH_NOT_FOUND = 3,
            ERROR_TOO_MANY_OPEN_FILES = 4,
            ERROR_ACCESS_DENIED = 5,
            ERROR_INVALID_HANDLE = 6,
            ERROR_INVALID_DRIVE = 15,
            ERROR_NOT_SAME_DEVICE = 17,
            ERROR_NO_MORE_FILES = 18,
            ERROR_NOT_READY = 21,
            ERROR_WRITE_FAULT = 29,
            ERROR_READ_FAULT = 30,
            ERROR_GEN_FAILURE = 31,
            ERROR_SHARING_VIOLATION = 32,
            ERROR_LOCK_VIOLATION = 33,
            ERROR_HANDLE_DISK_FULL = 39,
            ERROR_FILE_EXISTS = 80,
            ERROR_CANNOT_MAKE = 82,
            ERROR_INVALID_PARAMETER = 87,
            ERROR_BROKEN_PIPE = 109,
            ERROR_INVALID_NAME = 123,
            ERROR_DIR_NOT_EMPTY = 145,
            ERROR_ALREADY_EXISTS = 183,
            ERROR_FILENAME_EXCED_RANGE = 206,
            ERROR_DIRECTORY = 267,
            ERROR_ENCRYPTION_FAILED = 6000,
        }

        struct MonoIOStat
        {
            /*0x10*/ System.IO.FileAttributes fileAttributes;
            /*0x18*/ long Length;
            /*0x20*/ long CreationTime;
            /*0x28*/ long LastAccessTime;
            /*0x30*/ long LastWriteTime;
        }

        class Path
        {
            static /*0x0*/ char[] InvalidPathChars;
            static /*0x8*/ char AltDirectorySeparatorChar;
            static /*0xa*/ char DirectorySeparatorChar;
            static /*0xc*/ char PathSeparator;
            static /*0x10*/ string DirectorySeparatorStr;
            static /*0x18*/ char VolumeSeparatorChar;
            static /*0x20*/ char[] PathSeparatorChars;
            static /*0x28*/ bool dirEqualsVolume;
            static /*0x30*/ char[] trimEndCharsWindows;
            static /*0x38*/ char[] trimEndCharsUnix;

            static /*0x252cf90*/ Path();
            static /*0x252a140*/ string ChangeExtension(string path, string extension);
            static /*0x252a3fc*/ string Combine(string path1, string path2);
            static /*0x252a880*/ string CleanPath(string s);
            static /*0x252ad74*/ string GetDirectoryName(string path);
            static /*0x252b5c4*/ string GetExtension(string path);
            static /*0x252b700*/ string GetFileName(string path);
            static /*0x252b820*/ string GetFileNameWithoutExtension(string path);
            static /*0x252b888*/ string GetFullPath(string path);
            static /*0x252c060*/ string GetFullPathInternal(string path);
            static /*0x252c0c0*/ int GetFullPathName(string path, int numBufferChars, System.Text.StringBuilder buffer, ref nint lpFilePartOrNull);
            static /*0x252c1a0*/ string GetFullPathName(string path);
            static /*0x252c380*/ string WindowsDriveAdjustment(string path);
            static /*0x252b8fc*/ string InsecureGetFullPath(string path);
            static /*0x252c670*/ bool IsDirectorySeparator(char c);
            static /*0x252b128*/ string GetPathRoot(string path);
            static /*0x252a6a4*/ bool IsPathRooted(string path);
            static /*0x252cef8*/ char[] GetInvalidPathChars();
            static /*0x252a354*/ int findExtension(string path);
            static /*0x252d178*/ string GetServerAndShare(string path);
            static /*0x252d2f0*/ bool SameRoot(string root, string path);
            static /*0x252c710*/ string CanonicalizePath(string path);
            static /*0x252d614*/ string Combine(string[] paths);
            static /*0x252d94c*/ string Combine(string path1, string path2, string path3);
            static /*0x252dafc*/ string Combine(string path1, string path2, string path3, string path4);
            static /*0x252dd00*/ void Validate(string path);
            static /*0x252dd78*/ void Validate(string path, string parameterName);
            static /*0x252debc*/ string get_DirectorySeparatorCharAsString();
            static /*0x252df20*/ char[] get_TrimEndChars();
            static /*0x252dfbc*/ void CheckSearchPattern(string searchPattern);
            static /*0x252e150*/ void CheckInvalidPathChars(string path, bool checkAdditional);
            static /*0x252e294*/ string InternalCombine(string path1, string path2);
        }

        enum SearchOption
        {
            TopDirectoryOnly = 0,
            AllDirectories = 1,
        }

        enum SeekOrigin
        {
            Begin = 0,
            Current = 1,
            End = 2,
        }

        class UnexceptionalStreamReader : System.IO.StreamReader
        {
            static /*0x0*/ bool[] newline;
            static /*0x8*/ char newlineChar;

            static /*0x20646d4*/ UnexceptionalStreamReader();
            /*0x2064780*/ UnexceptionalStreamReader(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x20647fc*/ int Peek();
            /*0x2064890*/ int Read();
            /*0x2064924*/ int Read(char[] dest_buffer, int index, int count);
            /*0x2064bc4*/ bool CheckEOL(char current);
            /*0x2064db0*/ string ReadLine();
            /*0x2064e44*/ string ReadToEnd();
        }

        class UnexceptionalStreamWriter : System.IO.StreamWriter
        {
            /*0x2064ed8*/ UnexceptionalStreamWriter(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x2064f5c*/ void Flush();
            /*0x2064ff0*/ void Write(char[] buffer, int index, int count);
            /*0x2065084*/ void Write(char value);
            /*0x2065118*/ void Write(char[] value);
            /*0x20651ac*/ void Write(string value);
        }

        class CStreamReader : System.IO.StreamReader
        {
            /*0x68*/ System.TermInfoDriver driver;

            /*0x1c60210*/ CStreamReader(System.IO.Stream stream, System.Text.Encoding encoding);
            /*0x1c60314*/ int Peek();
            /*0x1c603a8*/ int Read();
            /*0x1c60484*/ int Read(char[] dest, int index, int count);
            /*0x1c60628*/ string ReadLine();
            /*0x1c606cc*/ string ReadToEnd();
        }

        class CStreamWriter : System.IO.StreamWriter
        {
            /*0x68*/ System.TermInfoDriver driver;

            /*0x1c60770*/ CStreamWriter(System.IO.Stream stream, System.Text.Encoding encoding, bool leaveOpen);
            /*0x1c60888*/ void Write(char[] buffer, int index, int count);
            /*0x1c60c44*/ void Write(char val);
            /*0x1c60e74*/ void InternalWriteString(string val);
            /*0x1c60de0*/ void InternalWriteChar(char val);
            /*0x1c60f08*/ void InternalWriteChars(char[] buffer, int n);
            /*0x1c60fa4*/ void Write(char[] val);
            /*0x1c60fcc*/ void Write(string val);
        }
    }

    namespace Globalization
    {
        class CharUnicodeInfo
        {
            static /*0x0*/ ushort[] s_pCategoryLevel1Index;
            static /*0x8*/ byte[] s_pCategoriesValue;
            static /*0x10*/ ushort[] s_pNumericLevel1Index;
            static /*0x18*/ byte[] s_pNumericValues;
            static /*0x20*/ ushort[] s_pDigitValues;

            static /*0x161496c*/ CharUnicodeInfo();
            static /*0x161471c*/ int InternalConvertToUtf32(string s, int index);
            static /*0x1613cf0*/ bool IsWhiteSpace(string s, int index);
            static /*0x1610efc*/ bool IsWhiteSpace(char c);
            static /*0x1610c64*/ System.Globalization.UnicodeCategory GetUnicodeCategory(char ch);
            static /*0x1613518*/ System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int index);
            static /*0x1613e98*/ System.Globalization.UnicodeCategory InternalGetUnicodeCategory(int ch);
            static /*0x1614854*/ byte InternalGetCategoryValue(int ch, int offset);
            static /*0x1614094*/ System.Globalization.UnicodeCategory InternalGetUnicodeCategory(string value, int index);

            class Debug
            {
                static /*0x180cb14*/ void Assert(bool condition, string message);
            }
        }

        class Calendar : System.ICloneable
        {
            static long TicksPerMillisecond = 10000;
            static long TicksPerSecond = 10000000;
            static long TicksPerMinute = 600000000;
            static long TicksPerHour = 36000000000;
            static long TicksPerDay = 864000000000;
            static int MillisPerSecond = 1000;
            static int MillisPerMinute = 60000;
            static int MillisPerHour = 3600000;
            static int MillisPerDay = 86400000;
            static int DaysPerYear = 365;
            static int DaysPer4Years = 1461;
            static int DaysPer100Years = 36524;
            static int DaysPer400Years = 146097;
            static int DaysTo10000 = 3652059;
            static long MaxMillis = 315537897600000;
            static int CAL_GREGORIAN = 1;
            static int CAL_GREGORIAN_US = 2;
            static int CAL_JAPAN = 3;
            static int CAL_TAIWAN = 4;
            static int CAL_KOREA = 5;
            static int CAL_HIJRI = 6;
            static int CAL_THAI = 7;
            static int CAL_HEBREW = 8;
            static int CAL_GREGORIAN_ME_FRENCH = 9;
            static int CAL_GREGORIAN_ARABIC = 10;
            static int CAL_GREGORIAN_XLIT_ENGLISH = 11;
            static int CAL_GREGORIAN_XLIT_FRENCH = 12;
            static int CAL_JULIAN = 13;
            static int CAL_JAPANESELUNISOLAR = 14;
            static int CAL_CHINESELUNISOLAR = 15;
            static int CAL_SAKA = 16;
            static int CAL_LUNAR_ETO_CHN = 17;
            static int CAL_LUNAR_ETO_KOR = 18;
            static int CAL_LUNAR_ETO_ROKUYOU = 19;
            static int CAL_KOREANLUNISOLAR = 20;
            static int CAL_TAIWANLUNISOLAR = 21;
            static int CAL_PERSIAN = 22;
            static int CAL_UMALQURA = 23;
            static int CurrentEra = 0;
            /*0x10*/ int m_currentEraValue;
            /*0x14*/ bool m_isReadOnly;
            /*0x18*/ int twoDigitYearMax;

            static /*0x1c61ebc*/ long TimeToTicks(int hour, int minute, int second, int millisecond);
            static /*0x1c620a0*/ int GetSystemTwoDigitYearSetting(int CalID, int defaultYearValue);
            /*0x1c61174*/ Calendar();
            /*0x1c610ac*/ System.DateTime get_MinSupportedDateTime();
            /*0x1c61110*/ System.DateTime get_MaxSupportedDateTime();
            /*0x1c61188*/ int get_ID();
            /*0x1c61190*/ int get_BaseCalendarID();
            /*0x1c6119c*/ object Clone();
            /*0x1c61228*/ void SetReadOnlyState(bool readOnly);
            /*0x1c61234*/ int get_CurrentEraValue();
            int GetDayOfMonth(System.DateTime time);
            System.DayOfWeek GetDayOfWeek(System.DateTime time);
            int GetDayOfYear(System.DateTime time);
            int GetDaysInMonth(int year, int month, int era);
            int GetDaysInYear(int year, int era);
            int GetEra(System.DateTime time);
            int[] get_Eras();
            int GetMonth(System.DateTime time);
            int GetMonthsInYear(int year, int era);
            /*0x1c61388*/ int GetFirstDayWeekOfYear(System.DateTime time, int firstDayOfWeek);
            /*0x1c61448*/ int GetWeekOfYearFullDays(System.DateTime time, int firstDayOfWeek, int fullDays);
            /*0x1c61608*/ int GetWeekOfYearOfMinSupportedDateTime(int firstDayOfWeek, int minimumDaysInFirstWeek);
            /*0x1c6176c*/ int get_DaysInYearBeforeMinSupportedYear();
            /*0x1c61774*/ int GetWeekOfYear(System.DateTime time, System.Globalization.CalendarWeekRule rule, System.DayOfWeek firstDayOfWeek);
            int GetYear(System.DateTime time);
            /*0x1c61a68*/ bool IsLeapYear(int year);
            bool IsLeapYear(int year, int era);
            /*0x1c61a7c*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);
            System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x1c61aac*/ bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, ref System.DateTime result);
            /*0x1c61c20*/ bool IsValidYear(int year, int era);
            /*0x1c61ca8*/ bool IsValidMonth(int year, int month, int era);
            /*0x1c61d24*/ bool IsValidDay(int year, int month, int day, int era);
            /*0x1c61db0*/ int get_TwoDigitYearMax();
            /*0x1c61db8*/ int ToFourDigitYear(int year);
        }

        class CalendarData
        {
            static int MAX_CALENDARS = 23;
            static /*0x0*/ System.Globalization.CalendarData Invariant;
            /*0x10*/ string sNativeName;
            /*0x18*/ string[] saShortDates;
            /*0x20*/ string[] saYearMonths;
            /*0x28*/ string[] saLongDates;
            /*0x30*/ string sMonthDay;
            /*0x38*/ string[] saEraNames;
            /*0x40*/ string[] saAbbrevEraNames;
            /*0x48*/ string[] saAbbrevEnglishEraNames;
            /*0x50*/ string[] saDayNames;
            /*0x58*/ string[] saAbbrevDayNames;
            /*0x60*/ string[] saSuperShortDayNames;
            /*0x68*/ string[] saMonthNames;
            /*0x70*/ string[] saAbbrevMonthNames;
            /*0x78*/ string[] saMonthGenitiveNames;
            /*0x80*/ string[] saAbbrevMonthGenitiveNames;
            /*0x88*/ string[] saLeapYearMonthNames;
            /*0x90*/ int iTwoDigitYearMax;
            /*0x94*/ int iCurrentEra;
            /*0x98*/ bool bUseUserOverrides;

            static /*0x1c62118*/ CalendarData();
            static /*0x1c612cc*/ System.Globalization.CalendarData GetCalendarData(int calendarId);
            static /*0x1c63d14*/ string CalendarIdToCultureName(int calendarId);
            static /*0x1c62100*/ int nativeGetTwoDigitYearMax(int calID);
            static /*0x1c63614*/ bool nativeGetCalendarData(System.Globalization.CalendarData data, string localeName, int calendarId);
            /*0x1c62108*/ CalendarData();
            /*0x1c6304c*/ CalendarData(string localeName, int calendarId, bool bUseUserOverrides);
            /*0x1c63658*/ void InitializeEraNames(string localeName, int calendarId);
            /*0x1c63a64*/ void InitializeAbbreviatedEraNames(string localeName, int calendarId);
            /*0x1c63de4*/ bool fill_calendar_data(string localeName, int datetimeIndex);
        }

        enum CalendarWeekRule
        {
            FirstDay = 0,
            FirstFullWeek = 1,
            FirstFourDayWeek = 2,
        }

        enum CompareOptions
        {
            None = 0,
            IgnoreCase = 1,
            IgnoreNonSpace = 2,
            IgnoreSymbols = 4,
            IgnoreKanaType = 8,
            IgnoreWidth = 16,
            OrdinalIgnoreCase = 268435456,
            StringSort = 536870912,
            Ordinal = 1073741824,
        }

        class CompareInfo : System.Runtime.Serialization.IDeserializationCallback
        {
            static System.Globalization.CompareOptions ValidIndexMaskOffFlags = -32;
            static System.Globalization.CompareOptions ValidCompareMaskOffFlags = -536870944;
            static System.Globalization.CompareOptions ValidHashCodeOfStringMaskOffFlags = -32;
            static int LINGUISTIC_IGNORECASE = 16;
            static int NORM_IGNORECASE = 1;
            static int NORM_IGNOREKANATYPE = 65536;
            static int LINGUISTIC_IGNOREDIACRITIC = 32;
            static int NORM_IGNORENONSPACE = 2;
            static int NORM_IGNORESYMBOLS = 4;
            static int NORM_IGNOREWIDTH = 131072;
            static int SORT_STRINGSORT = 4096;
            static int COMPARE_OPTIONS_ORDINAL = 1073741824;
            static int NORM_LINGUISTIC_CASING = 134217728;
            static int RESERVED_FIND_ASCII_STRING = 536870912;
            static int SORT_VERSION_WHIDBEY = 4096;
            static int SORT_VERSION_V4 = 393473;
            static /*0x0*/ System.Collections.Generic.Dictionary<string, Mono.Globalization.Unicode.SimpleCollator> collators;
            static /*0x8*/ bool managedCollation;
            static /*0x9*/ bool managedCollationChecked;
            /*0x10*/ string m_name;
            /*0x18*/ string m_sortName;
            /*0x20*/ int win32LCID;
            /*0x24*/ int culture;
            /*0x28*/ System.Globalization.SortVersion m_SortVersion;
            /*0x30*/ Mono.Globalization.Unicode.SimpleCollator collator;

            static /*0x161a170*/ System.Globalization.CompareInfo GetCompareInfo(string name);
            static /*0x161a8ec*/ int CompareOrdinal(string string1, int offset1, int length1, string string2, int offset2, int length2);
            static /*0x161ab48*/ bool get_UseManagedCollation();
            /*0x161a130*/ CompareInfo(System.Globalization.CultureInfo culture);
            /*0x161bc8c*/ CompareInfo();
            /*0x161a234*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x161a23c*/ void OnDeserialized();
            /*0x161a2fc*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x161a300*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x161a398*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x161a39c*/ string get_Name();
            /*0x161a42c*/ int Compare(string string1, string string2);
            /*0x161a43c*/ int Compare(string string1, string string2, System.Globalization.CompareOptions options);
            /*0x161a61c*/ int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0x161a940*/ bool IsPrefix(string source, string prefix, System.Globalization.CompareOptions options);
            /*0x161af54*/ bool IsSuffix(string source, string suffix, System.Globalization.CompareOptions options);
            /*0x161b158*/ int IndexOf(string source, string value, System.Globalization.CompareOptions options);
            /*0x161b1c8*/ int IndexOf(string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0x161b4b8*/ int LastIndexOf(string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);
            /*0x161b710*/ System.Globalization.SortKey GetSortKey(string source, System.Globalization.CompareOptions options);
            /*0x161b714*/ System.Globalization.SortKey CreateSortKey(string source, System.Globalization.CompareOptions options);
            /*0x161b918*/ bool Equals(object value);
            /*0x161b9e8*/ int GetHashCode();
            /*0x161ba14*/ int GetHashCodeOfString(string source, System.Globalization.CompareOptions options);
            /*0x161ba1c*/ int GetHashCodeOfString(string source, System.Globalization.CompareOptions options, bool forceRandomizedHashing, long additionalEntropy);
            /*0x161bb24*/ string ToString();
            /*0x161ac7c*/ Mono.Globalization.Unicode.SimpleCollator GetCollator();
            /*0x161b848*/ System.Globalization.SortKey CreateSortKeyCore(string source, System.Globalization.CompareOptions options);
            /*0x161b3d4*/ int internal_index_switch(string s1, int sindex, int count, string s2, System.Globalization.CompareOptions opt, bool first);
            /*0x161a56c*/ int internal_compare_switch(string str1, int offset1, int length1, string str2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0x161bc14*/ int internal_compare_managed(string str1, int offset1, int length1, string str2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0x161bb94*/ int internal_index_managed(string s1, int sindex, int count, string s2, System.Globalization.CompareOptions opt, bool first);
            /*0x161bb88*/ void assign_sortkey(object key, string source, System.Globalization.CompareOptions options);
            /*0x161bc10*/ int internal_compare(string str1, int offset1, int length1, string str2, int offset2, int length2, System.Globalization.CompareOptions options);
            /*0x161bb8c*/ int internal_index(string source, int sindex, int count, string value, System.Globalization.CompareOptions options, bool first);
        }

        class CultureNotFoundException : System.ArgumentException, System.Runtime.Serialization.ISerializable
        {
            /*0x90*/ string m_invalidCultureName;
            /*0x98*/ System.Nullable<int> m_invalidCultureId;

            static /*0x2521e70*/ string get_DefaultMessage();
            /*0x2521e44*/ CultureNotFoundException();
            /*0x251e65c*/ CultureNotFoundException(string paramName, string message);
            /*0x2521eb8*/ CultureNotFoundException(string paramName, string invalidCultureName, string message);
            /*0x2521eec*/ CultureNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x2522094*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x2522240*/ System.Nullable<int> get_InvalidCultureId();
            /*0x2522248*/ string get_InvalidCultureName();
            /*0x2522250*/ string get_FormatedInvalidCultureId();
            /*0x252238c*/ string get_Message();
        }

        enum CultureTypes
        {
            NeutralCultures = 1,
            SpecificCultures = 2,
            InstalledWin32Cultures = 4,
            AllCultures = 7,
            UserCustomCulture = 8,
            ReplacementCultures = 16,
            WindowsOnlyCultures = 32,
            FrameworkCultures = 64,
        }

        enum MonthNameStyles
        {
            Regular = 0,
            Genitive = 1,
            LeapYear = 2,
        }

        enum DateTimeFormatFlags
        {
            None = 0,
            UseGenitiveMonth = 1,
            UseLeapYearMonth = 2,
            UseSpacesInMonthNames = 4,
            UseHebrewRule = 8,
            UseSpacesInDayNames = 16,
            UseDigitPrefixInTokens = 32,
            NotInitialized = -1,
        }

        class DateTimeFormatInfo : System.ICloneable, System.IFormatProvider
        {
            static string rfc1123Pattern = "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
            static string sortableDateTimePattern = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
            static string universalSortableDateTimePattern = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
            static int DEFAULT_ALL_DATETIMES_SIZE = 132;
            static System.Globalization.DateTimeStyles InvalidDateTimeStyles = -256;
            static int TOKEN_HASH_SIZE = 199;
            static int SECOND_PRIME = 197;
            static string dateSeparatorOrTimeZoneOffset = "-";
            static string invariantDateSeparator = "/";
            static string invariantTimeSeparator = ":";
            static string IgnorablePeriod = ".";
            static string IgnorableComma = ",";
            static string CJKYearSuff = "";
            static string CJKMonthSuff = "";
            static string CJKDaySuff = "";
            static string KoreanYearSuff = "";
            static string KoreanMonthSuff = "";
            static string KoreanDaySuff = "";
            static string KoreanHourSuff = "";
            static string KoreanMinuteSuff = "";
            static string KoreanSecondSuff = "";
            static string CJKHourSuff = "";
            static string ChineseHourSuff = "";
            static string CJKMinuteSuff = "";
            static string CJKSecondSuff = "";
            static string LocalTimeMark = "T";
            static string KoreanLangName = "ko";
            static string JapaneseLangName = "ja";
            static string EnglishLangName = "en";
            static /*0x0*/ System.Globalization.DateTimeFormatInfo invariantInfo;
            static /*0x8*/ bool preferExistingTokens;
            static /*0x10*/ System.Collections.Hashtable s_calendarNativeNames;
            static /*0x18*/ System.Globalization.DateTimeFormatInfo s_jajpDTFI;
            static /*0x20*/ System.Globalization.DateTimeFormatInfo s_zhtwDTFI;
            /*0x10*/ System.Globalization.CultureData m_cultureData;
            /*0x18*/ string m_name;
            /*0x20*/ string m_langName;
            /*0x28*/ System.Globalization.CompareInfo m_compareInfo;
            /*0x30*/ System.Globalization.CultureInfo m_cultureInfo;
            /*0x38*/ string amDesignator;
            /*0x40*/ string pmDesignator;
            /*0x48*/ string dateSeparator;
            /*0x50*/ string generalShortTimePattern;
            /*0x58*/ string generalLongTimePattern;
            /*0x60*/ string timeSeparator;
            /*0x68*/ string monthDayPattern;
            /*0x70*/ string dateTimeOffsetPattern;
            /*0x78*/ System.Globalization.Calendar calendar;
            /*0x80*/ int firstDayOfWeek;
            /*0x84*/ int calendarWeekRule;
            /*0x88*/ string fullDateTimePattern;
            /*0x90*/ string[] abbreviatedDayNames;
            /*0x98*/ string[] m_superShortDayNames;
            /*0xa0*/ string[] dayNames;
            /*0xa8*/ string[] abbreviatedMonthNames;
            /*0xb0*/ string[] monthNames;
            /*0xb8*/ string[] genitiveMonthNames;
            /*0xc0*/ string[] m_genitiveAbbreviatedMonthNames;
            /*0xc8*/ string[] leapYearMonthNames;
            /*0xd0*/ string longDatePattern;
            /*0xd8*/ string shortDatePattern;
            /*0xe0*/ string yearMonthPattern;
            /*0xe8*/ string longTimePattern;
            /*0xf0*/ string shortTimePattern;
            /*0xf8*/ string[] allYearMonthPatterns;
            /*0x100*/ string[] allShortDatePatterns;
            /*0x108*/ string[] allLongDatePatterns;
            /*0x110*/ string[] allShortTimePatterns;
            /*0x118*/ string[] allLongTimePatterns;
            /*0x120*/ string[] m_eraNames;
            /*0x128*/ string[] m_abbrevEraNames;
            /*0x130*/ string[] m_abbrevEnglishEraNames;
            /*0x138*/ int[] optionalCalendars;
            /*0x140*/ bool m_isReadOnly;
            /*0x144*/ System.Globalization.DateTimeFormatFlags formatFlags;
            /*0x148*/ int CultureID;
            /*0x14c*/ bool m_useUserOverride;
            /*0x14d*/ bool bUseCalendarInfo;
            /*0x150*/ int nDataItem;
            /*0x154*/ bool m_isDefaultCalendar;
            /*0x158*/ string[] m_dateWords;
            /*0x160*/ string m_fullTimeSpanPositivePattern;
            /*0x168*/ string m_fullTimeSpanNegativePattern;
            /*0x170*/ System.Globalization.TokenHashValue[] m_dtfiTokenHash;

            static /*0x1a07860*/ DateTimeFormatInfo();
            static /*0x1a03560*/ bool InitPreferExistingTokens();
            static /*0x1a02a3c*/ System.Globalization.DateTimeFormatInfo get_InvariantInfo();
            static /*0x19fd490*/ System.Globalization.DateTimeFormatInfo get_CurrentInfo();
            static /*0x19fd748*/ System.Globalization.DateTimeFormatInfo GetInstance(System.IFormatProvider provider);
            static /*0x1a04c14*/ string[] GetCombinedPatterns(string[] patterns1, string[] patterns2, string connectString);
            static /*0x1a05124*/ string[] GetMergedPatterns(string[] patterns, string defaultPattern);
            static /*0x19fd9f4*/ void ValidateStyles(System.Globalization.DateTimeStyles style, string parameterName);
            static /*0x1a057bc*/ System.Globalization.DateTimeFormatInfo GetJapaneseCalendarDTFI();
            static /*0x1a05900*/ System.Globalization.DateTimeFormatInfo GetTaiwanCalendarDTFI();
            static /*0x1a070d4*/ bool TryParseHebrewNumber(ref System.__DTString str, ref bool badFormat, ref int number);
            static /*0x1a0723c*/ bool IsHebrewChar(char ch);
            /*0x1a037b0*/ DateTimeFormatInfo();
            /*0x1a0388c*/ DateTimeFormatInfo(System.Globalization.CultureData cultureData, System.Globalization.Calendar cal);
            /*0x1a03568*/ string get_CultureName();
            /*0x1a03594*/ System.Globalization.CultureInfo get_Culture();
            /*0x1a03624*/ string get_LanguageName();
            /*0x1a03650*/ string[] internalGetAbbreviatedDayOfWeekNames();
            /*0x1a036a8*/ string[] internalGetDayOfWeekNames();
            /*0x1a03700*/ string[] internalGetAbbreviatedMonthNames();
            /*0x1a03758*/ string[] internalGetMonthNames();
            /*0x1a038dc*/ void InitializeOverridableProperties(System.Globalization.CultureData cultureData, int calendarID);
            /*0x1a03a04*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x1a04088*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x1a04458*/ object GetFormat(System.Type formatType);
            /*0x1a02b2c*/ object Clone();
            /*0x1a044fc*/ string get_AMDesignator();
            /*0x1a04504*/ System.Globalization.Calendar get_Calendar();
            /*0x1a02c0c*/ void set_Calendar(System.Globalization.Calendar value);
            /*0x1a0450c*/ int[] get_OptionalCalendars();
            /*0x1a04558*/ string[] get_EraNames();
            /*0x1a01700*/ string GetEraName(int era);
            /*0x1a045b0*/ string[] get_AbbreviatedEraNames();
            /*0x1a04608*/ string GetAbbreviatedEraName(int era);
            /*0x1a04704*/ string[] get_AbbreviatedEnglishEraNames();
            /*0x1a0475c*/ string get_DateSeparator();
            /*0x1a0232c*/ string get_FullDateTimePattern();
            /*0x1a0228c*/ string get_LongDatePattern();
            /*0x1a03c48*/ void set_LongDatePattern(string value);
            /*0x1a02574*/ string get_LongTimePattern();
            /*0x1a03ed0*/ void set_LongTimePattern(string value);
            /*0x1a02494*/ string get_MonthDayPattern();
            /*0x1a047f8*/ string get_PMDesignator();
            /*0x1a024ec*/ string get_RFC1123Pattern();
            /*0x1a0223c*/ string get_ShortDatePattern();
            /*0x1a03d20*/ void set_ShortDatePattern(string value);
            /*0x1a022dc*/ string get_ShortTimePattern();
            /*0x1a03fb0*/ void set_ShortTimePattern(string value);
            /*0x1a02530*/ string get_SortableDateTimePattern();
            /*0x1a023a4*/ string get_GeneralShortTimePattern();
            /*0x1a0241c*/ string get_GeneralLongTimePattern();
            /*0x1a030e0*/ string get_DateTimeOffsetPattern();
            /*0x1a04894*/ string get_TimeSeparator();
            /*0x1a025c4*/ string get_UniversalSortableDateTimePattern();
            /*0x1a02608*/ string get_YearMonthPattern();
            /*0x1a03dfc*/ void set_YearMonthPattern(string value);
            /*0x1a048f4*/ string[] get_AbbreviatedDayNames();
            /*0x1a04974*/ string[] get_DayNames();
            /*0x1a049f4*/ string[] get_AbbreviatedMonthNames();
            /*0x1a04a74*/ string[] get_MonthNames();
            /*0x1a04af4*/ bool get_HasSpacesInMonthNames();
            /*0x1a04b0c*/ bool get_HasSpacesInDayNames();
            /*0x1a00450*/ string internalGetMonthName(int month, System.Globalization.MonthNameStyles style, bool abbreviated);
            /*0x1a04b24*/ string[] internalGetGenitiveMonthNames(bool abbreviated);
            /*0x1a04bbc*/ string[] internalGetLeapYearMonthNames();
            /*0x19ffdf0*/ string GetAbbreviatedDayName(System.DayOfWeek dayofweek);
            /*0x1a04da0*/ string[] GetAllDateTimePatterns(char format);
            /*0x19fff4c*/ string GetDayName(System.DayOfWeek dayofweek);
            /*0x1a000d8*/ string GetAbbreviatedMonthName(int month);
            /*0x1a00238*/ string GetMonthName(int month);
            /*0x1a043d8*/ string[] get_AllYearMonthPatterns();
            /*0x1a04358*/ string[] get_AllShortDatePatterns();
            /*0x1a042d8*/ string[] get_AllShortTimePatterns();
            /*0x1a04258*/ string[] get_AllLongDatePatterns();
            /*0x1a041d8*/ string[] get_AllLongTimePatterns();
            /*0x1a0489c*/ string[] get_UnclonedYearMonthPatterns();
            /*0x1a04800*/ string[] get_UnclonedShortDatePatterns();
            /*0x1a04764*/ string[] get_UnclonedLongDatePatterns();
            /*0x1a04858*/ string[] get_UnclonedShortTimePatterns();
            /*0x1a047bc*/ string[] get_UnclonedLongTimePatterns();
            /*0x1a0532c*/ bool get_IsReadOnly();
            /*0x1a05334*/ string[] get_MonthGenitiveNames();
            /*0x1a053b8*/ string get_FullTimeSpanPositivePattern();
            /*0x1a05490*/ string get_FullTimeSpanNegativePattern();
            /*0x1a054fc*/ System.Globalization.CompareInfo get_CompareInfo();
            /*0x1a017ec*/ System.Globalization.DateTimeFormatFlags get_FormatFlags();
            /*0x1a01950*/ bool get_HasForceTwoDigitYears();
            /*0x1a05680*/ bool get_HasYearMonthAdjustment();
            /*0x1a05698*/ bool YearMonthAdjustment(ref int year, ref int month, bool parsedMonthName);
            /*0x1a04548*/ void ClearTokenHashTable();
            /*0x1a05a44*/ System.Globalization.TokenHashValue[] CreateTokenHashTable();
            /*0x1a07018*/ void AddMonthNames(System.Globalization.TokenHashValue[] temp, string monthPostfix);
            /*0x1a07250*/ bool Tokenize(System.TokenType TokenMask, ref System.TokenType tokenType, ref int tokenValue, ref System.__DTString str);
            /*0x1a0766c*/ void InsertAtCurrentHashNode(System.Globalization.TokenHashValue[] hashTable, string str, char ch, System.TokenType tokenType, int tokenValue, int pos, int hashcode, int hashProbe);
            /*0x1a068e0*/ void InsertHash(System.Globalization.TokenHashValue[] hashTable, string str, System.TokenType tokenType, int tokenValue);
        }

        class TokenHashValue
        {
            /*0x10*/ string tokenString;
            /*0x18*/ System.TokenType tokenType;
            /*0x1c*/ int tokenValue;

            /*0x1d42360*/ TokenHashValue(string tokenString, System.TokenType tokenType, int tokenValue);
        }

        enum FORMATFLAGS
        {
            None = 0,
            UseGenitiveMonth = 1,
            UseLeapYearMonth = 2,
            UseSpacesInMonthNames = 4,
            UseHebrewParsing = 8,
            UseSpacesInDayNames = 16,
            UseDigitPrefixInTokens = 32,
        }

        enum CalendarId
        {
            GREGORIAN = 1,
            GREGORIAN_US = 2,
            JAPAN = 3,
            TAIWAN = 4,
            KOREA = 5,
            HIJRI = 6,
            THAI = 7,
            HEBREW = 8,
            GREGORIAN_ME_FRENCH = 9,
            GREGORIAN_ARABIC = 10,
            GREGORIAN_XLIT_ENGLISH = 11,
            GREGORIAN_XLIT_FRENCH = 12,
            JULIAN = 13,
            JAPANESELUNISOLAR = 14,
            CHINESELUNISOLAR = 15,
            SAKA = 16,
            LUNAR_ETO_CHN = 17,
            LUNAR_ETO_KOR = 18,
            LUNAR_ETO_ROKUYOU = 19,
            KOREANLUNISOLAR = 20,
            TAIWANLUNISOLAR = 21,
            PERSIAN = 22,
            UMALQURA = 23,
            LAST_CALENDAR = 23,
        }

        class DateTimeFormatInfoScanner
        {
            static /*0x0*/ System.Collections.Generic.Dictionary<string, string> s_knownWords;
            /*0x10*/ System.Collections.Generic.List<string> m_dateWords;
            /*0x18*/ System.Globalization.DateTimeFormatInfoScanner.FoundDatePattern m_ymdFlags;

            static /*0x1a078ac*/ System.Collections.Generic.Dictionary<string, string> get_KnownWords();
            static /*0x1a07c98*/ int SkipWhiteSpacesAndNonLetter(string pattern, int currentIndex);
            static /*0x1a082e8*/ int ScanRepeatChar(string pattern, char ch, int index, ref int count);
            static /*0x1a05540*/ System.Globalization.FORMATFLAGS GetFormatFlagGenitiveMonth(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames);
            static /*0x1a05584*/ System.Globalization.FORMATFLAGS GetFormatFlagUseSpaceInMonthNames(string[] monthNames, string[] genitveMonthNames, string[] abbrevMonthNames, string[] genetiveAbbrevMonthNames);
            static /*0x1a05634*/ System.Globalization.FORMATFLAGS GetFormatFlagUseSpaceInDayNames(string[] dayNames, string[] abbrevDayNames);
            static /*0x1a05670*/ System.Globalization.FORMATFLAGS GetFormatFlagUseHebrewCalendar(int calID);
            static /*0x1a085b8*/ bool EqualStringArrays(string[] array1, string[] array2);
            static /*0x1a088e8*/ bool ArrayElementsHaveSpace(string[] array);
            static /*0x1a08674*/ bool ArrayElementsBeginWithDigit(string[] array);
            /*0x1a06cd4*/ DateTimeFormatInfoScanner();
            /*0x1a07da0*/ void AddDateWordOrPostfix(string formatPostfix, string str);
            /*0x1a080f4*/ int AddDateWords(string pattern, int index, string formatPostfix);
            /*0x1a07fe0*/ void AddIgnorableSymbols(string text);
            /*0x1a08370*/ void ScanDateWord(string pattern);
            /*0x1a06d4c*/ string[] GetDateWordsOfDTFI(System.Globalization.DateTimeFormatInfo dtfi);

            enum FoundDatePattern
            {
                None = 0,
                FoundYearPatternFlag = 1,
                FoundMonthPatternFlag = 2,
                FoundDayPatternFlag = 4,
                FoundYMDPatternFlag = 7,
            }
        }

        enum DateTimeStyles
        {
            None = 0,
            AllowLeadingWhite = 1,
            AllowTrailingWhite = 2,
            AllowInnerWhite = 4,
            AllowWhiteSpaces = 7,
            NoCurrentDateDefault = 8,
            AdjustToUniversal = 16,
            AssumeLocal = 32,
            AssumeUniversal = 64,
            RoundtripKind = 128,
        }

        class GregorianCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ int[] DaysToMonth365;
            static /*0x8*/ int[] DaysToMonth366;
            static /*0x10*/ System.Globalization.Calendar s_defaultInstance;
            /*0x1c*/ System.Globalization.GregorianCalendarTypes m_type;

            static /*0x20ebcec*/ GregorianCalendar();
            static /*0x20ea95c*/ System.Globalization.Calendar GetDefaultInstance();
            static /*0x20eade8*/ long GetAbsoluteDate(int year, int month, int day);
            /*0x20eaa34*/ GregorianCalendar();
            /*0x20eaa60*/ GregorianCalendar(System.Globalization.GregorianCalendarTypes type);
            /*0x20ea794*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x20ea894*/ System.DateTime get_MinSupportedDateTime();
            /*0x20ea8f8*/ System.DateTime get_MaxSupportedDateTime();
            /*0x20eaba8*/ int get_ID();
            /*0x20eabb0*/ int GetDatePart(long ticks, int part);
            /*0x20eafdc*/ int GetDayOfMonth(System.DateTime time);
            /*0x20eb024*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x20eb098*/ int GetDayOfYear(System.DateTime time);
            /*0x20eb0e0*/ int GetDaysInMonth(int year, int month, int era);
            /*0x20eb3a0*/ int GetDaysInYear(int year, int era);
            /*0x20eb560*/ int GetEra(System.DateTime time);
            /*0x20eb568*/ int[] get_Eras();
            /*0x20eb5d8*/ int GetMonth(System.DateTime time);
            /*0x20eb620*/ int GetMonthsInYear(int year, int era);
            /*0x20eb79c*/ int GetYear(System.DateTime time);
            /*0x20eb7e4*/ bool IsLeapYear(int year, int era);
            /*0x20eb9a8*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x20eba48*/ bool TryToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era, ref System.DateTime result);
            /*0x20ebb50*/ int get_TwoDigitYearMax();
            /*0x20ebb98*/ int ToFourDigitYear(int year);
        }

        class EraInfo
        {
            /*0x10*/ int era;
            /*0x18*/ long ticks;
            /*0x20*/ int yearOffset;
            /*0x24*/ int minEraYear;
            /*0x28*/ int maxEraYear;
            /*0x30*/ string eraName;
            /*0x38*/ string abbrevEraName;
            /*0x40*/ string englishEraName;

            /*0x245ad74*/ EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear);
            /*0x245ae14*/ EraInfo(int era, int startYear, int startMonth, int startDay, int yearOffset, int minEraYear, int maxEraYear, string eraName, string abbrevEraName, string englishEraName);
        }

        class GregorianCalendarHelper
        {
            static /*0x0*/ int[] DaysToMonth365;
            static /*0x8*/ int[] DaysToMonth366;
            /*0x10*/ int m_maxYear;
            /*0x14*/ int m_minYear;
            /*0x18*/ System.Globalization.Calendar m_Cal;
            /*0x20*/ System.Globalization.EraInfo[] m_EraInfo;
            /*0x28*/ int[] m_eras;
            /*0x30*/ System.DateTime m_minDate;

            static /*0x20ed434*/ GregorianCalendarHelper();
            static /*0x20ec590*/ long GetAbsoluteDate(int year, int month, int day);
            static /*0x20ec784*/ long DateToTicks(int year, int month, int day);
            static /*0x20ec810*/ long TimeToTicks(int hour, int minute, int second, int millisecond);
            /*0x20ebdc8*/ GregorianCalendarHelper(System.Globalization.Calendar cal, System.Globalization.EraInfo[] eraInfo);
            /*0x20ebdc0*/ int get_MaxYear();
            /*0x20ebe68*/ int GetGregorianYear(int year, int era);
            /*0x20ec0cc*/ bool IsValidYear(int year, int era);
            /*0x20ec184*/ int GetDatePart(long ticks, int part);
            /*0x20ec3cc*/ void CheckTicksRange(long ticks);
            /*0x20ec9f4*/ int GetDayOfMonth(System.DateTime time);
            /*0x20eca38*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x20ecac8*/ int GetDayOfYear(System.DateTime time);
            /*0x20ecb0c*/ int GetDaysInMonth(int year, int month, int era);
            /*0x20eccb8*/ int GetDaysInYear(int year, int era);
            /*0x20ecd20*/ int GetEra(System.DateTime time);
            /*0x20ecdfc*/ int[] get_Eras();
            /*0x20ecf00*/ int GetMonth(System.DateTime time);
            /*0x20ecf44*/ int GetMonthsInYear(int year, int era);
            /*0x20ecf5c*/ int GetYear(System.DateTime time);
            /*0x20ed058*/ bool IsLeapYear(int year, int era);
            /*0x20ed0c0*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x20ed1cc*/ int GetWeekOfYear(System.DateTime time, System.Globalization.CalendarWeekRule rule, System.DayOfWeek firstDayOfWeek);
            /*0x20ed284*/ int ToFourDigitYear(int year, int twoDigitYearMax);
        }

        enum GregorianCalendarTypes
        {
            Localized = 1,
            USEnglish = 2,
            MiddleEastFrench = 9,
            Arabic = 10,
            TransliteratedEnglish = 11,
            TransliteratedFrench = 12,
        }

        struct HebrewNumberParsingContext
        {
            /*0x10*/ System.Globalization.HebrewNumber.HS state;
            /*0x14*/ int result;

            /*0xad0b28*/ HebrewNumberParsingContext(int result);
        }

        enum HebrewNumberParsingState
        {
            InvalidHebrewNumber = 0,
            NotHebrewDigit = 1,
            FoundEndOfHebrewNumber = 2,
            ContinueParsing = 3,
        }

        class HebrewNumber
        {
            static /*0x0*/ System.Globalization.HebrewNumber.HebrewValue[] HebrewValues;
            static /*0x8*/ char maxHebrewNumberCh;
            static /*0x10*/ System.Globalization.HebrewNumber.HS[][] NumberPasingState;

            static /*0x1a81b94*/ HebrewNumber();
            static /*0x1a81640*/ string ToString(int Number);
            static /*0x1a818a8*/ System.Globalization.HebrewNumberParsingState ParseByChar(char ch, ref System.Globalization.HebrewNumberParsingContext context);
            static /*0x1a81a98*/ bool IsDigit(char ch);

            enum HebrewToken
            {
                Invalid = -1,
                Digit400 = 0,
                Digit200_300 = 1,
                Digit100 = 2,
                Digit10 = 3,
                Digit1 = 4,
                Digit6_7 = 5,
                Digit7 = 6,
                Digit9 = 7,
                SingleQuote = 8,
                DoubleQuote = 9,
            }

            class HebrewValue
            {
                /*0x10*/ System.Globalization.HebrewNumber.HebrewToken token;
                /*0x14*/ int value;

                /*0x1814000*/ HebrewValue(System.Globalization.HebrewNumber.HebrewToken token, int value);
            }

            enum HS
            {
                _err = -1,
                Start = 0,
                S400 = 1,
                S400_400 = 2,
                S400_X00 = 3,
                S400_X0 = 4,
                X00_DQ = 5,
                S400_X00_X0 = 6,
                X0_DQ = 7,
                X = 8,
                X0 = 9,
                X00 = 10,
                S400_DQ = 11,
                S400_400_DQ = 12,
                S400_400_100 = 13,
                S9 = 14,
                X00_S9 = 15,
                S9_DQ = 16,
                END = 100,
            }
        }

        class HijriCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ int HijriEra;
            static /*0x8*/ int[] HijriMonthDays;
            static /*0x10*/ System.DateTime calendarMinValue;
            static /*0x18*/ System.DateTime calendarMaxValue;
            /*0x1c*/ int m_HijriAdvance;

            static /*0x1a83ed8*/ HijriCalendar();
            static /*0x1a82c8c*/ int GetAdvanceHijriDate();
            static /*0x1a82c94*/ void CheckTicksRange(long ticks);
            static /*0x1a82ec4*/ void CheckEraRange(int era);
            static /*0x1a82f9c*/ void CheckYearRange(int year, int era);
            static /*0x1a83124*/ void CheckYearMonthRange(int year, int month, int era);
            /*0x1a82a5c*/ HijriCalendar();
            /*0x1a82994*/ System.DateTime get_MinSupportedDateTime();
            /*0x1a829f8*/ System.DateTime get_MaxSupportedDateTime();
            /*0x1a82a6c*/ int get_ID();
            /*0x1a82a74*/ int get_DaysInYearBeforeMinSupportedYear();
            /*0x1a82a7c*/ long GetAbsoluteDateHijri(int y, int m, int d);
            /*0x1a82b58*/ long DaysUpToHijriYear(int HijriYear);
            /*0x1a82c18*/ int get_HijriAdjustment();
            /*0x1a832dc*/ int GetDatePart(long ticks, int part);
            /*0x1a835ac*/ int GetDayOfMonth(System.DateTime time);
            /*0x1a835f4*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x1a83668*/ int GetDayOfYear(System.DateTime time);
            /*0x1a836b0*/ int GetDaysInMonth(int year, int month, int era);
            /*0x1a83788*/ int GetDaysInYear(int year, int era);
            /*0x1a83828*/ int GetEra(System.DateTime time);
            /*0x1a838b4*/ int[] get_Eras();
            /*0x1a83964*/ int GetMonth(System.DateTime time);
            /*0x1a839ac*/ int GetMonthsInYear(int year, int era);
            /*0x1a83a24*/ int GetYear(System.DateTime time);
            /*0x1a83a6c*/ bool IsLeapYear(int year, int era);
            /*0x1a83b18*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x1a83d1c*/ int get_TwoDigitYearMax();
            /*0x1a83d64*/ int ToFourDigitYear(int year);
        }

        class JapaneseCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.DateTime calendarMinValue;
            static /*0x8*/ System.Globalization.EraInfo[] japaneseEraInfo;
            static /*0x10*/ System.Globalization.Calendar s_defaultInstance;
            /*0x20*/ System.Globalization.GregorianCalendarHelper helper;

            static /*0x1a8b118*/ JapaneseCalendar();
            static /*0x1a8a3bc*/ System.Globalization.EraInfo[] GetEraInfo();
            static /*0x1a8a7ac*/ System.Globalization.EraInfo[] GetErasFromRegistry();
            static /*0x1a8a7b4*/ System.Globalization.Calendar GetDefaultInstance();
            static /*0x1a8ad3c*/ string[] EraNames();
            static /*0x1a8ae64*/ string[] AbbrevEraNames();
            static /*0x1a8af8c*/ string[] EnglishEraNames();
            /*0x1a8a880*/ JapaneseCalendar();
            /*0x1a8a2f4*/ System.DateTime get_MinSupportedDateTime();
            /*0x1a8a358*/ System.DateTime get_MaxSupportedDateTime();
            /*0x1a8aa44*/ int get_ID();
            /*0x1a8aa4c*/ int GetDaysInMonth(int year, int month, int era);
            /*0x1a8aa68*/ int GetDaysInYear(int year, int era);
            /*0x1a8aa84*/ int GetDayOfMonth(System.DateTime time);
            /*0x1a8aaa0*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x1a8aabc*/ int GetDayOfYear(System.DateTime time);
            /*0x1a8aad8*/ int GetMonthsInYear(int year, int era);
            /*0x1a8aaf4*/ int GetWeekOfYear(System.DateTime time, System.Globalization.CalendarWeekRule rule, System.DayOfWeek firstDayOfWeek);
            /*0x1a8ab14*/ int GetEra(System.DateTime time);
            /*0x1a8ab30*/ int GetMonth(System.DateTime time);
            /*0x1a8ab4c*/ int GetYear(System.DateTime time);
            /*0x1a8ab68*/ bool IsLeapYear(int year, int era);
            /*0x1a8ab84*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x1a8abac*/ int ToFourDigitYear(int year);
            /*0x1a8ad20*/ int[] get_Eras();
            /*0x1a8b0b4*/ bool IsValidYear(int year, int era);
            /*0x1a8b0d0*/ int get_TwoDigitYearMax();
        }

        class NumberFormatInfo : System.ICloneable, System.IFormatProvider
        {
            static System.Globalization.NumberStyles InvalidNumberStyles = -1024;
            static /*0x0*/ System.Globalization.NumberFormatInfo invariantInfo;
            /*0x10*/ int[] numberGroupSizes;
            /*0x18*/ int[] currencyGroupSizes;
            /*0x20*/ int[] percentGroupSizes;
            /*0x28*/ string positiveSign;
            /*0x30*/ string negativeSign;
            /*0x38*/ string numberDecimalSeparator;
            /*0x40*/ string numberGroupSeparator;
            /*0x48*/ string currencyGroupSeparator;
            /*0x50*/ string currencyDecimalSeparator;
            /*0x58*/ string currencySymbol;
            /*0x60*/ string ansiCurrencySymbol;
            /*0x68*/ string nanSymbol;
            /*0x70*/ string positiveInfinitySymbol;
            /*0x78*/ string negativeInfinitySymbol;
            /*0x80*/ string percentDecimalSeparator;
            /*0x88*/ string percentGroupSeparator;
            /*0x90*/ string percentSymbol;
            /*0x98*/ string perMilleSymbol;
            /*0xa0*/ string[] nativeDigits;
            /*0xa8*/ int m_dataItem;
            /*0xac*/ int numberDecimalDigits;
            /*0xb0*/ int currencyDecimalDigits;
            /*0xb4*/ int currencyPositivePattern;
            /*0xb8*/ int currencyNegativePattern;
            /*0xbc*/ int numberNegativePattern;
            /*0xc0*/ int percentPositivePattern;
            /*0xc4*/ int percentNegativePattern;
            /*0xc8*/ int percentDecimalDigits;
            /*0xcc*/ int digitSubstitution;
            /*0xd0*/ bool isReadOnly;
            /*0xd1*/ bool m_useUserOverride;
            /*0xd2*/ bool m_isInvariant;
            /*0xd3*/ bool validForParseAsNumber;
            /*0xd4*/ bool validForParseAsCurrency;

            static /*0x22abb0c*/ System.Globalization.NumberFormatInfo get_InvariantInfo();
            static /*0x22abc84*/ System.Globalization.NumberFormatInfo GetInstance(System.IFormatProvider formatProvider);
            static /*0x22abe54*/ System.Globalization.NumberFormatInfo get_CurrentInfo();
            static /*0x22abbb4*/ System.Globalization.NumberFormatInfo ReadOnly(System.Globalization.NumberFormatInfo nfi);
            static /*0x22ac294*/ void ValidateParseStyleInteger(System.Globalization.NumberStyles style);
            static /*0x22ac364*/ void ValidateParseStyleFloatingPoint(System.Globalization.NumberStyles style);
            /*0x22ab57c*/ NumberFormatInfo();
            /*0x22ab584*/ NumberFormatInfo(System.Globalization.CultureData cultureData);
            /*0x22aba74*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x22abb04*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x22abb08*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x22abf54*/ object Clone();
            /*0x22abfc4*/ int get_CurrencyDecimalDigits();
            /*0x22abfcc*/ string get_CurrencyDecimalSeparator();
            /*0x22abfd4*/ bool get_IsReadOnly();
            /*0x22abfdc*/ int[] get_CurrencyGroupSizes();
            /*0x22ac058*/ int[] get_NumberGroupSizes();
            /*0x22ac0d4*/ int[] get_PercentGroupSizes();
            /*0x22ac150*/ string get_CurrencyGroupSeparator();
            /*0x22ac158*/ string get_CurrencySymbol();
            /*0x22ac160*/ string get_NaNSymbol();
            /*0x22ac168*/ int get_CurrencyNegativePattern();
            /*0x22ac170*/ int get_NumberNegativePattern();
            /*0x22ac178*/ int get_PercentPositivePattern();
            /*0x22ac180*/ int get_PercentNegativePattern();
            /*0x22ac188*/ string get_NegativeInfinitySymbol();
            /*0x22ac190*/ string get_NegativeSign();
            /*0x22ac198*/ int get_NumberDecimalDigits();
            /*0x22ac1a0*/ string get_NumberDecimalSeparator();
            /*0x22ac1a8*/ string get_NumberGroupSeparator();
            /*0x22ac1b0*/ int get_CurrencyPositivePattern();
            /*0x22ac1b8*/ string get_PositiveInfinitySymbol();
            /*0x22ac1c0*/ string get_PositiveSign();
            /*0x22ac1c8*/ int get_PercentDecimalDigits();
            /*0x22ac1d0*/ string get_PercentDecimalSeparator();
            /*0x22ac1d8*/ string get_PercentGroupSeparator();
            /*0x22ac1e0*/ string get_PercentSymbol();
            /*0x22ac1e8*/ string get_PerMilleSymbol();
            /*0x22ac1f0*/ object GetFormat(System.Type formatType);
        }

        enum NumberStyles
        {
            None = 0,
            AllowLeadingWhite = 1,
            AllowTrailingWhite = 2,
            AllowLeadingSign = 4,
            AllowTrailingSign = 8,
            AllowParentheses = 16,
            AllowDecimalPoint = 32,
            AllowThousands = 64,
            AllowExponent = 128,
            AllowCurrencySymbol = 256,
            AllowHexSpecifier = 512,
            Integer = 7,
            HexNumber = 515,
            Number = 111,
            Float = 167,
            Currency = 383,
            Any = 511,
        }

        class SortVersion
        {
            /*0x10*/ int m_NlsVersion;
            /*0x14*/ System.Guid m_SortId;
        }

        class TaiwanCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.Globalization.EraInfo[] taiwanEraInfo;
            static /*0x8*/ System.Globalization.Calendar s_defaultInstance;
            static /*0x10*/ System.DateTime calendarMinValue;
            /*0x20*/ System.Globalization.GregorianCalendarHelper helper;

            static /*0x1e24b3c*/ TaiwanCalendar();
            static /*0x1e244a4*/ System.Globalization.Calendar GetDefaultInstance();
            /*0x1e24570*/ TaiwanCalendar();
            /*0x1e24734*/ System.DateTime get_MinSupportedDateTime();
            /*0x1e24798*/ System.DateTime get_MaxSupportedDateTime();
            /*0x1e247fc*/ int get_ID();
            /*0x1e24804*/ int GetDaysInMonth(int year, int month, int era);
            /*0x1e24820*/ int GetDaysInYear(int year, int era);
            /*0x1e2483c*/ int GetDayOfMonth(System.DateTime time);
            /*0x1e24858*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x1e24874*/ int GetDayOfYear(System.DateTime time);
            /*0x1e24890*/ int GetMonthsInYear(int year, int era);
            /*0x1e248ac*/ int GetWeekOfYear(System.DateTime time, System.Globalization.CalendarWeekRule rule, System.DayOfWeek firstDayOfWeek);
            /*0x1e248cc*/ int GetEra(System.DateTime time);
            /*0x1e248e8*/ int GetMonth(System.DateTime time);
            /*0x1e24904*/ int GetYear(System.DateTime time);
            /*0x1e24920*/ bool IsLeapYear(int year, int era);
            /*0x1e2493c*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x1e24964*/ int[] get_Eras();
            /*0x1e24980*/ int get_TwoDigitYearMax();
            /*0x1e249c8*/ int ToFourDigitYear(int year);
        }

        class TextInfo : System.ICloneable, System.Runtime.Serialization.IDeserializationCallback
        {
            static int wordSeparatorMask = 536672256;
            static /*0x0*/ System.Globalization.TextInfo s_Invariant;
            /*0x10*/ string m_listSeparator;
            /*0x18*/ bool m_isReadOnly;
            /*0x20*/ string m_cultureName;
            /*0x28*/ System.Globalization.CultureData m_cultureData;
            /*0x30*/ string m_textInfoName;
            /*0x38*/ System.Nullable<bool> m_IsAsciiCasingSameAsInvariant;
            /*0x40*/ string customCultureName;
            /*0x48*/ int m_nDataItem;
            /*0x4c*/ bool m_useUserOverride;
            /*0x50*/ int m_win32LangID;

            static /*0x1e35f80*/ System.Globalization.TextInfo get_Invariant();
            static /*0x1e36200*/ int GetHashCodeOrdinalIgnoreCase(string s);
            static /*0x1e3620c*/ int GetHashCodeOrdinalIgnoreCase(string s, bool forceRandomizedHashing, long additionalEntropy);
            static /*0x1e36348*/ int CompareOrdinalIgnoreCase(string str1, string str2);
            static /*0x1e36544*/ int CompareOrdinalIgnoreCaseEx(string strA, int indexA, string strB, int indexB, int lengthA, int lengthB);
            static /*0x1e36548*/ int IndexOfStringOrdinalIgnoreCase(string source, string value, int startIndex, int count);
            static /*0x1e365f0*/ int LastIndexOfStringOrdinalIgnoreCase(string source, string value, int startIndex, int count);
            static /*0x1e368f4*/ char ToLowerAsciiInvariant(char c);
            static /*0x1e36f9c*/ char ToUpperAsciiInvariant(char c);
            static /*0x1e367d4*/ bool IsAscii(char c);
            static /*0x1e36378*/ int InternalCompareStringOrdinalIgnoreCase(string strA, int indexA, string strB, int indexB, int lenA, int lenB);
            /*0x1e36024*/ TextInfo(System.Globalization.CultureData cultureData);
            /*0x1e37864*/ TextInfo();
            /*0x1e36068*/ void OnDeserializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x1e36070*/ void OnDeserialized();
            /*0x1e36170*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext ctx);
            /*0x1e36174*/ void OnSerializing(System.Runtime.Serialization.StreamingContext ctx);
            /*0x1e36684*/ int get_OEMCodePage();
            /*0x1e366a0*/ string get_CultureName();
            /*0x1e366a8*/ object Clone();
            /*0x1e36734*/ void SetReadOnlyState(bool readOnly);
            /*0x1e36740*/ string get_ListSeparator();
            /*0x1e3676c*/ char ToLower(char c);
            /*0x1e36df0*/ string ToLower(string str);
            /*0x1e36f34*/ char ToUpper(char c);
            /*0x1e374a4*/ string ToUpper(string str);
            /*0x1e367e4*/ bool get_IsAsciiCasingSameAsInvariant();
            /*0x1e375e8*/ bool Equals(object obj);
            /*0x1e37698*/ int GetHashCode();
            /*0x1e376b8*/ string ToString();
            /*0x1e37714*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x1e37718*/ int GetCaseInsensitiveHashCode(string str);
            /*0x1e3623c*/ int GetCaseInsensitiveHashCode(string str, bool forceRandomizedHashing, long additionalEntropy);
            /*0x1e37720*/ int GetInvariantCaseInsensitiveHashCode(string str);
            /*0x1e37500*/ string ToUpperInternal(string str);
            /*0x1e36e4c*/ string ToLowerInternal(string str);
            /*0x1e36fb8*/ char ToUpperInternal(char c);
            /*0x1e36910*/ char ToLowerInternal(char c);
        }

        class ThaiBuddhistCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.Globalization.EraInfo[] thaiBuddhistEraInfo;
            /*0x20*/ System.Globalization.GregorianCalendarHelper helper;

            static /*0x1d2ef58*/ ThaiBuddhistCalendar();
            /*0x1d2ec2c*/ ThaiBuddhistCalendar();
            /*0x1d2eb64*/ System.DateTime get_MinSupportedDateTime();
            /*0x1d2ebc8*/ System.DateTime get_MaxSupportedDateTime();
            /*0x1d2ecdc*/ int get_ID();
            /*0x1d2ece4*/ int GetDaysInMonth(int year, int month, int era);
            /*0x1d2ed00*/ int GetDaysInYear(int year, int era);
            /*0x1d2ed1c*/ int GetDayOfMonth(System.DateTime time);
            /*0x1d2ed38*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x1d2ed54*/ int GetDayOfYear(System.DateTime time);
            /*0x1d2ed70*/ int GetMonthsInYear(int year, int era);
            /*0x1d2ed8c*/ int GetWeekOfYear(System.DateTime time, System.Globalization.CalendarWeekRule rule, System.DayOfWeek firstDayOfWeek);
            /*0x1d2edac*/ int GetEra(System.DateTime time);
            /*0x1d2edc8*/ int GetMonth(System.DateTime time);
            /*0x1d2ede4*/ int GetYear(System.DateTime time);
            /*0x1d2ee00*/ bool IsLeapYear(int year, int era);
            /*0x1d2ee1c*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x1d2ee44*/ int[] get_Eras();
            /*0x1d2ee60*/ int get_TwoDigitYearMax();
            /*0x1d2eea8*/ int ToFourDigitYear(int year);
        }

        class TimeSpanFormat
        {
            static /*0x0*/ System.Globalization.TimeSpanFormat.FormatLiterals PositiveInvariantFormatLiterals;
            static /*0x28*/ System.Globalization.TimeSpanFormat.FormatLiterals NegativeInvariantFormatLiterals;

            static /*0x1d34f00*/ TimeSpanFormat();
            static /*0x1d341c4*/ string IntToString(int n, int digits);
            static /*0x1d33bd4*/ string Format(System.TimeSpan value, string format, System.IFormatProvider formatProvider);
            static /*0x1d341dc*/ string FormatStandard(System.TimeSpan value, bool isInvariant, string format, System.Globalization.TimeSpanFormat.Pattern pattern);
            static /*0x1d34734*/ string FormatCustomized(System.TimeSpan value, string format, System.Globalization.DateTimeFormatInfo dtfi);

            enum Pattern
            {
                None = 0,
                Minimum = 1,
                Full = 2,
            }

            struct FormatLiterals
            {
                /*0x10*/ string AppCompatLiteral;
                /*0x18*/ int dd;
                /*0x1c*/ int hh;
                /*0x20*/ int mm;
                /*0x24*/ int ss;
                /*0x28*/ int ff;
                /*0x30*/ string[] literals;

                static /*0x18218ac*/ System.Globalization.TimeSpanFormat.FormatLiterals InitInvariant(bool isNegative);
                /*0xacb250*/ string get_Start();
                /*0xacb258*/ string get_DayHourSep();
                /*0xacb260*/ string get_HourMinuteSep();
                /*0xacb268*/ string get_MinuteSecondSep();
                /*0xacb270*/ string get_SecondFractionSep();
                /*0xacb278*/ string get_End();
                /*0xacb280*/ void Init(string format, bool useInvariantFieldLengths);
            }
        }

        class TimeSpanParse
        {
            static /*0x0*/ System.Globalization.TimeSpanParse.TimeSpanToken zero;

            static /*0x1d385f0*/ TimeSpanParse();
            static /*0x1d34fc4*/ bool TryTimeToTicks(bool positive, System.Globalization.TimeSpanParse.TimeSpanToken days, System.Globalization.TimeSpanParse.TimeSpanToken hours, System.Globalization.TimeSpanParse.TimeSpanToken minutes, System.Globalization.TimeSpanParse.TimeSpanToken seconds, System.Globalization.TimeSpanParse.TimeSpanToken fraction, ref long result);
            static /*0x1d33a24*/ System.TimeSpan Parse(string input, System.IFormatProvider formatProvider);
            static /*0x1d351d0*/ bool TryParseTimeSpan(string input, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, System.IFormatProvider formatProvider, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x1d35400*/ bool ProcessTerminalState(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x1d3826c*/ bool ProcessTerminal_DHMSF(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x1d36f68*/ bool ProcessTerminal_HMS_F_D(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x1d35d04*/ bool ProcessTerminal_HM_S_D(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x1d35984*/ bool ProcessTerminal_HM(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            static /*0x1d3560c*/ bool ProcessTerminal_D(ref System.Globalization.TimeSpanParse.TimeSpanRawInfo raw, System.Globalization.TimeSpanParse.TimeSpanStandardStyles style, ref System.Globalization.TimeSpanParse.TimeSpanResult result);

            enum TimeSpanThrowStyle
            {
                None = 0,
                All = 1,
            }

            enum ParseFailureKind
            {
                None = 0,
                ArgumentNull = 1,
                Format = 2,
                FormatWithParameter = 3,
                Overflow = 4,
            }

            enum TimeSpanStandardStyles
            {
                None = 0,
                Invariant = 1,
                Localized = 2,
                RequireFull = 4,
                Any = 3,
            }

            enum TTT
            {
                None = 0,
                End = 1,
                Num = 2,
                Sep = 3,
                NumOverflow = 4,
            }

            struct TimeSpanToken
            {
                /*0x10*/ System.Globalization.TimeSpanParse.TTT ttt;
                /*0x14*/ int num;
                /*0x18*/ int zeroes;
                /*0x20*/ string sep;

                /*0xb21190*/ TimeSpanToken(int number);
                /*0xb211a4*/ bool IsInvalidNumber(int maxValue, int maxPrecision);
            }

            struct TimeSpanTokenizer
            {
                /*0x10*/ int m_pos;
                /*0x18*/ string m_value;

                /*0xb21234*/ void Init(string input);
                /*0xb21240*/ void Init(string input, int startPosition);
                /*0xb2124c*/ System.Globalization.TimeSpanParse.TimeSpanToken GetNextToken();
                /*0xb2128c*/ bool get_EOL();
                /*0xb212b8*/ char get_NextChar();
                /*0xb212c8*/ char get_CurrentChar();
            }

            struct TimeSpanRawInfo
            {
                /*0x10*/ System.Globalization.TimeSpanParse.TTT lastSeenTTT;
                /*0x14*/ int tokenCount;
                /*0x18*/ int SepCount;
                /*0x1c*/ int NumCount;
                /*0x20*/ string[] literals;
                /*0x28*/ System.Globalization.TimeSpanParse.TimeSpanToken[] numbers;
                /*0x30*/ System.Globalization.TimeSpanFormat.FormatLiterals m_posLoc;
                /*0x58*/ System.Globalization.TimeSpanFormat.FormatLiterals m_negLoc;
                /*0x80*/ bool m_posLocInit;
                /*0x81*/ bool m_negLocInit;
                /*0x88*/ string m_fullPosPattern;
                /*0x90*/ string m_fullNegPattern;

                /*0xacb2c8*/ System.Globalization.TimeSpanFormat.FormatLiterals get_PositiveInvariant();
                /*0xacb33c*/ System.Globalization.TimeSpanFormat.FormatLiterals get_NegativeInvariant();
                /*0xacb3b4*/ System.Globalization.TimeSpanFormat.FormatLiterals get_PositiveLocalized();
                /*0xacb41c*/ System.Globalization.TimeSpanFormat.FormatLiterals get_NegativeLocalized();
                /*0xacb484*/ bool FullAppCompatMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xacb4bc*/ bool PartialAppCompatMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xacb4f4*/ bool FullMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xacb52c*/ bool FullDMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xacb564*/ bool FullHMMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xacb59c*/ bool FullDHMMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xacb5d4*/ bool FullHMSMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xacb60c*/ bool FullDHMSMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xacb644*/ bool FullHMSFMatch(System.Globalization.TimeSpanFormat.FormatLiterals pattern);
                /*0xacb67c*/ void Init(System.Globalization.DateTimeFormatInfo dtfi);
                /*0xacb684*/ bool ProcessToken(ref System.Globalization.TimeSpanParse.TimeSpanToken tok, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0xacb68c*/ bool AddSep(string sep, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
                /*0xacb694*/ bool AddNum(System.Globalization.TimeSpanParse.TimeSpanToken num, ref System.Globalization.TimeSpanParse.TimeSpanResult result);
            }

            struct TimeSpanResult
            {
                /*0x10*/ System.TimeSpan parsedTimeSpan;
                /*0x18*/ System.Globalization.TimeSpanParse.TimeSpanThrowStyle throwStyle;
                /*0x1c*/ System.Globalization.TimeSpanParse.ParseFailureKind m_failure;
                /*0x20*/ string m_failureMessageID;
                /*0x28*/ object m_failureMessageFormatArgument;
                /*0x30*/ string m_failureArgumentName;

                /*0xb210b0*/ void Init(System.Globalization.TimeSpanParse.TimeSpanThrowStyle canThrow);
                /*0xb210bc*/ void SetFailure(System.Globalization.TimeSpanParse.ParseFailureKind failure, string failureMessageID);
                /*0xb210cc*/ void SetFailure(System.Globalization.TimeSpanParse.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument);
                /*0xb210d8*/ void SetFailure(System.Globalization.TimeSpanParse.ParseFailureKind failure, string failureMessageID, object failureMessageFormatArgument, string failureArgumentName);
                /*0xb210e0*/ System.Exception GetTimeSpanParseException();
            }
        }

        class UmAlQuraCalendar : System.Globalization.Calendar
        {
            static /*0x0*/ System.Globalization.UmAlQuraCalendar.DateMapping[] HijriYearInfo;
            static /*0x8*/ System.DateTime minDate;
            static /*0x10*/ System.DateTime maxDate;

            static /*0x208f0b4*/ UmAlQuraCalendar();
            static /*0x208da2c*/ System.Globalization.UmAlQuraCalendar.DateMapping[] InitDateMapping();
            static /*0x208dc84*/ void ConvertHijriToGregorian(int HijriYear, int HijriMonth, int HijriDay, ref int yg, ref int mg, ref int dg);
            static /*0x208ddd8*/ long GetAbsoluteDateUmAlQura(int year, int month, int day);
            static /*0x208deb8*/ void CheckTicksRange(long ticks);
            static /*0x208e0d4*/ void CheckEraRange(int era);
            static /*0x208e150*/ void CheckYearRange(int year, int era);
            static /*0x208e2d4*/ void CheckYearMonthRange(int year, int month, int era);
            static /*0x208e3bc*/ void ConvertGregorianToHijri(System.DateTime time, ref int HijriYear, ref int HijriMonth, ref int HijriDay);
            static /*0x208e928*/ int RealGetDaysInYear(int year);
            /*0x208dc64*/ UmAlQuraCalendar();
            /*0x208db9c*/ System.DateTime get_MinSupportedDateTime();
            /*0x208dc00*/ System.DateTime get_MaxSupportedDateTime();
            /*0x208dc6c*/ int get_BaseCalendarID();
            /*0x208dc74*/ int get_ID();
            /*0x208dc7c*/ int get_DaysInYearBeforeMinSupportedYear();
            /*0x208e648*/ int GetDatePart(System.DateTime time, int part);
            /*0x208e7c0*/ int GetDayOfMonth(System.DateTime time);
            /*0x208e7d4*/ System.DayOfWeek GetDayOfWeek(System.DateTime time);
            /*0x208e848*/ int GetDayOfYear(System.DateTime time);
            /*0x208e85c*/ int GetDaysInMonth(int year, int month, int era);
            /*0x208e9dc*/ int GetDaysInYear(int year, int era);
            /*0x208ea54*/ int GetEra(System.DateTime time);
            /*0x208ead0*/ int[] get_Eras();
            /*0x208eb40*/ int GetMonth(System.DateTime time);
            /*0x208eb54*/ int GetMonthsInYear(int year, int era);
            /*0x208ebcc*/ int GetYear(System.DateTime time);
            /*0x208ebe0*/ bool IsLeapYear(int year, int era);
            /*0x208ec64*/ System.DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
            /*0x208eef8*/ int get_TwoDigitYearMax();
            /*0x208ef40*/ int ToFourDigitYear(int year);

            struct DateMapping
            {
                /*0x10*/ int HijriMonthsLengthFlags;
                /*0x18*/ System.DateTime GregorianDate;

                /*0xb21598*/ DateMapping(int MonthsLengthFlags, int GYear, int GMonth, int GDay);
            }
        }

        enum UnicodeCategory
        {
            UppercaseLetter = 0,
            LowercaseLetter = 1,
            TitlecaseLetter = 2,
            ModifierLetter = 3,
            OtherLetter = 4,
            NonSpacingMark = 5,
            SpacingCombiningMark = 6,
            EnclosingMark = 7,
            DecimalDigitNumber = 8,
            LetterNumber = 9,
            OtherNumber = 10,
            SpaceSeparator = 11,
            LineSeparator = 12,
            ParagraphSeparator = 13,
            Control = 14,
            Format = 15,
            Surrogate = 16,
            PrivateUse = 17,
            ConnectorPunctuation = 18,
            DashPunctuation = 19,
            OpenPunctuation = 20,
            ClosePunctuation = 21,
            InitialQuotePunctuation = 22,
            FinalQuotePunctuation = 23,
            OtherPunctuation = 24,
            MathSymbol = 25,
            CurrencySymbol = 26,
            ModifierSymbol = 27,
            OtherSymbol = 28,
            OtherNotAssigned = 29,
        }

        class SortKey
        {
            /*0x10*/ string source;
            /*0x18*/ byte[] key;
            /*0x20*/ System.Globalization.CompareOptions options;
            /*0x24*/ int lcid;

            static /*0x2062984*/ int Compare(System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);
            /*0x2062b00*/ SortKey(int lcid, string source, System.Globalization.CompareOptions opt);
            /*0x2062b40*/ SortKey(int lcid, string source, byte[] buffer, System.Globalization.CompareOptions opt, int lv1Length, int lv2Length, int lv3Length, int kanaSmallLength, int markTypeLength, int katakanaLength, int kanaWidthLength, int identLength);
            /*0x2062ed8*/ SortKey();
            /*0x2062b8c*/ string get_OriginalString();
            /*0x2062b94*/ byte[] get_KeyData();
            /*0x2062b9c*/ bool Equals(object value);
            /*0x2062c58*/ int GetHashCode();
            /*0x2062ccc*/ string ToString();
        }

        class CultureData
        {
            static /*0x0*/ System.Globalization.CultureData s_Invariant;
            /*0x10*/ string sAM1159;
            /*0x18*/ string sPM2359;
            /*0x20*/ string sTimeSeparator;
            /*0x28*/ string[] saLongTimes;
            /*0x30*/ string[] saShortTimes;
            /*0x38*/ int iFirstDayOfWeek;
            /*0x3c*/ int iFirstWeekOfYear;
            /*0x40*/ int[] waCalendars;
            /*0x48*/ System.Globalization.CalendarData[] calendars;
            /*0x50*/ string sISO639Language;
            /*0x58*/ string sRealName;
            /*0x60*/ bool bUseOverrides;
            /*0x64*/ int calendarId;
            /*0x68*/ int numberIndex;
            /*0x6c*/ int iDefaultAnsiCodePage;
            /*0x70*/ int iDefaultOemCodePage;
            /*0x74*/ int iDefaultMacCodePage;
            /*0x78*/ int iDefaultEbcdicCodePage;
            /*0x7c*/ bool isRightToLeft;
            /*0x80*/ string sListSeparator;

            static /*0x251bb08*/ System.Globalization.CultureData get_Invariant();
            static /*0x251bebc*/ System.Globalization.CultureData GetCultureData(string cultureName, bool useUserOverride);
            static /*0x251bfb4*/ System.Globalization.CultureData GetCultureData(string cultureName, bool useUserOverride, int datetimeIndex, int calendarId, int numberIndex, string iso2lang, int ansiCodePage, int oemCodePage, int macCodePage, int ebcdicCodePage, bool rightToLeft, string listSeparator);
            static /*0x251c0e4*/ System.Globalization.CultureData GetCultureData(int culture, bool bUseUserOverride);
            static /*0x251c674*/ string GetDateSeparator(string format);
            static /*0x251c6c0*/ string GetSeparator(string format, string timeParts);
            static /*0x251c7c8*/ int IndexOfTimePart(string format, int startIndex, string timeParts);
            static /*0x251c8c0*/ string UnescapeNlsString(string str, int start, int end);
            static /*0x251ca70*/ string[] ReescapeWin32Strings(string[] array);
            static /*0x251ca74*/ string ReescapeWin32String(string str);
            static /*0x251cad4*/ void fill_number_data(System.Globalization.NumberFormatInfo nfi, int numberIndex);
            /*0x251badc*/ CultureData(string name);
            /*0x251c0e0*/ void fill_culture_data(int datetimeIndex);
            /*0x251c0ec*/ System.Globalization.CalendarData GetCalendar(int calendarId);
            /*0x251c218*/ string[] get_LongTimes();
            /*0x251c23c*/ string[] get_ShortTimes();
            /*0x251c260*/ string get_SISO639LANGNAME();
            /*0x251c268*/ int get_IFIRSTDAYOFWEEK();
            /*0x251c270*/ int get_IFIRSTWEEKOFYEAR();
            /*0x251c278*/ string get_SAM1159();
            /*0x251c280*/ string get_SPM2359();
            /*0x251c288*/ string get_TimeSeparator();
            /*0x251c290*/ int[] get_CalendarIds();
            /*0x251c3f8*/ bool get_IsInvariantCulture();
            /*0x251c404*/ string get_CultureName();
            /*0x251c40c*/ string get_SCOMPAREINFO();
            /*0x251c450*/ string get_STEXTINFO();
            /*0x251c458*/ int get_ILANGUAGE();
            /*0x251c460*/ int get_IDEFAULTOEMCODEPAGE();
            /*0x251c468*/ string get_SLIST();
            /*0x251c470*/ bool get_UseUserOverride();
            /*0x251c478*/ string[] EraNames(int calendarId);
            /*0x251c498*/ string[] AbbrevEraNames(int calendarId);
            /*0x251c4b8*/ string[] AbbreviatedEnglishEraNames(int calendarId);
            /*0x251c4d8*/ string[] ShortDates(int calendarId);
            /*0x251c4f8*/ string[] LongDates(int calendarId);
            /*0x251c518*/ string[] YearMonths(int calendarId);
            /*0x251c538*/ string[] DayNames(int calendarId);
            /*0x251c558*/ string[] AbbreviatedDayNames(int calendarId);
            /*0x251c578*/ string[] MonthNames(int calendarId);
            /*0x251c598*/ string[] GenitiveMonthNames(int calendarId);
            /*0x251c5b8*/ string[] AbbreviatedMonthNames(int calendarId);
            /*0x251c5d8*/ string[] AbbreviatedGenitiveMonthNames(int calendarId);
            /*0x251c5f8*/ string[] LeapYearMonthNames(int calendarId);
            /*0x251c618*/ string MonthDay(int calendarId);
            /*0x251c638*/ string DateSeparator(int calendarId);
            /*0x251ca78*/ void GetNFIValues(System.Globalization.NumberFormatInfo nfi);
        }

        class CodePageDataItem
        {
            static /*0x0*/ char[] sep;
            /*0x10*/ int m_dataIndex;
            /*0x14*/ int m_uiFamilyCodePage;
            /*0x18*/ string m_webName;
            /*0x20*/ string m_headerName;
            /*0x28*/ string m_bodyName;
            /*0x30*/ uint m_flags;

            static /*0x16190a8*/ CodePageDataItem();
            static /*0x1618d40*/ string CreateString(string pStrings, uint index);
            /*0x1618c68*/ CodePageDataItem(int dataIndex);
            /*0x1618e10*/ string get_WebName();
            /*0x1618ee8*/ int get_UIFamilyCodePage();
            /*0x1618ef0*/ string get_HeaderName();
            /*0x1618fc8*/ string get_BodyName();
            /*0x16190a0*/ uint get_Flags();
        }

        class EncodingTable
        {
            static /*0x0*/ System.Globalization.InternalEncodingDataItem[] encodingDataPtr;
            static /*0x8*/ System.Globalization.InternalCodePageDataItem[] codePageDataPtr;
            static /*0x10*/ int lastEncodingItem;
            static /*0x18*/ System.Collections.Hashtable hashByName;
            static /*0x20*/ System.Collections.Hashtable hashByCodePage;

            static /*0x244e310*/ EncodingTable();
            static /*0x244e284*/ int GetNumEncodingItems();
            static /*0x244e2f4*/ System.Globalization.InternalEncodingDataItem ENC(string name, ushort cp);
            static /*0x244e2fc*/ System.Globalization.InternalCodePageDataItem MapCodePageDataItem(ushort cp, ushort fcp, string names, uint flags);
            static /*0x24537a4*/ int internalGetCodePageFromName(string name);
            static /*0x2453a50*/ int GetCodePageFromName(string name);
            static /*0x2453bd8*/ System.Globalization.CodePageDataItem GetCodePageDataItem(int codepage);
        }

        struct InternalEncodingDataItem
        {
            /*0x10*/ string webName;
            /*0x18*/ ushort codePage;
        }

        struct InternalCodePageDataItem
        {
            /*0x10*/ ushort codePage;
            /*0x12*/ ushort uiFamilyCodePage;
            /*0x14*/ uint flags;
            /*0x18*/ string Names;
        }

        class TextInfoToUpperData
        {
            static /*0x0*/ char[] range_00e0_0586;
            static /*0x8*/ char[] range_1e01_1ff3;
            static /*0x10*/ char[] range_2170_2184;
            static /*0x18*/ char[] range_24d0_24e9;
            static /*0x20*/ char[] range_2c30_2ce3;
            static /*0x28*/ char[] range_2d00_2d25;
            static /*0x30*/ char[] range_a641_a697;
            static /*0x38*/ char[] range_a723_a78c;

            static /*0x1d2d5c0*/ TextInfoToUpperData();
        }

        class TextInfoToLowerData
        {
            static /*0x0*/ char[] range_00c0_0556;
            static /*0x8*/ char[] range_10a0_10c5;
            static /*0x10*/ char[] range_1e00_1ffc;
            static /*0x18*/ char[] range_2160_216f;
            static /*0x20*/ char[] range_24b6_24cf;
            static /*0x28*/ char[] range_2c00_2c2e;
            static /*0x30*/ char[] range_2c60_2ce2;
            static /*0x38*/ char[] range_a640_a696;
            static /*0x40*/ char[] range_a722_a78b;

            static /*0x1d2d348*/ TextInfoToLowerData();
        }

        class CultureInfo : System.ICloneable, System.IFormatProvider
        {
            static int InvariantCultureId = 127;
            static int CalendarTypeBits = 8;
            static string MSG_READONLY = "This instance is read only";
            static /*0x0*/ System.Globalization.CultureInfo invariant_culture_info;
            static /*0x8*/ object shared_table_lock;
            static /*0x10*/ System.Globalization.CultureInfo default_current_culture;
            static /*0x18*/ System.Globalization.CultureInfo s_DefaultThreadCurrentUICulture;
            static /*0x20*/ System.Globalization.CultureInfo s_DefaultThreadCurrentCulture;
            static /*0x28*/ System.Collections.Generic.Dictionary<int, System.Globalization.CultureInfo> shared_by_number;
            static /*0x30*/ System.Collections.Generic.Dictionary<string, System.Globalization.CultureInfo> shared_by_name;
            static /*0x38*/ bool IsTaiwanSku;
            /*0x10*/ bool m_isReadOnly;
            /*0x14*/ int cultureID;
            /*0x18*/ int parent_lcid;
            /*0x1c*/ int datetime_index;
            /*0x20*/ int number_index;
            /*0x24*/ int default_calendar_type;
            /*0x28*/ bool m_useUserOverride;
            /*0x30*/ System.Globalization.NumberFormatInfo numInfo;
            /*0x38*/ System.Globalization.DateTimeFormatInfo dateTimeInfo;
            /*0x40*/ System.Globalization.TextInfo textInfo;
            /*0x48*/ string m_name;
            /*0x50*/ string englishname;
            /*0x58*/ string nativename;
            /*0x60*/ string iso3lang;
            /*0x68*/ string iso2lang;
            /*0x70*/ string win3lang;
            /*0x78*/ string territory;
            /*0x80*/ string[] native_calendar_names;
            /*0x88*/ System.Globalization.CompareInfo compareInfo;
            /*0x90*/ void* textinfo_data;
            /*0x98*/ int m_dataItem;
            /*0xa0*/ System.Globalization.Calendar calendar;
            /*0xa8*/ System.Globalization.CultureInfo parent_culture;
            /*0xb0*/ bool constructed;
            /*0xb8*/ byte[] cached_serialized_form;
            /*0xc0*/ System.Globalization.CultureData m_cultureData;
            /*0xc8*/ bool m_isInherited;

            static /*0x2521da4*/ CultureInfo();
            static /*0x2514b44*/ System.Globalization.CultureInfo get_InvariantCulture();
            static /*0x251b57c*/ System.Globalization.CultureInfo get_CurrentCulture();
            static /*0x251cad8*/ void set_CurrentCulture(System.Globalization.CultureInfo value);
            static /*0x251cb0c*/ System.Globalization.CultureInfo get_CurrentUICulture();
            static /*0x251cb30*/ System.Globalization.CultureInfo ConstructCurrentCulture();
            static /*0x251cf90*/ System.Globalization.CultureInfo ConstructCurrentUICulture();
            static /*0x251d95c*/ System.Globalization.CultureInfo[] GetCultures(System.Globalization.CultureTypes types);
            static /*0x251ccd4*/ string get_current_locale_name();
            static /*0x251dbb0*/ System.Globalization.CultureInfo[] internal_get_cultures(bool neutral, bool specific, bool installed);
            static /*0x251e9bc*/ void insert_into_shared_tables(System.Globalization.CultureInfo c);
            static /*0x251eb58*/ System.Globalization.CultureInfo GetCultureInfo(int culture);
            static /*0x251eda4*/ System.Globalization.CultureInfo GetCultureInfo(string name);
            static /*0x251efd8*/ System.Globalization.CultureInfo CreateCulture(string name, bool reference);
            static /*0x251ccd8*/ System.Globalization.CultureInfo CreateSpecificCulture(string name);
            static /*0x251f058*/ System.Globalization.CultureInfo CreateSpecificCultureFromNeutral(string name);
            static /*0x251d0bc*/ System.Globalization.Calendar CreateCalendar(int calendarType);
            static /*0x251e8d4*/ System.Exception CreateNotFoundException(string name);
            static /*0x25217a4*/ System.Globalization.CultureInfo get_DefaultThreadCurrentCulture();
            static /*0x2521810*/ System.Globalization.CultureInfo get_DefaultThreadCurrentUICulture();
            static /*0x2521884*/ System.Globalization.CultureInfo get_UserDefaultUICulture();
            static /*0x25218dc*/ System.Globalization.CultureInfo get_UserDefaultCulture();
            static /*0x2521934*/ void CheckDomainSafetyObject(object obj, object container);
            static /*0x2521b88*/ bool VerifyCultureName(string cultureName, bool throwException);
            static /*0x2521cf8*/ bool VerifyCultureName(System.Globalization.CultureInfo culture, bool throwException);
            /*0x251d554*/ CultureInfo(int culture);
            /*0x251e3c8*/ CultureInfo(int culture, bool useUserOverride);
            /*0x251e3d4*/ CultureInfo(int culture, bool useUserOverride, bool read_only);
            /*0x251d548*/ CultureInfo(string name);
            /*0x251bfa8*/ CultureInfo(string name, bool useUserOverride);
            /*0x251e670*/ CultureInfo(string name, bool useUserOverride, bool read_only);
            /*0x251e990*/ CultureInfo();
            /*0x251cfe8*/ string get_Territory();
            /*0x251cff0*/ int get_LCID();
            /*0x251cff8*/ string get_Name();
            /*0x251d000*/ System.Globalization.Calendar get_Calendar();
            /*0x251d2f4*/ System.Globalization.CultureInfo get_Parent();
            /*0x251d560*/ System.Globalization.TextInfo get_TextInfo();
            /*0x251d700*/ object Clone();
            /*0x251d8a0*/ bool Equals(object value);
            /*0x251dbc0*/ System.Globalization.CultureInfo.Data GetTextInfoData();
            /*0x251dc50*/ int GetHashCode();
            /*0x251dc5c*/ string ToString();
            /*0x251dc64*/ System.Globalization.CompareInfo get_CompareInfo();
            /*0x251ddb4*/ bool get_IsNeutralCulture();
            /*0x251de08*/ void CheckNeutral();
            /*0x251de0c*/ System.Globalization.NumberFormatInfo get_NumberFormat();
            /*0x251dea8*/ void set_NumberFormat(System.Globalization.NumberFormatInfo value);
            /*0x251df74*/ System.Globalization.DateTimeFormatInfo get_DateTimeFormat();
            /*0x251e050*/ void set_DateTimeFormat(System.Globalization.DateTimeFormatInfo value);
            /*0x251e11c*/ string get_EnglishName();
            /*0x251e158*/ bool get_IsReadOnly();
            /*0x251e160*/ object GetFormat(System.Type formatType);
            /*0x251d090*/ void Construct();
            /*0x251e27c*/ bool construct_internal_locale_from_lcid(int lcid);
            /*0x251e280*/ bool construct_internal_locale_from_name(string name);
            /*0x251e284*/ void ConstructInvariant(bool read_only);
            /*0x251d680*/ System.Globalization.TextInfo CreateTextInfo(bool readOnly);
            /*0x251dbd8*/ int get_CalendarType();
            /*0x252187c*/ string get_SortName();
            /*0x2521af0*/ bool get_HasInvariantCultureName();

            struct Data
            {
                /*0x10*/ int ansi;
                /*0x14*/ int ebcdic;
                /*0x18*/ int mac;
                /*0x1c*/ int oem;
                /*0x20*/ bool right_to_left;
                /*0x21*/ byte list_sep;
            }
        }

        class IdnMapping
        {
            /*0x10*/ bool allow_unassigned;
            /*0x11*/ bool use_std3;
            /*0x18*/ System.Globalization.Punycode puny;

            /*0x1a84930*/ IdnMapping();
            /*0x1a84994*/ bool Equals(object obj);
            /*0x1a84a48*/ int GetHashCode();
            /*0x1a84a64*/ string GetAscii(string unicode);
            /*0x1a84ac8*/ string GetAscii(string unicode, int index, int count);
            /*0x1a84b9c*/ string Convert(string input, int index, int count, bool toAscii);
            /*0x1a84de0*/ string ToAscii(string s, int offset);
            /*0x1a85534*/ void VerifyLength(string s, int offset);
            /*0x1a85208*/ string NamePrep(string s, int offset);
            /*0x1a85604*/ void VerifyProhibitedCharacters(string s, int offset);
            /*0x1a85360*/ void VerifyStd3AsciiRules(string s, int offset);
            /*0x1a8584c*/ string GetUnicode(string ascii);
            /*0x1a858b0*/ string GetUnicode(string ascii, int index, int count);
            /*0x1a85020*/ string ToUnicode(string s, int offset);
        }

        class Bootstring
        {
            /*0x10*/ char delimiter;
            /*0x14*/ int base_num;
            /*0x18*/ int tmin;
            /*0x1c*/ int tmax;
            /*0x20*/ int skew;
            /*0x24*/ int damp;
            /*0x28*/ int initial_bias;
            /*0x2c*/ int initial_n;

            /*0x1c5ac24*/ Bootstring(char delimiter, int baseNum, int tmin, int tmax, int skew, int damp, int initialBias, int initialN);
            /*0x1c5ac9c*/ string Encode(string s, int offset);
            /*0x1c5b004*/ char EncodeDigit(int d);
            /*0x1c5b094*/ int DecodeDigit(char c);
            /*0x1c5b01c*/ int Adapt(int delta, int numPoints, bool firstTime);
            /*0x1c5b0d4*/ string Decode(string s, int offset);
        }

        class Punycode : System.Globalization.Bootstring
        {
            /*0x253242c*/ Punycode();
        }

        class RegionInfo
        {
            static /*0x0*/ System.Globalization.RegionInfo currentRegion;
            /*0x10*/ int regionId;
            /*0x18*/ string iso2Name;
            /*0x20*/ string iso3Name;
            /*0x28*/ string win3Name;
            /*0x30*/ string englishName;
            /*0x38*/ string nativeName;
            /*0x40*/ string currencySymbol;
            /*0x48*/ string isoCurrencySymbol;
            /*0x50*/ string currencyEnglishName;
            /*0x58*/ string currencyNativeName;

            static /*0x198f1b8*/ System.Globalization.RegionInfo get_CurrentRegion();
            static /*0x198f94c*/ void ClearCachedData();
            /*0x198f434*/ RegionInfo(int culture);
            /*0x198f5f4*/ RegionInfo(string name);
            /*0x198f290*/ RegionInfo(System.Globalization.CultureInfo ci);
            /*0x198f548*/ bool GetByTerritory(System.Globalization.CultureInfo ci);
            /*0x198f740*/ bool construct_internal_region_from_name(string name);
            /*0x198f744*/ string get_CurrencyEnglishName();
            /*0x198f74c*/ string get_CurrencySymbol();
            /*0x198f754*/ string get_DisplayName();
            /*0x198f75c*/ string get_EnglishName();
            /*0x198f764*/ int get_GeoId();
            /*0x198f76c*/ bool get_IsMetric();
            /*0x198f7fc*/ string get_ISOCurrencySymbol();
            /*0x198f804*/ string get_NativeName();
            /*0x198f80c*/ string get_CurrencyNativeName();
            /*0x198f814*/ string get_Name();
            /*0x198f81c*/ string get_ThreeLetterISORegionName();
            /*0x198f824*/ string get_ThreeLetterWindowsRegionName();
            /*0x198f82c*/ string get_TwoLetterISORegionName();
            /*0x198f834*/ bool Equals(object value);
            /*0x198f90c*/ int GetHashCode();
            /*0x198f93c*/ string ToString();
        }
    }

    namespace Numerics
    {
        namespace Hashing
        {
            class HashHelpers
            {
                static /*0x0*/ int RandomSeed;

                static /*0x20f2108*/ HashHelpers();
                static /*0x20f20f8*/ int Combine(int h1, int h2);
            }
        }
    }

    namespace Threading
    {
        class AtomicBoolean
        {
            /*0x10*/ int flag;

            /*0x1c4cf30*/ AtomicBoolean();
            /*0x1c4ce0c*/ bool TryRelaxedSet();
            /*0x1c4ce40*/ bool Exchange(bool newVal);
            /*0x1c4ce68*/ bool Equals(System.Threading.AtomicBoolean rhs);
            /*0x1c4ce8c*/ bool Equals(object rhs);
            /*0x1c4cf24*/ int GetHashCode();
        }

        struct CancellationToken
        {
            static /*0x0*/ System.Action<object> s_ActionToActionObjShunt;
            /*0x10*/ System.Threading.CancellationTokenSource m_source;

            static /*0x160aa74*/ CancellationToken();
            static /*0x1609e48*/ System.Threading.CancellationToken get_None();
            static /*0x160a020*/ void ActionToActionObjShunt(object obj);
            static /*0x160a8a8*/ bool op_Equality(System.Threading.CancellationToken left, System.Threading.CancellationToken right);
            static /*0x160a8d0*/ bool op_Inequality(System.Threading.CancellationToken left, System.Threading.CancellationToken right);
            static /*0x160aa14*/ void ThrowObjectDisposedException();
            /*0xab4a04*/ CancellationToken(System.Threading.CancellationTokenSource source);
            /*0xab4a0c*/ CancellationToken(bool canceled);
            /*0xab4994*/ bool get_IsCancellationRequested();
            /*0xab49cc*/ bool get_CanBeCanceled();
            /*0xab4a18*/ System.Threading.CancellationTokenRegistration Register(System.Action callback);
            /*0xab4a58*/ System.Threading.CancellationTokenRegistration Register(System.Action<object> callback, object state);
            /*0xab4a98*/ System.Threading.CancellationTokenRegistration InternalRegisterWithoutEC(System.Action<object> callback, object state);
            /*0xab4ae0*/ System.Threading.CancellationTokenRegistration Register(System.Action<object> callback, object state, bool useSynchronizationContext, bool useExecutionContext);
            /*0xab4b28*/ bool Equals(System.Threading.CancellationToken other);
            /*0xab4b30*/ bool Equals(object other);
            /*0xab4b38*/ int GetHashCode();
            /*0xab4b40*/ void ThrowIfCancellationRequested();
            /*0xab4b48*/ void ThrowIfSourceDisposed();
            /*0xab4b50*/ void ThrowOperationCanceledException();
        }

        struct CancellationTokenRegistration : System.IEquatable<System.Threading.CancellationTokenRegistration>, System.IDisposable
        {
            /*0x10*/ System.Threading.CancellationCallbackInfo m_callbackInfo;
            /*0x18*/ System.Threading.SparselyPopulatedArrayAddInfo<System.Threading.CancellationCallbackInfo> m_registrationInfo;

            /*0xab4b9c*/ CancellationTokenRegistration(System.Threading.CancellationCallbackInfo callbackInfo, System.Threading.SparselyPopulatedArrayAddInfo<System.Threading.CancellationCallbackInfo> registrationInfo);
            /*0xab4ba8*/ bool TryDeregister();
            /*0xab4bb0*/ void Dispose();
            /*0xab4bb8*/ bool Equals(object obj);
            /*0xab4bc0*/ bool Equals(System.Threading.CancellationTokenRegistration other);
            /*0xab4bf8*/ int GetHashCode();
        }

        class CancellationTokenSource : System.IDisposable
        {
            static int CANNOT_BE_CANCELED = 0;
            static int NOT_CANCELED = 1;
            static int NOTIFYING = 2;
            static int NOTIFYINGCOMPLETE = 3;
            static /*0x0*/ System.Threading.CancellationTokenSource _staticSource_Set;
            static /*0x8*/ System.Threading.CancellationTokenSource _staticSource_NotCancelable;
            static /*0x10*/ int s_nLists;
            static /*0x18*/ System.Action<object> s_LinkedTokenCancelDelegate;
            static /*0x20*/ System.Threading.TimerCallback s_timerCallback;
            /*0x10*/ System.Threading.ManualResetEvent m_kernelEvent;
            /*0x18*/ System.Threading.SparselyPopulatedArray<System.Threading.CancellationCallbackInfo> m_registeredCallbacksLists;
            /*0x20*/ int m_state;
            /*0x24*/ int m_threadIDExecutingCallbacks;
            /*0x28*/ bool m_disposed;
            /*0x30*/ System.Threading.CancellationTokenRegistration[] m_linkingRegistrations;
            /*0x38*/ System.Threading.CancellationCallbackInfo m_executingCallback;
            /*0x40*/ System.Threading.Timer m_timer;

            static /*0x160c1e0*/ CancellationTokenSource();
            static /*0x160aea8*/ void LinkedTokenCancelDelegate(object source);
            static /*0x160b454*/ void TimerCallbackLogic(object obj);
            static /*0x160b6d8*/ void ThrowObjectDisposedException();
            static /*0x1609f94*/ System.Threading.CancellationTokenSource InternalGetStaticSource(bool set);
            static /*0x160bd90*/ System.Threading.CancellationTokenSource CreateLinkedTokenSource(System.Threading.CancellationToken token1, System.Threading.CancellationToken token2);
            static /*0x160bf9c*/ System.Threading.CancellationTokenSource CreateLinkedTokenSource(System.Threading.CancellationToken[] tokens);
            /*0x160b038*/ CancellationTokenSource();
            /*0x160b078*/ CancellationTokenSource(bool set);
            /*0x1609e88*/ bool get_IsCancellationRequested();
            /*0x160ac48*/ bool get_IsCancellationCompleted();
            /*0x160af58*/ bool get_IsDisposed();
            /*0x160af60*/ void set_ThreadIDExecutingCallbacks(int value);
            /*0x160ac70*/ int get_ThreadIDExecutingCallbacks();
            /*0x160af88*/ System.Threading.CancellationToken get_Token();
            /*0x1609ee8*/ bool get_CanBeCanceled();
            /*0x160b014*/ System.Threading.CancellationCallbackInfo get_ExecutingCallback();
            /*0x160af30*/ void Cancel();
            /*0x160b0cc*/ void Cancel(bool throwOnFirstException);
            /*0x160b254*/ void CancelAfter(int millisecondsDelay);
            /*0x160b580*/ void Dispose();
            /*0x160b5f8*/ void Dispose(bool disposing);
            /*0x160afac*/ void ThrowIfDisposed();
            /*0x160a3dc*/ System.Threading.CancellationTokenRegistration InternalRegister(System.Action<object> callback, object stateForCallback, System.Threading.SynchronizationContext targetSyncContext, System.Threading.ExecutionContext executionContext);
            /*0x160b0f8*/ void NotifyCancellation(bool throwOnFirstException);
            /*0x160b738*/ void ExecuteCallbackHandlers(bool throwOnFirstException);
            /*0x160bd0c*/ void CancellationCallbackCoreWork_OnSyncContext(object obj);
            /*0x160bc38*/ void CancellationCallbackCoreWork(System.Threading.CancellationCallbackCoreWorkArguments args);
            /*0x160ac94*/ void WaitForCallbackToComplete(System.Threading.CancellationCallbackInfo callbackInfo);
        }

        struct CancellationCallbackCoreWorkArguments
        {
            /*0x10*/ System.Threading.SparselyPopulatedArrayFragment<System.Threading.CancellationCallbackInfo> m_currArrayFragment;
            /*0x18*/ int m_currArrayIndex;

            /*0xab494c*/ CancellationCallbackCoreWorkArguments(System.Threading.SparselyPopulatedArrayFragment<System.Threading.CancellationCallbackInfo> currArrayFragment, int currArrayIndex);
        }

        class CancellationCallbackInfo
        {
            static /*0x0*/ System.Threading.ContextCallback s_executionContextCallback;
            /*0x10*/ System.Action<object> Callback;
            /*0x18*/ object StateForCallback;
            /*0x20*/ System.Threading.SynchronizationContext TargetSyncContext;
            /*0x28*/ System.Threading.ExecutionContext TargetExecutionContext;
            /*0x30*/ System.Threading.CancellationTokenSource CancellationTokenSource;

            static /*0x1609dac*/ void ExecutionContextCallback(object obj);
            /*0x1609bf4*/ CancellationCallbackInfo(System.Action<object> callback, object stateForCallback, System.Threading.SynchronizationContext targetSyncContext, System.Threading.ExecutionContext targetExecutionContext, System.Threading.CancellationTokenSource cancellationTokenSource);
            /*0x1609c48*/ void ExecuteCallback();
        }

        class SparselyPopulatedArray<T>
        {
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> m_tail;

            SparselyPopulatedArray(int initialSize);
            System.Threading.SparselyPopulatedArrayFragment<T> get_Tail();
            System.Threading.SparselyPopulatedArrayAddInfo<T> Add(T element);
        }

        struct SparselyPopulatedArrayAddInfo<T>
        {
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> m_source;
            /*0x0*/ int m_index;

            SparselyPopulatedArrayAddInfo(System.Threading.SparselyPopulatedArrayFragment<T> source, int index);
            System.Threading.SparselyPopulatedArrayFragment<T> get_Source();
            int get_Index();
        }

        class SparselyPopulatedArrayFragment<T>
        {
            /*0x0*/ T[] m_elements;
            /*0x0*/ int m_freeCount;
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> m_next;
            /*0x0*/ System.Threading.SparselyPopulatedArrayFragment<T> m_prev;

            SparselyPopulatedArrayFragment(int size);
            SparselyPopulatedArrayFragment(int size, System.Threading.SparselyPopulatedArrayFragment<T> prev);
            T get_Item(int index);
            int get_Length();
            System.Threading.SparselyPopulatedArrayFragment<T> get_Prev();
            T SafeAtomicRemove(int index, T expectedElement);
        }

        enum LazyThreadSafetyMode
        {
            None = 0,
            PublicationOnly = 1,
            ExecutionAndPublication = 2,
        }

        class LazyInitializer
        {
            static T EnsureInitialized<T>(ref T target, System.Func<T> valueFactory);
            static T EnsureInitializedCore<T>(ref T target, System.Func<T> valueFactory);
        }

        class ManualResetEventSlim : System.IDisposable
        {
            static /*0x0*/ System.Action<object> s_cancellationTokenCallback;
            /*0x10*/ object m_lock;
            /*0x18*/ System.Threading.ManualResetEvent m_eventObj;
            /*0x20*/ int m_combinedState;

            static /*0x1c12c40*/ ManualResetEventSlim();
            static /*0x1c12b14*/ void CancellationTokenCallback(object obj);
            static /*0x1c11e5c*/ int ExtractStatePortionAndShiftRight(int state, int mask, int rightBitShiftCount);
            static /*0x1c11d20*/ int ExtractStatePortion(int state, int mask);
            /*0x1c11fbc*/ ManualResetEventSlim();
            /*0x1c11fec*/ ManualResetEventSlim(bool initialState);
            /*0x1c12098*/ ManualResetEventSlim(bool initialState, int spinCount);
            /*0x1c11a7c*/ System.Threading.WaitHandle get_WaitHandle();
            /*0x1c11cb8*/ bool get_IsSet();
            /*0x1c11d28*/ void set_IsSet(bool value);
            /*0x1c11df4*/ int get_SpinCount();
            /*0x1c11e68*/ void set_SpinCount(int value);
            /*0x1c11ea8*/ int get_Waiters();
            /*0x1c11f10*/ void set_Waiters(int value);
            /*0x1c12020*/ void Initialize(bool initialState, int spinCount);
            /*0x1c121c0*/ void EnsureLockObjectCreated();
            /*0x1c11b30*/ bool LazyInitializeEvent();
            /*0x1c12244*/ void Set();
            /*0x1c1224c*/ void Set(bool duringCancellation);
            /*0x1c12484*/ bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0x1c12998*/ void Dispose();
            /*0x1c12a10*/ void Dispose(bool disposing);
            /*0x1c11abc*/ void ThrowIfDisposed();
            /*0x1c11d4c*/ void UpdateStateAtomically(int newBits, int updateBitsMask);
        }

        class SemaphoreSlim : System.IDisposable
        {
            static /*0x0*/ System.Threading.Tasks.Task<bool> s_trueTask;
            static /*0x8*/ System.Action<object> s_cancellationTokenCanceledEventHandler;
            /*0x10*/ int m_currentCount;
            /*0x14*/ int m_maxCount;
            /*0x18*/ int m_waitCount;
            /*0x20*/ object m_lockObj;
            /*0x28*/ System.Threading.ManualResetEvent m_waitHandle;
            /*0x30*/ System.Threading.SemaphoreSlim.TaskNode m_asyncHead;
            /*0x38*/ System.Threading.SemaphoreSlim.TaskNode m_asyncTail;

            static /*0x20532e0*/ SemaphoreSlim();
            static /*0x20530d4*/ void QueueWaiterTask(System.Threading.SemaphoreSlim.TaskNode waiterTask);
            static /*0x20531b4*/ void CancellationTokenCanceledEventHandler(object obj);
            static /*0x20521a8*/ string GetResourceString(string str);
            /*0x2051fc8*/ SemaphoreSlim(int initialCount, int maxCount);
            /*0x20521b0*/ void Wait();
            /*0x20521bc*/ bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0x2052aa0*/ bool WaitUntilCountOrTimeout(int millisecondsTimeout, uint startTime, System.Threading.CancellationToken cancellationToken);
            /*0x2052b38*/ System.Threading.Tasks.Task WaitAsync();
            /*0x2052788*/ System.Threading.Tasks.Task<bool> WaitAsync(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0x2052b44*/ System.Threading.SemaphoreSlim.TaskNode CreateAndAddAsyncWaiter();
            /*0x2052d28*/ bool RemoveAsyncWaiter(System.Threading.SemaphoreSlim.TaskNode task);
            /*0x2052bd4*/ System.Threading.Tasks.Task<bool> WaitUntilCountOrTimeoutAsync(System.Threading.SemaphoreSlim.TaskNode asyncWaiter, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
            /*0x2052db4*/ int Release();
            /*0x2052dbc*/ int Release(int releaseCount);
            /*0x20530e0*/ void Dispose();
            /*0x2053158*/ void Dispose(bool disposing);
            /*0x20526e8*/ void CheckDispose();

            class TaskNode : System.Threading.Tasks.Task<bool>, System.Threading.IThreadPoolWorkItem
            {
                /*0x58*/ System.Threading.SemaphoreSlim.TaskNode Prev;
                /*0x60*/ System.Threading.SemaphoreSlim.TaskNode Next;

                /*0x181a64c*/ TaskNode();
                /*0x181a6c4*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x181a714*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
            }

            struct <WaitUntilCountOrTimeoutAsync>d__31 : System.Runtime.CompilerServices.IAsyncStateMachine
            {
                /*0x10*/ int <>1__state;
                /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<bool> <>t__builder;
                /*0x30*/ System.Threading.CancellationToken cancellationToken;
                /*0x38*/ System.Threading.SemaphoreSlim.TaskNode asyncWaiter;
                /*0x40*/ int millisecondsTimeout;
                /*0x48*/ System.Threading.CancellationTokenSource <cts>5__1;
                /*0x50*/ System.Threading.SemaphoreSlim <>4__this;
                /*0x58*/ object <>7__wrap1;
                /*0x60*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<System.Threading.Tasks.Task> <>u__1;
                /*0x70*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<bool> <>u__2;

                /*0xacb038*/ void MoveNext();
                /*0xacb040*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }
        }

        struct SpinLock
        {
            static /*0x0*/ int MAXIMUM_WAITERS;
            /*0x10*/ int m_owner;

            static /*0x249f584*/ SpinLock();
            /*0xae6c94*/ SpinLock(bool enableThreadOwnerTracking);
            /*0xae6ca0*/ void Enter(ref bool lockTaken);
            /*0xae6ca8*/ void TryEnter(int millisecondsTimeout, ref bool lockTaken);
            /*0xae6cb0*/ void ContinueTryEnter(int millisecondsTimeout, ref bool lockTaken);
            /*0xae6cb8*/ void DecrementWaiters();
            /*0xae6cc0*/ void ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, ref bool lockTaken);
            /*0xae6cc8*/ void Exit();
            /*0xae6cd0*/ void Exit(bool useMemoryBarrier);
            /*0xae6cdc*/ void ExitSlowPath(bool useMemoryBarrier);
            /*0xae6ce8*/ bool get_IsHeldByCurrentThread();
            /*0xae6cf0*/ bool get_IsThreadOwnerTrackingEnabled();

            class SystemThreading_SpinLockDebugView
            {
            }
        }

        struct SpinWait
        {
            /*0x10*/ int m_count;

            /*0xae6d18*/ bool get_NextSpinWillYield();
            /*0xae6d34*/ void SpinOnce();
        }

        class PlatformHelper
        {
            static /*0x0*/ int s_processorCount;
            static /*0x4*/ int s_lastProcessorCountRefreshTicks;

            static /*0x252f8b8*/ int get_ProcessorCount();
            static /*0x252f970*/ bool get_IsSingleProcessor();
        }

        class TimeoutHelper
        {
            static /*0x1d41940*/ uint GetTime();
            static /*0x1d41948*/ int UpdateTimeOut(uint startTime, int originalWaitMillisecondsTimeout);
        }

        class ThreadLocal<T> : System.IDisposable
        {
            static /*0x0*/ System.Threading.ThreadLocal.IdManager<T> s_idManager;
            [ThreadStatic] static System.Threading.ThreadLocal.LinkedSlotVolatile<T> ts_slotArray;
            [ThreadStatic] static System.Threading.ThreadLocal.FinalizationHelper<T> ts_finalizationHelper;
            /*0x0*/ System.Func<T> m_valueFactory;
            /*0x0*/ int m_idComplement;
            /*0x0*/ bool m_initialized;
            /*0x0*/ System.Threading.ThreadLocal.LinkedSlot<T> m_linkedSlot;
            /*0x0*/ bool m_trackAllValues;

            static ThreadLocal();
            static int GetNewTableSize(int minSize);
            ThreadLocal();
            ThreadLocal(System.Func<T> valueFactory, bool trackAllValues);
            void Initialize(System.Func<T> valueFactory, bool trackAllValues);
            void Finalize();
            void Dispose();
            void Dispose(bool disposing);
            string ToString();
            T get_Value();
            void set_Value(T value);
            T GetValueSlow();
            void SetValueSlow(T value, System.Threading.ThreadLocal.LinkedSlotVolatile<T> slotArray);
            void CreateLinkedSlot(System.Threading.ThreadLocal.LinkedSlotVolatile<T> slotArray, int id, T value);
            bool get_IsValueCreated();
            void GrowTable(ref System.Threading.ThreadLocal.LinkedSlotVolatile<T> table, int minLength);

            struct LinkedSlotVolatile<T>
            {
                /*0x0*/ System.Threading.ThreadLocal.LinkedSlot<T> Value;
            }

            class LinkedSlot<T>
            {
                /*0x0*/ System.Threading.ThreadLocal.LinkedSlot<T> Next;
                /*0x0*/ System.Threading.ThreadLocal.LinkedSlot<T> Previous;
                /*0x0*/ System.Threading.ThreadLocal.LinkedSlotVolatile<T> SlotArray;
                /*0x0*/ T Value;

                LinkedSlot(System.Threading.ThreadLocal.LinkedSlotVolatile<T> slotArray);
            }

            class IdManager<T>
            {
                /*0x0*/ int m_nextIdToTry;
                /*0x0*/ System.Collections.Generic.List<bool> m_freeIds;

                IdManager();
                int GetId();
                void ReturnId(int id);
            }

            class FinalizationHelper<T>
            {
                /*0x0*/ System.Threading.ThreadLocal.LinkedSlotVolatile<T> SlotArray;
                /*0x0*/ bool m_trackAllValues;

                FinalizationHelper(System.Threading.ThreadLocal.LinkedSlotVolatile<T> slotArray, bool trackAllValues);
                void Finalize();
            }
        }

        class SystemThreading_ThreadLocalDebugView<T>
        {
        }

        class AbandonedMutexException : System.SystemException
        {
            /*0x88*/ int m_MutexIndex;
            /*0x90*/ System.Threading.Mutex m_Mutex;

            /*0x1c86b6c*/ AbandonedMutexException();
            /*0x1c86be4*/ AbandonedMutexException(int location, System.Threading.WaitHandle handle);
            /*0x1c86d24*/ AbandonedMutexException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x1c86cb4*/ void SetupException(int location, System.Threading.WaitHandle handle);
        }

        class AsyncLocal<T> : System.Threading.IAsyncLocal
        {
            /*0x0*/ System.Action<System.Threading.AsyncLocalValueChangedArgs<T>> m_valueChangedHandler;

            AsyncLocal(System.Action<System.Threading.AsyncLocalValueChangedArgs<T>> valueChangedHandler);
            void set_Value(T value);
            void System.Threading.IAsyncLocal.OnValueChanged(object previousValueObj, object currentValueObj, bool contextChanged);
        }

        interface IAsyncLocal
        {
            void OnValueChanged(object previousValue, object currentValue, bool contextChanged);
        }

        struct AsyncLocalValueChangedArgs<T>
        {
            /*0x0*/ T <PreviousValue>k__BackingField;
            /*0x0*/ T <CurrentValue>k__BackingField;
            /*0x0*/ bool <ThreadContextChanged>k__BackingField;

            AsyncLocalValueChangedArgs(T previousValue, T currentValue, bool contextChanged);
            void set_PreviousValue(T value);
            T get_CurrentValue();
            void set_CurrentValue(T value);
            void set_ThreadContextChanged(bool value);
        }

        class AutoResetEvent : System.Threading.EventWaitHandle
        {
            /*0x1c4f254*/ AutoResetEvent(bool initialState);
        }

        enum EventResetMode
        {
            AutoReset = 0,
            ManualReset = 1,
        }

        class EventWaitHandle : System.Threading.WaitHandle
        {
            /*0x245bad4*/ EventWaitHandle(bool initialState, System.Threading.EventResetMode mode);
            /*0x245bae0*/ EventWaitHandle(bool initialState, System.Threading.EventResetMode mode, string name);
            /*0x245bd9c*/ bool Reset();
            /*0x245be04*/ bool Set();
        }

        class ContextCallback : System.MulticastDelegate
        {
            /*0x1609d4c*/ ContextCallback(object object, nint method);
            /*0x1624db4*/ void Invoke(object state);
            /*0x162512c*/ System.IAsyncResult BeginInvoke(object state, System.AsyncCallback callback, object object);
            /*0x1625150*/ void EndInvoke(System.IAsyncResult result);
        }

        struct ExecutionContextSwitcher
        {
            /*0x10*/ System.Threading.ExecutionContext.Reader outerEC;
            /*0x18*/ bool outerECBelongsToScope;
            /*0x20*/ object hecsw;
            /*0x28*/ System.Threading.Thread thread;

            /*0xae0fa4*/ bool UndoNoThrow();
            /*0xae0fac*/ void Undo();
        }

        class ExecutionContext : System.IDisposable, System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Threading.ExecutionContext s_dummyDefaultEC;
            /*0x10*/ System.Threading.SynchronizationContext _syncContext;
            /*0x18*/ System.Threading.SynchronizationContext _syncContextNoFlow;
            /*0x20*/ System.Runtime.Remoting.Messaging.LogicalCallContext _logicalCallContext;
            /*0x28*/ System.Runtime.Remoting.Messaging.IllogicalCallContext _illogicalCallContext;
            /*0x30*/ System.Threading.ExecutionContext.Flags _flags;
            /*0x38*/ System.Collections.Generic.Dictionary<System.Threading.IAsyncLocal, object> _localValues;
            /*0x40*/ System.Collections.Generic.List<System.Threading.IAsyncLocal> _localChangeNotifications;

            static /*0x245f038*/ ExecutionContext();
            static /*0x245d970*/ System.Threading.ExecutionContext get_PreAllocatedDefault();
            static /*0x245da1c*/ void SetLocalValue(System.Threading.IAsyncLocal local, object newValue, bool needChangeNotifications);
            static /*0x245dca8*/ void OnAsyncLocalContextChanged(System.Threading.ExecutionContext previous, System.Threading.ExecutionContext current);
            static /*0x245e268*/ void Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state);
            static /*0x245e34c*/ void Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx);
            static /*0x245e3d4*/ void RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx);
            static /*0x245e850*/ void EstablishCopyOnWriteScope(ref System.Threading.ExecutionContextSwitcher ecsw);
            static /*0x245e640*/ void EstablishCopyOnWriteScope(System.Threading.Thread currentThread, bool knownNullWindowsIdentity, ref System.Threading.ExecutionContextSwitcher ecsw);
            static /*0x245e69c*/ System.Threading.ExecutionContextSwitcher SetExecutionContext(System.Threading.ExecutionContext executionContext, bool preserveSyncCtx);
            static /*0x245eb10*/ bool IsFlowSuppressed();
            static /*0x245eb70*/ System.Threading.ExecutionContext Capture();
            static /*0x245edd4*/ System.Threading.ExecutionContext FastCapture();
            static /*0x245ebcc*/ System.Threading.ExecutionContext Capture(ref System.Threading.StackCrawlMark stackMark, System.Threading.ExecutionContext.CaptureOptions options);
            /*0x245d9e0*/ ExecutionContext();
            /*0x245d9e8*/ ExecutionContext(bool isPreAllocatedDefault);
            /*0x245ef48*/ ExecutionContext(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x245d918*/ bool get_isNewCapture();
            /*0x245d92c*/ void set_isNewCapture(bool value);
            /*0x245d948*/ bool get_isFlowSuppressed();
            /*0x245d954*/ void set_isFlowSuppressed(bool value);
            /*0x245d9d4*/ bool get_IsPreAllocatedDefault();
            /*0x245e164*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
            /*0x245e1cc*/ void set_LogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext value);
            /*0x245e1d4*/ System.Runtime.Remoting.Messaging.IllogicalCallContext get_IllogicalCallContext();
            /*0x245e23c*/ void set_IllogicalCallContext(System.Runtime.Remoting.Messaging.IllogicalCallContext value);
            /*0x245e244*/ System.Threading.SynchronizationContext get_SynchronizationContext();
            /*0x245e24c*/ void set_SynchronizationContext(System.Threading.SynchronizationContext value);
            /*0x245e254*/ System.Threading.SynchronizationContext get_SynchronizationContextNoFlow();
            /*0x245e25c*/ void set_SynchronizationContextNoFlow(System.Threading.SynchronizationContext value);
            /*0x245e264*/ void Dispose();
            /*0x245e8c8*/ System.Threading.ExecutionContext CreateCopy();
            /*0x245ea04*/ System.Threading.ExecutionContext CreateMutableCopy();
            /*0x245ee30*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x245e5e4*/ bool IsDefaultFTContext(bool ignoreSyncCtx);

            enum Flags
            {
                None = 0,
                IsNewCapture = 1,
                IsFlowSuppressed = 2,
                IsPreAllocatedDefault = 4,
            }

            struct Reader
            {
                /*0x10*/ System.Threading.ExecutionContext m_ec;

                /*0xacaaa4*/ Reader(System.Threading.ExecutionContext ec);
                /*0xacaaac*/ System.Threading.ExecutionContext DangerousGetRawExecutionContext();
                /*0xacaab4*/ bool get_IsNull();
                /*0xacaac4*/ bool IsDefaultFTContext(bool ignoreSyncCtx);
                /*0xacaae4*/ bool get_IsFlowSuppressed();
                /*0xacaaf8*/ System.Threading.SynchronizationContext get_SynchronizationContext();
                /*0xacab10*/ System.Threading.SynchronizationContext get_SynchronizationContextNoFlow();
                /*0xacab28*/ System.Runtime.Remoting.Messaging.LogicalCallContext.Reader get_LogicalCallContext();
                /*0xacab48*/ bool HasSameLocalValues(System.Threading.ExecutionContext other);
            }

            enum CaptureOptions
            {
                None = 0,
                IgnoreSyncCtx = 1,
                OptimizeDefaultCase = 2,
            }
        }

        class LockRecursionException : System.Exception
        {
            /*0x1a964c0*/ LockRecursionException();
            /*0x1a96524*/ LockRecursionException(string message);
            /*0x1a96598*/ LockRecursionException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ManualResetEvent : System.Threading.EventWaitHandle
        {
            /*0x1c11a6c*/ ManualResetEvent(bool initialState);
        }

        class Monitor
        {
            static /*0x1c1f948*/ void Enter(object obj);
            static /*0x1c0eef8*/ void Enter(object obj, ref bool lockTaken);
            static /*0x1c1f94c*/ void ThrowLockTakenException();
            static /*0x1c0f478*/ void Exit(object obj);
            static /*0x1c1f9c8*/ void TryEnter(object obj, ref bool lockTaken);
            static /*0x1c1fa88*/ bool Wait(object obj, int millisecondsTimeout, bool exitContext);
            static /*0x1c12990*/ bool Wait(object obj, int millisecondsTimeout);
            static /*0x1c1fba4*/ void Pulse(object obj);
            static /*0x1c12428*/ void PulseAll(object obj);
            static /*0x1c1fce0*/ bool Monitor_test_synchronised(object obj);
            static /*0x1c1fce4*/ void Monitor_pulse(object obj);
            static /*0x1c1fc00*/ void ObjPulse(object obj);
            static /*0x1c1fce8*/ void Monitor_pulse_all(object obj);
            static /*0x1c1fc70*/ void ObjPulseAll(object obj);
            static /*0x1c1fcec*/ bool Monitor_wait(object obj, int ms);
            static /*0x1c1faec*/ bool ObjWait(bool exitContext, int millisecondsTimeout, object obj);
            static /*0x1c1fcf0*/ void try_enter_with_atomic_var(object obj, int millisecondsTimeout, ref bool lockTaken);
            static /*0x1c1f9e8*/ void ReliableEnterTimeout(object obj, int timeout, ref bool lockTaken);
            static /*0x1c1f9bc*/ void ReliableEnter(object obj, ref bool lockTaken);
        }

        class ParameterizedThreadStart : System.MulticastDelegate
        {
            /*0x2527c44*/ ParameterizedThreadStart(object object, nint method);
            /*0x2527ca4*/ void Invoke(object obj);
            /*0x252801c*/ System.IAsyncResult BeginInvoke(object obj, System.AsyncCallback callback, object object);
            /*0x2528040*/ void EndInvoke(System.IAsyncResult result);
        }

        class SemaphoreFullException : System.SystemException
        {
            /*0x2051f64*/ SemaphoreFullException();
            /*0x2051fc0*/ SemaphoreFullException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class SendOrPostCallback : System.MulticastDelegate
        {
            /*0x20533dc*/ SendOrPostCallback(object object, nint method);
            /*0x205343c*/ void Invoke(object state);
            /*0x20537b4*/ System.IAsyncResult BeginInvoke(object state, System.AsyncCallback callback, object object);
            /*0x20537d8*/ void EndInvoke(System.IAsyncResult result);
        }

        enum SynchronizationContextProperties
        {
            None = 0,
            RequireWaitNotification = 1,
        }

        class SynchronizationContext
        {
            static /*0x0*/ System.Type s_cachedPreparedType1;
            static /*0x8*/ System.Type s_cachedPreparedType2;
            static /*0x10*/ System.Type s_cachedPreparedType3;
            static /*0x18*/ System.Type s_cachedPreparedType4;
            static /*0x20*/ System.Type s_cachedPreparedType5;
            /*0x10*/ System.Threading.SynchronizationContextProperties _props;

            static /*0x1e23110*/ void SetSynchronizationContext(System.Threading.SynchronizationContext syncContext);
            static /*0x1e2314c*/ System.Threading.SynchronizationContext get_Current();
            static /*0x1e231f4*/ System.Threading.SynchronizationContext get_CurrentNoFlow();
            static /*0x1e23198*/ System.Threading.SynchronizationContext GetThreadLocalContext();
            /*0x1e23054*/ SynchronizationContext();
            /*0x1e2305c*/ void Send(System.Threading.SendOrPostCallback d, object state);
            /*0x1e2307c*/ void Post(System.Threading.SendOrPostCallback d, object state);
            /*0x1e23108*/ void OperationStarted();
            /*0x1e2310c*/ void OperationCompleted();
            /*0x1e23240*/ System.Threading.SynchronizationContext CreateCopy();
        }

        class OSSpecificSynchronizationContext : System.Threading.SynchronizationContext
        {
            static /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Threading.OSSpecificSynchronizationContext> s_ContextCache;
            /*0x18*/ object m_OSSynchronizationContext;

            static /*0x22b0904*/ OSSpecificSynchronizationContext();
            static /*0x22b0564*/ System.Threading.OSSpecificSynchronizationContext Get();
            static /*0x22b03b8*/ void InvocationEntry(nint arg);
            static /*0x22b06f0*/ object GetOSContext();
            static /*0x22b0900*/ void PostInternal(object osSynchronizationContext, nint callback, nint arg);
            /*0x22b0538*/ OSSpecificSynchronizationContext(object osContext);
            /*0x22b06f4*/ System.Threading.SynchronizationContext CreateCopy();
            /*0x22b0758*/ void Send(System.Threading.SendOrPostCallback d, object state);
            /*0x22b0794*/ void Post(System.Threading.SendOrPostCallback d, object state);

            class InvocationEntryDelegate : System.MulticastDelegate
            {
                /*0x1816680*/ InvocationEntryDelegate(object object, nint method);
                /*0x18166e0*/ void Invoke(nint arg);
                /*0x181690c*/ System.IAsyncResult BeginInvoke(nint arg, System.AsyncCallback callback, object object);
                /*0x1816994*/ void EndInvoke(System.IAsyncResult result);
            }

            class MonoPInvokeCallbackAttribute : System.Attribute
            {
                /*0x18169a0*/ MonoPInvokeCallbackAttribute(System.Type t);
            }

            class InvocationContext
            {
                /*0x10*/ System.Threading.SendOrPostCallback m_Delegate;
                /*0x18*/ object m_State;

                /*0x1816624*/ InvocationContext(System.Threading.SendOrPostCallback d, object state);
                /*0x181665c*/ void Invoke();
            }

            class <>c
            {
                static /*0x0*/ System.Threading.OSSpecificSynchronizationContext.<> <>9;
                static /*0x8*/ System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback<object, System.Threading.OSSpecificSynchronizationContext> <>9__3_0;

                static /*0x181655c*/ <>c();
                /*0x18165bc*/ <>c();
                /*0x18165c4*/ System.Threading.OSSpecificSynchronizationContext <Get>b__3_0(object _osContext);
            }
        }

        class SynchronizationLockException : System.SystemException
        {
            /*0x1e23c4c*/ SynchronizationLockException();
            /*0x1e23d40*/ SynchronizationLockException(string message);
            /*0x1e23d70*/ SynchronizationLockException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ThreadHelper
        {
            static /*0x0*/ System.Threading.ContextCallback _ccb;
            /*0x10*/ System.Delegate _start;
            /*0x18*/ object _startArg;
            /*0x20*/ System.Threading.ExecutionContext _executionContext;

            static /*0x1d30300*/ ThreadHelper();
            static /*0x1d30398*/ void ThreadStart_Context(object state);
            /*0x1d2f7f0*/ ThreadHelper(System.Delegate start);
            /*0x1d30390*/ void SetExecutionContextHelper(System.Threading.ExecutionContext ec);
            /*0x1d3069c*/ void ThreadStart(object obj);
            /*0x1d307a8*/ void ThreadStart();
        }

        class Thread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.Runtime.InteropServices._Thread
        {
            static /*0x0*/ System.LocalDataStoreMgr s_LocalDataStoreMgr;
            static /*0x8*/ System.Threading.AsyncLocal<System.Globalization.CultureInfo> s_asyncLocalCurrentCulture;
            static /*0x10*/ System.Threading.AsyncLocal<System.Globalization.CultureInfo> s_asyncLocalCurrentUICulture;
            [ThreadStatic] static System.LocalDataStoreHolder s_LocalDataStore;
            [ThreadStatic] static System.Globalization.CultureInfo m_CurrentCulture;
            [ThreadStatic] static System.Globalization.CultureInfo m_CurrentUICulture;
            [ThreadStatic] static System.Threading.Thread current_thread;
            /*0x10*/ System.Threading.InternalThread internal_thread;
            /*0x18*/ object m_ThreadStartArg;
            /*0x20*/ object pending_exception;
            /*0x28*/ System.Security.Principal.IPrincipal principal;
            /*0x30*/ int principal_version;
            /*0x38*/ System.MulticastDelegate m_Delegate;
            /*0x40*/ System.Threading.ExecutionContext m_ExecutionContext;
            /*0x48*/ bool m_ExecutionContextBelongsToOuterScope;

            static /*0x1d2f05c*/ void AsyncLocalSetCurrentCulture(System.Threading.AsyncLocalValueChangedArgs<System.Globalization.CultureInfo> args);
            static /*0x1d2f0bc*/ void AsyncLocalSetCurrentUICulture(System.Threading.AsyncLocalValueChangedArgs<System.Globalization.CultureInfo> args);
            static /*0x1d2f6b0*/ void SleepInternal(int millisecondsTimeout);
            static /*0x1d2f6b4*/ void Sleep(int millisecondsTimeout);
            static /*0x1d2f730*/ bool YieldInternal();
            static /*0x1d2f734*/ bool Yield();
            static /*0x1d2fba4*/ void nativeInitCultureAccessors();
            static /*0x1d2fef0*/ void MemoryBarrier();
            static /*0x1d2ff28*/ System.Runtime.Remoting.Contexts.Context get_CurrentContext();
            static /*0x1d2ff30*/ System.Threading.Thread GetCurrentThread();
            static /*0x1d2e078*/ System.Threading.Thread get_CurrentThread();
            static /*0x1d2ff34*/ int get_CurrentThreadId();
            static /*0x1d2ff5c*/ int GetDomainID();
            static /*0x1d30078*/ string GetName_internal(System.Threading.InternalThread thread);
            static /*0x1d3007c*/ void SetName_internal(System.Threading.InternalThread thread, string name);
            static /*0x1d3011c*/ void SpinWait_nop();
            static /*0x1d30120*/ void SpinWait(int iterations);
            static /*0x1d30070*/ void SetState(System.Threading.InternalThread thread, System.Threading.ThreadState set);
            static /*0x1d30074*/ void ClrState(System.Threading.InternalThread thread, System.Threading.ThreadState clr);
            static /*0x1d30118*/ System.Threading.ThreadState GetState(System.Threading.InternalThread thread);
            static /*0x1d30154*/ int SystemMaxStackStize();
            static /*0x1d2f738*/ int GetProcessDefaultStackSize(int maxStackSize);
            static /*0x1d30190*/ void BeginCriticalRegion();
            static /*0x1d301e4*/ void EndCriticalRegion();
            /*0x1d2f11c*/ Thread(System.Threading.ThreadStart start);
            /*0x1d2f2bc*/ Thread(System.Threading.ParameterizedThreadStart start);
            /*0x1d2f33c*/ void Start();
            /*0x1d2f440*/ void Start(object parameter);
            /*0x1d2f364*/ void Start(ref System.Threading.StackCrawlMark stackMark);
            /*0x1d2f5b8*/ System.Threading.ExecutionContext.Reader GetExecutionContextReader();
            /*0x1d2f5c0*/ bool get_ExecutionContextBelongsToCurrentScope();
            /*0x1d2f5d0*/ void set_ExecutionContextBelongsToCurrentScope(bool value);
            /*0x1d2f5e0*/ System.Threading.ExecutionContext GetMutableExecutionContext();
            /*0x1d2f67c*/ void SetExecutionContext(System.Threading.ExecutionContext value, bool belongsToCurrentScope);
            /*0x1d2f690*/ void SetExecutionContext(System.Threading.ExecutionContext.Reader value, bool belongsToCurrentScope);
            /*0x1d2f6a4*/ bool JoinInternal(int millisecondsTimeout);
            /*0x1d2f6a8*/ void Join();
            /*0x1d2f19c*/ void SetStartHelper(System.Delegate start, int maxStackSize);
            /*0x1d2f8bc*/ System.Globalization.CultureInfo get_CurrentUICulture();
            /*0x1d2f980*/ void set_CurrentUICulture(System.Globalization.CultureInfo value);
            /*0x1d2f8c0*/ System.Globalization.CultureInfo GetCurrentUICultureNoAppX();
            /*0x1d2e0cc*/ System.Globalization.CultureInfo get_CurrentCulture();
            /*0x1d2fd08*/ void set_CurrentCulture(System.Globalization.CultureInfo value);
            /*0x1d2fc48*/ System.Globalization.CultureInfo GetCurrentCultureNoAppX();
            /*0x1d2fef4*/ void ConstructInternalThread();
            /*0x1d2fef8*/ System.Threading.InternalThread get_Internal();
            /*0x1d2ff60*/ nint Thread_internal(System.MulticastDelegate start);
            /*0x1d2ff64*/ void Finalize();
            /*0x1d2ff6c*/ bool get_IsThreadPoolThread();
            /*0x1d2ff70*/ bool get_IsThreadPoolThreadInternal();
            /*0x1d2ffa8*/ void set_IsBackground(bool value);
            /*0x1d30080*/ string get_Name();
            /*0x1d300b0*/ void set_Name(string value);
            /*0x1d300e8*/ System.Threading.ThreadState get_ThreadState();
            /*0x1d2f514*/ void StartInternal(System.Security.Principal.IPrincipal principal, ref System.Threading.StackCrawlMark stackMark);
            /*0x1d2f87c*/ void SetStart(System.MulticastDelegate start, int maxStackSize);
            /*0x1d30158*/ int get_ManagedThreadId();
            /*0x1d30238*/ int GetHashCode();
            /*0x1d2fff4*/ System.Threading.ThreadState ValidateThreadState();
        }

        enum StackCrawlMark
        {
            LookForMe = 0,
            LookForMyCaller = 1,
            LookForMyCallersCaller = 2,
            LookForThread = 3,
        }

        class ThreadAbortException : System.SystemException
        {
            /*0x1d30270*/ ThreadAbortException();
            /*0x1d302f8*/ ThreadAbortException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class ThreadInterruptedException : System.SystemException
        {
            /*0x1d308a4*/ ThreadInterruptedException();
            /*0x1d3092c*/ ThreadInterruptedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        interface IThreadPoolWorkItem
        {
            void ExecuteWorkItem();
            void MarkAborted(System.Threading.ThreadAbortException tae);
        }

        class WaitCallback : System.MulticastDelegate
        {
            /*0x20728f8*/ WaitCallback(object object, nint method);
            /*0x2072958*/ void Invoke(object state);
            /*0x2072cd0*/ System.IAsyncResult BeginInvoke(object state, System.AsyncCallback callback, object object);
            /*0x2072cf4*/ void EndInvoke(System.IAsyncResult result);
        }

        class WaitOrTimerCallback : System.MulticastDelegate
        {
            /*0x2073d1c*/ WaitOrTimerCallback(object object, nint method);
            /*0x2073d7c*/ void Invoke(object state, bool timedOut);
            /*0x2074110*/ System.IAsyncResult BeginInvoke(object state, bool timedOut, System.AsyncCallback callback, object object);
            /*0x20741ac*/ void EndInvoke(System.IAsyncResult result);
        }

        class ThreadPoolGlobals
        {
            static /*0x0*/ uint tpQuantum;
            static /*0x4*/ int processorCount;
            static /*0x8*/ bool tpHosted;
            static /*0x9*/ bool vmTpInitialized;
            static /*0xa*/ bool enableWorkerTracking;
            static /*0x10*/ System.Threading.ThreadPoolWorkQueue workQueue;

            static /*0x1d312e8*/ ThreadPoolGlobals();
        }

        class ThreadPoolWorkQueue
        {
            static /*0x0*/ System.Threading.ThreadPoolWorkQueue.SparseArray<System.Threading.ThreadPoolWorkQueue.WorkStealingQueue> allThreadQueues;
            /*0x10*/ System.Threading.ThreadPoolWorkQueue.QueueSegment queueHead;
            /*0x18*/ System.Threading.ThreadPoolWorkQueue.QueueSegment queueTail;
            /*0x20*/ int numOutstandingThreadRequests;

            static /*0x1d32210*/ ThreadPoolWorkQueue();
            static /*0x1d31c00*/ bool Dispatch();
            /*0x1d31390*/ ThreadPoolWorkQueue();
            /*0x1d31778*/ System.Threading.ThreadPoolWorkQueueThreadLocals EnsureCurrentThreadHasQueue();
            /*0x1d31918*/ void EnsureThreadRequested();
            /*0x1d319cc*/ void MarkThreadRequestSatisfied();
            /*0x1d30f3c*/ void Enqueue(System.Threading.IThreadPoolWorkItem callback, bool forceGlobal);
            /*0x1d311c0*/ bool LocalFindAndPop(System.Threading.IThreadPoolWorkItem callback);
            /*0x1d31a1c*/ void Dequeue(System.Threading.ThreadPoolWorkQueueThreadLocals tl, ref System.Threading.IThreadPoolWorkItem callback, ref bool missedSteal);

            class SparseArray<T>
            {
                /*0x0*/ T[] m_array;

                SparseArray(int initialSize);
                T[] get_Current();
                int Add(T e);
                void Remove(T e);
            }

            class WorkStealingQueue
            {
                /*0x10*/ System.Threading.IThreadPoolWorkItem[] m_array;
                /*0x18*/ int m_mask;
                /*0x1c*/ int m_headIndex;
                /*0x20*/ int m_tailIndex;
                /*0x24*/ System.Threading.SpinLock m_foreignLock;

                /*0x18216c8*/ WorkStealingQueue();
                /*0x1820a14*/ void LocalPush(System.Threading.IThreadPoolWorkItem obj);
                /*0x1820e84*/ bool LocalFindAndPop(System.Threading.IThreadPoolWorkItem obj);
                /*0x1821174*/ bool LocalPop(ref System.Threading.IThreadPoolWorkItem obj);
                /*0x1821424*/ bool TrySteal(ref System.Threading.IThreadPoolWorkItem obj, ref bool missedSteal);
                /*0x182142c*/ bool TrySteal(ref System.Threading.IThreadPoolWorkItem obj, ref bool missedSteal, int millisecondsTimeout);
            }

            class QueueSegment
            {
                /*0x10*/ System.Threading.IThreadPoolWorkItem[] nodes;
                /*0x18*/ int indexes;
                /*0x20*/ System.Threading.ThreadPoolWorkQueue.QueueSegment Next;

                /*0x182079c*/ QueueSegment();
                /*0x18206e4*/ void GetIndexes(ref int upper, ref int lower);
                /*0x1820724*/ bool CompareExchangeIndexes(ref int prevUpper, int newUpper, ref int prevLower, int newLower);
                /*0x18207fc*/ bool IsUsedUp();
                /*0x182084c*/ bool TryEnqueue(System.Threading.IThreadPoolWorkItem node);
                /*0x1820918*/ bool TryDequeue(ref System.Threading.IThreadPoolWorkItem node);
            }
        }

        class ThreadPoolWorkQueueThreadLocals
        {
            [ThreadStatic] static System.Threading.ThreadPoolWorkQueueThreadLocals threadLocals;
            /*0x10*/ System.Threading.ThreadPoolWorkQueue workQueue;
            /*0x18*/ System.Threading.ThreadPoolWorkQueue.WorkStealingQueue workStealingQueue;
            /*0x20*/ System.Random random;

            /*0x1d31800*/ ThreadPoolWorkQueueThreadLocals(System.Threading.ThreadPoolWorkQueue tpq);
            /*0x1d3229c*/ void CleanUp();
            /*0x1d323e0*/ void Finalize();
        }

        class _ThreadPoolWaitCallback
        {
            static /*0x2263e3c*/ bool PerformWaitCallback();
        }

        class QueueUserWorkItemCallback : System.Threading.IThreadPoolWorkItem
        {
            static /*0x0*/ System.Threading.ContextCallback ccb;
            /*0x10*/ System.Threading.WaitCallback callback;
            /*0x18*/ System.Threading.ExecutionContext context;
            /*0x20*/ object state;

            static /*0x25330c4*/ QueueUserWorkItemCallback();
            static /*0x2533308*/ void WaitCallback_Context(object state);
            /*0x2533154*/ QueueUserWorkItemCallback(System.Threading.WaitCallback waitCallback, object stateObj, bool compressStack, ref System.Threading.StackCrawlMark stackMark);
            /*0x2533220*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
            /*0x2533304*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
        }

        class ThreadPool
        {
            static /*0x1d30934*/ System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, ref System.Threading.StackCrawlMark stackMark, bool compressStack);
            static /*0x1d30c20*/ System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, System.TimeSpan timeout, bool executeOnlyOnce);
            static /*0x1d30bc0*/ bool QueueUserWorkItem(System.Threading.WaitCallback callBack, object state);
            static /*0x1d30e60*/ bool QueueUserWorkItem(System.Threading.WaitCallback callBack);
            static /*0x1d30bf0*/ bool UnsafeQueueUserWorkItem(System.Threading.WaitCallback callBack, object state);
            static /*0x1d30d3c*/ bool QueueUserWorkItemHelper(System.Threading.WaitCallback callBack, object state, ref System.Threading.StackCrawlMark stackMark, bool compressStack);
            static /*0x1d3107c*/ void UnsafeQueueCustomWorkItem(System.Threading.IThreadPoolWorkItem workItem, bool forceGlobal);
            static /*0x1d31104*/ bool TryPopCustomWorkItem(System.Threading.IThreadPoolWorkItem workItem);
            static /*0x1d31238*/ bool RequestWorkerThread();
            static /*0x1d30e94*/ void EnsureVMInitialized();
            static /*0x1d31240*/ bool NotifyWorkItemComplete();
            static /*0x1d31244*/ void ReportThreadStatus(bool isWorking);
            static /*0x1d3124c*/ void NotifyWorkItemProgress();
            static /*0x1d312e0*/ void NotifyWorkItemProgressNative();
            static /*0x1d312e4*/ bool IsThreadPoolHosted();
            static /*0x1d3123c*/ void InitializeVMTp(ref bool enableWorkerTracking);
        }

        class ThreadStart : System.MulticastDelegate
        {
            /*0x1d2f81c*/ ThreadStart(object object, nint method);
            /*0x1d30490*/ void Invoke();
            /*0x1d32480*/ System.IAsyncResult BeginInvoke(System.AsyncCallback callback, object object);
            /*0x1d324ac*/ void EndInvoke(System.IAsyncResult result);
        }

        enum ThreadState
        {
            Running = 0,
            StopRequested = 1,
            SuspendRequested = 2,
            Background = 4,
            Unstarted = 8,
            Stopped = 16,
            WaitSleepJoin = 32,
            Suspended = 64,
            AbortRequested = 128,
            Aborted = 256,
        }

        class ThreadStateException : System.SystemException
        {
            /*0x1d324b8*/ ThreadStateException();
            /*0x1d3023c*/ ThreadStateException(string message);
            /*0x1d32528*/ ThreadStateException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Timeout
        {
            static /*0x0*/ System.TimeSpan InfiniteTimeSpan;

            static /*0x1d41844*/ Timeout();
        }

        class WaitHandle : System.MarshalByRefObject, System.IDisposable
        {
            static int WaitTimeout = 258;
            static int MAX_WAITHANDLES = 64;
            static int WAIT_OBJECT_0 = 0;
            static int WAIT_ABANDONED = 128;
            static int WAIT_FAILED = 2147483647;
            static int ERROR_TOO_MANY_POSTS = 298;
            static int MaxWaitHandles = 64;
            static /*0x0*/ nint InvalidHandle;
            /*0x18*/ nint waitHandle;
            /*0x20*/ Microsoft.Win32.SafeHandles.SafeWaitHandle safeWaitHandle;
            /*0x28*/ bool hasThreadAffinity;

            static /*0x2073c18*/ WaitHandle();
            static /*0x20730c4*/ bool InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, long millisecondsTimeout, bool hasThreadAffinity, bool exitContext);
            static /*0x2073354*/ int WaitAny(System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);
            static /*0x20739c0*/ int WaitAny(System.Threading.WaitHandle[] waitHandles, System.TimeSpan timeout, bool exitContext);
            static /*0x2073314*/ void ThrowAbandonedMutexException();
            static /*0x207396c*/ void ThrowAbandonedMutexException(int location, System.Threading.WaitHandle handle);
            static /*0x2073674*/ int WaitMultiple(System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext, bool WaitAll);
            static /*0x20731d4*/ int WaitOneNative(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext);
            static /*0x2073c10*/ int Wait_internal(nint* handles, int numHandles, bool waitAll, int ms);
            /*0x2072d00*/ WaitHandle();
            /*0x2072d28*/ void Init();
            /*0x2072da0*/ void set_Handle(nint value);
            /*0x2072e94*/ Microsoft.Win32.SafeHandles.SafeWaitHandle get_SafeWaitHandle();
            /*0x2072f58*/ void SetHandleInternal(Microsoft.Win32.SafeHandles.SafeWaitHandle handle);
            /*0x2072f90*/ bool WaitOne(int millisecondsTimeout, bool exitContext);
            /*0x20730a0*/ bool WaitOne();
            /*0x20730b4*/ bool WaitOne(int millisecondsTimeout);
            /*0x2073014*/ bool WaitOne(long timeout, bool exitContext);
            /*0x2073ad4*/ void Close();
            /*0x2073b4c*/ void Dispose(bool explicitDisposing);
            /*0x2073b98*/ void Dispose();
        }

        class WaitHandleCannotBeOpenedException : System.ApplicationException
        {
            /*0x2073c70*/ WaitHandleCannotBeOpenedException();
            /*0x2073ce0*/ WaitHandleCannotBeOpenedException(string message);
            /*0x2073d14*/ WaitHandleCannotBeOpenedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class Interlocked
        {
            static /*0x1a88780*/ int CompareExchange(ref int location1, int value, int comparand);
            static /*0x1a88784*/ int CompareExchange(ref int location1, int value, int comparand, ref bool succeeded);
            static /*0x1a88788*/ object CompareExchange(ref object location1, object value, object comparand);
            static /*0x1a8878c*/ float CompareExchange(ref float location1, float value, float comparand);
            static /*0x1a88790*/ int Decrement(ref int location);
            static /*0x1a88794*/ long Decrement(ref long location);
            static /*0x1a88798*/ int Increment(ref int location);
            static /*0x1a8879c*/ long Increment(ref long location);
            static /*0x1a887a0*/ int Exchange(ref int location1, int value);
            static /*0x1a887a4*/ object Exchange(ref object location1, object value);
            static /*0x1a887a8*/ float Exchange(ref float location1, float value);
            static /*0x1a887ac*/ long CompareExchange(ref long location1, long value, long comparand);
            static /*0x1a887b0*/ nint CompareExchange(ref nint location1, nint value, nint comparand);
            static /*0x1a887b4*/ double CompareExchange(ref double location1, double value, double comparand);
            static T CompareExchange<T>(ref T location1, T value, T comparand);
            static /*0x1a887b8*/ long Exchange(ref long location1, long value);
            static /*0x1a887bc*/ nint Exchange(ref nint location1, nint value);
            static /*0x1a887c0*/ double Exchange(ref double location1, double value);
            static T Exchange<T>(ref T location1, T value);
            static /*0x1a887c4*/ long Read(ref long location);
            static /*0x1a887c8*/ int Add(ref int location1, int value);
            static /*0x1a887cc*/ void MemoryBarrier();
        }

        class LockQueue
        {
            /*0x10*/ System.Threading.ReaderWriterLock rwlock;
            /*0x18*/ int lockCount;

            /*0x1a96184*/ LockQueue(System.Threading.ReaderWriterLock rwlock);
            /*0x1a961b0*/ bool Wait(int timeout);
            /*0x1a96338*/ bool get_IsEmpty();
            /*0x1a96400*/ void Pulse();
        }

        class Mutex : System.Threading.WaitHandle
        {
        }

        class NativeEventCalls
        {
            static /*0x22a6510*/ nint CreateEvent_internal(bool manual, bool initial, string name, ref int errorCode);
            static /*0x22a651c*/ bool SetEvent(Microsoft.Win32.SafeHandles.SafeWaitHandle handle);
            static /*0x22a65fc*/ bool SetEvent_internal(nint handle);
            static /*0x22a6600*/ bool ResetEvent(Microsoft.Win32.SafeHandles.SafeWaitHandle handle);
            static /*0x22a66e0*/ bool ResetEvent_internal(nint handle);
            static /*0x22a66e4*/ void CloseEvent_internal(nint handle);
        }

        struct NativeOverlapped
        {
            /*0x10*/ nint InternalLow;
            /*0x18*/ nint InternalHigh;
            /*0x20*/ int OffsetLow;
            /*0x24*/ int OffsetHigh;
            /*0x28*/ nint EventHandle;
        }

        class ReaderWriterLock : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
        {
            /*0x10*/ int seq_num;
            /*0x14*/ int state;
            /*0x18*/ int readers;
            /*0x1c*/ int writer_lock_owner;
            /*0x20*/ System.Threading.LockQueue writer_queue;
            /*0x28*/ System.Collections.Hashtable reader_locks;

            /*0x198c920*/ ReaderWriterLock();
            /*0x198c9f4*/ void Finalize();
            /*0x198c9fc*/ void AcquireWriterLock(int millisecondsTimeout);
            /*0x198ca04*/ void AcquireWriterLock(int millisecondsTimeout, int initialLockCount);
            /*0x198cbfc*/ void ReleaseWriterLock();
            /*0x198cd2c*/ void ReleaseWriterLock(int releaseCount);
            /*0x198cbbc*/ bool HasWriterLock();
        }

        class RegisteredWaitHandle : System.MarshalByRefObject
        {
            /*0x18*/ System.Threading.WaitHandle _waitObject;
            /*0x20*/ System.Threading.WaitOrTimerCallback _callback;
            /*0x28*/ object _state;
            /*0x30*/ System.Threading.WaitHandle _finalEvent;
            /*0x38*/ System.Threading.ManualResetEvent _cancelEvent;
            /*0x40*/ System.TimeSpan _timeout;
            /*0x48*/ int _callsInProcess;
            /*0x4c*/ bool _executeOnlyOnce;
            /*0x4d*/ bool _unregistered;

            /*0x198f998*/ RegisteredWaitHandle(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callback, object state, System.TimeSpan timeout, bool executeOnlyOnce);
            /*0x198fa4c*/ void Wait(object state);
            /*0x1990040*/ void DoCallBack(object timedOut);
        }

        class InternalThread : System.Runtime.ConstrainedExecution.CriticalFinalizerObject
        {
            /*0x10*/ int lock_thread_id;
            /*0x18*/ nint handle;
            /*0x20*/ nint native_handle;
            /*0x28*/ nint unused3;
            /*0x30*/ nint name;
            /*0x38*/ int name_len;
            /*0x3c*/ System.Threading.ThreadState state;
            /*0x40*/ object abort_exc;
            /*0x48*/ int abort_state_handle;
            /*0x50*/ long thread_id;
            /*0x58*/ nint debugger_thread;
            /*0x60*/ nuint static_data;
            /*0x68*/ nint runtime_thread_info;
            /*0x70*/ object current_appcontext;
            /*0x78*/ object root_domain_thread;
            /*0x80*/ byte[] _serialized_principal;
            /*0x88*/ int _serialized_principal_version;
            /*0x90*/ nint appdomain_refs;
            /*0x98*/ int interruption_requested;
            /*0xa0*/ nint synch_cs;
            /*0xa8*/ bool threadpool_thread;
            /*0xa9*/ bool thread_interrupt_requested;
            /*0xac*/ int stack_size;
            /*0xb0*/ byte apartment_state;
            /*0xb4*/ int critical_region_level;
            /*0xb8*/ int managed_id;
            /*0xbc*/ int small_id;
            /*0xc0*/ nint manage_callback;
            /*0xc8*/ nint unused4;
            /*0xd0*/ nint flags;
            /*0xd8*/ nint thread_pinning_ref;
            /*0xe0*/ nint abort_protected_block_count;
            /*0xe8*/ int priority;
            /*0xf0*/ nint owned_mutex;
            /*0xf8*/ nint suspended_event;
            /*0x100*/ int self_suspended;
            /*0x108*/ nint unused1;
            /*0x110*/ nint unused2;
            /*0x118*/ nint last;

            /*0x1a89be8*/ InternalThread();
            /*0x1a89b7c*/ void Thread_free_internal();
            /*0x1a89b80*/ void Finalize();
        }

        class Timer : System.MarshalByRefObject, System.IDisposable
        {
            static long MaxValue = 4294967294;
            static /*0x0*/ System.Threading.Timer.Scheduler scheduler;
            /*0x18*/ System.Threading.TimerCallback callback;
            /*0x20*/ object state;
            /*0x28*/ long due_time_ms;
            /*0x30*/ long period_ms;
            /*0x38*/ long next_run;
            /*0x40*/ bool disposed;

            static /*0x1d41e9c*/ Timer();
            static /*0x1d41e94*/ long GetTimeMonotonic();
            /*0x1d41988*/ Timer(System.Threading.TimerCallback callback, object state, int dueTime, int period);
            /*0x1d41a50*/ Timer(System.Threading.TimerCallback callback, object state, System.TimeSpan dueTime, System.TimeSpan period);
            /*0x1d419e0*/ void Init(System.Threading.TimerCallback callback, object state, long dueTime, long period);
            /*0x1d41d58*/ bool Change(int dueTime, int period);
            /*0x1d41d7c*/ bool Change(System.TimeSpan dueTime, System.TimeSpan period);
            /*0x1d41e00*/ void Dispose();
            /*0x1d41b08*/ bool Change(long dueTime, long period, bool first);
            /*0x1d41e98*/ void KeepRootedWhileScheduled();

            class TimerComparer : System.Collections.IComparer
            {
                /*0x2aa143c*/ TimerComparer();
                /*0x2aa20cc*/ int Compare(object x, object y);
            }

            class Scheduler
            {
                static /*0x0*/ System.Threading.Timer.Scheduler instance;
                /*0x10*/ System.Collections.SortedList list;
                /*0x18*/ System.Threading.ManualResetEvent changed;

                static /*0x2aa121c*/ Scheduler();
                static /*0x2aa13d8*/ System.Threading.Timer.Scheduler get_Instance();
                static /*0x2aa19a8*/ void TimerCB(object o);
                /*0x2aa1278*/ Scheduler();
                /*0x2aa1444*/ void Remove(System.Threading.Timer timer);
                /*0x2aa158c*/ void Change(System.Threading.Timer timer, long new_next_run);
                /*0x2aa1850*/ int FindByDueTime(long nr);
                /*0x2aa1724*/ void Add(System.Threading.Timer timer);
                /*0x2aa152c*/ int InternalRemove(System.Threading.Timer timer);
                /*0x2aa1a1c*/ void SchedulerThread();
                /*0x2aa200c*/ void ShrinkIfNeeded(System.Collections.Generic.List<System.Threading.Timer> list, int initial);
            }
        }

        class TimerCallback : System.MulticastDelegate
        {
            /*0x1d41f58*/ TimerCallback(object object, nint method);
            /*0x1d41fb8*/ void Invoke(object state);
            /*0x1d42330*/ System.IAsyncResult BeginInvoke(object state, System.AsyncCallback callback, object object);
            /*0x1d42354*/ void EndInvoke(System.IAsyncResult result);
        }

        class Volatile
        {
            static /*0x2072888*/ bool Read(ref bool location);
            static /*0x20728ac*/ int Read(ref int location);
            static T Read<T>(ref T location);
            static /*0x20728d0*/ void Write(ref int location, int value);
            static void Write<T>(ref T location, T value);
        }

        namespace Tasks
        {
            enum CausalityTraceLevel
            {
                Required = 0,
                Important = 1,
                Verbose = 2,
            }

            enum AsyncCausalityStatus
            {
                Started = 0,
                Completed = 1,
                Canceled = 2,
                Error = 3,
            }

            enum CausalityRelation
            {
                AssignDelegate = 0,
                Join = 1,
                Choice = 2,
                Cancel = 3,
                Error = 4,
            }

            enum CausalitySynchronousWork
            {
                CompletionNotification = 0,
                ProgressNotification = 1,
                Execution = 2,
            }

            class AsyncCausalityTracer
            {
                static /*0x1c968f0*/ bool get_LoggingOn();
                static /*0x1c968f8*/ void TraceOperationCreation(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, string operationName, ulong relatedContext);
                static /*0x1c968fc*/ void TraceOperationCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, System.Threading.Tasks.AsyncCausalityStatus status);
                static /*0x1c96900*/ void TraceOperationRelation(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, System.Threading.Tasks.CausalityRelation relation);
                static /*0x1c96904*/ void TraceSynchronousWorkStart(System.Threading.Tasks.CausalityTraceLevel traceLevel, int taskId, System.Threading.Tasks.CausalitySynchronousWork work);
                static /*0x1c96908*/ void TraceSynchronousWorkCompletion(System.Threading.Tasks.CausalityTraceLevel traceLevel, System.Threading.Tasks.CausalitySynchronousWork work);
            }

            class Task<TResult> : System.Threading.Tasks.Task
            {
                static /*0x0*/ System.Threading.Tasks.TaskFactory<TResult> s_Factory;
                static /*0x0*/ System.Func<System.Threading.Tasks.Task<System.Threading.Tasks.Task>, System.Threading.Tasks.Task<TResult>> TaskWhenAnyCast;
                /*0x0*/ TResult m_result;

                static Task();
                static System.Threading.Tasks.Task<TResult> StartNew(System.Threading.Tasks.Task parent, System.Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler, ref System.Threading.StackCrawlMark stackMark);
                static System.Threading.Tasks.Task<TResult> StartNew(System.Threading.Tasks.Task parent, System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler, ref System.Threading.StackCrawlMark stackMark);
                static System.Threading.Tasks.TaskFactory<TResult> get_Factory();
                Task();
                Task(object state, System.Threading.Tasks.TaskCreationOptions options);
                Task(TResult result);
                Task(bool canceled, TResult result, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.CancellationToken ct);
                Task(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);
                Task(System.Func<TResult> valueSelector, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler, ref System.Threading.StackCrawlMark stackMark);
                Task(System.Func<TResult> valueSelector, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                Task(System.Func<object, TResult> valueSelector, object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler, ref System.Threading.StackCrawlMark stackMark);
                Task(System.Delegate valueSelector, object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                bool TrySetResult(TResult result);
                void DangerousSetResult(TResult result);
                TResult get_Result();
                TResult get_ResultOnSuccess();
                TResult GetResultCore(bool waitCompletionNotification);
                bool TrySetException(object exceptionObject);
                bool TrySetCanceled(System.Threading.CancellationToken tokenToRecord);
                bool TrySetCanceled(System.Threading.CancellationToken tokenToRecord, object cancellationException);
                void InnerInvoke();
                System.Runtime.CompilerServices.TaskAwaiter<TResult> GetAwaiter();
                System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult> ConfigureAwait(bool continueOnCapturedContext);
                System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction);
                System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, ref System.Threading.StackCrawlMark stackMark);
                System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult> continuationFunction);
                System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult>(System.Func<System.Threading.Tasks.Task<TResult>, TNewResult> continuationFunction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, ref System.Threading.StackCrawlMark stackMark);

                class <>c<TResult>
                {
                    static /*0x0*/ System.Threading.Tasks.Task.<>c<TResult> <>9;

                    static <>c();
                    <>c();
                    System.Threading.Tasks.Task<TResult> <.cctor>b__64_0(System.Threading.Tasks.Task<System.Threading.Tasks.Task> completed);
                }
            }

            class SystemThreadingTasks_FutureDebugView<TResult>
            {
            }

            class TaskFactory<TResult>
            {
                /*0x0*/ System.Threading.CancellationToken m_defaultCancellationToken;
                /*0x0*/ System.Threading.Tasks.TaskScheduler m_defaultScheduler;
                /*0x0*/ System.Threading.Tasks.TaskCreationOptions m_defaultCreationOptions;
                /*0x0*/ System.Threading.Tasks.TaskContinuationOptions m_defaultContinuationOptions;

                static void FromAsyncCoreLogic(System.IAsyncResult iar, System.Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, System.Threading.Tasks.Task<TResult> promise, bool requiresSynchronization);
                static System.Threading.Tasks.Task<TResult> FromAsyncImpl(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                static System.Threading.Tasks.Task<TResult> FromAsyncImpl<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endFunction, System.Action<System.IAsyncResult> endAction, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
                static System.Threading.Tasks.Task<TResult> FromAsyncTrim<TInstance, TArgs>(TInstance thisRef, TArgs args, System.Func<TInstance, TArgs, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<TInstance, System.IAsyncResult, TResult> endMethod);
                TaskFactory();
                TaskFactory(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                System.Threading.Tasks.Task<TResult> StartNew(System.Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                System.Threading.Tasks.Task<TResult> FromAsync(System.Func<System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Func<System.IAsyncResult, TResult> endMethod, object state);

                class FromAsyncTrimPromise`1<TResult, TInstance> : System.Threading.Tasks.Task<TResult>
                {
                    static /*0x0*/ System.AsyncCallback s_completeFromAsyncResult;
                    /*0x0*/ TInstance m_thisRef;
                    /*0x0*/ System.Func<TInstance, System.IAsyncResult, TResult> m_endMethod;

                    static FromAsyncTrimPromise`1();
                    static void CompleteFromAsyncResult(System.IAsyncResult asyncResult);
                    FromAsyncTrimPromise`1(TInstance thisRef, System.Func<TInstance, System.IAsyncResult, TResult> endMethod);
                    void Complete(TInstance thisRef, System.Func<TInstance, System.IAsyncResult, TResult> endMethod, System.IAsyncResult asyncResult, bool requiresSynchronization);
                }

                class <>c__DisplayClass35_0<TResult>
                {
                    /*0x0*/ System.Func<System.IAsyncResult, TResult> endFunction;
                    /*0x0*/ System.Action<System.IAsyncResult> endAction;
                    /*0x0*/ System.Threading.Tasks.Task<TResult> promise;

                    <>c__DisplayClass35_0();
                    void <FromAsyncImpl>b__0(System.IAsyncResult iar);
                }

                class <>c__DisplayClass35_<TResult>
                {
                    /*0x0*/ System.Threading.AtomicBoolean invoked;
                    /*0x0*/ System.Threading.Tasks.TaskFactory.<>c__DisplayClass35_0<TResult> CS$<>8__locals1;

                    <>c__DisplayClass35_();
                    void <FromAsyncImpl>b__1(System.IAsyncResult iar);
                }

                class <>c__DisplayClass38_0`1<TResult, TArg1>
                {
                    /*0x0*/ System.Func<System.IAsyncResult, TResult> endFunction;
                    /*0x0*/ System.Action<System.IAsyncResult> endAction;
                    /*0x0*/ System.Threading.Tasks.Task<TResult> promise;

                    <>c__DisplayClass38_0`1();
                    void <FromAsyncImpl>b__0(System.IAsyncResult iar);
                }

                class <>c__DisplayClass38_1`1<TResult, TArg1>
                {
                    /*0x0*/ System.Threading.AtomicBoolean invoked;
                    /*0x0*/ System.Threading.Tasks.TaskFactory.<>c__DisplayClass38_0<TResult, TArg1> CS$<>8__locals1;

                    <>c__DisplayClass38_1`1();
                    void <FromAsyncImpl>b__1(System.IAsyncResult iar);
                }
            }

            class Shared<T>
            {
                /*0x0*/ T Value;

                Shared(T value);
            }

            enum TaskStatus
            {
                Created = 0,
                WaitingForActivation = 1,
                WaitingToRun = 2,
                Running = 3,
                WaitingForChildrenToComplete = 4,
                RanToCompletion = 5,
                Canceled = 6,
                Faulted = 7,
            }

            class Task : System.Threading.IThreadPoolWorkItem, System.IAsyncResult, System.IDisposable
            {
                static /*0x0*/ int s_taskIdCounter;
                static /*0x8*/ System.Threading.Tasks.TaskFactory s_factory;
                static /*0x10*/ object s_taskCompletionSentinel;
                static /*0x18*/ bool s_asyncDebuggingEnabled;
                static /*0x20*/ System.Collections.Generic.Dictionary<int, System.Threading.Tasks.Task> s_currentActiveTasks;
                static /*0x28*/ object s_activeTasksLock;
                static /*0x30*/ System.Action<object> s_taskCancelCallback;
                static /*0x38*/ System.Func<System.Threading.Tasks.Task.ContingentProperties> s_createContingentProperties;
                static /*0x40*/ System.Threading.Tasks.Task s_completedTask;
                static /*0x48*/ System.Predicate<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate;
                static /*0x50*/ System.Threading.ContextCallback s_ecCallback;
                static /*0x58*/ System.Predicate<object> s_IsTaskContinuationNullPredicate;
                [ThreadStatic] static System.Threading.Tasks.Task t_currentTask;
                [ThreadStatic] static System.Threading.Tasks.StackGuard t_stackGuard;
                /*0x10*/ int m_taskId;
                /*0x18*/ object m_action;
                /*0x20*/ object m_stateObject;
                /*0x28*/ System.Threading.Tasks.TaskScheduler m_taskScheduler;
                /*0x30*/ System.Threading.Tasks.Task m_parent;
                /*0x38*/ int m_stateFlags;
                /*0x40*/ object m_continuationObject;
                /*0x48*/ System.Threading.Tasks.Task.ContingentProperties m_contingentProperties;

                static /*0x1e2e7f8*/ Task();
                static /*0x1e24f34*/ bool AddToActiveTasks(System.Threading.Tasks.Task task);
                static /*0x1e25144*/ void RemoveFromActiveTasks(int taskId);
                static /*0x1e25e90*/ void TaskCancelCallback(object o);
                static /*0x1e26288*/ System.Threading.Tasks.TaskCreationOptions OptionsMethod(int flags);
                static /*0x1e264f0*/ bool AnyTaskRequiresNotifyDebuggerOfWaitCompletion(System.Threading.Tasks.Task[] tasks);
                static /*0x1e26bc4*/ System.Threading.Tasks.Task InternalStartNew(System.Threading.Tasks.Task creatingTask, System.Delegate action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.Tasks.TaskCreationOptions options, System.Threading.Tasks.InternalTaskOptions internalOptions, ref System.Threading.StackCrawlMark stackMark);
                static /*0x1e26ce8*/ int NewId();
                static /*0x1e26d54*/ System.Threading.Tasks.Task get_InternalCurrent();
                static /*0x1e26db8*/ System.Threading.Tasks.Task InternalCurrentIfAttached(System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0x1e26e64*/ System.Threading.Tasks.StackGuard get_CurrentStackGuard();
                static /*0x1e268c0*/ bool IsCompletedMethod(int flags);
                static /*0x1e27540*/ System.Threading.Tasks.TaskFactory get_Factory();
                static /*0x1e275a4*/ System.Threading.Tasks.Task get_CompletedTask();
                static /*0x1e277ac*/ System.Threading.ExecutionContext CopyExecutionContext(System.Threading.ExecutionContext capturedContext);
                static /*0x1e29390*/ void ExecuteSelfReplicating(System.Threading.Tasks.Task root);
                static /*0x1e29a08*/ void ExecutionContextCallback(object obj);
                static /*0x1e2adcc*/ void CreationOptionsFromContinuationOptions(System.Threading.Tasks.TaskContinuationOptions continuationOptions, ref System.Threading.Tasks.TaskCreationOptions creationOptions, ref System.Threading.Tasks.InternalTaskOptions internalOptions);
                static /*0x1e2b5ec*/ void WaitAll(System.Threading.Tasks.Task[] tasks);
                static /*0x1e2b6ac*/ bool WaitAll(System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);
                static /*0x1e2b7ac*/ bool WaitAll(System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                static void AddToList<T>(T item, ref System.Collections.Generic.List<T> list, int initSize);
                static /*0x1e2ca3c*/ bool WaitAllBlockingCore(System.Collections.Generic.List<System.Threading.Tasks.Task> tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                static /*0x1e2cd8c*/ void AddExceptionsForCompletedTask(ref System.Collections.Generic.List<System.Exception> exceptions, System.Threading.Tasks.Task t);
                static System.Threading.Tasks.Task<TResult> FromResult<TResult>(TResult result);
                static /*0x1e2ce98*/ System.Threading.Tasks.Task FromException(System.Exception exception);
                static System.Threading.Tasks.Task<TResult> FromException<TResult>(System.Exception exception);
                static /*0x1e2cf10*/ System.Threading.Tasks.Task FromCancellation(System.Threading.CancellationToken cancellationToken);
                static System.Threading.Tasks.Task<TResult> FromCancellation<TResult>(System.Threading.CancellationToken cancellationToken);
                static System.Threading.Tasks.Task<TResult> FromCancellation<TResult>(System.OperationCanceledException exception);
                static /*0x1e2cfd8*/ System.Threading.Tasks.Task Run(System.Action action);
                static System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<TResult> function);
                static System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>> function);
                static System.Threading.Tasks.Task<TResult> Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>> function, System.Threading.CancellationToken cancellationToken);
                static /*0x1e2d0e4*/ System.Threading.Tasks.Task Delay(int millisecondsDelay);
                static /*0x1e2d148*/ System.Threading.Tasks.Task Delay(int millisecondsDelay, System.Threading.CancellationToken cancellationToken);
                static /*0x1e2d4b8*/ System.Threading.Tasks.Task WhenAll(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> tasks);
                static /*0x1e2dcf4*/ System.Threading.Tasks.Task WhenAll(System.Threading.Tasks.Task[] tasks);
                static /*0x1e2dee8*/ System.Threading.Tasks.Task InternalWhenAll(System.Threading.Tasks.Task[] tasks);
                static System.Threading.Tasks.Task<TResult[]> WhenAll<TResult>(System.Threading.Tasks.Task<TResult> tasks);
                static System.Threading.Tasks.Task<TResult[]> InternalWhenAll<TResult>(System.Threading.Tasks.Task<TResult> tasks);
                static /*0x1e2df90*/ System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny(System.Threading.Tasks.Task[] tasks);
                static /*0x1e2e3a0*/ System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> tasks);
                static System.Threading.Tasks.Task<TResult> CreateUnwrapPromise<TResult>(System.Threading.Tasks.Task outerTask, bool lookForOce);
                /*0x1e252a0*/ Task(bool canceled, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.CancellationToken ct);
                /*0x1e25360*/ Task();
                /*0x1e25394*/ Task(object state, System.Threading.Tasks.TaskCreationOptions creationOptions, bool promiseStyle);
                /*0x1e25614*/ Task(System.Action action);
                /*0x1e25668*/ Task(System.Delegate action, object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x1e254d0*/ void TaskConstructorCore(object action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x1e25874*/ void AssignCancellationToken(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.Task antecedent, System.Threading.Tasks.TaskContinuation continuation);
                /*0x1e2573c*/ void PossiblyCaptureContext(ref System.Threading.StackCrawlMark stackMark);
                /*0x1e25bc8*/ System.Threading.Tasks.TaskCreationOptions get_Options();
                /*0x1e26290*/ bool AtomicStateUpdate(int newBits, int illegalBits);
                /*0x1e26324*/ bool AtomicStateUpdate(int newBits, int illegalBits, ref int oldFlags);
                /*0x1e263c8*/ void SetNotificationForWaitCompletion(bool enabled);
                /*0x1e2644c*/ bool NotifyDebuggerOfWaitCompletionIfNecessary();
                /*0x1e26594*/ bool get_IsWaitNotificationEnabledOrNotRanToCompletion();
                /*0x1e265c8*/ bool get_ShouldNotifyDebuggerOfWaitCompletion();
                /*0x1e264a0*/ bool get_IsWaitNotificationEnabled();
                /*0x1e264c4*/ void NotifyDebuggerOfWaitCompletion();
                /*0x1e265ec*/ bool MarkStarted();
                /*0x1e265f8*/ bool FireTaskScheduledIfNeeded(System.Threading.Tasks.TaskScheduler ts);
                /*0x1e257d4*/ void AddNewChild();
                /*0x1e25e40*/ void DisregardChild();
                /*0x1e26624*/ void Start();
                /*0x1e26748*/ void Start(System.Threading.Tasks.TaskScheduler scheduler);
                /*0x1e250b0*/ int get_Id();
                /*0x1e26f1c*/ System.AggregateException get_Exception();
                /*0x1e270dc*/ System.Threading.Tasks.TaskStatus get_Status();
                /*0x1e27148*/ bool get_IsCanceled();
                /*0x1e27174*/ bool get_IsCancellationRequested();
                /*0x1e25b78*/ System.Threading.Tasks.Task.ContingentProperties EnsureContingentPropertiesInitialized(bool needsProtection);
                /*0x1e271c8*/ System.Threading.Tasks.Task.ContingentProperties EnsureContingentPropertiesInitializedCore(bool needsProtection);
                /*0x1e272a4*/ System.Threading.CancellationToken get_CancellationToken();
                /*0x1e272d4*/ bool get_IsCancellationAcknowledged();
                /*0x1e272f8*/ bool get_IsCompleted();
                /*0x1e27368*/ bool get_IsRanToCompletion();
                /*0x1e257bc*/ System.Threading.Tasks.TaskCreationOptions get_CreationOptions();
                /*0x1e2739c*/ System.Threading.WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
                /*0x1e27528*/ object get_AsyncState();
                /*0x1e27530*/ bool System.IAsyncResult.get_CompletedSynchronously();
                /*0x1e27538*/ System.Threading.Tasks.TaskScheduler get_ExecutingTaskScheduler();
                /*0x1e2742c*/ System.Threading.ManualResetEventSlim get_CompletedEvent();
                /*0x1e26600*/ bool get_IsSelfReplicatingRoot();
                /*0x1e2764c*/ bool get_IsChildReplica();
                /*0x1e27664*/ bool get_ExceptionRecorded();
                /*0x1e26f5c*/ bool get_IsFaulted();
                /*0x1e276e4*/ System.Threading.ExecutionContext get_CapturedContext();
                /*0x1e2620c*/ void set_CapturedContext(System.Threading.ExecutionContext value);
                /*0x1e2787c*/ void Dispose();
                /*0x1e278f4*/ void Dispose(bool disposing);
                /*0x1e268d0*/ void ScheduleAndStart(bool needsProtection);
                /*0x1e279fc*/ void AddException(object exceptionObject);
                /*0x1e27d6c*/ void AddException(object exceptionObject, bool representsCancellation);
                /*0x1e26f80*/ System.AggregateException GetExceptions(bool includeTaskCanceledExceptions);
                /*0x1e281ec*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Runtime.ExceptionServices.ExceptionDispatchInfo> GetExceptionDispatchInfos();
                /*0x1e28354*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo GetCancellationExceptionDispatchInfo();
                /*0x1e28390*/ void ThrowIfExceptional(bool includeTaskCanceledExceptions);
                /*0x1e283dc*/ void UpdateExceptionObservedStatus();
                /*0x1e284cc*/ bool get_IsExceptionObservedByParent();
                /*0x1e284f0*/ bool get_IsDelegateInvoked();
                /*0x1e27b24*/ void Finish(bool bUserDelegateExecuted);
                /*0x1e28514*/ void FinishStageTwo();
                /*0x1e289c0*/ void FinishStageThree();
                /*0x1e28a14*/ void ProcessChildCompletion(System.Threading.Tasks.Task childTask);
                /*0x1e28778*/ void AddExceptionsFromChildren();
                /*0x1e27a04*/ void FinishThreadAbortedTask(bool bTAEAddedToExceptionHolder, bool delegateRan);
                /*0x1e29220*/ void Execute();
                /*0x1e295ac*/ bool ShouldReplicate();
                /*0x1e295b4*/ System.Threading.Tasks.Task CreateReplicaTask(System.Action<object> taskReplicaDelegate, object stateObject, System.Threading.Tasks.Task parentTask, System.Threading.Tasks.TaskScheduler taskScheduler, System.Threading.Tasks.TaskCreationOptions creationOptionsForReplica, System.Threading.Tasks.InternalTaskOptions internalOptionsForReplica);
                /*0x1e29664*/ object get_SavedStateForNextReplica();
                /*0x1e2966c*/ void set_SavedStateFromPreviousReplica(object value);
                /*0x1e29670*/ System.Threading.Tasks.Task get_HandedOverChildReplica();
                /*0x1e29678*/ void set_HandedOverChildReplica(System.Threading.Tasks.Task value);
                /*0x1e2967c*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x1e29684*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
                /*0x1e23a80*/ bool ExecuteEntry(bool bPreventDoubleExecution);
                /*0x1e296d0*/ void ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot);
                /*0x1e29a84*/ void InnerInvoke();
                /*0x1e29b44*/ void InnerInvokeWithArg(System.Threading.Tasks.Task childTask);
                /*0x1e29498*/ void HandleException(System.Exception unhandledException);
                /*0x1e29ba8*/ System.Runtime.CompilerServices.TaskAwaiter GetAwaiter();
                /*0x1e29bac*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);
                /*0x1e29be4*/ void SetContinuationForAwait(System.Action continuationAction, bool continueOnCapturedContext, bool flowExecutionContext, ref System.Threading.StackCrawlMark stackMark);
                /*0x1e29ff4*/ void Wait();
                /*0x1e2a000*/ bool Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                /*0x1e2a39c*/ bool WrappedTryRunInline();
                /*0x1e2a120*/ bool InternalWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                /*0x1e2a664*/ bool SpinThenBlockingWait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
                /*0x1e2a82c*/ bool SpinWait(int millisecondsTimeout);
                /*0x1e25c30*/ bool InternalCancel(bool bCancelNonExecutingOnly);
                /*0x1e2a9d8*/ void RecordInternalCancellationRequest();
                /*0x1e2aa24*/ void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord);
                /*0x1e2aabc*/ void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord, object cancellationException);
                /*0x1e298f4*/ void CancellationCleanupLogic();
                /*0x1e29b78*/ void SetCancellationAcknowledged();
                /*0x1e28bd8*/ void FinishContinuations();
                /*0x1e2aafc*/ void LogFinishCompletionNotification();
                /*0x1e2ab2c*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction);
                /*0x1e2ad30*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x1e2abbc*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, ref System.Threading.StackCrawlMark stackMark);
                /*0x1e2b010*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x1e2b234*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x1e2b0b4*/ System.Threading.Tasks.Task ContinueWith(System.Action<System.Threading.Tasks.Task, object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, ref System.Threading.StackCrawlMark stackMark);
                System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult> continuationFunction);
                System.Threading.Tasks.Task<TResult> ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult> continuationFunction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, ref System.Threading.StackCrawlMark stackMark);
                /*0x1e2aee8*/ void ContinueWithCore(System.Threading.Tasks.Task continuationTask, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions options);
                /*0x1e2b26c*/ void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action);
                /*0x1e2a8f8*/ void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action, bool addBeforeOthers);
                /*0x1e2b274*/ bool AddTaskContinuationComplex(object tc, bool addBeforeOthers);
                /*0x1e29f60*/ bool AddTaskContinuation(object tc, bool addBeforeOthers);
                /*0x1e25f84*/ void RemoveContinuation(object continuationObject);

                class ContingentProperties
                {
                    /*0x10*/ System.Threading.ExecutionContext m_capturedContext;
                    /*0x18*/ System.Threading.ManualResetEventSlim m_completionEvent;
                    /*0x20*/ System.Threading.Tasks.TaskExceptionHolder m_exceptionsHolder;
                    /*0x28*/ System.Threading.CancellationToken m_cancellationToken;
                    /*0x30*/ System.Threading.Tasks.Shared<System.Threading.CancellationTokenRegistration> m_cancellationRegistration;
                    /*0x38*/ int m_internalCancellationRequested;
                    /*0x3c*/ int m_completionCountdown;
                    /*0x40*/ System.Collections.Generic.List<System.Threading.Tasks.Task> m_exceptionalChildren;

                    /*0x181e53c*/ ContingentProperties();
                    /*0x181e98c*/ void SetCompleted();
                    /*0x181e9c4*/ void DeregisterCancellationCallback();
                }

                class SetOnInvokeMres : System.Threading.ManualResetEventSlim, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0x181ec58*/ SetOnInvokeMres();
                    /*0x181ecc4*/ void Invoke(System.Threading.Tasks.Task completingTask);
                }

                class SetOnCountdownMres : System.Threading.ManualResetEventSlim, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0x24*/ int _count;

                    /*0x181eba0*/ SetOnCountdownMres(int count);
                    /*0x181ec18*/ void Invoke(System.Threading.Tasks.Task completingTask);
                }

                class DelayPromise : System.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult>
                {
                    /*0x58*/ System.Threading.CancellationToken Token;
                    /*0x60*/ System.Threading.CancellationTokenRegistration Registration;
                    /*0x78*/ System.Threading.Timer Timer;

                    /*0x181ea68*/ DelayPromise(System.Threading.CancellationToken token);
                    /*0x181e310*/ void Complete();
                }

                class WhenAllPromise : System.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult>, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0x58*/ System.Threading.Tasks.Task[] m_tasks;
                    /*0x60*/ int m_count;

                    /*0x181eccc*/ WhenAllPromise(System.Threading.Tasks.Task[] tasks);
                    /*0x181ee7c*/ void Invoke(System.Threading.Tasks.Task completedTask);
                    /*0x181f1c4*/ bool get_ShouldNotifyDebuggerOfWaitCompletion();
                }

                class WhenAllPromise<T> : System.Threading.Tasks.Task<T[]>, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0x0*/ System.Threading.Tasks.Task<T> m_tasks;
                    /*0x0*/ int m_count;

                    WhenAllPromise(System.Threading.Tasks.Task<T> tasks);
                    void Invoke(System.Threading.Tasks.Task ignored);
                    bool get_ShouldNotifyDebuggerOfWaitCompletion();
                }

                class <>c__DisplayClass178_0
                {
                    /*0x10*/ System.Threading.Tasks.Task root;
                    /*0x18*/ bool replicasAreQuitting;
                    /*0x20*/ System.Action<object> taskReplicaDelegate;
                    /*0x28*/ System.Threading.Tasks.TaskCreationOptions creationOptionsForReplicas;
                    /*0x2c*/ System.Threading.Tasks.InternalTaskOptions internalOptionsForReplicas;

                    /*0x181e594*/ <>c__DisplayClass178_0();
                    /*0x181e59c*/ void <ExecuteSelfReplicating>b__0(object <p0>);
                }

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.Task.<> <>9;
                    static /*0x8*/ System.Action<object> <>9__276_0;
                    static /*0x10*/ System.Threading.TimerCallback <>9__276_1;

                    static /*0x181e244*/ <>c();
                    /*0x181e2a4*/ <>c();
                    /*0x181e2ac*/ void <Delay>b__276_0(object state);
                    /*0x181e470*/ void <Delay>b__276_1(object state);
                    /*0x181e4d4*/ System.Threading.Tasks.Task.ContingentProperties <.cctor>b__295_0();
                    /*0x181e56c*/ bool <.cctor>b__295_1(System.Threading.Tasks.Task t);
                    /*0x181e588*/ bool <.cctor>b__295_2(object tc);
                }
            }

            class CompletionActionInvoker : System.Threading.IThreadPoolWorkItem
            {
                /*0x10*/ System.Threading.Tasks.ITaskCompletionAction m_action;
                /*0x18*/ System.Threading.Tasks.Task m_completingTask;

                /*0x161c448*/ CompletionActionInvoker(System.Threading.Tasks.ITaskCompletionAction action, System.Threading.Tasks.Task completingTask);
                /*0x161c480*/ void ExecuteWorkItem();
                /*0x161c534*/ void MarkAborted(System.Threading.ThreadAbortException tae);
            }

            class SystemThreadingTasks_TaskDebugView
            {
            }

            enum TaskCreationOptions
            {
                None = 0,
                PreferFairness = 1,
                LongRunning = 2,
                AttachedToParent = 4,
                DenyChildAttach = 8,
                HideScheduler = 16,
                RunContinuationsAsynchronously = 64,
            }

            enum InternalTaskOptions
            {
                None = 0,
                InternalOptionsMask = 65280,
                ChildReplica = 256,
                ContinuationTask = 512,
                PromiseTask = 1024,
                SelfReplicating = 2048,
                LazyCancellation = 4096,
                QueuedByRuntime = 8192,
                DoNotDispose = 16384,
            }

            enum TaskContinuationOptions
            {
                None = 0,
                PreferFairness = 1,
                LongRunning = 2,
                AttachedToParent = 4,
                DenyChildAttach = 8,
                HideScheduler = 16,
                LazyCancellation = 32,
                RunContinuationsAsynchronously = 64,
                NotOnRanToCompletion = 65536,
                NotOnFaulted = 131072,
                NotOnCanceled = 262144,
                OnlyOnRanToCompletion = 393216,
                OnlyOnFaulted = 327680,
                OnlyOnCanceled = 196608,
                ExecuteSynchronously = 524288,
            }

            class StackGuard
            {
                /*0x10*/ int m_inliningDepth;

                /*0x24a1034*/ StackGuard();
                /*0x24a1000*/ bool TryBeginInliningScope();
                /*0x24a1020*/ void EndInliningScope();
                /*0x24a1018*/ bool CheckForSufficientStack();
            }

            struct VoidTaskResult
            {
            }

            interface ITaskCompletionAction
            {
                void Invoke(System.Threading.Tasks.Task completingTask);
            }

            class UnwrapPromise<TResult> : System.Threading.Tasks.Task<TResult>, System.Threading.Tasks.ITaskCompletionAction
            {
                /*0x0*/ byte _state;
                /*0x0*/ bool _lookForOce;

                UnwrapPromise(System.Threading.Tasks.Task outerTask, bool lookForOce);
                void Invoke(System.Threading.Tasks.Task completingTask);
                void InvokeCore(System.Threading.Tasks.Task completingTask);
                void InvokeCoreAsync(System.Threading.Tasks.Task completingTask);
                void ProcessCompletedOuterTask(System.Threading.Tasks.Task task);
                bool TrySetFromTask(System.Threading.Tasks.Task task, bool lookForOce);
                void ProcessInnerTask(System.Threading.Tasks.Task task);

                class <>c<TResult>
                {
                    static /*0x0*/ System.Threading.Tasks.UnwrapPromise.<>c<TResult> <>9;
                    static /*0x0*/ System.Threading.WaitCallback <>9__8_0;

                    static <>c();
                    <>c();
                    void <InvokeCoreAsync>b__8_0(object state);
                }
            }

            class TaskCanceledException : System.OperationCanceledException
            {
                /*0x90*/ System.Threading.Tasks.Task m_canceledTask;

                /*0x1e2edd4*/ TaskCanceledException();
                /*0x1e2ee30*/ TaskCanceledException(string message);
                /*0x1e27f8c*/ TaskCanceledException(System.Threading.Tasks.Task task);
                /*0x1e2ee38*/ TaskCanceledException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class TaskCompletionSource<TResult>
            {
                /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;

                TaskCompletionSource();
                System.Threading.Tasks.Task<TResult> get_Task();
                void SpinUntilCompleted();
                bool TrySetException(System.Exception exception);
                void SetException(System.Exception exception);
                bool TrySetResult(TResult result);
                void SetResult(TResult result);
                bool TrySetCanceled();
                bool TrySetCanceled(System.Threading.CancellationToken cancellationToken);
                void SetCanceled();
            }

            class ContinuationTaskFromTask : System.Threading.Tasks.Task
            {
                /*0x50*/ System.Threading.Tasks.Task m_antecedent;

                /*0x16254e8*/ ContinuationTaskFromTask(System.Threading.Tasks.Task antecedent, System.Delegate action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, ref System.Threading.StackCrawlMark stackMark);
                /*0x16255c0*/ void InnerInvoke();
            }

            class ContinuationResultTaskFromTask<TResult> : System.Threading.Tasks.Task<TResult>
            {
                /*0x0*/ System.Threading.Tasks.Task m_antecedent;

                ContinuationResultTaskFromTask(System.Threading.Tasks.Task antecedent, System.Delegate function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, ref System.Threading.StackCrawlMark stackMark);
                void InnerInvoke();
            }

            class ContinuationTaskFromResultTask<TAntecedentResult> : System.Threading.Tasks.Task
            {
                /*0x0*/ System.Threading.Tasks.Task<TAntecedentResult> m_antecedent;

                ContinuationTaskFromResultTask(System.Threading.Tasks.Task<TAntecedentResult> antecedent, System.Delegate action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, ref System.Threading.StackCrawlMark stackMark);
                void InnerInvoke();
            }

            class ContinuationResultTaskFromResultTask<TAntecedentResult, TResult> : System.Threading.Tasks.Task<TResult>
            {
                /*0x0*/ System.Threading.Tasks.Task<TAntecedentResult> m_antecedent;

                ContinuationResultTaskFromResultTask(System.Threading.Tasks.Task<TAntecedentResult> antecedent, System.Delegate function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, ref System.Threading.StackCrawlMark stackMark);
                void InnerInvoke();
            }

            class TaskContinuation
            {
                static /*0x1e2ee40*/ void InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task task, bool needsProtection);
                /*0x1e2efb8*/ TaskContinuation();
                void Run(System.Threading.Tasks.Task completedTask, bool bCanInlineContinuationTask);
            }

            class StandardTaskContinuation : System.Threading.Tasks.TaskContinuation
            {
                /*0x10*/ System.Threading.Tasks.Task m_task;
                /*0x18*/ System.Threading.Tasks.TaskContinuationOptions m_options;
                /*0x20*/ System.Threading.Tasks.TaskScheduler m_taskScheduler;

                /*0x24a2394*/ StandardTaskContinuation(System.Threading.Tasks.Task task, System.Threading.Tasks.TaskContinuationOptions options, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x24a2618*/ void Run(System.Threading.Tasks.Task completedTask, bool bCanInlineContinuationTask);
            }

            class SynchronizationContextAwaitTaskContinuation : System.Threading.Tasks.AwaitTaskContinuation
            {
                static /*0x0*/ System.Threading.SendOrPostCallback s_postCallback;
                static /*0x8*/ System.Threading.ContextCallback s_postActionCallback;
                /*0x20*/ System.Threading.SynchronizationContext m_syncContext;

                static /*0x1e2368c*/ SynchronizationContextAwaitTaskContinuation();
                static /*0x1e23510*/ void PostAction(object state);
                static /*0x1e235b8*/ System.Threading.ContextCallback GetPostActionCallback();
                /*0x1e23298*/ SynchronizationContextAwaitTaskContinuation(System.Threading.SynchronizationContext context, System.Action action, bool flowExecutionContext, ref System.Threading.StackCrawlMark stackMark);
                /*0x1e232d4*/ void Run(System.Threading.Tasks.Task task, bool canInlineContinuationTask);

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.SynchronizationContextAwaitTaskContinuation.<> <>9;

                    static /*0x181e174*/ <>c();
                    /*0x181e1d4*/ <>c();
                    /*0x181e1dc*/ void <.cctor>b__7_0(object state);
                }
            }

            class TaskSchedulerAwaitTaskContinuation : System.Threading.Tasks.AwaitTaskContinuation
            {
                /*0x20*/ System.Threading.Tasks.TaskScheduler m_scheduler;

                /*0x1e29f24*/ TaskSchedulerAwaitTaskContinuation(System.Threading.Tasks.TaskScheduler scheduler, System.Action action, bool flowExecutionContext, ref System.Threading.StackCrawlMark stackMark);
                /*0x1e307e8*/ void Run(System.Threading.Tasks.Task ignored, bool canInlineContinuationTask);

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.TaskSchedulerAwaitTaskContinuation.<> <>9;
                    static /*0x8*/ System.Action<object> <>9__2_0;

                    static /*0x181f600*/ <>c();
                    /*0x181f660*/ <>c();
                    /*0x181f668*/ void <Run>b__2_0(object state);
                }
            }

            class AwaitTaskContinuation : System.Threading.Tasks.TaskContinuation, System.Threading.IThreadPoolWorkItem
            {
                static /*0x0*/ System.Threading.ContextCallback s_invokeActionCallback;
                /*0x10*/ System.Threading.ExecutionContext m_capturedContext;
                /*0x18*/ System.Action m_action;

                static /*0x1c4f578*/ bool get_IsValidLocationForInlining();
                static /*0x1c4fa90*/ void InvokeAction(object state);
                static /*0x1c4faf8*/ System.Threading.ContextCallback GetInvokeActionCallback();
                static /*0x1c4fd18*/ void RunOrScheduleAction(System.Action action, bool allowInlining, ref System.Threading.Tasks.Task currentTask);
                static /*0x1c4fea0*/ void UnsafeScheduleAction(System.Action action, System.Threading.Tasks.Task task);
                static /*0x1c4fb9c*/ void ThrowAsyncIfNecessary(System.Exception exc);
                /*0x1c4f264*/ AwaitTaskContinuation(System.Action action, bool flowExecutionContext, ref System.Threading.StackCrawlMark stackMark);
                /*0x1c4f304*/ AwaitTaskContinuation(System.Action action, bool flowExecutionContext);
                /*0x1c4f390*/ System.Threading.Tasks.Task CreateTask(System.Action<object> action, object state, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x1c4f444*/ void Run(System.Threading.Tasks.Task task, bool canInlineContinuationTask);
                /*0x1c4f8bc*/ void ExecuteWorkItemHelper();
                /*0x1c4fa64*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                /*0x1c4fa8c*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
                /*0x1c4f6dc*/ void RunCallback(System.Threading.ContextCallback callback, object state, ref System.Threading.Tasks.Task currentTask);

                class <>c
                {
                    static /*0x0*/ System.Threading.Tasks.AwaitTaskContinuation.<> <>9;
                    static /*0x8*/ System.Threading.WaitCallback <>9__17_0;

                    static /*0x2271c54*/ <>c();
                    /*0x2271cb4*/ <>c();
                    /*0x2271cbc*/ void <ThrowAsyncIfNecessary>b__17_0(object s);
                }
            }

            class TaskExceptionHolder
            {
                static /*0x0*/ bool s_failFastOnUnobservedException;
                static /*0x1*/ bool s_domainUnloadStarted;
                static /*0x8*/ System.EventHandler s_adUnloadEventHandler;
                /*0x10*/ System.Threading.Tasks.Task m_task;
                /*0x18*/ System.Collections.Generic.List<System.Runtime.ExceptionServices.ExceptionDispatchInfo> m_faultExceptions;
                /*0x20*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo m_cancellationException;
                /*0x28*/ bool m_isHandled;

                static /*0x1e300f0*/ TaskExceptionHolder();
                static /*0x1e2f0f8*/ bool ShouldFailFastOnUnobservedException();
                static /*0x1e2efc0*/ void EnsureADUnloadCallbackRegistered();
                static /*0x1e2f100*/ void AppDomainUnloadCallback(object sender, System.EventArgs e);
                /*0x1e27f08*/ TaskExceptionHolder(System.Threading.Tasks.Task task);
                /*0x1e2f16c*/ void Finalize();
                /*0x1e276bc*/ bool get_ContainsFaultList();
                /*0x1e27f80*/ void Add(object exceptionObject, bool representsCancellation);
                /*0x1e2f9a0*/ void SetCancellationException(object exceptionObject);
                /*0x1e2fa64*/ void AddFaultException(object exceptionObject);
                /*0x1e3006c*/ void MarkAsUnhandled();
                /*0x1e27cdc*/ void MarkAsHandled(bool calledFromFinalizer);
                /*0x1e28028*/ System.AggregateException CreateExceptionObject(bool calledFromFinalizer, System.Exception includeThisException);
                /*0x1e282cc*/ System.Collections.ObjectModel.ReadOnlyCollection<System.Runtime.ExceptionServices.ExceptionDispatchInfo> GetExceptionDispatchInfos();
                /*0x1e300e8*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo GetCancellationExceptionDispatchInfo();
            }

            class TaskFactory
            {
                /*0x10*/ System.Threading.CancellationToken m_defaultCancellationToken;
                /*0x18*/ System.Threading.Tasks.TaskScheduler m_defaultScheduler;
                /*0x20*/ System.Threading.Tasks.TaskCreationOptions m_defaultCreationOptions;
                /*0x24*/ System.Threading.Tasks.TaskContinuationOptions m_defaultContinuationOptions;

                static /*0x1e3036c*/ void CheckCreationOptions(System.Threading.Tasks.TaskCreationOptions creationOptions);
                static /*0x1e303d0*/ void CheckFromAsyncOptions(System.Threading.Tasks.TaskCreationOptions creationOptions, bool hasBeginMethod);
                static /*0x1e2e13c*/ System.Threading.Tasks.Task<System.Threading.Tasks.Task> CommonCWAnyLogic(System.Collections.Generic.IList<System.Threading.Tasks.Task> tasks);
                static /*0x1e30274*/ void CheckMultiTaskContinuationOptions(System.Threading.Tasks.TaskContinuationOptions continuationOptions);
                /*0x1e2eafc*/ TaskFactory();
                /*0x1e30218*/ TaskFactory(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                /*0x1e30148*/ System.Threading.Tasks.TaskScheduler GetDefaultScheduler(System.Threading.Tasks.Task currTask);
                System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<TResult> function);
                System.Threading.Tasks.Task<TResult> StartNew<TResult>(System.Func<object, TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
                System.Threading.Tasks.Task FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, object state);
                System.Threading.Tasks.Task FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, object, System.IAsyncResult> beginMethod, System.Action<System.IAsyncResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);

                class CompleteOnInvokePromise : System.Threading.Tasks.Task<System.Threading.Tasks.Task>, System.Threading.Tasks.ITaskCompletionAction
                {
                    /*0x58*/ System.Collections.Generic.IList<System.Threading.Tasks.Task> _tasks;
                    /*0x60*/ int m_firstTaskAlreadyCompleted;

                    /*0x181f24c*/ CompleteOnInvokePromise(System.Collections.Generic.IList<System.Threading.Tasks.Task> tasks);
                    /*0x181f384*/ void Invoke(System.Threading.Tasks.Task completingTask);
                }
            }

            class TaskScheduler
            {
                static /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<System.Threading.Tasks.TaskScheduler, object> s_activeTaskSchedulers;
                static /*0x8*/ System.Threading.Tasks.TaskScheduler s_defaultTaskScheduler;
                static /*0x10*/ int s_taskSchedulerIdCounter;
                static /*0x18*/ System.EventHandler<System.Threading.Tasks.UnobservedTaskExceptionEventArgs> _unobservedTaskException;
                static /*0x20*/ object _unobservedTaskExceptionLockObject;
                /*0x10*/ int m_taskSchedulerId;

                static /*0x1e30740*/ TaskScheduler();
                static /*0x1e305d8*/ System.Threading.Tasks.TaskScheduler get_Default();
                static /*0x1e2668c*/ System.Threading.Tasks.TaskScheduler get_Current();
                static /*0x1e29e6c*/ System.Threading.Tasks.TaskScheduler get_InternalCurrent();
                static /*0x1e3063c*/ System.Threading.Tasks.TaskScheduler FromCurrentSynchronizationContext();
                static /*0x1e2f844*/ void PublishUnobservedTaskException(object sender, System.Threading.Tasks.UnobservedTaskExceptionEventArgs ueea);
                /*0x1e23814*/ TaskScheduler();
                void QueueTask(System.Threading.Tasks.Task task);
                bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
                /*0x1e2a4a4*/ bool TryRunInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
                /*0x1e304b4*/ bool TryDequeue(System.Threading.Tasks.Task task);
                /*0x1e304bc*/ void NotifyWorkItemProgress();
                /*0x1e304c0*/ bool get_RequiresAtomicStartTransition();
                /*0x1e279e0*/ void InternalQueueTask(System.Threading.Tasks.Task task);
                /*0x1e304c8*/ void AddToActiveTaskSchedulers();
                /*0x1e30690*/ int get_Id();
                /*0x1e23970*/ bool TryExecuteTask(System.Threading.Tasks.Task task);

                class SystemThreadingTasks_TaskSchedulerDebugView
                {
                }
            }

            class SynchronizationContextTaskScheduler : System.Threading.Tasks.TaskScheduler
            {
                static /*0x0*/ System.Threading.SendOrPostCallback s_postCallback;
                /*0x18*/ System.Threading.SynchronizationContext m_synchronizationContext;

                static /*0x1e23bbc*/ SynchronizationContextTaskScheduler();
                static /*0x1e239f8*/ void PostCallback(object obj);
                /*0x1e23754*/ SynchronizationContextTaskScheduler();
                /*0x1e23898*/ void QueueTask(System.Threading.Tasks.Task task);
                /*0x1e23928*/ bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
            }

            class UnobservedTaskExceptionEventArgs : System.EventArgs
            {
                /*0x10*/ System.AggregateException m_exception;
                /*0x18*/ bool m_observed;

                /*0x206c204*/ UnobservedTaskExceptionEventArgs(System.AggregateException exception);
            }

            class TaskSchedulerException : System.Exception
            {
                /*0x1e30aa0*/ TaskSchedulerException();
                /*0x1e27a84*/ TaskSchedulerException(System.Exception innerException);
                /*0x1e30b30*/ TaskSchedulerException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class TaskToApm
            {
                static /*0x1e30bbc*/ System.IAsyncResult Begin(System.Threading.Tasks.Task task, System.AsyncCallback callback, object state);
                static /*0x1e30dac*/ void End(System.IAsyncResult asyncResult);
                static TResult End<TResult>(System.IAsyncResult asyncResult);
                static /*0x1e30cb4*/ void InvokeCallbackWhenTaskCompletes(System.Threading.Tasks.Task antecedent, System.AsyncCallback callback, System.IAsyncResult asyncResult);

                class TaskWrapperAsyncResult : System.IAsyncResult
                {
                    /*0x10*/ System.Threading.Tasks.Task Task;
                    /*0x18*/ object m_state;
                    /*0x20*/ bool m_completedSynchronously;

                    /*0x181f788*/ TaskWrapperAsyncResult(System.Threading.Tasks.Task task, object state, bool completedSynchronously);
                    /*0x181f7cc*/ object System.IAsyncResult.get_AsyncState();
                    /*0x181f7d4*/ bool System.IAsyncResult.get_CompletedSynchronously();
                    /*0x181f7dc*/ bool System.IAsyncResult.get_IsCompleted();
                    /*0x181f7f8*/ System.Threading.WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
                }

                class <>c__DisplayClass3_0
                {
                    /*0x10*/ System.AsyncCallback callback;
                    /*0x18*/ System.IAsyncResult asyncResult;

                    /*0x181f75c*/ <>c__DisplayClass3_0();
                    /*0x181f764*/ void <InvokeCallbackWhenTaskCompletes>b__0();
                }
            }

            class ThreadPoolTaskScheduler : System.Threading.Tasks.TaskScheduler
            {
                static /*0x0*/ System.Threading.ParameterizedThreadStart s_longRunningThreadWork;

                static /*0x1d316e8*/ ThreadPoolTaskScheduler();
                static /*0x1d31474*/ void LongRunningThreadWork(object obj);
                /*0x1d31404*/ ThreadPoolTaskScheduler();
                /*0x1d314f8*/ void QueueTask(System.Threading.Tasks.Task task);
                /*0x1d315e4*/ bool TryExecuteTaskInline(System.Threading.Tasks.Task task, bool taskWasPreviouslyQueued);
                /*0x1d316d4*/ bool TryDequeue(System.Threading.Tasks.Task task);
                /*0x1d316dc*/ void NotifyWorkItemProgress();
                /*0x1d316e0*/ bool get_RequiresAtomicStartTransition();
            }
        }
    }

    namespace Security
    {
        class SecurityDocument
        {
            /*0x10*/ byte[] m_data;

            static /*0x204ea88*/ int EncodedStringSize(string str);
            /*0x204e768*/ SecurityDocument(int numData);
            /*0x204e7d4*/ void GuaranteeSize(int size);
            /*0x204e884*/ void AddString(string str, ref int position);
            /*0x204e9e4*/ void AppendString(string str, ref int position);
            /*0x204eaa8*/ string GetString(ref int position, bool bCreate);
            /*0x204f0d0*/ void AddToken(byte b, ref int position);
            /*0x204f140*/ System.Security.SecurityElement GetRootElement();
            /*0x204f168*/ System.Security.SecurityElement GetElement(int position, bool bCreate);
            /*0x204f190*/ System.Security.SecurityElement InternalGetElement(ref int position, bool bCreate);
        }

        class CodeAccessPermission : System.Security.IPermission, System.Security.ISecurityEncodable
        {
            static /*0x1618bb0*/ System.Security.Permissions.PermissionState CheckPermissionState(System.Security.Permissions.PermissionState state, bool allowUnrestricted);
            /*0x16189bc*/ CodeAccessPermission();
            /*0x16189c4*/ void Demand();
            /*0x1618a4c*/ bool Equals(object obj);
            /*0x1618b7c*/ int GetHashCode();
            bool IsSubsetOf(System.Security.IPermission target);
            /*0x1618b84*/ string ToString();
            System.Security.SecurityElement ToXml();
            /*0x1618c64*/ void System.Security.IPermission.Demand();
        }

        interface IPermission : System.Security.ISecurityEncodable
        {
            void Demand();
            bool IsSubsetOf(System.Security.IPermission target);
        }

        interface ISecurityEncodable
        {
            System.Security.SecurityElement ToXml();
        }

        class NamedPermissionSet : System.Security.PermissionSet
        {
            /*0x30*/ string name;
            /*0x38*/ string description;

            /*0x22a61c0*/ NamedPermissionSet();
            /*0x22a6224*/ NamedPermissionSet(string name, System.Security.Permissions.PermissionState state);
            /*0x22a636c*/ NamedPermissionSet(string name);
            /*0x22a6374*/ string get_Name();
            /*0x22a62a8*/ void set_Name(string value);
            /*0x22a637c*/ System.Security.SecurityElement ToXml();
            /*0x22a6424*/ bool Equals(object obj);
            /*0x22a64c8*/ int GetHashCode();
        }

        class PermissionSet : System.Security.ISecurityEncodable, System.Collections.ICollection, System.Collections.IEnumerable, System.Runtime.Serialization.IDeserializationCallback
        {
            static /*0x0*/ object[] psUnrestricted;
            static /*0x8*/ object[] action;
            /*0x10*/ System.Security.Permissions.PermissionState state;
            /*0x18*/ System.Collections.ArrayList list;
            /*0x20*/ bool _declsec;
            /*0x28*/ bool[] _ignored;

            static /*0x252f5c0*/ PermissionSet();
            /*0x252e600*/ PermissionSet();
            /*0x252e668*/ PermissionSet(System.Security.Permissions.PermissionState state);
            /*0x252e6a0*/ PermissionSet(System.Security.IPermission perm);
            /*0x252e6f0*/ void CopyTo(System.Array array, int index);
            /*0x252e868*/ void Demand();
            /*0x252ee6c*/ void CasOnlyDemand(int skip);
            /*0x252eee8*/ System.Collections.IEnumerator GetEnumerator();
            /*0x252eaf0*/ bool IsEmpty();
            /*0x252ee5c*/ bool IsUnrestricted();
            /*0x252ef0c*/ string ToString();
            /*0x252ef3c*/ System.Security.SecurityElement ToXml();
            /*0x252f374*/ int get_Count();
            /*0x252f398*/ bool get_IsSynchronized();
            /*0x252f3bc*/ object get_SyncRoot();
            /*0x252f3c0*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
            /*0x252f3c4*/ bool Equals(object obj);
            /*0x252f56c*/ int GetHashCode();
        }

        class SecureString : System.IDisposable
        {
            /*0x10*/ int length;
            /*0x14*/ bool disposed;
            /*0x18*/ byte[] data;

            /*0x204e2fc*/ SecureString();
            /*0x204e4b8*/ SecureString(char* value, int length);
            /*0x204e614*/ int get_Length();
            /*0x204e678*/ void Dispose();
            /*0x204e610*/ void Encrypt();
            /*0x204e6bc*/ void Decrypt();
            /*0x204e32c*/ void Alloc(int length, bool realloc);
            /*0x204e6c0*/ byte[] GetBuffer();
        }

        enum SecurityElementType
        {
            Regular = 0,
            Format = 1,
            Comment = 2,
        }

        class SecurityElement
        {
            static /*0x0*/ char[] invalid_tag_chars;
            static /*0x8*/ char[] invalid_text_chars;
            static /*0x10*/ char[] invalid_attr_name_chars;
            static /*0x18*/ char[] invalid_attr_value_chars;
            static /*0x20*/ char[] invalid_chars;
            /*0x10*/ string text;
            /*0x18*/ string tag;
            /*0x20*/ System.Collections.ArrayList attributes;
            /*0x28*/ System.Collections.ArrayList children;

            static /*0x2051174*/ SecurityElement();
            static /*0x205014c*/ string Escape(string str);
            static /*0x204fcbc*/ string Unescape(string str);
            static /*0x205036c*/ System.Security.SecurityElement FromString(string xml);
            static /*0x2050644*/ bool IsValidAttributeName(string name);
            static /*0x20506cc*/ bool IsValidAttributeValue(string value);
            static /*0x204f76c*/ bool IsValidTag(string tag);
            static /*0x204fc34*/ bool IsValidText(string text);
            /*0x204f3a0*/ SecurityElement(string tag);
            /*0x204f61c*/ SecurityElement(string tag, string text);
            /*0x204f90c*/ System.Collections.Hashtable get_Attributes();
            /*0x204fc1c*/ System.Collections.ArrayList get_Children();
            /*0x204fc24*/ string get_Tag();
            /*0x204fc2c*/ string get_Text();
            /*0x204f7f4*/ void set_Text(string value);
            /*0x204f3a8*/ void AddAttribute(string name, string value);
            /*0x204f544*/ void AddChild(System.Security.SecurityElement child);
            /*0x2050754*/ System.Security.SecurityElement SearchForChildByTag(string tag);
            /*0x2050884*/ string ToString();
            /*0x2050910*/ void ToXml(ref System.Text.StringBuilder s, int level);
            /*0x204fe6c*/ System.Security.SecurityElement.SecurityAttribute GetAttribute(string name);
            /*0x2050f10*/ void set_m_strText(string value);
            /*0x2050f18*/ string SearchForTextOfLocalName(string strLocalName);

            class SecurityAttribute
            {
                /*0x10*/ string _name;
                /*0x18*/ string _value;

                /*0x1819cec*/ SecurityAttribute(string name, string value);
                /*0x1819e70*/ string get_Name();
                /*0x1819e78*/ string get_Value();
            }
        }

        class SecurityException : System.SystemException
        {
            /*0x88*/ string permissionState;

            /*0x20512f8*/ SecurityException();
            /*0x2051364*/ SecurityException(string message);
            /*0x2051394*/ SecurityException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x20516a8*/ SecurityException(string message, System.Exception inner);
            /*0x20516d8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x20518a8*/ string ToString();
        }

        class SecurityManager
        {
            static /*0x20518b0*/ bool get_SecurityEnabled();
            static /*0x20518b8*/ bool CheckElevatedPermissions();
            static /*0x20518c0*/ void EnsureElevatedPermissions();
        }

        class XmlSyntaxException : System.SystemException
        {
            /*0x2263cc4*/ XmlSyntaxException();
            /*0x2263ccc*/ XmlSyntaxException(int lineNumber);
            /*0x2263d70*/ XmlSyntaxException(int lineNumber, string message);
            /*0x2263e24*/ XmlSyntaxException(string message);
            /*0x2263e2c*/ XmlSyntaxException(string message, System.Exception inner);
            /*0x2263e34*/ XmlSyntaxException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        namespace Policy
        {
            class Evidence : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ bool _locked;
                /*0x18*/ System.Collections.ArrayList hostEvidenceList;
                /*0x20*/ System.Collections.ArrayList assemblyEvidenceList;

                /*0x245be6c*/ Evidence();
                /*0x245be74*/ int get_Count();
                /*0x245bed4*/ bool get_IsSynchronized();
                /*0x245bedc*/ object get_SyncRoot();
                /*0x245bee0*/ void CopyTo(System.Array array, int index);
                /*0x245bfa8*/ System.Collections.IEnumerator GetEnumerator();

                class EvidenceEnumerator : System.Collections.IEnumerator
                {
                    /*0x10*/ System.Collections.IEnumerator currentEnum;
                    /*0x18*/ System.Collections.IEnumerator hostEnum;
                    /*0x20*/ System.Collections.IEnumerator assemblyEnum;

                    /*0x1811780*/ EvidenceEnumerator(System.Collections.IEnumerator hostenum, System.Collections.IEnumerator assemblyenum);
                    /*0x18117bc*/ bool MoveNext();
                    /*0x1811904*/ void Reset();
                    /*0x1811a40*/ object get_Current();
                }
            }
        }

        namespace Permissions
        {
            enum PermissionState
            {
                Unrestricted = 1,
                None = 0,
            }

            enum SecurityAction
            {
                Demand = 2,
                Assert = 3,
                Deny = 4,
                PermitOnly = 5,
                LinkDemand = 6,
                InheritanceDemand = 7,
                RequestMinimum = 8,
                RequestOptional = 9,
                RequestRefuse = 10,
            }
        }

        namespace Util
        {
            class Parser
            {
                /*0x10*/ System.Security.SecurityDocument _doc;
                /*0x18*/ System.Security.Util.Tokenizer _t;

                /*0x252a010*/ Parser(System.Security.Util.Tokenizer t);
                /*0x252a0c4*/ Parser(string input);
                /*0x25294d8*/ System.Security.SecurityElement GetTopElement();
                /*0x25294f4*/ void GetRequiredSizes(System.Security.Util.TokenizerStream stream, ref int index);
                /*0x2529b00*/ int DetermineFormat(System.Security.Util.TokenizerStream stream);
                /*0x2529cec*/ void ParseContents();
            }

            class Tokenizer
            {
                /*0x10*/ int LineNo;
                /*0x14*/ int _inProcessingTag;
                /*0x18*/ byte[] _inBytes;
                /*0x20*/ char[] _inChars;
                /*0x28*/ string _inString;
                /*0x30*/ int _inIndex;
                /*0x34*/ int _inSize;
                /*0x38*/ int _inSavedCharacter;
                /*0x3c*/ System.Security.Util.Tokenizer.TokenSource _inTokenSource;
                /*0x40*/ System.Security.Util.Tokenizer.ITokenReader _inTokenReader;
                /*0x48*/ System.Security.Util.Tokenizer.StringMaker _maker;
                /*0x50*/ string[] _searchStrings;
                /*0x58*/ string[] _replaceStrings;
                /*0x60*/ int _inNestedIndex;
                /*0x64*/ int _inNestedSize;
                /*0x68*/ string _inNestedString;

                /*0x1d4248c*/ Tokenizer(string input);
                /*0x1d423a0*/ void BasicInitialization();
                /*0x1d42424*/ void Recycle();
                /*0x1d424d8*/ void ChangeFormat(System.Text.Encoding encoding);
                /*0x1d42704*/ void GetTokens(System.Security.Util.TokenizerStream stream, int maxNum, bool endAfterKet);
                /*0x1d43038*/ string GetStringToken();

                enum TokenSource
                {
                    UnicodeByteArray = 0,
                    UTF8ByteArray = 1,
                    ASCIIByteArray = 2,
                    CharArray = 3,
                    String = 4,
                    NestedStrings = 5,
                    Other = 6,
                }

                class StringMaker
                {
                    /*0x10*/ string[] aStrings;
                    /*0x18*/ uint cStringsMax;
                    /*0x1c*/ uint cStringsUsed;
                    /*0x20*/ System.Text.StringBuilder _outStringBuilder;
                    /*0x28*/ char[] _outChars;
                    /*0x30*/ int _outIndex;

                    static /*0x2aa220c*/ uint HashString(string str);
                    static /*0x2aa227c*/ uint HashCharArray(char[] a, int l);
                    /*0x2aa22e4*/ StringMaker();
                    /*0x2aa2374*/ bool CompareStringAndChars(string str, char[] a, int l);
                    /*0x2aa241c*/ string MakeString();
                }

                interface ITokenReader
                {
                    int Read();
                }

                class StreamTokenReader : System.Security.Util.Tokenizer.ITokenReader
                {
                    /*0x10*/ System.IO.StreamReader _in;
                    /*0x18*/ int _numCharRead;

                    /*0x2aa218c*/ StreamTokenReader(System.IO.StreamReader input);
                    /*0x2aa21bc*/ int Read();
                    /*0x2aa2204*/ int get_NumCharEncountered();
                }
            }

            class TokenizerShortBlock
            {
                /*0x10*/ short[] m_block;
                /*0x18*/ System.Security.Util.TokenizerShortBlock m_next;

                /*0x1d43150*/ TokenizerShortBlock();
            }

            class TokenizerStringBlock
            {
                /*0x10*/ string[] m_block;
                /*0x18*/ System.Security.Util.TokenizerStringBlock m_next;

                /*0x207908c*/ TokenizerStringBlock();
            }

            class TokenizerStream
            {
                /*0x10*/ int m_countTokens;
                /*0x18*/ System.Security.Util.TokenizerShortBlock m_headTokens;
                /*0x20*/ System.Security.Util.TokenizerShortBlock m_lastTokens;
                /*0x28*/ System.Security.Util.TokenizerShortBlock m_currentTokens;
                /*0x30*/ int m_indexTokens;
                /*0x38*/ System.Security.Util.TokenizerStringBlock m_headStrings;
                /*0x40*/ System.Security.Util.TokenizerStringBlock m_currentStrings;
                /*0x48*/ int m_indexStrings;

                /*0x1d431ac*/ TokenizerStream();
                /*0x1d42f48*/ void AddToken(short token);
                /*0x1d43054*/ void AddString(string str);
                /*0x1d43250*/ void Reset();
                /*0x1d4326c*/ short GetNextFullToken();
                /*0x1d432e8*/ short GetNextToken();
                /*0x1d43300*/ string GetNextString();
                /*0x1d43378*/ void ThrowAwayNextString();
                /*0x1d4337c*/ void TagLastToken(short tag);
                /*0x1d433fc*/ int GetTokenCount();
                /*0x1d43404*/ void GoToPosition(int position);
            }
        }

        namespace Principal
        {
            interface IIdentity
            {
                string get_AuthenticationType();
                string get_Name();
            }

            interface IPrincipal
            {
            }

            enum TokenImpersonationLevel
            {
                Anonymous = 1,
                Delegation = 4,
                Identification = 2,
                Impersonation = 3,
                None = 0,
            }

            enum WindowsAccountType
            {
                Normal = 0,
                Guest = 1,
                System = 2,
                Anonymous = 3,
            }

            class WindowsIdentity : System.Security.Claims.ClaimsIdentity, System.Security.Principal.IIdentity, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable, System.IDisposable
            {
                static /*0x0*/ nint invalidWindows;
                /*0x78*/ nint _token;
                /*0x80*/ string _type;
                /*0x88*/ System.Security.Principal.WindowsAccountType _account;
                /*0x8c*/ bool _authenticated;
                /*0x90*/ string _name;
                /*0x98*/ System.Runtime.Serialization.SerializationInfo _info;

                static /*0x2076ac8*/ WindowsIdentity();
                static /*0x2076454*/ System.Security.Principal.WindowsIdentity GetCurrent();
                static /*0x20764f0*/ nint GetCurrentToken();
                static /*0x207665c*/ string GetTokenName(nint token);
                /*0x2076228*/ WindowsIdentity(nint userToken, string type, System.Security.Principal.WindowsAccountType acctType, bool isAuthenticated);
                /*0x20763e8*/ WindowsIdentity(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x2076414*/ void Dispose();
                /*0x20764f4*/ System.Security.Principal.WindowsImpersonationContext Impersonate();
                /*0x20765e0*/ string get_AuthenticationType();
                /*0x20765e8*/ string get_Name();
                /*0x2076660*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
                /*0x2076964*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x2076288*/ void SetToken(nint token);
            }

            class WindowsImpersonationContext : System.IDisposable
            {
                /*0x10*/ nint _token;
                /*0x18*/ bool undo;

                static /*0x2076c08*/ bool CloseToken(nint token);
                static /*0x2076b20*/ nint DuplicateToken(nint token);
                static /*0x2076b24*/ bool SetCurrentToken(nint token);
                static /*0x2076c04*/ bool RevertToSelf();
                /*0x2076554*/ WindowsImpersonationContext(nint token);
                /*0x2076b28*/ void Dispose();
                /*0x2076b38*/ void Undo();
            }
        }

        namespace Claims
        {
            class Claim
            {
                /*0x10*/ string m_issuer;
                /*0x18*/ string m_originalIssuer;
                /*0x20*/ string m_type;
                /*0x28*/ string m_value;
                /*0x30*/ string m_valueType;
                /*0x38*/ byte[] m_userSerializationData;
                /*0x40*/ System.Collections.Generic.Dictionary<string, string> m_properties;
                /*0x48*/ object m_propertyLock;
                /*0x50*/ System.Security.Claims.ClaimsIdentity m_subject;

                /*0x1614b08*/ Claim(string type, string value, string valueType, string issuer, string originalIssuer, System.Security.Claims.ClaimsIdentity subject);
                /*0x1614b2c*/ Claim(string type, string value, string valueType, string issuer, string originalIssuer, System.Security.Claims.ClaimsIdentity subject, string propertyKey, string propertyValue);
                /*0x1614eb4*/ Claim(System.Security.Claims.Claim other, System.Security.Claims.ClaimsIdentity subject);
                /*0x1615188*/ void OnDeserializedMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x1614d84*/ System.Collections.Generic.IDictionary<string, string> get_Properties();
                /*0x16151e4*/ System.Security.Claims.ClaimsIdentity get_Subject();
                /*0x16151ec*/ void set_Subject(System.Security.Claims.ClaimsIdentity value);
                /*0x16151f4*/ string get_Type();
                /*0x16151fc*/ string get_Value();
                /*0x1615204*/ System.Security.Claims.Claim Clone(System.Security.Claims.ClaimsIdentity identity);
                /*0x1615270*/ string ToString();
            }

            class ClaimsIdentity : System.Security.Principal.IIdentity
            {
                /*0x10*/ byte[] m_userSerializationData;
                /*0x18*/ System.Collections.Generic.List<System.Security.Claims.Claim> m_instanceClaims;
                /*0x20*/ System.Collections.ObjectModel.Collection<System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>> m_externalClaims;
                /*0x28*/ string m_nameType;
                /*0x30*/ string m_roleType;
                /*0x38*/ string m_version;
                /*0x40*/ System.Security.Claims.ClaimsIdentity m_actor;
                /*0x48*/ string m_authenticationType;
                /*0x50*/ object m_bootstrapContext;
                /*0x58*/ string m_label;
                /*0x60*/ string m_serializedNameType;
                /*0x68*/ string m_serializedRoleType;
                /*0x70*/ string m_serializedClaims;

                /*0x16152f4*/ ClaimsIdentity();
                /*0x1615310*/ ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
                /*0x161532c*/ ClaimsIdentity(System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType);
                /*0x1615334*/ ClaimsIdentity(System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType, bool checkAuthType);
                /*0x1615dc4*/ ClaimsIdentity(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x16166d4*/ string get_AuthenticationType();
                /*0x16166dc*/ System.Security.Claims.ClaimsIdentity get_Actor();
                /*0x16166e4*/ void set_Actor(System.Security.Claims.ClaimsIdentity value);
                /*0x1616768*/ System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> get_Claims();
                /*0x16167d4*/ string get_Name();
                /*0x16167fc*/ System.Security.Claims.ClaimsIdentity Clone();
                /*0x16159e8*/ void SafeAddClaims(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
                /*0x1615d20*/ void SafeAddClaim(System.Security.Claims.Claim claim);
                /*0x1616960*/ System.Security.Claims.Claim FindFirst(string type);
                /*0x1616cb8*/ void OnSerializingMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x1616f40*/ void OnDeserializedMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x1617308*/ void OnDeserializingMethod(System.Runtime.Serialization.StreamingContext context);
                /*0x16173dc*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x1617018*/ void DeserializeClaims(string serializedClaims);
                /*0x1616d20*/ string SerializeClaims();
                /*0x16159b0*/ bool IsCircular(System.Security.Claims.ClaimsIdentity subject);
                /*0x1615f50*/ void Deserialize(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool useContext);

                class <get_Claims>d__51 : System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<System.Security.Claims.Claim>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Security.Claims.Claim <>2__current;
                    /*0x20*/ int <>l__initialThreadId;
                    /*0x28*/ System.Security.Claims.ClaimsIdentity <>4__this;
                    /*0x30*/ int <i>5__1;
                    /*0x34*/ int <j>5__2;
                    /*0x38*/ System.Collections.Generic.IEnumerator<System.Security.Claims.Claim> <>7__wrap1;

                    /*0x180cb18*/ <get_Claims>d__51(int <>1__state);
                    /*0x180cb50*/ void System.IDisposable.Dispose();
                    /*0x180cc28*/ bool MoveNext();
                    /*0x180cb6c*/ void <>m__Finally1();
                    /*0x180cffc*/ System.Security.Claims.Claim System.Collections.Generic.IEnumerator<System.Security.Claims.Claim>.get_Current();
                    /*0x180d004*/ void System.Collections.IEnumerator.Reset();
                    /*0x180d044*/ object System.Collections.IEnumerator.get_Current();
                    /*0x180d04c*/ System.Collections.Generic.IEnumerator<System.Security.Claims.Claim> System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>.GetEnumerator();
                    /*0x180d0f4*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                }
            }
        }

        namespace Cryptography
        {
            class Aes : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x1c88c24*/ Aes();
                /*0x1c88b88*/ Aes();
            }

            class AsymmetricAlgorithm : System.IDisposable
            {
                /*0x10*/ int KeySizeValue;
                /*0x18*/ System.Security.Cryptography.KeySizes[] LegalKeySizesValue;

                /*0x1c962e0*/ AsymmetricAlgorithm();
                /*0x1c962e8*/ void Dispose();
                /*0x1c962ec*/ void Clear();
                /*0x1c96364*/ void Dispose(bool disposing);
                /*0x1c96368*/ int get_KeySize();
                /*0x1c96370*/ void set_KeySize(int value);
                /*0x1c96458*/ void FromXmlString(string xmlString);
                /*0x1c96498*/ string ToXmlString(bool includePrivateParameters);
            }

            class AsymmetricSignatureDeformatter
            {
                /*0x1c964d8*/ AsymmetricSignatureDeformatter();
            }

            class AsymmetricSignatureFormatter
            {
                /*0x1c964e0*/ AsymmetricSignatureFormatter();
            }

            enum CipherMode
            {
                CBC = 1,
                ECB = 2,
                OFB = 3,
                CFB = 4,
                CTS = 5,
            }

            enum PaddingMode
            {
                None = 1,
                PKCS7 = 2,
                Zeros = 3,
                ANSIX923 = 4,
                ISO10126 = 5,
            }

            class KeySizes
            {
                /*0x10*/ int m_minSize;
                /*0x14*/ int m_maxSize;
                /*0x18*/ int m_skipSize;

                static /*0x1a91988*/ bool IsLegalKeySize(System.Security.Cryptography.KeySizes[] legalKeys, int size);
                /*0x1a918fc*/ KeySizes(int minSize, int maxSize, int skipSize);
                /*0x1a918e4*/ int get_MinSize();
                /*0x1a918ec*/ int get_MaxSize();
                /*0x1a918f4*/ int get_SkipSize();
                /*0x1a9193c*/ bool IsLegal(int keySize);
            }

            class CryptographicException : System.SystemException
            {
                /*0x251b438*/ CryptographicException();
                /*0x251b4a8*/ CryptographicException(string message);
                /*0x251b4dc*/ CryptographicException(string format, string insert);
                /*0x251b5a0*/ CryptographicException(string message, System.Exception inner);
                /*0x251b5d4*/ CryptographicException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class CryptographicUnexpectedOperationException : System.Security.Cryptography.CryptographicException
            {
                /*0x251b5dc*/ CryptographicUnexpectedOperationException();
                /*0x25173cc*/ CryptographicUnexpectedOperationException(string message);
                /*0x251b60c*/ CryptographicUnexpectedOperationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            enum CspProviderFlags
            {
                NoFlags = 0,
                UseMachineKeyStore = 1,
                UseDefaultKeyContainer = 2,
                UseNonExportableKey = 4,
                UseExistingKey = 8,
                UseArchivableKey = 16,
                UseUserProtectedKey = 32,
                NoPrompt = 64,
                CreateEphemeralKey = 128,
            }

            class CspParameters
            {
                /*0x10*/ int ProviderType;
                /*0x18*/ string ProviderName;
                /*0x20*/ string KeyContainerName;
                /*0x28*/ int KeyNumber;
                /*0x2c*/ int m_flags;

                /*0x251b700*/ CspParameters();
                /*0x251b780*/ CspParameters(int dwTypeIn);
                /*0x251b738*/ CspParameters(int dwTypeIn, string strProviderNameIn, string strContainerNameIn);
                /*0x251b7b8*/ CspParameters(int providerType, string providerName, string keyContainerName, System.Security.Cryptography.CspProviderFlags flags);
                /*0x251b614*/ System.Security.Cryptography.CspProviderFlags get_Flags();
                /*0x251b61c*/ void set_Flags(System.Security.Cryptography.CspProviderFlags value);
            }

            enum CryptoStreamMode
            {
                Read = 0,
                Write = 1,
            }

            class CryptoStream : System.IO.Stream, System.IDisposable
            {
                /*0x28*/ System.IO.Stream _stream;
                /*0x30*/ System.Security.Cryptography.ICryptoTransform _Transform;
                /*0x38*/ byte[] _InputBuffer;
                /*0x40*/ int _InputBufferIndex;
                /*0x44*/ int _InputBlockSize;
                /*0x48*/ byte[] _OutputBuffer;
                /*0x50*/ int _OutputBufferIndex;
                /*0x54*/ int _OutputBlockSize;
                /*0x58*/ System.Security.Cryptography.CryptoStreamMode _transformMode;
                /*0x5c*/ bool _canRead;
                /*0x5d*/ bool _canWrite;
                /*0x5e*/ bool _finalBlockTransformed;

                /*0x2519780*/ CryptoStream(System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode);
                /*0x2519aa0*/ bool get_CanRead();
                /*0x2519aa8*/ bool get_CanSeek();
                /*0x2519ab0*/ bool get_CanWrite();
                /*0x2519ab8*/ long get_Length();
                /*0x2519b14*/ long get_Position();
                /*0x2519b70*/ void set_Position(long value);
                /*0x2519bcc*/ bool get_HasFlushedFinalBlock();
                /*0x2519bd4*/ void FlushFinalBlock();
                /*0x2519e10*/ void Flush();
                /*0x2519e14*/ long Seek(long offset, System.IO.SeekOrigin origin);
                /*0x2519e70*/ int Read(byte[] buffer, int offset, int count);
                /*0x251a534*/ System.Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x251a7fc*/ System.Threading.Tasks.Task<int> ReadAsyncInternal(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x251a968*/ void Write(byte[] buffer, int offset, int count);
                /*0x251aec8*/ System.Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x251b17c*/ System.Threading.Tasks.Task WriteAsyncInternal(byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
                /*0x251b2b8*/ void Clear();
                /*0x251b2c8*/ void Dispose(bool disposing);
                /*0x2519940*/ void InitializeBuffer();

                struct HopToThreadPoolAwaitable : System.Runtime.CompilerServices.INotifyCompletion
                {
                    /*0xaca96c*/ System.Security.Cryptography.CryptoStream.HopToThreadPoolAwaitable GetAwaiter();
                    /*0xaca974*/ bool get_IsCompleted();
                    /*0xaca97c*/ void OnCompleted(System.Action continuation);
                    /*0xaca980*/ void GetResult();
                }

                struct <ReadAsyncInternal>d__34 : System.Runtime.CompilerServices.IAsyncStateMachine
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<int> <>t__builder;
                    /*0x30*/ System.Security.Cryptography.CryptoStream <>4__this;
                    /*0x38*/ int count;
                    /*0x3c*/ int offset;
                    /*0x40*/ byte[] buffer;
                    /*0x48*/ System.Threading.CancellationToken cancellationToken;
                    /*0x50*/ byte[] <tempInputBuffer>5__1;
                    /*0x58*/ int <currentOutputIndex>5__2;
                    /*0x5c*/ int <bytesToDeliver>5__3;
                    /*0x60*/ System.Threading.SemaphoreSlim <sem>5__4;
                    /*0x68*/ System.Security.Cryptography.CryptoStream.HopToThreadPoolAwaitable <>u__1;
                    /*0x70*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__2;
                    /*0x80*/ int <>7__wrap1;
                    /*0x88*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<int> <>u__3;

                    /*0xaca948*/ void MoveNext();
                    /*0xaca950*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                }

                struct <WriteAsyncInternal>d__37 : System.Runtime.CompilerServices.IAsyncStateMachine
                {
                    /*0x10*/ int <>1__state;
                    /*0x18*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder <>t__builder;
                    /*0x30*/ System.Security.Cryptography.CryptoStream <>4__this;
                    /*0x38*/ int count;
                    /*0x3c*/ int offset;
                    /*0x40*/ byte[] buffer;
                    /*0x48*/ System.Threading.CancellationToken cancellationToken;
                    /*0x50*/ int <bytesToWrite>5__1;
                    /*0x54*/ int <currentInputIndex>5__2;
                    /*0x58*/ int <numWholeBlocksInBytes>5__3;
                    /*0x60*/ System.Threading.SemaphoreSlim <sem>5__4;
                    /*0x68*/ System.Security.Cryptography.CryptoStream.HopToThreadPoolAwaitable <>u__1;
                    /*0x70*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter <>u__2;

                    /*0xaca958*/ void MoveNext();
                    /*0xaca960*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                }
            }

            class DES : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x25251e4*/ DES();
                static /*0x25250c8*/ System.Security.Cryptography.DES Create();
                static /*0x2524b7c*/ bool IsWeakKey(byte[] rgbKey);
                static /*0x2524cb0*/ bool IsSemiWeakKey(byte[] rgbKey);
                static /*0x2525120*/ bool IsLegalKeySize(byte[] rgbKey);
                static /*0x2525140*/ ulong QuadWordFromBigEndian(byte[] block);
                /*0x25249e4*/ DES();
                /*0x2524a78*/ byte[] get_Key();
                /*0x2524ed0*/ void set_Key(byte[] value);
            }

            class DESCryptoServiceProvider : System.Security.Cryptography.DES
            {
                /*0x19f6ed0*/ DESCryptoServiceProvider();
                /*0x19f6fa4*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x19f7344*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x19f7490*/ void GenerateKey();
                /*0x19f7598*/ void GenerateIV();
            }

            struct DSAParameters
            {
                /*0x10*/ byte[] P;
                /*0x18*/ byte[] Q;
                /*0x20*/ byte[] G;
                /*0x28*/ byte[] Y;
                /*0x30*/ byte[] J;
                /*0x38*/ byte[] X;
                /*0x40*/ byte[] Seed;
                /*0x48*/ int Counter;
            }

            class DSA : System.Security.Cryptography.AsymmetricAlgorithm
            {
                static /*0x19f87d0*/ System.Security.Cryptography.DSA Create();
                /*0x19f87c8*/ DSA();
                /*0x19f8878*/ void FromXmlString(string xmlString);
                /*0x19f8f5c*/ string ToXmlString(bool includePrivateParameters);
                System.Security.Cryptography.DSAParameters ExportParameters(bool includePrivateParameters);
                void ImportParameters(System.Security.Cryptography.DSAParameters parameters);
            }

            class DSASignatureDeformatter : System.Security.Cryptography.AsymmetricSignatureDeformatter
            {
                /*0x10*/ string _oid;

                /*0x19fac98*/ DSASignatureDeformatter();
            }

            class DSASignatureFormatter : System.Security.Cryptography.AsymmetricSignatureFormatter
            {
                /*0x10*/ string _oid;

                /*0x19faddc*/ DSASignatureFormatter();
            }

            class HashAlgorithm : System.IDisposable, System.Security.Cryptography.ICryptoTransform
            {
                /*0x10*/ int HashSizeValue;
                /*0x18*/ byte[] HashValue;
                /*0x20*/ int State;
                /*0x24*/ bool m_bDisposed;

                /*0x20f1798*/ HashAlgorithm();
                /*0x20f17a0*/ int get_HashSize();
                /*0x20f17a8*/ byte[] get_Hash();
                /*0x20f06f8*/ byte[] ComputeHash(byte[] buffer);
                /*0x20f18bc*/ byte[] ComputeHash(byte[] buffer, int offset, int count);
                /*0x20f1ae4*/ int get_InputBlockSize();
                /*0x20f1aec*/ int get_OutputBlockSize();
                /*0x20f1af4*/ bool get_CanTransformMultipleBlocks();
                /*0x20f0aa4*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x20f0dbc*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x20f1afc*/ void Dispose();
                /*0x20f1b74*/ void Clear();
                /*0x20f1c14*/ void Dispose(bool disposing);
                void Initialize();
                void HashCore(byte[] array, int ibStart, int cbSize);
                byte[] HashFinal();
            }

            class HMAC : System.Security.Cryptography.KeyedHashAlgorithm
            {
                /*0x30*/ int blockSizeValue;
                /*0x38*/ string m_hashName;
                /*0x40*/ System.Security.Cryptography.HashAlgorithm m_hash1;
                /*0x48*/ System.Security.Cryptography.HashAlgorithm m_hash2;
                /*0x50*/ byte[] m_inner;
                /*0x58*/ byte[] m_outer;
                /*0x60*/ bool m_hashing;

                static /*0x20f092c*/ System.Security.Cryptography.HMAC Create();
                /*0x20f1170*/ HMAC();
                /*0x20f04b8*/ int get_BlockSizeValue();
                /*0x20f04c0*/ void set_BlockSizeValue(int value);
                /*0x20f04c8*/ void UpdateIOPadBuffers();
                /*0x20f0640*/ void InitializeKey(byte[] key);
                /*0x20f0848*/ byte[] get_Key();
                /*0x20f08c4*/ void set_Key(byte[] value);
                /*0x20f09cc*/ void Initialize();
                /*0x20f0a20*/ void HashCore(byte[] rgb, int ib, int cb);
                /*0x20f0c78*/ byte[] HashFinal();
                /*0x20f1008*/ void Dispose(bool disposing);
            }

            class HMACMD5 : System.Security.Cryptography.HMAC
            {
                /*0x20f1180*/ HMACMD5();
                /*0x20f11b0*/ HMACMD5(byte[] key);
            }

            class HMACRIPEMD160 : System.Security.Cryptography.HMAC
            {
                /*0x20f1270*/ HMACRIPEMD160();
                /*0x20f12a0*/ HMACRIPEMD160(byte[] key);
            }

            class HMACSHA1 : System.Security.Cryptography.HMAC
            {
                /*0x20f0998*/ HMACSHA1();
                /*0x20f1360*/ HMACSHA1(byte[] key);
                /*0x20f1368*/ HMACSHA1(byte[] key, bool useManagedSha1);
            }

            class HMACSHA256 : System.Security.Cryptography.HMAC
            {
                /*0x20f1428*/ HMACSHA256();
                /*0x20f1458*/ HMACSHA256(byte[] key);
            }

            class HMACSHA384 : System.Security.Cryptography.HMAC
            {
                /*0x61*/ bool m_useLegacyBlockSize;

                /*0x20f1518*/ HMACSHA384();
                /*0x20f1548*/ HMACSHA384(byte[] key);
                /*0x20f1634*/ int get_BlockSize();
            }

            class HMACSHA512 : System.Security.Cryptography.HMAC
            {
                /*0x61*/ bool m_useLegacyBlockSize;

                /*0x20f164c*/ HMACSHA512();
                /*0x20f167c*/ HMACSHA512(byte[] key);
                /*0x20f1768*/ int get_BlockSize();
            }

            interface ICryptoTransform : System.IDisposable
            {
                int get_InputBlockSize();
                int get_OutputBlockSize();
                bool get_CanTransformMultipleBlocks();
                int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
            }

            class KeyedHashAlgorithm : System.Security.Cryptography.HashAlgorithm
            {
                /*0x28*/ byte[] KeyValue;

                /*0x1a91ae4*/ KeyedHashAlgorithm();
                /*0x1a91aec*/ void Dispose(bool disposing);
                /*0x1a91b38*/ byte[] get_Key();
                /*0x1a91bb4*/ void set_Key(byte[] value);
            }

            class MACTripleDES : System.Security.Cryptography.KeyedHashAlgorithm
            {
                /*0x30*/ System.Security.Cryptography.ICryptoTransform m_encryptor;
                /*0x38*/ System.Security.Cryptography.CryptoStream _cs;
                /*0x40*/ System.Security.Cryptography.TailStream _ts;
                /*0x48*/ int m_bytesPerBlock;
                /*0x50*/ System.Security.Cryptography.TripleDES des;

                /*0x1a97bb4*/ MACTripleDES();
                /*0x1a97cf8*/ void Initialize();
                /*0x1a97d00*/ void HashCore(byte[] rgbData, int ibStart, int cbSize);
                /*0x1a97e70*/ byte[] HashFinal();
                /*0x1a97fc0*/ void Dispose(bool disposing);
            }

            class TailStream : System.IO.Stream
            {
                /*0x28*/ byte[] _Buffer;
                /*0x30*/ int _BufferSize;
                /*0x34*/ int _BufferIndex;
                /*0x38*/ bool _BufferFull;

                /*0x1e23f34*/ TailStream(int bufferSize);
                /*0x1e23fd0*/ void Clear();
                /*0x1e23fe0*/ void Dispose(bool disposing);
                /*0x1e24070*/ byte[] get_Buffer();
                /*0x1e240ec*/ bool get_CanRead();
                /*0x1e240f4*/ bool get_CanSeek();
                /*0x1e240fc*/ bool get_CanWrite();
                /*0x1e2410c*/ long get_Length();
                /*0x1e24168*/ long get_Position();
                /*0x1e241c4*/ void set_Position(long value);
                /*0x1e24220*/ void Flush();
                /*0x1e24224*/ long Seek(long offset, System.IO.SeekOrigin origin);
                /*0x1e24280*/ int Read(byte[] buffer, int offset, int count);
                /*0x1e242dc*/ void Write(byte[] buffer, int offset, int count);
            }

            class MD5 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x1a9181c*/ System.Security.Cryptography.MD5 Create();
                /*0x1a998a0*/ MD5();
            }

            class RandomNumberGenerator : System.IDisposable
            {
                static /*0x198b160*/ System.Security.Cryptography.RandomNumberGenerator Create();
                /*0x1987918*/ RandomNumberGenerator();
                /*0x198b1b4*/ void Dispose();
                /*0x1987c8c*/ void Dispose(bool disposing);
                void GetBytes(byte[] data);
            }

            class RC2 : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;
                /*0x44*/ int EffectiveKeySizeValue;

                static /*0x2533648*/ RC2();
                static /*0x25334a0*/ System.Security.Cryptography.RC2 Create();
                /*0x253337c*/ RC2();
                /*0x2533410*/ int get_EffectiveKeySize();
                /*0x2533428*/ int get_KeySize();
                /*0x2533430*/ void set_KeySize(int value);
            }

            class RC2CryptoServiceProvider : System.Security.Cryptography.RC2
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;
                /*0x48*/ bool m_use40bitSalt;

                static /*0x2534024*/ RC2CryptoServiceProvider();
                /*0x25334f4*/ RC2CryptoServiceProvider();
                /*0x25337ac*/ int get_EffectiveKeySize();
                /*0x25337b4*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x2533e6c*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x2533f34*/ void GenerateKey();
                /*0x2533fb4*/ void GenerateIV();
            }

            class Rijndael : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x19a0100*/ Rijndael();
                /*0x19a006c*/ Rijndael();
            }

            class RijndaelManaged : System.Security.Cryptography.Rijndael
            {
                /*0x19a0264*/ RijndaelManaged();
                /*0x19a0324*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x19a043c*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x19a0450*/ void GenerateKey();
                /*0x19a048c*/ void GenerateIV();
                /*0x19a0338*/ System.Security.Cryptography.ICryptoTransform NewEncryptor(byte[] rgbKey, System.Security.Cryptography.CipherMode mode, byte[] rgbIV, int feedbackSize, System.Security.Cryptography.RijndaelManagedTransformMode encryptMode);
            }

            enum RijndaelManagedTransformMode
            {
                Encrypt = 0,
                Decrypt = 1,
            }

            class RijndaelManagedTransform : System.Security.Cryptography.ICryptoTransform, System.IDisposable
            {
                static /*0x0*/ byte[] s_Sbox;
                static /*0x8*/ int[] s_Rcon;
                static /*0x10*/ int[] s_T;
                static /*0x18*/ int[] s_TF;
                static /*0x20*/ int[] s_iT;
                static /*0x28*/ int[] s_iTF;
                /*0x10*/ System.Security.Cryptography.CipherMode m_cipherMode;
                /*0x14*/ System.Security.Cryptography.PaddingMode m_paddingValue;
                /*0x18*/ System.Security.Cryptography.RijndaelManagedTransformMode m_transformMode;
                /*0x1c*/ int m_blockSizeBits;
                /*0x20*/ int m_blockSizeBytes;
                /*0x24*/ int m_inputBlockSize;
                /*0x28*/ int m_outputBlockSize;
                /*0x30*/ int[] m_encryptKeyExpansion;
                /*0x38*/ int[] m_decryptKeyExpansion;
                /*0x40*/ int m_Nr;
                /*0x44*/ int m_Nb;
                /*0x48*/ int m_Nk;
                /*0x50*/ int[] m_encryptindex;
                /*0x58*/ int[] m_decryptindex;
                /*0x60*/ int[] m_IV;
                /*0x68*/ int[] m_lastBlockBuffer;
                /*0x70*/ byte[] m_depadBuffer;
                /*0x78*/ byte[] m_shiftRegister;

                static /*0x19a3200*/ RijndaelManagedTransform();
                static /*0x19a31f8*/ int rot1(int val);
                static /*0x19a31f0*/ int rot2(int val);
                static /*0x19a30ec*/ int rot3(int val);
                static /*0x19a30f4*/ int SubWord(int a);
                static /*0x19a31cc*/ int MulX(int x);
                /*0x19a04c8*/ RijndaelManagedTransform(byte[] rgbKey, System.Security.Cryptography.CipherMode mode, byte[] rgbIV, int blockSize, int feedbackSize, System.Security.Cryptography.PaddingMode PaddingValue, System.Security.Cryptography.RijndaelManagedTransformMode transformMode);
                /*0x19a10b8*/ void Dispose();
                /*0x19a10c0*/ void Dispose(bool disposing);
                /*0x19a1188*/ int get_InputBlockSize();
                /*0x19a1190*/ int get_OutputBlockSize();
                /*0x19a1198*/ bool get_CanTransformMultipleBlocks();
                /*0x19a11a0*/ int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
                /*0x19a2a14*/ byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x19a2ce8*/ void Reset();
                /*0x19a146c*/ int EncryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, System.Security.Cryptography.PaddingMode paddingMode, bool fLast);
                /*0x19a1fa4*/ int DecryptData(byte[] inputBuffer, int inputOffset, int inputCount, ref byte[] outputBuffer, int outputOffset, System.Security.Cryptography.PaddingMode paddingMode, bool fLast);
                /*0x19a2d60*/ void Enc(int* encryptindex, int* encryptKeyExpansion, int* T, int* TF, int* work, int* temp);
                /*0x19a2f1c*/ void Dec(int* decryptindex, int* decryptKeyExpansion, int* iT, int* iTF, int* work, int* temp);
                /*0x19a0afc*/ void GenerateKeyExpansion(byte[] rgbKey);
            }

            class RIPEMD160 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x2534da4*/ System.Security.Cryptography.RIPEMD160 Create();
                /*0x2534d78*/ RIPEMD160();
            }

            class RIPEMD160Managed : System.Security.Cryptography.RIPEMD160
            {
                /*0x28*/ byte[] _buffer;
                /*0x30*/ long _count;
                /*0x38*/ uint[] _stateMD160;
                /*0x40*/ uint[] _blockDWords;

                static /*0x2535378*/ void MDTransform(uint* blockDWords, uint* state, byte* block);
                static /*0x2536a78*/ uint F(uint x, uint y, uint z);
                static /*0x2536a84*/ uint G(uint x, uint y, uint z);
                static /*0x2536a94*/ uint H(uint x, uint y, uint z);
                static /*0x2536aa0*/ uint I(uint x, uint y, uint z);
                static /*0x2536ab0*/ uint J(uint x, uint y, uint z);
                /*0x2534df8*/ RIPEMD160Managed();
                /*0x2534fb4*/ void Initialize();
                /*0x2535004*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x25351b8*/ byte[] HashFinal();
                /*0x2534ef4*/ void InitializeState();
                /*0x2535008*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x25351bc*/ byte[] _EndHash();
            }

            struct RSAParameters
            {
                /*0x10*/ byte[] Exponent;
                /*0x18*/ byte[] Modulus;
                /*0x20*/ byte[] P;
                /*0x28*/ byte[] Q;
                /*0x30*/ byte[] DP;
                /*0x38*/ byte[] DQ;
                /*0x40*/ byte[] InverseQ;
                /*0x48*/ byte[] D;
            }

            class RSA : System.Security.Cryptography.AsymmetricAlgorithm
            {
                static /*0x1987c98*/ System.Security.Cryptography.RSA Create();
                /*0x1987c90*/ RSA();
                /*0x1987d40*/ void FromXmlString(string xmlString);
                /*0x19882d0*/ string ToXmlString(bool includePrivateParameters);
                System.Security.Cryptography.RSAParameters ExportParameters(bool includePrivateParameters);
                void ImportParameters(System.Security.Cryptography.RSAParameters parameters);
            }

            class RSACryptoServiceProvider : System.Security.Cryptography.RSA
            {
                static /*0x0*/ System.Security.Cryptography.CspProviderFlags s_UseMachineKeyStore;
                /*0x20*/ Mono.Security.Cryptography.KeyPairPersistence store;
                /*0x28*/ bool persistKey;
                /*0x29*/ bool persisted;
                /*0x2a*/ bool privateKeyExportable;
                /*0x2b*/ bool m_disposed;
                /*0x30*/ Mono.Security.Cryptography.RSAManaged rsa;

                static /*0x1988708*/ bool get_UseMachineKeyStore();
                /*0x1987d08*/ RSACryptoServiceProvider();
                /*0x198879c*/ RSACryptoServiceProvider(System.Security.Cryptography.CspParameters parameters);
                /*0x1988760*/ RSACryptoServiceProvider(int dwKeySize);
                /*0x19887a8*/ RSACryptoServiceProvider(int dwKeySize, System.Security.Cryptography.CspParameters parameters);
                /*0x1988814*/ void Common(int dwKeySize, bool parameters);
                /*0x1988a2c*/ void Common(System.Security.Cryptography.CspParameters p);
                /*0x1988cec*/ void Finalize();
                /*0x1988d60*/ int get_KeySize();
                /*0x1988d80*/ bool get_PublicOnly();
                /*0x1988e60*/ System.Security.Cryptography.RSAParameters ExportParameters(bool includePrivateParameters);
                /*0x1988f98*/ void ImportParameters(System.Security.Cryptography.RSAParameters parameters);
                /*0x1988ff0*/ void Dispose(bool disposing);
                /*0x1989050*/ void OnKeyGenerated(object sender, System.EventArgs e);
            }

            class SHA1 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x2161ea4*/ System.Security.Cryptography.SHA1 Create();
                /*0x2161e78*/ SHA1();
            }

            class SHA1Managed : System.Security.Cryptography.SHA1
            {
                /*0x28*/ byte[] _buffer;
                /*0x30*/ long _count;
                /*0x38*/ uint[] _stateSHA1;
                /*0x40*/ uint[] _expandedBuffer;

                static /*0x2163a10*/ void SHATransform(uint* expandedBuffer, uint* state, byte* block);
                static /*0x2163e18*/ void SHAExpand(uint* x);
                /*0x2163490*/ SHA1Managed();
                /*0x216364c*/ void Initialize();
                /*0x216369c*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x2163850*/ byte[] HashFinal();
                /*0x216358c*/ void InitializeState();
                /*0x21636a0*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x2163854*/ byte[] _EndHash();
            }

            class SHA256 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x2163e80*/ System.Security.Cryptography.SHA256 Create();
                /*0x2163e54*/ SHA256();
            }

            class SHA256Managed : System.Security.Cryptography.SHA256
            {
                static /*0x0*/ uint[] _K;
                /*0x28*/ byte[] _buffer;
                /*0x30*/ long _count;
                /*0x38*/ uint[] _stateSHA256;
                /*0x40*/ uint[] _W;

                static /*0x2164d78*/ SHA256Managed();
                static /*0x2164518*/ void SHATransform(uint* expandedBuffer, uint* state, byte* block);
                static /*0x2164ca0*/ uint RotateRight(uint x, int n);
                static /*0x2164c14*/ uint Ch(uint x, uint y, uint z);
                static /*0x2164c8c*/ uint Maj(uint x, uint y, uint z);
                static /*0x2164ca8*/ uint sigma_0(uint x);
                static /*0x2164d10*/ uint sigma_1(uint x);
                static /*0x2164c24*/ uint Sigma_0(uint x);
                static /*0x2164bac*/ uint Sigma_1(uint x);
                static /*0x2164af8*/ void SHA256Expand(uint* x);
                /*0x2163ed4*/ SHA256Managed();
                /*0x21640f0*/ void Initialize();
                /*0x2164140*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x2164358*/ byte[] HashFinal();
                /*0x2163fd0*/ void InitializeState();
                /*0x2164144*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x216435c*/ byte[] _EndHash();
            }

            class SHA384 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x2164e30*/ System.Security.Cryptography.SHA384 Create();
                /*0x2164e04*/ SHA384();
            }

            class SHA384Managed : System.Security.Cryptography.SHA384
            {
                static /*0x0*/ ulong[] _K;
                /*0x28*/ byte[] _buffer;
                /*0x30*/ ulong _count;
                /*0x38*/ ulong[] _stateSHA384;
                /*0x40*/ ulong[] _W;

                static /*0x2165d60*/ SHA384Managed();
                static /*0x2165508*/ void SHATransform(ulong* expandedBuffer, ulong* state, byte* block);
                static /*0x2165c88*/ ulong RotateRight(ulong x, int n);
                static /*0x2165bfc*/ ulong Ch(ulong x, ulong y, ulong z);
                static /*0x2165c74*/ ulong Maj(ulong x, ulong y, ulong z);
                static /*0x2165c0c*/ ulong Sigma_0(ulong x);
                static /*0x2165b94*/ ulong Sigma_1(ulong x);
                static /*0x2165c90*/ ulong sigma_0(ulong x);
                static /*0x2165cf8*/ ulong sigma_1(ulong x);
                static /*0x2165ae0*/ void SHA384Expand(ulong* x);
                /*0x2164e84*/ SHA384Managed();
                /*0x21650e0*/ void Initialize();
                /*0x2165130*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x2165348*/ byte[] HashFinal();
                /*0x2164f80*/ void InitializeState();
                /*0x2165134*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x216534c*/ byte[] _EndHash();
            }

            class SHA512 : System.Security.Cryptography.HashAlgorithm
            {
                static /*0x2165e18*/ System.Security.Cryptography.SHA512 Create();
                /*0x2165dec*/ SHA512();
            }

            class SHA512Managed : System.Security.Cryptography.SHA512
            {
                static /*0x0*/ ulong[] _K;
                /*0x28*/ byte[] _buffer;
                /*0x30*/ ulong _count;
                /*0x38*/ ulong[] _stateSHA512;
                /*0x40*/ ulong[] _W;

                static /*0x2166d48*/ SHA512Managed();
                static /*0x21664f0*/ void SHATransform(ulong* expandedBuffer, ulong* state, byte* block);
                static /*0x2166c70*/ ulong RotateRight(ulong x, int n);
                static /*0x2166be4*/ ulong Ch(ulong x, ulong y, ulong z);
                static /*0x2166c5c*/ ulong Maj(ulong x, ulong y, ulong z);
                static /*0x2166bf4*/ ulong Sigma_0(ulong x);
                static /*0x2166b7c*/ ulong Sigma_1(ulong x);
                static /*0x2166c78*/ ulong sigma_0(ulong x);
                static /*0x2166ce0*/ ulong sigma_1(ulong x);
                static /*0x2166ac8*/ void SHA512Expand(ulong* x);
                /*0x2165e6c*/ SHA512Managed();
                /*0x21660c8*/ void Initialize();
                /*0x2166118*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x2166330*/ byte[] HashFinal();
                /*0x2165f68*/ void InitializeState();
                /*0x216611c*/ void _HashData(byte[] partIn, int ibStart, int cbSize);
                /*0x2166334*/ byte[] _EndHash();
            }

            class SignatureDescription
            {
                /*0x10*/ string _strKey;
                /*0x18*/ string _strDigest;
                /*0x20*/ string _strFormatter;
                /*0x28*/ string _strDeformatter;

                /*0x20585b0*/ SignatureDescription();
                /*0x20585b8*/ void set_KeyAlgorithm(string value);
                /*0x20585c0*/ void set_DigestAlgorithm(string value);
                /*0x20585c8*/ void set_FormatterAlgorithm(string value);
                /*0x20585d0*/ void set_DeformatterAlgorithm(string value);
            }

            class RSAPKCS1SignatureDescription : System.Security.Cryptography.SignatureDescription
            {
                /*0x30*/ string _hashAlgorithm;

                /*0x198a888*/ RSAPKCS1SignatureDescription(string hashAlgorithm, string digestAlgorithm);
            }

            class RSAPKCS1SHA1SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x198a824*/ RSAPKCS1SHA1SignatureDescription();
            }

            class RSAPKCS1SHA256SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x198a928*/ RSAPKCS1SHA256SignatureDescription();
            }

            class RSAPKCS1SHA384SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x198a98c*/ RSAPKCS1SHA384SignatureDescription();
            }

            class RSAPKCS1SHA512SignatureDescription : System.Security.Cryptography.RSAPKCS1SignatureDescription
            {
                /*0x198a9f0*/ RSAPKCS1SHA512SignatureDescription();
            }

            class DSASignatureDescription : System.Security.Cryptography.SignatureDescription
            {
                /*0x19fad30*/ DSASignatureDescription();
            }

            class SymmetricAlgorithm : System.IDisposable
            {
                /*0x10*/ int BlockSizeValue;
                /*0x14*/ int FeedbackSizeValue;
                /*0x18*/ byte[] IVValue;
                /*0x20*/ byte[] KeyValue;
                /*0x28*/ System.Security.Cryptography.KeySizes[] LegalBlockSizesValue;
                /*0x30*/ System.Security.Cryptography.KeySizes[] LegalKeySizesValue;
                /*0x38*/ int KeySizeValue;
                /*0x3c*/ System.Security.Cryptography.CipherMode ModeValue;
                /*0x40*/ System.Security.Cryptography.PaddingMode PaddingValue;

                static /*0x1e21814*/ System.Security.Cryptography.SymmetricAlgorithm Create(string algName);
                /*0x1e20f14*/ SymmetricAlgorithm();
                /*0x1e20f44*/ void Dispose();
                /*0x1e20fbc*/ void Clear();
                /*0x1e2105c*/ void Dispose(bool disposing);
                /*0x1e210b4*/ int get_BlockSize();
                /*0x1e210bc*/ void set_BlockSize(int value);
                /*0x1e211b4*/ int get_FeedbackSize();
                /*0x1e211bc*/ byte[] get_IV();
                /*0x1e21254*/ void set_IV(byte[] value);
                /*0x1e21394*/ byte[] get_Key();
                /*0x1e2142c*/ void set_Key(byte[] value);
                /*0x1e21620*/ System.Security.Cryptography.KeySizes[] get_LegalKeySizes();
                /*0x1e2169c*/ int get_KeySize();
                /*0x1e216a4*/ void set_KeySize(int value);
                /*0x1e21724*/ System.Security.Cryptography.CipherMode get_Mode();
                /*0x1e2172c*/ void set_Mode(System.Security.Cryptography.CipherMode value);
                /*0x1e2179c*/ System.Security.Cryptography.PaddingMode get_Padding();
                /*0x1e217a4*/ void set_Padding(System.Security.Cryptography.PaddingMode value);
                /*0x1e2156c*/ bool ValidKeySize(int bitLength);
                /*0x1e21898*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor();
                System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x1e218ec*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor();
                System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                void GenerateKey();
                void GenerateIV();
            }

            class TripleDES : System.Security.Cryptography.SymmetricAlgorithm
            {
                static /*0x0*/ System.Security.Cryptography.KeySizes[] s_legalBlockSizes;
                static /*0x8*/ System.Security.Cryptography.KeySizes[] s_legalKeySizes;

                static /*0x207aad0*/ TripleDES();
                static /*0x207a7e4*/ System.Security.Cryptography.TripleDES Create();
                static /*0x207a4c4*/ bool IsWeakKey(byte[] rgbKey);
                static /*0x207a92c*/ bool EqualBytes(byte[] rgbKey, int start1, int start2, int count);
                static /*0x207a908*/ bool IsLegalKeySize(byte[] rgbKey);
                /*0x207a354*/ TripleDES();
                /*0x207a3e8*/ byte[] get_Key();
                /*0x207a618*/ void set_Key(byte[] value);
            }

            class TripleDESCryptoServiceProvider : System.Security.Cryptography.TripleDES
            {
                /*0x207a838*/ TripleDESCryptoServiceProvider();
                /*0x207ac34*/ System.Security.Cryptography.ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x207b08c*/ System.Security.Cryptography.ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV);
                /*0x207b1a0*/ void GenerateKey();
                /*0x207b288*/ void GenerateIV();
            }

            class Utils
            {
                static /*0x0*/ System.Security.Cryptography.RNGCryptoServiceProvider _rng;

                static /*0x206f900*/ System.Security.Cryptography.RNGCryptoServiceProvider get_StaticRandomNumberGenerator();
                static /*0x206f9a0*/ byte[] GenerateRandom(int keySize);
                static /*0x206fa14*/ bool HasAlgorithm(int dwCalg, int dwKeySize);
                static /*0x206fa1c*/ string DiscardWhiteSpaces(string inputBuffer);
                static /*0x206fa38*/ string DiscardWhiteSpaces(string inputBuffer, int inputOffset, int inputCount);
                static /*0x206fbf0*/ int ConvertByteArrayToInt(byte[] input);
                static /*0x206fc5c*/ byte[] ConvertIntToByteArray(int dwInput);
                static /*0x206fd88*/ byte[] FixupKeyParity(byte[] key);
                static /*0x206fe5c*/ void DWORDFromLittleEndian(uint* x, int digits, byte* block);
                static /*0x206fea8*/ void DWORDToLittleEndian(byte[] block, uint[] x, int digits);
                static /*0x206ffa8*/ void DWORDFromBigEndian(uint* x, int digits, byte* block);
                static /*0x206fff8*/ void DWORDToBigEndian(byte[] block, uint[] x, int digits);
                static /*0x20700f8*/ void QuadWordFromBigEndian(ulong* x, int digits, byte* block);
                static /*0x2070178*/ void QuadWordToBigEndian(byte[] block, ulong[] x, int digits);
                static /*0x207033c*/ bool _ProduceLegacyHmacValues();
            }

            class CryptoConfig
            {
                static /*0x2516fb0*/ byte[] EncodeOID(string str);
                static /*0x2517418*/ byte[] EncodeLongNumber(long x);
                static /*0x25175c8*/ bool get_AllowOnlyFipsAlgorithms();
                static /*0x25175d0*/ object CreateFromName(string name);
                static /*0x25175d4*/ object CreateFromName(string name, object[] args);
                static /*0x2518fa4*/ string MapNameToOID(string name, object arg);
                static /*0x2518fa8*/ string MapNameToOID(string name);
            }

            class DESTransform : Mono.Security.Cryptography.SymmetricTransform
            {
                static /*0x0*/ int KEY_BIT_SIZE;
                static /*0x4*/ int KEY_BYTE_SIZE;
                static /*0x8*/ int BLOCK_BIT_SIZE;
                static /*0xc*/ int BLOCK_BYTE_SIZE;
                static /*0x10*/ uint[] spBoxes;
                static /*0x18*/ byte[] PC1;
                static /*0x20*/ byte[] leftRotTotal;
                static /*0x28*/ byte[] PC2;
                static /*0x30*/ uint[] ipTab;
                static /*0x38*/ uint[] fpTab;
                /*0x58*/ byte[] keySchedule;
                /*0x60*/ byte[] byteBuff;
                /*0x68*/ uint[] dwordBuff;

                static /*0x19f8598*/ DESTransform();
                static /*0x19f7d58*/ void Permutation(byte[] input, byte[] output, uint[] permTab, bool preSwap);
                static /*0x19f80b0*/ void BSwap(byte[] byteBuff);
                static /*0x19f7608*/ byte[] GetStrongKey();
                /*0x19f70f0*/ DESTransform(System.Security.Cryptography.SymmetricAlgorithm symmAlgo, bool encryption, byte[] key, byte[] iv);
                /*0x19f7b14*/ uint CipherFunct(uint r, int n);
                /*0x19f770c*/ void SetKey(byte[] key);
                /*0x19f8134*/ void ProcessBlock(byte[] input, byte[] output);
                /*0x19f84e8*/ void ECB(byte[] input, byte[] output);
            }

            class DSACryptoServiceProvider : System.Security.Cryptography.DSA
            {
                static /*0x0*/ bool useMachineKeyStore;
                /*0x20*/ Mono.Security.Cryptography.KeyPairPersistence store;
                /*0x28*/ bool persistKey;
                /*0x29*/ bool persisted;
                /*0x2a*/ bool privateKeyExportable;
                /*0x2b*/ bool m_disposed;
                /*0x30*/ Mono.Security.Cryptography.DSAManaged dsa;

                /*0x19f8840*/ DSACryptoServiceProvider();
                /*0x19f93d4*/ DSACryptoServiceProvider(int dwKeySize);
                /*0x19f9410*/ void Common(int dwKeySize, bool parameters);
                /*0x19f97bc*/ void Finalize();
                /*0x19f9830*/ int get_KeySize();
                /*0x19f9850*/ bool get_PublicOnly();
                /*0x19f98ec*/ System.Security.Cryptography.DSAParameters ExportParameters(bool includePrivateParameters);
                /*0x19f999c*/ void ImportParameters(System.Security.Cryptography.DSAParameters parameters);
                /*0x19f99f4*/ void Dispose(bool disposing);
                /*0x19f9a54*/ void OnKeyGenerated(object sender, System.EventArgs e);
            }

            class MD5CryptoServiceProvider : System.Security.Cryptography.MD5
            {
                static /*0x0*/ uint[] K;
                /*0x28*/ uint[] _H;
                /*0x30*/ uint[] buff;
                /*0x38*/ ulong count;
                /*0x40*/ byte[] _ProcessingBuffer;
                /*0x48*/ int _ProcessingBufferCount;

                static /*0x1a9ac58*/ MD5CryptoServiceProvider();
                /*0x1a998cc*/ MD5CryptoServiceProvider();
                /*0x1a99978*/ void Finalize();
                /*0x1a999f0*/ void Dispose(bool disposing);
                /*0x1a99a64*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x1a9a81c*/ byte[] HashFinal();
                /*0x1a9aab8*/ void Initialize();
                /*0x1a99b68*/ void ProcessBlock(byte[] inputBuffer, int inputOffset);
                /*0x1a9a908*/ void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x1a9ab5c*/ void AddLength(ulong length, byte[] buffer, int position);
            }

            class RC2Transform : Mono.Security.Cryptography.SymmetricTransform
            {
                static /*0x0*/ byte[] pitable;
                /*0x58*/ ushort R0;
                /*0x5a*/ ushort R1;
                /*0x5c*/ ushort R2;
                /*0x5e*/ ushort R3;
                /*0x60*/ ushort[] K;
                /*0x68*/ int j;

                static /*0x2534a4c*/ RC2Transform();
                /*0x253387c*/ RC2Transform(System.Security.Cryptography.RC2 rc2Algo, bool encryption, byte[] key, byte[] iv);
                /*0x2534110*/ void ECB(byte[] input, byte[] output);
            }

            class RNGCryptoServiceProvider : System.Security.Cryptography.RandomNumberGenerator
            {
                static /*0x0*/ object _lock;
                /*0x10*/ nint _handle;

                static /*0x1987820*/ RNGCryptoServiceProvider();
                static /*0x198789c*/ bool RngOpen();
                static /*0x1987920*/ nint RngInitialize(byte[] seed);
                static /*0x19879c4*/ nint RngGetBytes(nint handle, byte[] data);
                static /*0x19879c8*/ void RngClose(nint handle);
                /*0x19878a0*/ RNGCryptoServiceProvider();
                /*0x1987924*/ void Check();
                /*0x19879cc*/ void GetBytes(byte[] data);
                /*0x1987bb0*/ void Finalize();
                /*0x1987c88*/ void Dispose(bool disposing);
            }

            class RSAPKCS1SignatureDeformatter : System.Security.Cryptography.AsymmetricSignatureDeformatter
            {
                /*0x198aa54*/ RSAPKCS1SignatureDeformatter();
            }

            class RSAPKCS1SignatureFormatter : System.Security.Cryptography.AsymmetricSignatureFormatter
            {
                /*0x198aa5c*/ RSAPKCS1SignatureFormatter();
            }

            class SHA1Internal
            {
                /*0x10*/ uint[] _H;
                /*0x18*/ ulong count;
                /*0x20*/ byte[] _ProcessingBuffer;
                /*0x28*/ int _ProcessingBufferCount;
                /*0x30*/ uint[] buff;

                static /*0x2162a6c*/ void InitialiseBuff(uint[] buff, byte[] input, uint inputOffset);
                static /*0x2163154*/ void FillBuff(uint[] buff);
                /*0x2161f64*/ SHA1Internal();
                /*0x21620a4*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x21621c8*/ byte[] HashFinal();
                /*0x21622d0*/ void Initialize();
                /*0x2162394*/ void ProcessBlock(byte[] inputBuffer, uint inputOffset);
                /*0x21628b8*/ void ProcessFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount);
                /*0x2163394*/ void AddLength(ulong length, byte[] buffer, int position);
            }

            class SHA1CryptoServiceProvider : System.Security.Cryptography.SHA1
            {
                /*0x28*/ System.Security.Cryptography.SHA1Internal sha;

                /*0x2161ef8*/ SHA1CryptoServiceProvider();
                /*0x2161ffc*/ void Finalize();
                /*0x2162074*/ void Dispose(bool disposing);
                /*0x2162080*/ void HashCore(byte[] rgb, int ibStart, int cbSize);
                /*0x21621a8*/ byte[] HashFinal();
                /*0x21622b8*/ void Initialize();
            }

            class TripleDESTransform : Mono.Security.Cryptography.SymmetricTransform
            {
                /*0x58*/ System.Security.Cryptography.DESTransform E1;
                /*0x60*/ System.Security.Cryptography.DESTransform D2;
                /*0x68*/ System.Security.Cryptography.DESTransform E3;
                /*0x70*/ System.Security.Cryptography.DESTransform D1;
                /*0x78*/ System.Security.Cryptography.DESTransform E2;
                /*0x80*/ System.Security.Cryptography.DESTransform D3;

                static /*0x207b2f8*/ byte[] GetStrongKey();
                /*0x207ad48*/ TripleDESTransform(System.Security.Cryptography.TripleDES algo, bool encryption, byte[] key, byte[] iv);
                /*0x207b3b8*/ void ECB(byte[] input, byte[] output);
            }

            namespace X509Certificates
            {
                enum X509KeyStorageFlags
                {
                    DefaultKeySet = 0,
                    UserKeySet = 1,
                    MachineKeySet = 2,
                    Exportable = 4,
                    UserProtected = 8,
                    PersistKeySet = 16,
                    EphemeralKeySet = 32,
                }

                enum OidGroup
                {
                    AllGroups = 0,
                    HashAlgorithm = 1,
                    EncryptionAlgorithm = 2,
                    PublicKeyAlgorithm = 3,
                    SignatureAlgorithm = 4,
                    Attribute = 5,
                    ExtensionOrAttribute = 6,
                    EnhancedKeyUsage = 7,
                    Policy = 8,
                    Template = 9,
                    KeyDerivationFunction = 10,
                    DisableSearchDS = -2147483648,
                }

                interface INativeCertificateHelper
                {
                }

                class X509Certificate : System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable, System.IDisposable
                {
                    /*0x10*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl impl;
                    /*0x18*/ bool hideDates;
                    /*0x20*/ string issuer_name;
                    /*0x28*/ string subject_name;

                    /*0x2261634*/ X509Certificate(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    /*0x2261c68*/ X509Certificate();
                    /*0x2261c70*/ X509Certificate(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x226178c*/ void ImportHandle(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    /*0x22617c4*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl get_Impl();
                    /*0x2261838*/ bool get_IsValid();
                    /*0x2261864*/ bool Equals(System.Security.Cryptography.X509Certificates.X509Certificate other);
                    /*0x226192c*/ byte[] GetCertHash();
                    /*0x226199c*/ string GetCertHashString();
                    /*0x2261ac8*/ int GetHashCode();
                    /*0x2261b20*/ byte[] GetRawCertData();
                    /*0x2261b58*/ byte[] GetSerialNumber();
                    /*0x2261b94*/ string GetSerialNumberString();
                    /*0x2261bf8*/ string ToString();
                    /*0x2261c00*/ string ToString(bool fVerbose);
                    /*0x2261d90*/ string get_Issuer();
                    /*0x2261ddc*/ string get_Subject();
                    /*0x2261e28*/ bool Equals(object obj);
                    /*0x2261ecc*/ void Import(byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
                    /*0x2262040*/ void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
                    /*0x2262044*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x226210c*/ void Dispose();
                    /*0x2262120*/ void Dispose(bool disposing);
                    /*0x2262138*/ void Reset();
                }

                class X509CertificateImpl : System.IDisposable
                {
                    /*0x10*/ byte[] cachedCertificateHash;

                    /*0x226271c*/ X509CertificateImpl();
                    bool get_IsValid();
                    /*0x22623d8*/ void ThrowIfContextInvalid();
                    System.Security.Cryptography.X509Certificates.X509CertificateImpl Clone();
                    string GetIssuerName(bool legacyV1Mode);
                    string GetSubjectName(bool legacyV1Mode);
                    byte[] GetRawCertData();
                    System.DateTime GetValidFrom();
                    System.DateTime GetValidUntil();
                    /*0x226195c*/ byte[] GetCertHash();
                    byte[] GetCertHash(bool lazy);
                    /*0x22624a4*/ int GetHashCode();
                    bool Equals(System.Security.Cryptography.X509Certificates.X509CertificateImpl other, ref bool result);
                    byte[] GetSerialNumber();
                    string ToString(bool full);
                    /*0x2262510*/ bool Equals(object obj);
                    /*0x226216c*/ void Dispose();
                    /*0x226269c*/ void Dispose(bool disposing);
                    /*0x22626a4*/ void Finalize();
                }

                class X509CertificateImplMono : System.Security.Cryptography.X509Certificates.X509CertificateImpl
                {
                    /*0x18*/ Mono.Security.X509.X509Certificate x509;

                    /*0x2262724*/ X509CertificateImplMono(Mono.Security.X509.X509Certificate x509);
                    /*0x2262750*/ bool get_IsValid();
                    /*0x2262760*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl Clone();
                    /*0x22627cc*/ string GetIssuerName(bool legacyV1Mode);
                    /*0x2262894*/ string GetSubjectName(bool legacyV1Mode);
                    /*0x226295c*/ byte[] GetRawCertData();
                    /*0x2262990*/ byte[] GetCertHash(bool lazy);
                    /*0x22629e8*/ System.DateTime GetValidFrom();
                    /*0x2262a1c*/ System.DateTime GetValidUntil();
                    /*0x2262a50*/ bool Equals(System.Security.Cryptography.X509Certificates.X509CertificateImpl other, ref bool result);
                    /*0x2262a5c*/ byte[] GetSerialNumber();
                    /*0x2262a90*/ string ToString(bool full);
                    /*0x2262cc8*/ void Dispose(bool disposing);
                }

                class X509Helper
                {
                    static /*0x0*/ System.Security.Cryptography.X509Certificates.INativeCertificateHelper nativeHelper;

                    static /*0x226348c*/ void InstallNativeHelper(System.Security.Cryptography.X509Certificates.INativeCertificateHelper helper);
                    static /*0x22634f4*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(byte[] rawData);
                    static /*0x22616b4*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl InitFromCertificate(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    static /*0x2261850*/ bool IsValid(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    static /*0x22617ec*/ void ThrowIfContextInvalid(System.Security.Cryptography.X509Certificates.X509CertificateImpl impl);
                    static /*0x2262420*/ System.Exception GetInvalidContextException();
                    static /*0x22636cc*/ Mono.Security.X509.X509Certificate ImportPkcs12(byte[] rawData, string password);
                    static /*0x2263a94*/ byte[] PEM(string type, byte[] data);
                    static /*0x2263bd4*/ byte[] ConvertData(byte[] data);
                    static /*0x22634f8*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl ImportCore(byte[] rawData);
                    static /*0x2261f1c*/ System.Security.Cryptography.X509Certificates.X509CertificateImpl Import(byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
                    static /*0x22619b8*/ string ToHexString(byte[] data);
                }
            }
        }
    }

    namespace Runtime
    {
        namespace Versioning
        {
            class TargetFrameworkAttribute : System.Attribute
            {
                /*0x10*/ string _frameworkName;
                /*0x18*/ string _frameworkDisplayName;

                /*0x1e24cdc*/ TargetFrameworkAttribute(string frameworkName);
                /*0x1e24d54*/ void set_FrameworkDisplayName(string value);
            }

            class BinaryCompatibility
            {
                static /*0x0*/ bool TargetsAtLeast_Desktop_V4_5;
                static /*0x1*/ bool TargetsAtLeast_Desktop_V4_5_1;

                static /*0x1c5354c*/ BinaryCompatibility();
                static /*0x1c53544*/ bool get_TargetsAtLeast_Desktop_V4_5_2();
            }
        }

        namespace Serialization
        {
            class DeserializationEventHandler : System.MulticastDelegate
            {
                /*0x204048c*/ DeserializationEventHandler(object object, nint method);
                /*0x20404ec*/ void Invoke(object sender);
                /*0x2040864*/ System.IAsyncResult BeginInvoke(object sender, System.AsyncCallback callback, object object);
                /*0x2040888*/ void EndInvoke(System.IAsyncResult result);
            }

            class SerializationEventHandler : System.MulticastDelegate
            {
                /*0x2054028*/ SerializationEventHandler(object object, nint method);
                /*0x2054088*/ void Invoke(System.Runtime.Serialization.StreamingContext context);
                /*0x20542ec*/ System.IAsyncResult BeginInvoke(System.Runtime.Serialization.StreamingContext context, System.AsyncCallback callback, object object);
                /*0x2054374*/ void EndInvoke(System.IAsyncResult result);
            }

            class FormatterConverter : System.Runtime.Serialization.IFormatterConverter
            {
                /*0x20e6f30*/ FormatterConverter();
                /*0x20e6f38*/ object Convert(object value, System.Type type);
                /*0x20e7038*/ bool ToBoolean(object value);
                /*0x20e7128*/ int ToInt32(object value);
                /*0x20e7218*/ long ToInt64(object value);
                /*0x20e7308*/ float ToSingle(object value);
                /*0x20e73f8*/ string ToString(object value);
            }

            class FormatterServices
            {
                static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<System.Runtime.Serialization.MemberHolder, System.Reflection.MemberInfo[]> m_MemberInfoTable;
                static /*0x8*/ bool unsafeTypeForwardersIsEnabled;
                static /*0x9*/ bool unsafeTypeForwardersIsEnabledInitialized;
                static /*0x10*/ System.Type[] advancedTypes;
                static /*0x18*/ System.Reflection.Binder s_binder;

                static /*0x20e74f0*/ FormatterServices();
                static /*0x20e767c*/ System.Reflection.MemberInfo[] GetSerializableMembers(System.RuntimeType type);
                static /*0x20e7820*/ bool CheckSerializable(System.RuntimeType type);
                static /*0x20e7840*/ System.Reflection.MemberInfo[] InternalGetSerializableMembers(System.RuntimeType type);
                static /*0x20e7f48*/ bool GetParentTypes(System.RuntimeType parentType, ref System.RuntimeType[] parentTypes, ref int parentTypeCount);
                static /*0x20e82b0*/ System.Reflection.MemberInfo[] GetSerializableMembers(System.Type type, System.Runtime.Serialization.StreamingContext context);
                static /*0x20e855c*/ object GetUninitializedObject(System.Type type);
                static /*0x20e872c*/ object nativeGetUninitializedObject(System.RuntimeType type);
                static /*0x20e8734*/ bool GetEnableUnsafeTypeForwarders();
                static /*0x20e873c*/ bool UnsafeTypeForwardersIsEnabled();
                static /*0x20e8800*/ void SerializationSetValue(System.Reflection.MemberInfo fi, object target, object value);
                static /*0x20e89e4*/ object PopulateObjectMembers(object obj, System.Reflection.MemberInfo[] members, object[] data);
                static /*0x20e8cf0*/ object[] GetObjectData(object obj, System.Reflection.MemberInfo[] members);
                static /*0x20e904c*/ System.Type GetTypeFromAssembly(System.Reflection.Assembly assem, string name);
                static /*0x20e90e8*/ System.Reflection.Assembly LoadAssemblyFromString(string assemblyName);
                static /*0x20e90f0*/ System.Reflection.Assembly LoadAssemblyFromStringNoThrow(string assemblyName);
                static /*0x20e91d0*/ string GetClrAssemblyName(System.Type type, ref bool hasTypeForwardedFrom);
                static /*0x20e9354*/ string GetClrTypeFullName(System.Type type);
                static /*0x20e93f4*/ string GetClrTypeFullNameForArray(System.Type type);
                static /*0x20e963c*/ string GetClrTypeFullNameForNonArrayTypes(System.Type type);

                class <>c__DisplayClass9_0
                {
                    /*0x10*/ System.Type type;

                    /*0x181258c*/ <>c__DisplayClass9_0();
                    /*0x1812594*/ System.Reflection.MemberInfo[] <GetSerializableMembers>b__0(System.Runtime.Serialization.MemberHolder _);
                }
            }

            class SurrogateForCyclicalReference
            {
            }

            interface IDeserializationCallback
            {
                void OnDeserialization(object sender);
            }

            interface IFormatterConverter
            {
                object Convert(object value, System.Type type);
                bool ToBoolean(object value);
                int ToInt32(object value);
                long ToInt64(object value);
                float ToSingle(object value);
                string ToString(object value);
            }

            interface IObjectReference
            {
                object GetRealObject(System.Runtime.Serialization.StreamingContext context);
            }

            interface ISerializable
            {
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            interface ISerializationSurrogate
            {
                void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ISurrogateSelector selector);
            }

            interface ISurrogateSelector
            {
                System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(System.Type type, System.Runtime.Serialization.StreamingContext context, ref System.Runtime.Serialization.ISurrogateSelector selector);
            }

            class MemberHolder
            {
                /*0x10*/ System.Type memberType;
                /*0x18*/ System.Runtime.Serialization.StreamingContext context;

                /*0x1c15098*/ MemberHolder(System.Type type, System.Runtime.Serialization.StreamingContext ctx);
                /*0x1c150d8*/ int GetHashCode();
                /*0x1c150f8*/ bool Equals(object obj);
            }

            class ObjectIDGenerator
            {
                static /*0x0*/ int[] sizes;
                /*0x10*/ int m_currentCount;
                /*0x14*/ int m_currentSize;
                /*0x18*/ long[] m_ids;
                /*0x20*/ object[] m_objs;

                static /*0x22b3950*/ ObjectIDGenerator();
                /*0x22b3234*/ ObjectIDGenerator();
                /*0x22b3314*/ int FindElement(object obj, ref bool found);
                /*0x22b33ec*/ long GetId(object obj, ref bool firstTime);
                /*0x22b386c*/ long HasId(object obj, ref bool firstTime);
                /*0x22b3590*/ void Rehash();
            }

            class ObjectManager
            {
                /*0x10*/ System.Runtime.Serialization.DeserializationEventHandler m_onDeserializationHandler;
                /*0x18*/ System.Runtime.Serialization.SerializationEventHandler m_onDeserializedHandler;
                /*0x20*/ System.Runtime.Serialization.ObjectHolder[] m_objects;
                /*0x28*/ object m_topObject;
                /*0x30*/ System.Runtime.Serialization.ObjectHolderList m_specialFixupObjects;
                /*0x38*/ long m_fixupCount;
                /*0x40*/ System.Runtime.Serialization.ISurrogateSelector m_selector;
                /*0x48*/ System.Runtime.Serialization.StreamingContext m_context;

                static /*0x22b54b8*/ System.Reflection.RuntimeConstructorInfo GetConstructor(System.RuntimeType t);
                /*0x22b39e0*/ ObjectManager(System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context, bool checkSecurity, bool isCrossAppDomain);
                /*0x22b3a58*/ bool CanCallGetType(object obj);
                /*0x22b3a60*/ void set_TopObject(object value);
                /*0x22b3a68*/ object get_TopObject();
                /*0x22b3a70*/ System.Runtime.Serialization.ObjectHolderList get_SpecialFixupObjects();
                /*0x22b3ad8*/ System.Runtime.Serialization.ObjectHolder FindObjectHolder(long objectID);
                /*0x22b227c*/ System.Runtime.Serialization.ObjectHolder FindOrCreateObjectHolder(long objectID);
                /*0x22b3b3c*/ void AddObjectHolder(System.Runtime.Serialization.ObjectHolder holder);
                /*0x22b3c80*/ bool GetCompletionInfo(System.Runtime.Serialization.FixupHolder fixup, ref System.Runtime.Serialization.ObjectHolder holder, ref object member, bool bThrowIfMissing);
                /*0x22b3f40*/ void FixupSpecialObject(System.Runtime.Serialization.ObjectHolder holder);
                /*0x22b4ab4*/ bool ResolveObjectReference(System.Runtime.Serialization.ObjectHolder holder);
                /*0x22b4434*/ bool DoValueTypeFixup(System.Reflection.FieldInfo memberToFix, System.Runtime.Serialization.ObjectHolder holder, object value);
                /*0x22b27f4*/ void CompleteObject(System.Runtime.Serialization.ObjectHolder holder, bool bObjectFullyComplete);
                /*0x22b49c8*/ void DoNewlyRegisteredObjectFixups(System.Runtime.Serialization.ObjectHolder holder);
                /*0x22b4d38*/ object GetObject(long objectID);
                /*0x22b4dec*/ void RegisterString(string obj, long objectID, System.Runtime.Serialization.SerializationInfo info, long idOfContainingObj, System.Reflection.MemberInfo member);
                /*0x22b4ee8*/ void RegisterObject(object obj, long objectID, System.Runtime.Serialization.SerializationInfo info, long idOfContainingObj, System.Reflection.MemberInfo member, int[] arrayIndex);
                /*0x22b41ac*/ void CompleteISerializableObject(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x22b55f8*/ void DoFixups();
                /*0x22b5904*/ void RegisterFixup(System.Runtime.Serialization.FixupHolder fixup, long objectToBeFixed, long objectRequired);
                /*0x22b59e4*/ void RecordFixup(long objectToBeFixed, System.Reflection.MemberInfo member, long objectRequired);
                /*0x22b5c74*/ void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired);
                /*0x22b5dd4*/ void RecordArrayElementFixup(long arrayToBeFixed, int[] indices, long objectRequired);
                /*0x22b5f34*/ void RaiseDeserializationEvent();
                /*0x22b5f80*/ void AddOnDeserialization(System.Runtime.Serialization.DeserializationEventHandler handler);
                /*0x22b5ffc*/ void AddOnDeserialized(object obj);
                /*0x22b60a0*/ void RaiseOnDeserializedEvent(object obj);
                /*0x22b613c*/ void RaiseOnDeserializingEvent(object obj);
            }

            class ObjectHolder
            {
                /*0x10*/ object m_object;
                /*0x18*/ long m_id;
                /*0x20*/ int m_missingElementsRemaining;
                /*0x24*/ int m_missingDecendents;
                /*0x28*/ System.Runtime.Serialization.SerializationInfo m_serInfo;
                /*0x30*/ System.Runtime.Serialization.ISerializationSurrogate m_surrogate;
                /*0x38*/ System.Runtime.Serialization.FixupHolderList m_missingElements;
                /*0x40*/ System.Runtime.Serialization.LongList m_dependentObjects;
                /*0x48*/ System.Runtime.Serialization.ObjectHolder m_next;
                /*0x50*/ int m_flags;
                /*0x54*/ bool m_markForFixupWhenAvailable;
                /*0x58*/ System.Runtime.Serialization.ValueTypeFixupInfo m_valueFixup;
                /*0x60*/ System.Runtime.Serialization.TypeLoadExceptionHolder m_typeLoad;
                /*0x68*/ bool m_reachable;

                /*0x22b1d24*/ ObjectHolder(long objID);
                /*0x22b1e70*/ ObjectHolder(object obj, long objID, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, long idOfContainingObj, System.Reflection.FieldInfo field, int[] arrayIndex);
                /*0x22b1d90*/ ObjectHolder(string obj, long objID, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, long idOfContainingObj, System.Reflection.FieldInfo field, int[] arrayIndex);
                /*0x22b20e4*/ void IncrementDescendentFixups(int amount);
                /*0x22b20f4*/ void DecrementFixupsRemaining(System.Runtime.Serialization.ObjectManager manager);
                /*0x22b2188*/ void RemoveDependency(long id);
                /*0x22b21a4*/ void AddFixup(System.Runtime.Serialization.FixupHolder fixup, System.Runtime.Serialization.ObjectManager manager);
                /*0x22b2124*/ void UpdateDescendentDependencyChain(int amount, System.Runtime.Serialization.ObjectManager manager);
                /*0x22b2340*/ void AddDependency(long dependentObject);
                /*0x22b23c4*/ void UpdateData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.ISerializationSurrogate surrogate, long idOfContainer, System.Reflection.FieldInfo field, int[] arrayIndex, System.Runtime.Serialization.ObjectManager manager);
                /*0x22b262c*/ void MarkForCompletionWhenAvailable();
                /*0x22b2028*/ void SetFlags();
                /*0x22b2638*/ bool get_IsIncompleteObjectReference();
                /*0x22b2644*/ void set_IsIncompleteObjectReference(bool value);
                /*0x22b2660*/ bool get_RequiresDelayedFixup();
                /*0x22b2118*/ bool get_RequiresValueTypeFixup();
                /*0x22b2670*/ bool get_ValueTypeFixupPerformed();
                /*0x22b26a8*/ void set_ValueTypeFixupPerformed(bool value);
                /*0x22b26bc*/ bool get_HasISerializable();
                /*0x22b26c8*/ bool get_HasSurrogate();
                /*0x22b26d4*/ bool get_CanSurrogatedObjectValueChange();
                /*0x22b2784*/ bool get_CanObjectValueChange();
                /*0x22b27a4*/ int get_DirectlyDependentObjects();
                /*0x22b27ac*/ int get_TotalDependentObjects();
                /*0x22b27b8*/ bool get_Reachable();
                /*0x22b27c0*/ void set_Reachable(bool value);
                /*0x22b27cc*/ bool get_TypeLoadExceptionReachable();
                /*0x22b27dc*/ System.Runtime.Serialization.TypeLoadExceptionHolder get_TypeLoadException();
                /*0x22b27e4*/ void set_TypeLoadException(System.Runtime.Serialization.TypeLoadExceptionHolder value);
                /*0x22b27ec*/ object get_ObjectValue();
                /*0x22b2560*/ void SetObjectValue(object obj, System.Runtime.Serialization.ObjectManager manager);
                /*0x22b2e58*/ System.Runtime.Serialization.SerializationInfo get_SerializationInfo();
                /*0x22b2e60*/ void set_SerializationInfo(System.Runtime.Serialization.SerializationInfo value);
                /*0x22b2e68*/ System.Runtime.Serialization.ISerializationSurrogate get_Surrogate();
                /*0x22b2e70*/ System.Runtime.Serialization.LongList get_DependentObjects();
                /*0x22b2e78*/ void set_DependentObjects(System.Runtime.Serialization.LongList value);
                /*0x22b2e80*/ bool get_RequiresSerInfoFixup();
                /*0x22b2e9c*/ void set_RequiresSerInfoFixup(bool value);
                /*0x22b2eb8*/ System.Runtime.Serialization.ValueTypeFixupInfo get_ValueFixup();
                /*0x22b2ec0*/ bool get_CompletelyFixed();
                /*0x22b2264*/ long get_ContainerID();
            }

            class FixupHolder
            {
                /*0x10*/ long m_id;
                /*0x18*/ object m_fixupInfo;
                /*0x20*/ int m_fixupType;

                /*0x20e6c50*/ FixupHolder(long id, object fixupInfo, int fixupType);
            }

            class FixupHolderList
            {
                /*0x10*/ System.Runtime.Serialization.FixupHolder[] m_values;
                /*0x18*/ int m_count;

                /*0x20e6c90*/ FixupHolderList();
                /*0x20e6c98*/ FixupHolderList(int startingSize);
                /*0x20e6d08*/ void Add(System.Runtime.Serialization.FixupHolder fixup);
                /*0x20e6dbc*/ void EnlargeArray();
            }

            class LongList
            {
                /*0x10*/ long[] m_values;
                /*0x18*/ int m_count;
                /*0x1c*/ int m_totalItems;
                /*0x20*/ int m_currentItem;

                /*0x1a976a4*/ LongList();
                /*0x1a976ac*/ LongList(int startingSize);
                /*0x1a9771c*/ void Add(long value);
                /*0x1a97834*/ int get_Count();
                /*0x1a9783c*/ void StartEnumeration();
                /*0x1a97848*/ bool MoveNext();
                /*0x1a978b0*/ long get_Current();
                /*0x1a978f0*/ bool RemoveElement(long value);
                /*0x1a977a8*/ void EnlargeArray();
            }

            class ObjectHolderList
            {
                /*0x10*/ System.Runtime.Serialization.ObjectHolder[] m_values;
                /*0x18*/ int m_count;

                /*0x22b2ee4*/ ObjectHolderList();
                /*0x22b2eec*/ ObjectHolderList(int startingSize);
                /*0x22b2f50*/ void Add(System.Runtime.Serialization.ObjectHolder value);
                /*0x22b3090*/ System.Runtime.Serialization.ObjectHolderListEnumerator GetFixupEnumerator();
                /*0x22b3004*/ void EnlargeArray();
                /*0x22b3128*/ int get_Version();
                /*0x22b3130*/ int get_Count();
            }

            class ObjectHolderListEnumerator
            {
                /*0x10*/ bool m_isFixupEnumerator;
                /*0x18*/ System.Runtime.Serialization.ObjectHolderList m_list;
                /*0x20*/ int m_startingVersion;
                /*0x24*/ int m_currPos;

                /*0x22b30fc*/ ObjectHolderListEnumerator(System.Runtime.Serialization.ObjectHolderList list, bool isFixupEnumerator);
                /*0x22b3138*/ bool MoveNext();
                /*0x22b31ec*/ System.Runtime.Serialization.ObjectHolder get_Current();
            }

            class TypeLoadExceptionHolder
            {
                /*0x10*/ string m_typeName;

                /*0x20813f4*/ TypeLoadExceptionHolder(string typeName);
                /*0x2081420*/ string get_TypeName();
            }

            class SafeSerializationEventArgs : System.EventArgs
            {
                /*0x10*/ System.Runtime.Serialization.StreamingContext m_streamingContext;
                /*0x20*/ System.Collections.Generic.List<object> m_serializedStates;

                /*0x204ca48*/ SafeSerializationEventArgs(System.Runtime.Serialization.StreamingContext streamingContext);
                /*0x204cb04*/ System.Collections.Generic.IList<object> get_SerializedStates();
            }

            interface ISafeSerializationData
            {
                void CompleteDeserialization(object deserialized);
            }

            class SafeSerializationManager : System.Runtime.Serialization.IObjectReference, System.Runtime.Serialization.ISerializable
            {
                static string RealTypeSerializationName = "CLR_SafeSerializationManager_RealType";
                /*0x10*/ System.Collections.Generic.IList<object> m_serializedStates;
                /*0x18*/ System.Runtime.Serialization.SerializationInfo m_savedSerializationInfo;
                /*0x20*/ object m_realObject;
                /*0x28*/ System.RuntimeType m_realType;
                /*0x30*/ System.EventHandler<System.Runtime.Serialization.SafeSerializationEventArgs> SerializeObjectState;

                /*0x204cb0c*/ SafeSerializationManager();
                /*0x204cb14*/ SafeSerializationManager(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x204d04c*/ bool get_IsActive();
                /*0x204d05c*/ void CompleteSerialization(object serializedObject, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x204d3c0*/ void CompleteDeserialization(object deserializedObject);
                /*0x204d744*/ void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x204d800*/ object System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x204dae8*/ void OnDeserialized(System.Runtime.Serialization.StreamingContext context);
            }

            class OptionalFieldAttribute : System.Attribute
            {
                /*0x10*/ int versionAdded;

                /*0x214a8a4*/ OptionalFieldAttribute();
                /*0x214a8b4*/ void set_VersionAdded(int value);
            }

            class OnSerializingAttribute : System.Attribute
            {
                /*0x214562c*/ OnSerializingAttribute();
            }

            class OnSerializedAttribute : System.Attribute
            {
            }

            class OnDeserializingAttribute : System.Attribute
            {
                /*0x2145624*/ OnDeserializingAttribute();
            }

            class OnDeserializedAttribute : System.Attribute
            {
                /*0x214561c*/ OnDeserializedAttribute();
            }

            class SerializationBinder
            {
                /*0x2054004*/ SerializationBinder();
                /*0x2053ff8*/ void BindToName(System.Type serializedType, ref string assemblyName, ref string typeName);
                System.Type BindToType(string assemblyName, string typeName);
            }

            class SerializationEvents
            {
                /*0x10*/ System.Collections.Generic.List<System.Reflection.MethodInfo> m_OnSerializingMethods;
                /*0x18*/ System.Collections.Generic.List<System.Reflection.MethodInfo> m_OnSerializedMethods;
                /*0x20*/ System.Collections.Generic.List<System.Reflection.MethodInfo> m_OnDeserializingMethods;
                /*0x28*/ System.Collections.Generic.List<System.Reflection.MethodInfo> m_OnDeserializedMethods;

                /*0x20545a8*/ SerializationEvents(System.Type t);
                /*0x2054380*/ System.Collections.Generic.List<System.Reflection.MethodInfo> GetMethodsWithAttribute(System.Type attribute, System.Type t);
                /*0x20546e0*/ bool get_HasOnSerializingEvents();
                /*0x2054700*/ void InvokeOnSerializing(object obj, System.Runtime.Serialization.StreamingContext context);
                /*0x2054980*/ void InvokeOnDeserializing(object obj, System.Runtime.Serialization.StreamingContext context);
                /*0x204de4c*/ void InvokeOnDeserialized(object obj, System.Runtime.Serialization.StreamingContext context);
                /*0x2054c00*/ System.Runtime.Serialization.SerializationEventHandler AddOnSerialized(object obj, System.Runtime.Serialization.SerializationEventHandler handler);
                /*0x2054e58*/ System.Runtime.Serialization.SerializationEventHandler AddOnDeserialized(object obj, System.Runtime.Serialization.SerializationEventHandler handler);
            }

            class SerializationEventsCache
            {
                static /*0x0*/ System.Collections.Hashtable cache;

                static /*0x20550b0*/ SerializationEventsCache();
                static /*0x204db90*/ System.Runtime.Serialization.SerializationEvents GetSerializationEventsForType(System.Type t);
            }

            class SerializationException : System.SystemException
            {
                static /*0x0*/ string _nullMessage;

                static /*0x2055218*/ SerializationException();
                /*0x2055124*/ SerializationException();
                /*0x20551a8*/ SerializationException(string message);
                /*0x20551dc*/ SerializationException(string message, System.Exception innerException);
                /*0x2055210*/ SerializationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class SerializationFieldInfo : System.Reflection.FieldInfo
            {
                /*0x10*/ System.Reflection.RuntimeFieldInfo m_field;
                /*0x18*/ string m_serializationName;

                /*0x20552cc*/ SerializationFieldInfo(System.Reflection.RuntimeFieldInfo field, string namePrefix);
                /*0x2055284*/ System.Reflection.Module get_Module();
                /*0x20552a8*/ int get_MetadataToken();
                /*0x2055360*/ string get_Name();
                /*0x2055368*/ System.Type get_DeclaringType();
                /*0x2055388*/ System.Type get_ReflectedType();
                /*0x20553a8*/ object[] GetCustomAttributes(bool inherit);
                /*0x20553cc*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x20553f0*/ bool IsDefined(System.Type attributeType, bool inherit);
                /*0x2055418*/ System.Type get_FieldType();
                /*0x205543c*/ object GetValue(object obj);
                /*0x2055460*/ object InternalGetValue(object obj);
                /*0x205554c*/ void SetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
                /*0x2055570*/ void InternalSetValue(object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
                /*0x20556a4*/ System.Reflection.RuntimeFieldInfo get_FieldInfo();
                /*0x20556ac*/ System.RuntimeFieldHandle get_FieldHandle();
                /*0x20556d0*/ System.Reflection.FieldAttributes get_Attributes();
            }

            class SerializationInfo
            {
                static int defaultSize = 4;
                static string s_mscorlibAssemblySimpleName = "mscorlib";
                static string s_mscorlibFileName = "mscorlib.dll";
                /*0x10*/ string[] m_members;
                /*0x18*/ object[] m_data;
                /*0x20*/ System.Type[] m_types;
                /*0x28*/ System.Collections.Generic.Dictionary<string, int> m_nameToIndex;
                /*0x30*/ int m_currMember;
                /*0x38*/ System.Runtime.Serialization.IFormatterConverter m_converter;
                /*0x40*/ string m_fullTypeName;
                /*0x48*/ string m_assemName;
                /*0x50*/ System.Type objectType;
                /*0x58*/ bool isFullTypeNameSetExplicit;
                /*0x59*/ bool isAssemblyNameSetExplicit;
                /*0x5a*/ bool requireSameTokenInPartialTrust;

                static /*0x2055be4*/ bool Compare(byte[] a, byte[] b);
                static /*0x2055be0*/ void DemandForUnsafeAssemblyNameAssignments(string originalAssemblyName, string newAssemblyName);
                static /*0x2055c70*/ bool IsAssemblyNameAssignmentSafe(string originalAssemblyName, string newAssemblyName);
                /*0x20559f0*/ SerializationInfo(System.Type type, System.Runtime.Serialization.IFormatterConverter converter);
                /*0x20559f8*/ SerializationInfo(System.Type type, System.Runtime.Serialization.IFormatterConverter converter, bool requireSameTokenInPartialTrust);
                /*0x2055bd0*/ string get_FullTypeName();
                /*0x2055bd8*/ string get_AssemblyName();
                /*0x204d280*/ void SetType(System.Type type);
                /*0x2055da8*/ int get_MemberCount();
                /*0x2055db0*/ System.Type get_ObjectType();
                /*0x2055db8*/ bool get_IsFullTypeNameSetExplicit();
                /*0x2055dc0*/ bool get_IsAssemblyNameSetExplicit();
                /*0x20514a4*/ System.Runtime.Serialization.SerializationInfoEnumerator GetEnumerator();
                /*0x2055e24*/ void ExpandArrays();
                /*0x204d1f8*/ void AddValue(string name, object value, System.Type type);
                /*0x20517e4*/ void AddValue(string name, object value);
                /*0x2056114*/ void AddValue(string name, bool value);
                /*0x20561ec*/ void AddValue(string name, char value);
                /*0x20562c4*/ void AddValue(string name, byte value);
                /*0x205639c*/ void AddValue(string name, short value);
                /*0x2056474*/ void AddValue(string name, int value);
                /*0x205654c*/ void AddValue(string name, long value);
                /*0x2056624*/ void AddValue(string name, ulong value);
                /*0x20566fc*/ void AddValue(string name, float value);
                /*0x20567d4*/ void AddValue(string name, System.DateTime value);
                /*0x2055f34*/ void AddValueInternal(string name, object value, System.Type type);
                /*0x20568ac*/ void UpdateValue(string name, object value, System.Type type);
                /*0x205699c*/ int FindElement(string name);
                /*0x2056a64*/ object GetElement(string name, ref System.Type foundType);
                /*0x2056b74*/ object GetElementNoThrow(string name, ref System.Type foundType);
                /*0x204ce28*/ object GetValue(string name, System.Type type);
                /*0x204cd0c*/ object GetValueNoThrow(string name, System.Type type);
                /*0x2056bfc*/ bool GetBoolean(string name);
                /*0x2056d90*/ int GetInt32(string name);
                /*0x2056f18*/ long GetInt64(string name);
                /*0x20570a0*/ float GetSingle(string name);
                /*0x2057228*/ string GetString(string name);
            }

            struct SerializationEntry
            {
                /*0x10*/ System.Type m_type;
                /*0x18*/ object m_value;
                /*0x20*/ string m_name;

                /*0xae0228*/ SerializationEntry(string entryName, object entryValue, System.Type entryType);
                /*0xae0218*/ object get_Value();
                /*0xae0220*/ string get_Name();
            }

            class SerializationInfoEnumerator : System.Collections.IEnumerator
            {
                /*0x10*/ string[] m_members;
                /*0x18*/ object[] m_data;
                /*0x20*/ System.Type[] m_types;
                /*0x28*/ int m_numItems;
                /*0x2c*/ int m_currItem;
                /*0x30*/ bool m_current;

                /*0x2055dc8*/ SerializationInfoEnumerator(string[] members, object[] info, System.Type[] types, int numItems);
                /*0x205167c*/ bool MoveNext();
                /*0x20573a8*/ object System.Collections.IEnumerator.get_Current();
                /*0x20574c8*/ System.Runtime.Serialization.SerializationEntry get_Current();
                /*0x20575a8*/ void Reset();
                /*0x205153c*/ string get_Name();
                /*0x20515dc*/ object get_Value();
                /*0x20575b8*/ System.Type get_ObjectType();
            }

            class SerializationObjectManager
            {
                /*0x10*/ System.Collections.Hashtable m_objectSeenTable;
                /*0x18*/ System.Runtime.Serialization.SerializationEventHandler m_onSerializedHandler;
                /*0x20*/ System.Runtime.Serialization.StreamingContext m_context;

                /*0x2057658*/ SerializationObjectManager(System.Runtime.Serialization.StreamingContext context);
                /*0x20576f4*/ void RegisterObject(object obj);
                /*0x20578c8*/ void RaiseOnSerializedEvent();
                /*0x2057828*/ void AddOnSerialized(object obj);
            }

            struct StreamingContext
            {
                /*0x10*/ object m_additionalContext;
                /*0x18*/ System.Runtime.Serialization.StreamingContextStates m_state;

                /*0xae6eb0*/ StreamingContext(System.Runtime.Serialization.StreamingContextStates state);
                /*0xae6ebc*/ StreamingContext(System.Runtime.Serialization.StreamingContextStates state, object additional);
                /*0xae6ec8*/ object get_Context();
                /*0xae6ed0*/ bool Equals(object obj);
                /*0xae6ed8*/ int GetHashCode();
                /*0xae6ee0*/ System.Runtime.Serialization.StreamingContextStates get_State();
            }

            enum StreamingContextStates
            {
                CrossProcess = 1,
                CrossMachine = 2,
                File = 4,
                Persistence = 8,
                Remoting = 16,
                Other = 32,
                Clone = 64,
                CrossAppDomain = 128,
                All = 255,
            }

            class ValueTypeFixupInfo
            {
                /*0x10*/ long m_containerID;
                /*0x18*/ System.Reflection.FieldInfo m_parentField;
                /*0x20*/ int[] m_parentIndex;

                /*0x20711cc*/ ValueTypeFixupInfo(long containerID, System.Reflection.FieldInfo member, int[] parentIndex);
                /*0x20712f4*/ long get_ContainerID();
                /*0x20712fc*/ System.Reflection.FieldInfo get_ParentField();
                /*0x2071304*/ int[] get_ParentIndex();
            }

            namespace Formatters
            {
                enum FormatterTypeStyle
                {
                    TypesWhenNeeded = 0,
                    TypesAlways = 1,
                    XsdString = 2,
                }

                enum FormatterAssemblyStyle
                {
                    Simple = 0,
                    Full = 1,
                }

                enum TypeFilterLevel
                {
                    Low = 2,
                    Full = 3,
                }

                namespace Binary
                {
                    class BinaryConverter
                    {
                        static /*0x1c535a8*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum GetBinaryTypeInfo(System.Type type, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, string typeName, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, ref object typeInformation, ref int assemId);
                        static /*0x1c538c0*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum GetParserBinaryTypeInfo(System.Type type, ref object typeInformation);
                        static /*0x1c52c08*/ void WriteTypeInfo(System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, object typeInformation, int assemId, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        static /*0x1c53148*/ object ReadTypeInfo(System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, System.Runtime.Serialization.Formatters.Binary.__BinaryParser input, ref int assemId);
                        static /*0x1c53adc*/ void TypeFromInfo(System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, object typeInformation, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, ref System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE primitiveTypeEnum, ref string typeString, ref System.Type type, ref bool isVariant);
                    }

                    class IOUtil
                    {
                        static /*0x1a84590*/ bool FlagTest(System.Runtime.Serialization.Formatters.Binary.MessageEnum flag, System.Runtime.Serialization.Formatters.Binary.MessageEnum target);
                        static /*0x1a8459c*/ void WriteStringWithCode(string value, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        static /*0x1a845fc*/ void WriteWithCode(System.Type type, object value, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                    }

                    class BinaryAssemblyInfo
                    {
                        /*0x10*/ string assemblyString;
                        /*0x18*/ System.Reflection.Assembly assembly;

                        /*0x1c533b8*/ BinaryAssemblyInfo(string assemblyString);
                        /*0x1c533e4*/ BinaryAssemblyInfo(string assemblyString, System.Reflection.Assembly assembly);
                        /*0x1c5341c*/ System.Reflection.Assembly GetAssembly();
                    }

                    class SerializationHeaderRecord
                    {
                        /*0x10*/ int binaryFormatterMajorVersion;
                        /*0x14*/ int binaryFormatterMinorVersion;
                        /*0x18*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x1c*/ int topId;
                        /*0x20*/ int headerId;
                        /*0x24*/ int majorVersion;
                        /*0x28*/ int minorVersion;

                        static /*0x20557dc*/ int GetInt32(byte[] buffer, int index);
                        /*0x20556f4*/ SerializationHeaderRecord();
                        /*0x2055704*/ SerializationHeaderRecord(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum, int topId, int headerId, int majorVersion, int minorVersion);
                        /*0x2055760*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x205585c*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x20559ec*/ void Dump();
                    }

                    class BinaryAssembly
                    {
                        /*0x10*/ int assemId;
                        /*0x18*/ string assemblyString;

                        /*0x1c53304*/ BinaryAssembly();
                        /*0x1c5330c*/ void Set(int assemId, string assemblyString);
                        /*0x1c53318*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x1c5336c*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x1c533b4*/ void Dump();
                    }

                    class BinaryCrossAppDomainAssembly
                    {
                        /*0x10*/ int assemId;
                        /*0x14*/ int assemblyIndex;

                        /*0x1c53e80*/ BinaryCrossAppDomainAssembly();
                        /*0x1c53e88*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x1c53ed0*/ void Dump();
                    }

                    class BinaryObject
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int mapId;

                        /*0x1c54b58*/ BinaryObject();
                        /*0x1c54b60*/ void Set(int objectId, int mapId);
                        /*0x1c54b68*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x1c54bbc*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x1c54c04*/ void Dump();
                    }

                    class BinaryMethodCall
                    {
                        /*0x10*/ string methodName;
                        /*0x18*/ string typeName;
                        /*0x20*/ object[] args;
                        /*0x28*/ object callContext;
                        /*0x30*/ System.Type[] argTypes;
                        /*0x38*/ bool bArgsPrimitive;
                        /*0x3c*/ System.Runtime.Serialization.Formatters.Binary.MessageEnum messageEnum;

                        /*0x1c54908*/ BinaryMethodCall();
                        /*0x1c547a0*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x1c54904*/ void Dump();
                    }

                    class BinaryMethodReturn
                    {
                        static /*0x0*/ object instanceOfVoid;
                        /*0x10*/ object returnValue;
                        /*0x18*/ object[] args;
                        /*0x20*/ object callContext;
                        /*0x28*/ System.Type[] argTypes;
                        /*0x30*/ bool bArgsPrimitive;
                        /*0x34*/ System.Runtime.Serialization.Formatters.Binary.MessageEnum messageEnum;
                        /*0x38*/ System.Type returnType;

                        static /*0x1c54918*/ BinaryMethodReturn();
                        /*0x1c549d8*/ BinaryMethodReturn();
                        /*0x1c549e8*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x1c54b54*/ void Dump();
                    }

                    class BinaryObjectString
                    {
                        /*0x10*/ int objectId;
                        /*0x18*/ string value;

                        /*0x1c54c08*/ BinaryObjectString();
                        /*0x1c54c10*/ void Set(int objectId, string value);
                        /*0x1c54c1c*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x1c54c70*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x1c54cb8*/ void Dump();
                    }

                    class BinaryCrossAppDomainString
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int value;

                        /*0x1c53f14*/ BinaryCrossAppDomainString();
                        /*0x1c53f1c*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x1c53f64*/ void Dump();
                    }

                    class BinaryCrossAppDomainMap
                    {
                        /*0x10*/ int crossAppDomainArrayIndex;

                        /*0x1c53ed4*/ BinaryCrossAppDomainMap();
                        /*0x1c53edc*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x1c53f10*/ void Dump();
                    }

                    class MemberPrimitiveTyped
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE primitiveTypeEnum;
                        /*0x18*/ object value;

                        /*0x1c16914*/ MemberPrimitiveTyped();
                        /*0x1c1691c*/ void Set(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE primitiveTypeEnum, object value);
                        /*0x1c16928*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x1c16980*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x1c169cc*/ void Dump();
                    }

                    class BinaryObjectWithMap
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x14*/ int objectId;
                        /*0x18*/ string name;
                        /*0x20*/ int numMembers;
                        /*0x28*/ string[] memberNames;
                        /*0x30*/ int assemId;

                        /*0x1c54cbc*/ BinaryObjectWithMap();
                        /*0x1c54cc4*/ BinaryObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x1c54cf0*/ void Set(int objectId, string name, int numMembers, string[] memberNames, int assemId);
                        /*0x1c54d14*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x1c54dfc*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x1c54f4c*/ void Dump();
                    }

                    class BinaryObjectWithMapTyped
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x14*/ int objectId;
                        /*0x18*/ string name;
                        /*0x20*/ int numMembers;
                        /*0x28*/ string[] memberNames;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA;
                        /*0x38*/ object[] typeInformationA;
                        /*0x40*/ int[] memberAssemIds;
                        /*0x48*/ int assemId;

                        /*0x1c54f50*/ BinaryObjectWithMapTyped();
                        /*0x1c54f58*/ BinaryObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x1c54f84*/ void Set(int objectId, string name, int numMembers, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, int assemId);
                        /*0x1c54fb0*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x1c55154*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                    }

                    class BinaryArray
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int rank;
                        /*0x18*/ int[] lengthA;
                        /*0x20*/ int[] lowerBoundA;
                        /*0x28*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum;
                        /*0x30*/ object typeInformation;
                        /*0x38*/ int assemId;
                        /*0x3c*/ System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.BinaryArrayTypeEnum binaryArrayTypeEnum;

                        /*0x1c52924*/ BinaryArray();
                        /*0x1c5292c*/ BinaryArray(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x1c52958*/ void Set(int objectId, int rank, int[] lengthA, int[] lowerBoundA, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum, object typeInformation, System.Runtime.Serialization.Formatters.Binary.BinaryArrayTypeEnum binaryArrayTypeEnum, int assemId);
                        /*0x1c529ac*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x1c52e1c*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                    }

                    class MemberPrimitiveUnTyped
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE typeInformation;
                        /*0x18*/ object value;

                        /*0x1c169d0*/ MemberPrimitiveUnTyped();
                        /*0x1c169d8*/ void Set(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE typeInformation, object value);
                        /*0x1c169e4*/ void Set(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE typeInformation);
                        /*0x1c169ec*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x1c16a14*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x1c16a50*/ void Dump();
                    }

                    class MemberReference
                    {
                        /*0x10*/ int idRef;

                        /*0x1c16a54*/ MemberReference();
                        /*0x1c16a5c*/ void Set(int idRef);
                        /*0x1c16a64*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x1c16aa8*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x1c16adc*/ void Dump();
                    }

                    class ObjectNull
                    {
                        /*0x10*/ int nullCount;

                        /*0x213f918*/ ObjectNull();
                        /*0x213f920*/ void SetNullCount(int nullCount);
                        /*0x213f928*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x213f9b4*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input, System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x213fa20*/ void Dump();
                    }

                    class MessageEnd
                    {
                        /*0x1c1a1c4*/ MessageEnd();
                        /*0x1c1a1cc*/ void Write(System.Runtime.Serialization.Formatters.Binary.__BinaryWriter sout);
                        /*0x1c1a1ec*/ void Read(System.Runtime.Serialization.Formatters.Binary.__BinaryParser input);
                        /*0x1c1a1f0*/ void Dump();
                        /*0x1c1a1f4*/ void Dump(System.IO.Stream sout);
                    }

                    class ObjectMap
                    {
                        /*0x10*/ string objectName;
                        /*0x18*/ System.Type objectType;
                        /*0x20*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA;
                        /*0x28*/ object[] typeInformationA;
                        /*0x30*/ System.Type[] memberTypes;
                        /*0x38*/ string[] memberNames;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo objectInfo;
                        /*0x48*/ bool isInitObjectInfo;
                        /*0x50*/ System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader;
                        /*0x58*/ int objectId;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo;

                        static /*0x213f62c*/ System.Runtime.Serialization.Formatters.Binary.ObjectMap Create(string name, System.Type objectType, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo);
                        static /*0x213f6c8*/ System.Runtime.Serialization.Formatters.Binary.ObjectMap Create(string name, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable);
                        /*0x213eeb4*/ ObjectMap(string objectName, System.Type objectType, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo);
                        /*0x213f0b8*/ ObjectMap(string objectName, string[] memberNames, System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA, object[] typeInformationA, int[] memberAssemIds, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader, int objectId, System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable);
                        /*0x213f5b8*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo CreateObjectInfo(ref System.Runtime.Serialization.SerializationInfo si, ref object[] memberData);
                    }

                    class ObjectProgress
                    {
                        static /*0x0*/ int opRecordIdCount;
                        /*0x10*/ bool isInitial;
                        /*0x14*/ int count;
                        /*0x18*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum expectedType;
                        /*0x20*/ object expectedTypeInformation;
                        /*0x28*/ string name;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.InternalObjectTypeE objectTypeEnum;
                        /*0x34*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberTypeE memberTypeEnum;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberValueE memberValueEnum;
                        /*0x40*/ System.Type dtType;
                        /*0x48*/ int numItems;
                        /*0x4c*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum binaryTypeEnum;
                        /*0x50*/ object typeInformation;
                        /*0x58*/ int nullCount;
                        /*0x5c*/ int memberLength;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum[] binaryTypeEnumA;
                        /*0x68*/ object[] typeInformationA;
                        /*0x70*/ string[] memberNames;
                        /*0x78*/ System.Type[] memberTypes;
                        /*0x80*/ System.Runtime.Serialization.Formatters.Binary.ParseRecord pr;

                        static /*0x213fc14*/ ObjectProgress();
                        /*0x213fa24*/ ObjectProgress();
                        /*0x213fa90*/ void Init();
                        /*0x213fae0*/ void ArrayCountIncrement(int value);
                        /*0x213faf0*/ bool GetNext(ref System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum outBinaryTypeEnum, ref object outTypeInformation);
                    }

                    class Converter
                    {
                        static /*0x0*/ int primitiveTypeEnumLength;
                        static /*0x8*/ System.Type[] typeA;
                        static /*0x10*/ System.Type[] arrayTypeA;
                        static /*0x18*/ string[] valueA;
                        static /*0x20*/ System.TypeCode[] typeCodeA;
                        static /*0x28*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE[] codeA;
                        static /*0x30*/ System.Type typeofISerializable;
                        static /*0x38*/ System.Type typeofString;
                        static /*0x40*/ System.Type typeofConverter;
                        static /*0x48*/ System.Type typeofBoolean;
                        static /*0x50*/ System.Type typeofByte;
                        static /*0x58*/ System.Type typeofChar;
                        static /*0x60*/ System.Type typeofDecimal;
                        static /*0x68*/ System.Type typeofDouble;
                        static /*0x70*/ System.Type typeofInt16;
                        static /*0x78*/ System.Type typeofInt32;
                        static /*0x80*/ System.Type typeofInt64;
                        static /*0x88*/ System.Type typeofSByte;
                        static /*0x90*/ System.Type typeofSingle;
                        static /*0x98*/ System.Type typeofTimeSpan;
                        static /*0xa0*/ System.Type typeofDateTime;
                        static /*0xa8*/ System.Type typeofUInt16;
                        static /*0xb0*/ System.Type typeofUInt32;
                        static /*0xb8*/ System.Type typeofUInt64;
                        static /*0xc0*/ System.Type typeofObject;
                        static /*0xc8*/ System.Type typeofSystemVoid;
                        static /*0xd0*/ System.Reflection.Assembly urtAssembly;
                        static /*0xd8*/ string urtAssemblyString;
                        static /*0xe0*/ System.Type typeofTypeArray;
                        static /*0xe8*/ System.Type typeofObjectArray;
                        static /*0xf0*/ System.Type typeofStringArray;
                        static /*0xf8*/ System.Type typeofBooleanArray;
                        static /*0x100*/ System.Type typeofByteArray;
                        static /*0x108*/ System.Type typeofCharArray;
                        static /*0x110*/ System.Type typeofDecimalArray;
                        static /*0x118*/ System.Type typeofDoubleArray;
                        static /*0x120*/ System.Type typeofInt16Array;
                        static /*0x128*/ System.Type typeofInt32Array;
                        static /*0x130*/ System.Type typeofInt64Array;
                        static /*0x138*/ System.Type typeofSByteArray;
                        static /*0x140*/ System.Type typeofSingleArray;
                        static /*0x148*/ System.Type typeofTimeSpanArray;
                        static /*0x150*/ System.Type typeofDateTimeArray;
                        static /*0x158*/ System.Type typeofUInt16Array;
                        static /*0x160*/ System.Type typeofUInt32Array;
                        static /*0x168*/ System.Type typeofUInt64Array;
                        static /*0x170*/ System.Type typeofMarshalByRefObject;

                        static /*0x2514bb0*/ Converter();
                        static /*0x251300c*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE ToCode(System.Type type);
                        static /*0x2513248*/ bool IsWriteAsByteArray(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x251326c*/ int TypeLength(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x2513290*/ System.Type ToArrayType(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x2513748*/ void InitTypeA();
                        static /*0x2513374*/ void InitArrayTypeA();
                        static /*0x2513b1c*/ System.Type ToType(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x2513c00*/ System.Array CreatePrimitiveArray(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, int length);
                        static /*0x2513d30*/ bool IsPrimitiveArray(System.Type type, ref object typeInformation);
                        static /*0x251408c*/ void InitValueA();
                        static /*0x2514514*/ string ToComType(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x25145f8*/ void InitTypeCodeA();
                        static /*0x25147a0*/ System.TypeCode ToTypeCode(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        static /*0x2514884*/ void InitCodeA();
                        static /*0x2513164*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE ToPrimitiveTypeEnum(System.TypeCode typeCode);
                        static /*0x2514a40*/ object FromString(string value, System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                    }

                    enum BinaryHeaderEnum
                    {
                        SerializedStreamHeader = 0,
                        Object = 1,
                        ObjectWithMap = 2,
                        ObjectWithMapAssemId = 3,
                        ObjectWithMapTyped = 4,
                        ObjectWithMapTypedAssemId = 5,
                        ObjectString = 6,
                        Array = 7,
                        MemberPrimitiveTyped = 8,
                        MemberReference = 9,
                        ObjectNull = 10,
                        MessageEnd = 11,
                        Assembly = 12,
                        ObjectNullMultiple256 = 13,
                        ObjectNullMultiple = 14,
                        ArraySinglePrimitive = 15,
                        ArraySingleObject = 16,
                        ArraySingleString = 17,
                        CrossAppDomainMap = 18,
                        CrossAppDomainString = 19,
                        CrossAppDomainAssembly = 20,
                        MethodCall = 21,
                        MethodReturn = 22,
                    }

                    enum BinaryTypeEnum
                    {
                        Primitive = 0,
                        String = 1,
                        Object = 2,
                        ObjectUrt = 3,
                        ObjectUser = 4,
                        ObjectArray = 5,
                        StringArray = 6,
                        PrimitiveArray = 7,
                    }

                    enum BinaryArrayTypeEnum
                    {
                        Single = 0,
                        Jagged = 1,
                        Rectangular = 2,
                        SingleOffset = 3,
                        JaggedOffset = 4,
                        RectangularOffset = 5,
                    }

                    enum InternalSerializerTypeE
                    {
                        Soap = 1,
                        Binary = 2,
                    }

                    enum InternalParseTypeE
                    {
                        Empty = 0,
                        SerializedStreamHeader = 1,
                        Object = 2,
                        Member = 3,
                        ObjectEnd = 4,
                        MemberEnd = 5,
                        Headers = 6,
                        HeadersEnd = 7,
                        SerializedStreamHeaderEnd = 8,
                        Envelope = 9,
                        EnvelopeEnd = 10,
                        Body = 11,
                        BodyEnd = 12,
                    }

                    enum InternalObjectTypeE
                    {
                        Empty = 0,
                        Object = 1,
                        Array = 2,
                    }

                    enum InternalObjectPositionE
                    {
                        Empty = 0,
                        Top = 1,
                        Child = 2,
                        Headers = 3,
                    }

                    enum InternalArrayTypeE
                    {
                        Empty = 0,
                        Single = 1,
                        Jagged = 2,
                        Rectangular = 3,
                        Base64 = 4,
                    }

                    enum InternalMemberTypeE
                    {
                        Empty = 0,
                        Header = 1,
                        Field = 2,
                        Item = 3,
                    }

                    enum InternalMemberValueE
                    {
                        Empty = 0,
                        InlineValue = 1,
                        Nested = 2,
                        Reference = 3,
                        Null = 4,
                    }

                    enum InternalPrimitiveTypeE
                    {
                        Invalid = 0,
                        Boolean = 1,
                        Byte = 2,
                        Char = 3,
                        Currency = 4,
                        Decimal = 5,
                        Double = 6,
                        Int16 = 7,
                        Int32 = 8,
                        Int64 = 9,
                        SByte = 10,
                        Single = 11,
                        TimeSpan = 12,
                        DateTime = 13,
                        UInt16 = 14,
                        UInt32 = 15,
                        UInt64 = 16,
                        Null = 17,
                        String = 18,
                    }

                    enum MessageEnum
                    {
                        NoArgs = 1,
                        ArgsInline = 2,
                        ArgsIsArray = 4,
                        ArgsInArray = 8,
                        NoContext = 16,
                        ContextInline = 32,
                        ContextInArray = 64,
                        MethodSignatureInArray = 128,
                        PropertyInArray = 256,
                        NoReturnValue = 512,
                        ReturnValueVoid = 1024,
                        ReturnValueInline = 2048,
                        ReturnValueInArray = 4096,
                        ExceptionInArray = 8192,
                        GenericMethod = 32768,
                    }

                    enum ValueFixupEnum
                    {
                        Empty = 0,
                        Array = 1,
                        Header = 2,
                        Member = 3,
                    }

                    class BinaryFormatter
                    {
                        static /*0x0*/ System.Collections.Generic.Dictionary<System.Type, System.Runtime.Serialization.Formatters.Binary.TypeInformation> typeNameCache;
                        /*0x10*/ System.Runtime.Serialization.ISurrogateSelector m_surrogates;
                        /*0x18*/ System.Runtime.Serialization.StreamingContext m_context;
                        /*0x28*/ System.Runtime.Serialization.SerializationBinder m_binder;
                        /*0x30*/ System.Runtime.Serialization.Formatters.FormatterTypeStyle m_typeFormat;
                        /*0x34*/ System.Runtime.Serialization.Formatters.FormatterAssemblyStyle m_assemblyFormat;
                        /*0x38*/ System.Runtime.Serialization.Formatters.TypeFilterLevel m_securityLevel;
                        /*0x40*/ object[] m_crossAppDomainArray;

                        static /*0x1c54718*/ BinaryFormatter();
                        static /*0x1c54498*/ System.Runtime.Serialization.Formatters.Binary.TypeInformation GetTypeInformation(System.Type type);
                        /*0x1c53f78*/ BinaryFormatter();
                        /*0x1c53fd4*/ BinaryFormatter(System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context);
                        /*0x1c53f68*/ void set_AssemblyFormat(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle value);
                        /*0x1c53f70*/ void set_SurrogateSelector(System.Runtime.Serialization.ISurrogateSelector value);
                        /*0x1c54024*/ object Deserialize(System.IO.Stream serializationStream);
                        /*0x1c54038*/ object Deserialize(System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler, bool fCheck);
                        /*0x1c54030*/ object Deserialize(System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler);
                        /*0x1c54284*/ void Serialize(System.IO.Stream serializationStream, object graph);
                        /*0x1c54290*/ void Serialize(System.IO.Stream serializationStream, object graph, System.Runtime.Remoting.Messaging.Header[] headers);
                        /*0x1c54298*/ void Serialize(System.IO.Stream serializationStream, object graph, System.Runtime.Remoting.Messaging.Header[] headers, bool fCheck);
                    }

                    class __BinaryWriter
                    {
                        /*0x10*/ System.IO.Stream sout;
                        /*0x18*/ System.Runtime.Serialization.Formatters.FormatterTypeStyle formatterTypeStyle;
                        /*0x20*/ System.Collections.Hashtable objectMapTable;
                        /*0x28*/ System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter;
                        /*0x30*/ System.IO.BinaryWriter dataWriter;
                        /*0x38*/ int m_nestedObjectCount;
                        /*0x3c*/ int nullCount;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.BinaryMethodCall binaryMethodCall;
                        /*0x48*/ System.Runtime.Serialization.Formatters.Binary.BinaryMethodReturn binaryMethodReturn;
                        /*0x50*/ System.Runtime.Serialization.Formatters.Binary.BinaryObject binaryObject;
                        /*0x58*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap binaryObjectWithMap;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped binaryObjectWithMapTyped;
                        /*0x68*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectString binaryObjectString;
                        /*0x70*/ System.Runtime.Serialization.Formatters.Binary.BinaryArray binaryArray;
                        /*0x78*/ byte[] byteBuffer;
                        /*0x80*/ int chunkSize;
                        /*0x88*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveUnTyped memberPrimitiveUnTyped;
                        /*0x90*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveTyped memberPrimitiveTyped;
                        /*0x98*/ System.Runtime.Serialization.Formatters.Binary.ObjectNull objectNull;
                        /*0xa0*/ System.Runtime.Serialization.Formatters.Binary.MemberReference memberReference;
                        /*0xa8*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssembly binaryAssembly;

                        /*0x2267da8*/ __BinaryWriter(System.IO.Stream sout, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.Formatters.FormatterTypeStyle formatterTypeStyle);
                        /*0x2267e5c*/ void WriteBegin();
                        /*0x2267e60*/ void WriteEnd();
                        /*0x2267e80*/ void WriteBoolean(bool value);
                        /*0x2267ea4*/ void WriteByte(byte value);
                        /*0x2267ec4*/ void WriteBytes(byte[] value);
                        /*0x2267ee4*/ void WriteBytes(byte[] byteA, int offset, int size);
                        /*0x2267f04*/ void WriteChar(char value);
                        /*0x2267f28*/ void WriteChars(char[] value);
                        /*0x2267f4c*/ void WriteDecimal(decimal value);
                        /*0x2268014*/ void WriteSingle(float value);
                        /*0x2268038*/ void WriteDouble(double value);
                        /*0x226805c*/ void WriteInt16(short value);
                        /*0x2268080*/ void WriteInt32(int value);
                        /*0x22680a4*/ void WriteInt64(long value);
                        /*0x22680c8*/ void WriteSByte(sbyte value);
                        /*0x2267ff0*/ void WriteString(string value);
                        /*0x22680e8*/ void WriteTimeSpan(System.TimeSpan value);
                        /*0x226810c*/ void WriteDateTime(System.DateTime value);
                        /*0x2268130*/ void WriteUInt16(ushort value);
                        /*0x2268154*/ void WriteUInt32(uint value);
                        /*0x2268178*/ void WriteUInt64(ulong value);
                        /*0x226819c*/ void WriteObjectEnd(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x22681a0*/ void WriteSerializationHeaderEnd();
                        /*0x226821c*/ void WriteSerializationHeader(int topId, int headerId, int minorVersion, int majorVersion);
                        /*0x22682c8*/ void WriteMethodCall();
                        /*0x2268350*/ void WriteMethodReturn();
                        /*0x22683d8*/ void WriteObject(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, int numMembers, string[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo[] memberObjectInfos);
                        /*0x2268980*/ void WriteObjectString(int objectId, string value);
                        /*0x2268a28*/ void WriteSingleArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound, System.Array array);
                        /*0x2268d14*/ void WriteArrayAsBytes(System.Array array, int typeLength);
                        /*0x2268f60*/ void WriteJaggedArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound);
                        /*0x2269110*/ void WriteRectangleArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int rank, int[] lengthA, int[] lowerBoundA);
                        /*0x226928c*/ void WriteObjectByteArray(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, int length, int lowerBound, byte[] byteA);
                        /*0x22692f8*/ void WriteMember(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object value);
                        /*0x2269450*/ void WriteNullMember(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x226950c*/ void WriteMemberObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, int idRef);
                        /*0x22695b8*/ void WriteMemberNested(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo);
                        /*0x22695e0*/ void WriteMemberString(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string value);
                        /*0x226962c*/ void WriteItem(System.Runtime.Serialization.Formatters.Binary.NameInfo itemNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object value);
                        /*0x2269670*/ void WriteNullItem(System.Runtime.Serialization.Formatters.Binary.NameInfo itemNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x2269680*/ void WriteDelayedNullItem();
                        /*0x2269690*/ void WriteItemEnd();
                        /*0x22688d8*/ void InternalWriteItemNull();
                        /*0x2269694*/ void WriteItemObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, int idRef);
                        /*0x22696d0*/ void WriteAssembly(System.Type type, string assemblyString, int assemId, bool isNew);
                        /*0x22697d4*/ void WriteValue(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, object value);
                    }

                    class ObjectMapInfo
                    {
                        /*0x10*/ int objectId;
                        /*0x14*/ int numMembers;
                        /*0x18*/ string[] memberNames;
                        /*0x20*/ System.Type[] memberTypes;

                        /*0x213f788*/ ObjectMapInfo(int objectId, int numMembers, string[] memberNames, System.Type[] memberTypes);
                        /*0x213f7d4*/ bool isCompatible(int numMembers, string[] memberNames, System.Type[] memberTypes);
                    }

                    class WriteObjectInfo
                    {
                        /*0x10*/ int objectInfoId;
                        /*0x18*/ object obj;
                        /*0x20*/ System.Type objectType;
                        /*0x28*/ bool isSi;
                        /*0x29*/ bool isNamed;
                        /*0x2a*/ bool isTyped;
                        /*0x2b*/ bool isArray;
                        /*0x30*/ System.Runtime.Serialization.SerializationInfo si;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache cache;
                        /*0x40*/ object[] memberData;
                        /*0x48*/ System.Runtime.Serialization.ISerializationSurrogate serializationSurrogate;
                        /*0x50*/ System.Runtime.Serialization.StreamingContext context;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x68*/ long objectId;
                        /*0x70*/ long assemId;
                        /*0x78*/ string binderTypeName;
                        /*0x80*/ string binderAssemblyString;

                        static /*0x2076c60*/ System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo Serialize(object obj, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.SerializationBinder binder);
                        static /*0x2077b64*/ System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo Serialize(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.SerializationBinder binder);
                        static /*0x2077710*/ void CheckTypeForwardedFrom(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache cache, System.Type objectType, string binderAssemblyString);
                        static /*0x2076cfc*/ System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo GetObjectInfo(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit);
                        static /*0x2076c20*/ void PutObjectInfo(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x2076c0c*/ WriteObjectInfo();
                        /*0x2076c14*/ void ObjectEnd();
                        /*0x2076c44*/ void InternalInit();
                        /*0x2076ddc*/ void InitSerialize(object obj, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.Formatters.Binary.ObjectWriter objectWriter, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x2077bf0*/ void InitSerialize(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x20773f0*/ void InitSiWrite();
                        /*0x20772e0*/ void InitNoMembers();
                        /*0x2077874*/ void InitMemberInfo();
                        /*0x2078064*/ string GetTypeFullName();
                        /*0x2078090*/ string GetAssemblyString();
                        /*0x20773c8*/ void InvokeSerializationBinder(System.Runtime.Serialization.SerializationBinder binder);
                        /*0x2077ef8*/ System.Type GetMemberType(System.Reflection.MemberInfo objMember);
                        /*0x20780bc*/ void GetMemberInfo(ref string[] outMemberNames, ref System.Type[] outMemberTypes, ref object[] outMemberData);
                    }

                    class ReadObjectInfo
                    {
                        static /*0x0*/ int readObjectInfoCounter;
                        /*0x10*/ int objectInfoId;
                        /*0x18*/ System.Type objectType;
                        /*0x20*/ System.Runtime.Serialization.ObjectManager objectManager;
                        /*0x28*/ int count;
                        /*0x2c*/ bool isSi;
                        /*0x2d*/ bool isNamed;
                        /*0x2e*/ bool isTyped;
                        /*0x2f*/ bool bSimpleAssembly;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache cache;
                        /*0x38*/ string[] wireMemberNames;
                        /*0x40*/ System.Type[] wireMemberTypes;
                        /*0x48*/ int lastPosition;
                        /*0x50*/ System.Runtime.Serialization.ISerializationSurrogate serializationSurrogate;
                        /*0x58*/ System.Runtime.Serialization.StreamingContext context;
                        /*0x68*/ System.Collections.Generic.List<System.Type> memberTypesList;
                        /*0x70*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x78*/ System.Runtime.Serialization.IFormatterConverter formatterConverter;

                        static /*0x198b2ec*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo Create(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        static /*0x198b5d0*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo Create(System.Type objectType, string[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        static /*0x198b380*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo GetObjectInfo(System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit);
                        /*0x198b2d8*/ ReadObjectInfo();
                        /*0x198b2e0*/ void ObjectEnd();
                        /*0x198b2e4*/ void PrepareForReuse();
                        /*0x198b3f4*/ void Init(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        /*0x198b678*/ void Init(System.Type objectType, string[] memberNames, System.Type[] memberTypes, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ObjectManager objectManager, System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit, System.Runtime.Serialization.IFormatterConverter converter, bool bSimpleAssembly);
                        /*0x198b410*/ void InitReadConstructor(System.Type objectType, System.Runtime.Serialization.ISurrogateSelector surrogateSelector, System.Runtime.Serialization.StreamingContext context);
                        /*0x198b734*/ void InitSiRead();
                        /*0x198b6c8*/ void InitNoMembers();
                        /*0x198b7b0*/ void InitMemberInfo();
                        /*0x198bb4c*/ System.Reflection.MemberInfo GetMemberInfo(string name);
                        /*0x198be48*/ System.Type GetType(string name);
                        /*0x198bfcc*/ void AddValue(string name, object value, ref System.Runtime.Serialization.SerializationInfo si, ref object[] memberData);
                        /*0x198c07c*/ void InitDataStore(ref System.Runtime.Serialization.SerializationInfo si, ref object[] memberData);
                        /*0x198c14c*/ void RecordFixup(long objectId, string name, long idRef);
                        /*0x198c208*/ void PopulateObjectMembers(object obj, object[] memberData);
                        /*0x198bd10*/ int Position(string name);
                        /*0x198c2b0*/ System.Type[] GetMemberTypes(string[] inMemberNames, System.Type objectType);
                        /*0x198b9e0*/ System.Type GetMemberType(System.Reflection.MemberInfo objMember);
                    }

                    class SerObjectInfoInit
                    {
                        /*0x10*/ System.Collections.Hashtable seenBeforeTable;
                        /*0x18*/ int objectInfoIdCount;
                        /*0x20*/ System.Runtime.Serialization.Formatters.Binary.SerStack oiPool;

                        /*0x2053c74*/ SerObjectInfoInit();
                    }

                    class SerObjectInfoCache
                    {
                        /*0x10*/ string fullTypeName;
                        /*0x18*/ string assemblyString;
                        /*0x20*/ bool hasTypeForwardedFrom;
                        /*0x28*/ System.Reflection.MemberInfo[] memberInfos;
                        /*0x30*/ string[] memberNames;
                        /*0x38*/ System.Type[] memberTypes;

                        /*0x2053b90*/ SerObjectInfoCache(string typeName, string assemblyName, bool hasTypeForwardedFrom);
                        /*0x2053bd4*/ SerObjectInfoCache(System.Type type);
                    }

                    class TypeInformation
                    {
                        /*0x10*/ string fullTypeName;
                        /*0x18*/ string assemblyString;
                        /*0x20*/ bool hasTypeForwardedFrom;

                        /*0x2080c54*/ TypeInformation(string fullTypeName, string assemblyString, bool hasTypeForwardedFrom);
                        /*0x2080c3c*/ string get_FullTypeName();
                        /*0x2080c44*/ string get_AssemblyString();
                        /*0x2080c4c*/ bool get_HasTypeForwardedFrom();
                    }

                    class ObjectReader
                    {
                        /*0x10*/ System.IO.Stream m_stream;
                        /*0x18*/ System.Runtime.Serialization.ISurrogateSelector m_surrogates;
                        /*0x20*/ System.Runtime.Serialization.StreamingContext m_context;
                        /*0x30*/ System.Runtime.Serialization.ObjectManager m_objectManager;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums;
                        /*0x40*/ System.Runtime.Serialization.SerializationBinder m_binder;
                        /*0x48*/ long topId;
                        /*0x50*/ bool bSimpleAssembly;
                        /*0x58*/ object handlerObject;
                        /*0x60*/ object m_topObject;
                        /*0x68*/ System.Runtime.Remoting.Messaging.Header[] headers;
                        /*0x70*/ System.Runtime.Remoting.Messaging.HeaderHandler handler;
                        /*0x78*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x80*/ System.Runtime.Serialization.IFormatterConverter m_formatterConverter;
                        /*0x88*/ System.Runtime.Serialization.Formatters.Binary.SerStack stack;
                        /*0x90*/ System.Runtime.Serialization.Formatters.Binary.SerStack valueFixupStack;
                        /*0x98*/ object[] crossAppDomainArray;
                        /*0xa0*/ bool bFullDeserialization;
                        /*0xa1*/ bool bOldFormatDetected;
                        /*0xa8*/ System.Runtime.Serialization.Formatters.Binary.IntSizedArray valTypeObjectIdTable;
                        /*0xb0*/ System.Runtime.Serialization.Formatters.Binary.NameCache typeCache;
                        /*0xb8*/ string previousAssemblyString;
                        /*0xc0*/ string previousName;
                        /*0xc8*/ System.Type previousType;

                        static /*0x21429d4*/ System.Reflection.Assembly ResolveSimpleAssemblyName(System.Reflection.AssemblyName assemblyName);
                        static /*0x2142a40*/ void GetSimplyNamedTypeFromAssembly(System.Reflection.Assembly assm, string typeName, ref System.Type type);
                        static /*0x2142cc0*/ void CheckTypeForwardedTo(System.Reflection.Assembly sourceAssembly, System.Reflection.Assembly destAssembly, System.Type resolvedType);
                        /*0x213fd00*/ ObjectReader(System.IO.Stream stream, System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x213fc64*/ System.Runtime.Serialization.Formatters.Binary.SerStack get_ValueFixupStack();
                        /*0x213fce4*/ object get_TopObject();
                        /*0x213fcec*/ void set_TopObject(object value);
                        /*0x213fe0c*/ object Deserialize(System.Runtime.Remoting.Messaging.HeaderHandler handler, System.Runtime.Serialization.Formatters.Binary.__BinaryParser serParser, bool fCheck);
                        /*0x2140188*/ bool HasSurrogate(System.Type t);
                        /*0x2140270*/ void CheckSerializable(System.Type t);
                        /*0x21403cc*/ void InitFullDeserialization();
                        /*0x21404d4*/ object CrossAppDomainArray(int index);
                        /*0x213f080*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo CreateReadObjectInfo(System.Type objectType);
                        /*0x213f570*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo CreateReadObjectInfo(System.Type objectType, string[] memberNames, System.Type[] memberTypes);
                        /*0x2140510*/ void Parse(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x214120c*/ void ParseError(System.Runtime.Serialization.Formatters.Binary.ParseRecord processing, System.Runtime.Serialization.Formatters.Binary.ParseRecord onStack);
                        /*0x2140654*/ void ParseSerializedStreamHeader(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x2140670*/ void ParseSerializedStreamHeaderEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x214068c*/ void ParseObject(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x21409b4*/ void ParseObjectEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x2141480*/ void ParseArray(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x2141b24*/ void NextRectangleMap(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x2141c04*/ void ParseArrayMember(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x2142434*/ void ParseArrayMemberEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x2140c18*/ void ParseMember(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x2141138*/ void ParseMemberEnd(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x21423f8*/ void ParseString(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr, System.Runtime.Serialization.Formatters.Binary.ParseRecord parentPr);
                        /*0x2141b1c*/ void RegisterObject(object obj, System.Runtime.Serialization.Formatters.Binary.ParseRecord pr, System.Runtime.Serialization.Formatters.Binary.ParseRecord objectPr);
                        /*0x2142458*/ void RegisterObject(object obj, System.Runtime.Serialization.Formatters.Binary.ParseRecord pr, System.Runtime.Serialization.Formatters.Binary.ParseRecord objectPr, bool bIsString);
                        /*0x2142580*/ long GetId(long objectId);
                        /*0x2142674*/ System.Type Bind(string assemblyString, string typeString);
                        /*0x21426dc*/ System.Type FastBindToType(string assemblyName, string typeName);
                        /*0x213f3a8*/ System.Type GetType(System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo assemblyInfo, string name);

                        class TypeNAssembly
                        {
                            /*0x10*/ System.Type type;
                            /*0x18*/ string assemblyName;

                            /*0x1816a40*/ TypeNAssembly();
                        }

                        class TopLevelAssemblyTypeResolver
                        {
                            /*0x10*/ System.Reflection.Assembly m_topLevelAssembly;

                            /*0x18169a8*/ TopLevelAssemblyTypeResolver(System.Reflection.Assembly topLevelAssembly);
                            /*0x18169d4*/ System.Type ResolveType(System.Reflection.Assembly assembly, string simpleTypeName, bool ignoreCase);
                        }
                    }

                    class ObjectWriter
                    {
                        /*0x10*/ System.Collections.Queue m_objectQueue;
                        /*0x18*/ System.Runtime.Serialization.ObjectIDGenerator m_idGenerator;
                        /*0x20*/ int m_currentId;
                        /*0x28*/ System.Runtime.Serialization.ISurrogateSelector m_surrogates;
                        /*0x30*/ System.Runtime.Serialization.StreamingContext m_context;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.__BinaryWriter serWriter;
                        /*0x48*/ System.Runtime.Serialization.SerializationObjectManager m_objectManager;
                        /*0x50*/ long topId;
                        /*0x58*/ string topName;
                        /*0x60*/ System.Runtime.Remoting.Messaging.Header[] headers;
                        /*0x68*/ System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums;
                        /*0x70*/ System.Runtime.Serialization.SerializationBinder m_binder;
                        /*0x78*/ System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit serObjectInfoInit;
                        /*0x80*/ System.Runtime.Serialization.IFormatterConverter m_formatterConverter;
                        /*0x88*/ object[] crossAppDomainArray;
                        /*0x90*/ object previousObj;
                        /*0x98*/ long previousId;
                        /*0xa0*/ System.Type previousType;
                        /*0xa8*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE previousCode;
                        /*0xb0*/ System.Collections.Hashtable assemblyToIdTable;
                        /*0xb8*/ System.Runtime.Serialization.Formatters.Binary.SerStack niPool;

                        /*0x2142e18*/ ObjectWriter(System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.Formatters.Binary.InternalFE formatterEnums, System.Runtime.Serialization.SerializationBinder binder);
                        /*0x2142f0c*/ void Serialize(object graph, System.Runtime.Remoting.Messaging.Header[] inHeaders, System.Runtime.Serialization.Formatters.Binary.__BinaryWriter serWriter, bool fCheck);
                        /*0x2143b80*/ System.Runtime.Serialization.SerializationObjectManager get_ObjectManager();
                        /*0x2143644*/ void Write(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo);
                        /*0x21443f8*/ void Write(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string[] memberNames, System.Type[] memberTypes, object[] memberData, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo[] memberObjectInfos);
                        /*0x2144694*/ void WriteMemberSetup(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, string memberName, System.Type memberType, object memberData, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo memberObjectInfo);
                        /*0x21447c4*/ void WriteMembers(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberTypeNameInfo, object memberData, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo memberObjectInfo);
                        /*0x2143b88*/ void WriteArray(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo memberObjectInfo);
                        /*0x2144e20*/ void WriteArrayMember(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemTypeNameInfo, object data);
                        /*0x21450c8*/ void WriteRectangle(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, int rank, int[] maxA, System.Array array, System.Runtime.Serialization.Formatters.Binary.NameInfo arrayElemNameTypeInfo, int[] lowerBoundA);
                        /*0x2143a04*/ object GetNext(ref long objID);
                        /*0x2143310*/ long InternalGetId(object obj, bool assignUniqueIdToValueType, System.Type type, ref bool isNew);
                        /*0x2145324*/ long Schedule(object obj, bool assignUniqueIdToValueType, System.Type type);
                        /*0x2144c68*/ long Schedule(object obj, bool assignUniqueIdToValueType, System.Type type, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x2144d20*/ bool WriteKnownValueClass(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object data);
                        /*0x2144d04*/ void WriteObjectRef(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo, long objectId);
                        /*0x2145330*/ void WriteString(System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object stringObject);
                        /*0x2144b14*/ bool CheckForNull(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo memberNameInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo typeNameInfo, object data);
                        /*0x21432ec*/ void WriteSerializedStreamHeader(long topId, long headerId);
                        /*0x2145434*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Type type, System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                        /*0x214477c*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Type type);
                        /*0x21435f4*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x2144c14*/ System.Runtime.Serialization.Formatters.Binary.NameInfo TypeToNameInfo(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                        /*0x2144bd0*/ void TypeToNameInfo(System.Type type, System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                        /*0x2144668*/ System.Runtime.Serialization.Formatters.Binary.NameInfo MemberToNameInfo(string name);
                        /*0x2144364*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE ToCode(System.Type type);
                        /*0x21433cc*/ long GetAssemblyId(System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo objectInfo);
                        /*0x2144348*/ System.Type GetType(object obj);
                        /*0x21454bc*/ System.Runtime.Serialization.Formatters.Binary.NameInfo GetNameInfo();
                        /*0x214433c*/ bool CheckTypeFormat(System.Runtime.Serialization.Formatters.FormatterTypeStyle test, System.Runtime.Serialization.Formatters.FormatterTypeStyle want);
                        /*0x21439e8*/ void PutNameInfo(System.Runtime.Serialization.Formatters.Binary.NameInfo nameInfo);
                    }

                    class __BinaryParser
                    {
                        static /*0x0*/ System.Text.Encoding encoding;
                        static /*0x8*/ System.Runtime.Serialization.Formatters.Binary.MessageEnd messageEnd;
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader;
                        /*0x18*/ System.IO.Stream input;
                        /*0x20*/ long topId;
                        /*0x28*/ long headerId;
                        /*0x30*/ System.Runtime.Serialization.Formatters.Binary.SizedArray objectMapIdTable;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.SerStack stack;
                        /*0x48*/ System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum expectedType;
                        /*0x50*/ object expectedTypeInformation;
                        /*0x58*/ System.Runtime.Serialization.Formatters.Binary.ParseRecord PRS;
                        /*0x60*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo systemAssemblyInfo;
                        /*0x68*/ System.IO.BinaryReader dataReader;
                        /*0x70*/ System.Runtime.Serialization.Formatters.Binary.SerStack opPool;
                        /*0x78*/ System.Runtime.Serialization.Formatters.Binary.BinaryObject binaryObject;
                        /*0x80*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap bowm;
                        /*0x88*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped bowmt;
                        /*0x90*/ System.Runtime.Serialization.Formatters.Binary.BinaryObjectString objectString;
                        /*0x98*/ System.Runtime.Serialization.Formatters.Binary.BinaryCrossAppDomainString crossAppDomainString;
                        /*0xa0*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveTyped memberPrimitiveTyped;
                        /*0xa8*/ byte[] byteBuffer;
                        /*0xb0*/ System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveUnTyped memberPrimitiveUnTyped;
                        /*0xb8*/ System.Runtime.Serialization.Formatters.Binary.MemberReference memberReference;
                        /*0xc0*/ System.Runtime.Serialization.Formatters.Binary.ObjectNull objectNull;

                        static /*0x2267d2c*/ __BinaryParser();
                        /*0x2263e98*/ __BinaryParser(System.IO.Stream stream, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader);
                        /*0x2263fa0*/ System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo get_SystemAssemblyInfo();
                        /*0x2264050*/ System.Runtime.Serialization.Formatters.Binary.SizedArray get_ObjectMapIdTable();
                        /*0x22640b8*/ System.Runtime.Serialization.Formatters.Binary.SizedArray get_AssemIdToAssemblyTable();
                        /*0x2264124*/ System.Runtime.Serialization.Formatters.Binary.ParseRecord get_prs();
                        /*0x226418c*/ void Run();
                        /*0x226470c*/ void ReadBegin();
                        /*0x22664d4*/ void ReadEnd();
                        /*0x22667e4*/ bool ReadBoolean();
                        /*0x2266804*/ byte ReadByte();
                        /*0x2266824*/ byte[] ReadBytes(int length);
                        /*0x2266848*/ void ReadBytes(byte[] byteA, int offset, int size);
                        /*0x226691c*/ char ReadChar();
                        /*0x226693c*/ char[] ReadChars(int length);
                        /*0x2266960*/ decimal ReadDecimal();
                        /*0x2266a28*/ float ReadSingle();
                        /*0x2266a4c*/ double ReadDouble();
                        /*0x2266a70*/ short ReadInt16();
                        /*0x2266a94*/ int ReadInt32();
                        /*0x2266ab8*/ long ReadInt64();
                        /*0x2266adc*/ sbyte ReadSByte();
                        /*0x2266afc*/ string ReadString();
                        /*0x2266b20*/ System.TimeSpan ReadTimeSpan();
                        /*0x2266b44*/ System.DateTime ReadDateTime();
                        /*0x2266bcc*/ ushort ReadUInt16();
                        /*0x2266bf0*/ uint ReadUInt32();
                        /*0x2266c14*/ ulong ReadUInt64();
                        /*0x2264710*/ void ReadSerializationHeaderRecord();
                        /*0x22647dc*/ void ReadAssembly(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x2264a58*/ void ReadObject();
                        /*0x2264de8*/ void ReadCrossAppDomainMap();
                        /*0x2264fc0*/ void ReadObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x2266cf4*/ void ReadObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap record);
                        /*0x2265074*/ void ReadObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x2267138*/ void ReadObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped record);
                        /*0x2265114*/ void ReadObjectString(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x2265c6c*/ void ReadMemberPrimitiveTyped();
                        /*0x226566c*/ void ReadArray(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x22675ac*/ void ReadArrayAsBytes(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr);
                        /*0x22664d8*/ void ReadMemberPrimitiveUnTyped();
                        /*0x2265fc8*/ void ReadMemberReference();
                        /*0x226617c*/ void ReadObjectNull(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum);
                        /*0x2266344*/ void ReadMessageEnd();
                        /*0x2267918*/ object ReadValue(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code);
                        /*0x2266c38*/ System.Runtime.Serialization.Formatters.Binary.ObjectProgress GetOp();
                        /*0x2266748*/ void PutOp(System.Runtime.Serialization.Formatters.Binary.ObjectProgress op);
                    }

                    class ParseRecord
                    {
                        static /*0x0*/ int parseRecordIdCount;
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalParseTypeE PRparseTypeEnum;
                        /*0x14*/ System.Runtime.Serialization.Formatters.Binary.InternalObjectTypeE PRobjectTypeEnum;
                        /*0x18*/ System.Runtime.Serialization.Formatters.Binary.InternalArrayTypeE PRarrayTypeEnum;
                        /*0x1c*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberTypeE PRmemberTypeEnum;
                        /*0x20*/ System.Runtime.Serialization.Formatters.Binary.InternalMemberValueE PRmemberValueEnum;
                        /*0x24*/ System.Runtime.Serialization.Formatters.Binary.InternalObjectPositionE PRobjectPositionEnum;
                        /*0x28*/ string PRname;
                        /*0x30*/ string PRvalue;
                        /*0x38*/ object PRvarValue;
                        /*0x40*/ string PRkeyDt;
                        /*0x48*/ System.Type PRdtType;
                        /*0x50*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE PRdtTypeCode;
                        /*0x54*/ bool PRisEnum;
                        /*0x58*/ long PRobjectId;
                        /*0x60*/ long PRidRef;
                        /*0x68*/ string PRarrayElementTypeString;
                        /*0x70*/ System.Type PRarrayElementType;
                        /*0x78*/ bool PRisArrayVariant;
                        /*0x7c*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE PRarrayElementTypeCode;
                        /*0x80*/ int PRrank;
                        /*0x88*/ int[] PRlengthA;
                        /*0x90*/ int[] PRpositionA;
                        /*0x98*/ int[] PRlowerBoundA;
                        /*0xa0*/ int[] PRupperBoundA;
                        /*0xa8*/ int[] PRindexMap;
                        /*0xb0*/ int PRmemberIndex;
                        /*0xb4*/ int PRlinearlength;
                        /*0xb8*/ int[] PRrectangularMap;
                        /*0xc0*/ bool PRisLowerBound;
                        /*0xc8*/ long PRtopId;
                        /*0xd0*/ long PRheaderId;
                        /*0xd8*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo PRobjectInfo;
                        /*0xe0*/ bool PRisValueTypeFixup;
                        /*0xe8*/ object PRnewObj;
                        /*0xf0*/ object[] PRobjectA;
                        /*0xf8*/ System.Runtime.Serialization.Formatters.Binary.PrimitiveArray PRprimitiveArray;
                        /*0x100*/ bool PRisRegistered;
                        /*0x108*/ object[] PRmemberData;
                        /*0x110*/ System.Runtime.Serialization.SerializationInfo PRsi;
                        /*0x118*/ int PRnullCount;

                        static /*0x2529488*/ ParseRecord();
                        /*0x2529424*/ ParseRecord();
                        /*0x252942c*/ void Init();
                    }

                    class SerStack
                    {
                        /*0x10*/ object[] objects;
                        /*0x18*/ string stackId;
                        /*0x20*/ int top;

                        /*0x2053d20*/ SerStack(string stackId);
                        /*0x2053d98*/ void Push(object obj);
                        /*0x2053edc*/ object Pop();
                        /*0x2053e50*/ void IncreaseCapacity();
                        /*0x2053f44*/ object Peek();
                        /*0x2053f90*/ object PeekPeek();
                        /*0x2053fe0*/ bool IsEmpty();
                    }

                    class SizedArray : System.ICloneable
                    {
                        /*0x10*/ object[] objects;
                        /*0x18*/ object[] negObjects;

                        /*0x205f36c*/ SizedArray();
                        /*0x205f3dc*/ SizedArray(int length);
                        /*0x205f458*/ SizedArray(System.Runtime.Serialization.Formatters.Binary.SizedArray sizedArray);
                        /*0x205f518*/ object Clone();
                        /*0x205f574*/ object get_Item(int index);
                        /*0x205f5f4*/ void set_Item(int index, object value);
                        /*0x205f708*/ void IncreaseCapacity(int index);
                    }

                    class IntSizedArray : System.ICloneable
                    {
                        /*0x10*/ int[] objects;
                        /*0x18*/ int[] negObjects;

                        /*0x1a8822c*/ IntSizedArray();
                        /*0x1a88298*/ IntSizedArray(System.Runtime.Serialization.Formatters.Binary.IntSizedArray sizedArray);
                        /*0x1a88378*/ object Clone();
                        /*0x1a883d4*/ int get_Item(int index);
                        /*0x1a88458*/ void set_Item(int index, int value);
                        /*0x1a88518*/ void IncreaseCapacity(int index);
                    }

                    class NameCache
                    {
                        static /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<string, object> ht;
                        /*0x10*/ string name;

                        static /*0x22a6070*/ NameCache();
                        /*0x22a606c*/ NameCache();
                        /*0x22a5f1c*/ object GetCachedValue(string name);
                        /*0x22a5fd0*/ void SetCachedValue(object value);
                    }

                    class ValueFixup
                    {
                        static /*0x0*/ System.Reflection.MemberInfo valueInfo;
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.ValueFixupEnum valueFixupEnum;
                        /*0x18*/ System.Array arrayObj;
                        /*0x20*/ int[] indexMap;
                        /*0x28*/ object header;
                        /*0x30*/ object memberObject;
                        /*0x38*/ System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo objectInfo;
                        /*0x40*/ string memberName;

                        /*0x2070344*/ ValueFixup(System.Array arrayObj, int[] indexMap);
                        /*0x2070384*/ ValueFixup(object memberObject, string memberName, System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo objectInfo);
                        /*0x20703cc*/ void Fixup(System.Runtime.Serialization.Formatters.Binary.ParseRecord record, System.Runtime.Serialization.Formatters.Binary.ParseRecord parent);
                    }

                    class InternalFE
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.FormatterTypeStyle FEtypeFormat;
                        /*0x14*/ System.Runtime.Serialization.Formatters.FormatterAssemblyStyle FEassemblyFormat;
                        /*0x18*/ System.Runtime.Serialization.Formatters.TypeFilterLevel FEsecurityLevel;
                        /*0x1c*/ System.Runtime.Serialization.Formatters.Binary.InternalSerializerTypeE FEserializerTypeEnum;

                        /*0x1a894a8*/ InternalFE();
                    }

                    class NameInfo
                    {
                        /*0x10*/ string NIFullName;
                        /*0x18*/ long NIobjectId;
                        /*0x20*/ long NIassemId;
                        /*0x28*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE NIprimitiveTypeEnum;
                        /*0x30*/ System.Type NItype;
                        /*0x38*/ bool NIisSealed;
                        /*0x39*/ bool NIisArray;
                        /*0x3a*/ bool NIisArrayItem;
                        /*0x3b*/ bool NItransmitTypeOnObject;
                        /*0x3c*/ bool NItransmitTypeOnMember;
                        /*0x3d*/ bool NIisParentTypeOnObject;
                        /*0x40*/ System.Runtime.Serialization.Formatters.Binary.InternalArrayTypeE NIarrayEnum;
                        /*0x44*/ bool NIsealedStatusChecked;

                        /*0x22a60f8*/ NameInfo();
                        /*0x22a60fc*/ void Init();
                        /*0x22a611c*/ bool get_IsSealed();
                        /*0x22a6174*/ string get_NIname();
                        /*0x22a61b8*/ void set_NIname(string value);
                    }

                    class PrimitiveArray
                    {
                        /*0x10*/ System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code;
                        /*0x18*/ bool[] booleanA;
                        /*0x20*/ char[] charA;
                        /*0x28*/ double[] doubleA;
                        /*0x30*/ short[] int16A;
                        /*0x38*/ int[] int32A;
                        /*0x40*/ long[] int64A;
                        /*0x48*/ sbyte[] sbyteA;
                        /*0x50*/ float[] singleA;
                        /*0x58*/ ushort[] uint16A;
                        /*0x60*/ uint[] uint32A;
                        /*0x68*/ ulong[] uint64A;

                        /*0x2530c28*/ PrimitiveArray(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Array array);
                        /*0x2530c68*/ void Init(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code, System.Array array);
                        /*0x2530f64*/ void SetValue(string value, int index);
                    }
                }
            }
        }

        namespace Remoting
        {
            class ChannelInfo : System.Runtime.Remoting.IChannelInfo
            {
                /*0x10*/ object[] channelData;

                /*0x160d5a4*/ ChannelInfo();
                /*0x160da60*/ ChannelInfo(object remoteChannelData);
                /*0x160db14*/ object[] get_ChannelData();
            }

            class ActivatedClientTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ string applicationUrl;
                /*0x28*/ System.Type obj_type;

                /*0x1c87050*/ ActivatedClientTypeEntry(string typeName, string assemblyName, string appUrl);
                /*0x1c871c0*/ string get_ApplicationUrl();
                /*0x1c871c8*/ System.Runtime.Remoting.Contexts.IContextAttribute[] get_ContextAttributes();
                /*0x1c871d0*/ System.Type get_ObjectType();
                /*0x1c871d8*/ string ToString();
            }

            class ActivatedServiceTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ System.Type obj_type;

                /*0x1c871ec*/ ActivatedServiceTypeEntry(string typeName, string assemblyName);
                /*0x1c87318*/ System.Type get_ObjectType();
                /*0x1c87320*/ string ToString();
            }

            class EnvoyInfo : System.Runtime.Remoting.IEnvoyInfo
            {
                /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink envoySinks;

                /*0x245ab3c*/ EnvoyInfo(System.Runtime.Remoting.Messaging.IMessageSink sinks);
                /*0x245ab68*/ System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySinks();
            }

            interface IChannelInfo
            {
                object[] get_ChannelData();
            }

            interface IEnvoyInfo
            {
                System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySinks();
            }

            interface IRemotingTypeInfo
            {
                string get_TypeName();
                bool CanCastTo(System.Type fromType, object o);
            }

            class Identity
            {
                /*0x10*/ string _objectUri;
                /*0x18*/ System.Runtime.Remoting.Messaging.IMessageSink _channelSink;
                /*0x20*/ System.Runtime.Remoting.Messaging.IMessageSink _envoySink;
                /*0x28*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection _clientDynamicProperties;
                /*0x30*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection _serverDynamicProperties;
                /*0x38*/ System.Runtime.Remoting.ObjRef _objRef;
                /*0x40*/ bool _disposed;

                /*0x1a84734*/ Identity(string objectUri);
                System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
                /*0x1a84760*/ System.Runtime.Remoting.Messaging.IMessageSink get_ChannelSink();
                /*0x1a84768*/ void set_ChannelSink(System.Runtime.Remoting.Messaging.IMessageSink value);
                /*0x1a84770*/ System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySink();
                /*0x1a84778*/ string get_ObjectUri();
                /*0x1a84780*/ void set_ObjectUri(string value);
                /*0x1a84788*/ bool get_IsConnected();
                /*0x1a84798*/ bool get_Disposed();
                /*0x1a847a0*/ void set_Disposed(bool value);
                /*0x1a847ac*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection get_ClientDynamicProperties();
                /*0x1a84814*/ bool get_HasServerDynamicSinks();
                /*0x1a84828*/ void NotifyClientDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
                /*0x1a848ac*/ void NotifyServerDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
            }

            class ClientIdentity : System.Runtime.Remoting.Identity
            {
                /*0x48*/ System.WeakReference _proxyReference;

                /*0x1618784*/ ClientIdentity(string objectUri, System.Runtime.Remoting.ObjRef objRef);
                /*0x1618898*/ System.MarshalByRefObject get_ClientProxy();
                /*0x1618928*/ void set_ClientProxy(System.MarshalByRefObject value);
                /*0x1618994*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
                /*0x161899c*/ string get_TargetUri();
            }

            class InternalRemotingServices
            {
                static /*0x0*/ System.Collections.Hashtable _soapAttributes;

                static /*0x1a89a04*/ InternalRemotingServices();
                static /*0x1a894b0*/ System.Runtime.Remoting.Metadata.SoapAttribute GetCachedSoapAttribute(object reflectionObject);
            }

            class ObjRef : System.Runtime.Serialization.IObjectReference, System.Runtime.Serialization.ISerializable
            {
                static /*0x0*/ int MarshalledObjectRef;
                static /*0x4*/ int WellKnowObjectRef;
                /*0x10*/ System.Runtime.Remoting.IChannelInfo channel_info;
                /*0x18*/ string uri;
                /*0x20*/ System.Runtime.Remoting.IRemotingTypeInfo typeInfo;
                /*0x28*/ System.Runtime.Remoting.IEnvoyInfo envoyInfo;
                /*0x30*/ int flags;
                /*0x38*/ System.Type _serverType;

                static /*0x22b15d4*/ ObjRef();
                /*0x22b098c*/ ObjRef();
                /*0x22b09ec*/ ObjRef(string uri, System.Runtime.Remoting.IChannelInfo cinfo);
                /*0x22b0ba4*/ ObjRef(System.Type type, string url, object remoteChannelData);
                /*0x22b0c9c*/ ObjRef(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x22b09f4*/ System.Runtime.Remoting.ObjRef DeserializeInTheCurrentDomain(int domainId, byte[] tInfo);
                /*0x22b0b20*/ byte[] SerializeType();
                /*0x22b1138*/ bool get_IsReferenceToWellKnow();
                /*0x22b11ac*/ System.Runtime.Remoting.IChannelInfo get_ChannelInfo();
                /*0x22b11b4*/ System.Runtime.Remoting.IEnvoyInfo get_EnvoyInfo();
                /*0x22b11bc*/ void set_EnvoyInfo(System.Runtime.Remoting.IEnvoyInfo value);
                /*0x22b11c4*/ System.Runtime.Remoting.IRemotingTypeInfo get_TypeInfo();
                /*0x22b11cc*/ void set_TypeInfo(System.Runtime.Remoting.IRemotingTypeInfo value);
                /*0x22b11d4*/ string get_URI();
                /*0x22b11dc*/ void set_URI(string value);
                /*0x22b11e4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x22b13ac*/ object GetRealObject(System.Runtime.Serialization.StreamingContext context);
                /*0x22b0990*/ void UpdateChannelInfo();
                /*0x22b1474*/ System.Type get_ServerType();
            }

            class RemotingConfiguration
            {
                static /*0x0*/ string applicationID;
                static /*0x8*/ string applicationName;
                static /*0x10*/ string processGuid;
                static /*0x18*/ bool defaultConfigRead;
                static /*0x19*/ bool defaultDelayedConfigRead;
                static /*0x20*/ string _errorMode;
                static /*0x28*/ System.Collections.Hashtable wellKnownClientEntries;
                static /*0x30*/ System.Collections.Hashtable activatedClientEntries;
                static /*0x38*/ System.Collections.Hashtable wellKnownServiceEntries;
                static /*0x40*/ System.Collections.Hashtable activatedServiceEntries;
                static /*0x48*/ System.Collections.Hashtable channelTemplates;
                static /*0x50*/ System.Collections.Hashtable clientProviderTemplates;
                static /*0x58*/ System.Collections.Hashtable serverProviderTemplates;

                static /*0x1993bc4*/ RemotingConfiguration();
                static /*0x1991494*/ string get_ApplicationName();
                static /*0x19914f8*/ void set_ApplicationName(string value);
                static /*0x1991560*/ string get_ProcessId();
                static /*0x1991624*/ void LoadDefaultDelayedChannels();
                static /*0x1991968*/ System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType(System.Type svrType);
                static /*0x1991b0c*/ System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType(System.Type svrType);
                static /*0x1991cb0*/ void RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry entry);
                static /*0x1991f58*/ void RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry entry);
                static /*0x19920b4*/ void RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry entry);
                static /*0x199235c*/ void RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry entry);
                static /*0x199264c*/ void RegisterChannelTemplate(System.Runtime.Remoting.ChannelData channel);
                static /*0x19926d4*/ void RegisterClientProviderTemplate(System.Runtime.Remoting.ProviderData prov);
                static /*0x199275c*/ void RegisterServerProviderTemplate(System.Runtime.Remoting.ProviderData prov);
                static /*0x19927e4*/ void RegisterChannels(System.Collections.ArrayList channels, bool onlyDelayed);
                static /*0x1993450*/ void RegisterTypes(System.Collections.ArrayList types);
                static /*0x1993960*/ bool CustomErrorsEnabled(bool isLocalRequest);
                static /*0x1993a40*/ void SetCustomErrorsMode(string mode);
            }

            class ConfigHandler : Mono.Xml.SmallXmlParser.IContentHandler
            {
                /*0x10*/ System.Collections.ArrayList typeEntries;
                /*0x18*/ System.Collections.ArrayList channelInstances;
                /*0x20*/ System.Runtime.Remoting.ChannelData currentChannel;
                /*0x28*/ System.Collections.Stack currentProviderData;
                /*0x30*/ string currentClientUrl;
                /*0x38*/ string appName;
                /*0x40*/ string currentXmlPath;
                /*0x48*/ bool onlyDelayedChannels;

                /*0x161c564*/ ConfigHandler(bool onlyDelayedChannels);
                /*0x161c614*/ void ValidatePath(string element, string[] paths);
                /*0x161c708*/ bool CheckPath(string path);
                /*0x161c7f4*/ void OnStartParsing(Mono.Xml.SmallXmlParser parser);
                /*0x161c7f8*/ void OnProcessingInstruction(string name, string text);
                /*0x161c7fc*/ void OnIgnorableWhitespace(string s);
                /*0x161c800*/ void OnStartElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x161c9b8*/ void ParseElement(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x161f5a0*/ void OnEndElement(string name);
                /*0x161da80*/ void ReadCustomProviderData(string name, Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x161de14*/ void ReadLifetine(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x161f624*/ System.TimeSpan ParseTime(string s);
                /*0x161e3d8*/ void ReadChannel(Mono.Xml.SmallXmlParser.IAttrList attrs, bool isTemplate);
                /*0x161e7bc*/ System.Runtime.Remoting.ProviderData ReadProvider(string name, Mono.Xml.SmallXmlParser.IAttrList attrs, bool isTemplate);
                /*0x161eec0*/ void ReadClientActivated(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x161f00c*/ void ReadServiceActivated(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x161ebdc*/ void ReadClientWellKnown(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x161ecd4*/ void ReadServiceWellKnown(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x161f0dc*/ void ReadInteropXml(Mono.Xml.SmallXmlParser.IAttrList attrs, bool isElement);
                /*0x161f2e8*/ void ReadPreload(Mono.Xml.SmallXmlParser.IAttrList attrs);
                /*0x161fa74*/ string GetNotNull(Mono.Xml.SmallXmlParser.IAttrList attrs, string name);
                /*0x161fbbc*/ string ExtractAssembly(ref string type);
                /*0x161fc88*/ void OnChars(string ch);
                /*0x161fc8c*/ void OnEndParsing(Mono.Xml.SmallXmlParser parser);
            }

            class ChannelData
            {
                /*0x10*/ string Ref;
                /*0x18*/ string Type;
                /*0x20*/ string Id;
                /*0x28*/ string DelayLoadAsClientChannel;
                /*0x30*/ System.Collections.ArrayList _serverProviders;
                /*0x38*/ System.Collections.ArrayList _clientProviders;
                /*0x40*/ System.Collections.Hashtable _customProperties;

                /*0x160d4f4*/ ChannelData();
                /*0x160cb28*/ System.Collections.ArrayList get_ServerProviders();
                /*0x160cb90*/ System.Collections.ArrayList get_ClientProviders();
                /*0x160cbf8*/ System.Collections.Hashtable get_CustomProperties();
                /*0x160cc60*/ void CopyFrom(System.Runtime.Remoting.ChannelData other);
            }

            class ProviderData
            {
                /*0x10*/ string Ref;
                /*0x18*/ string Type;
                /*0x20*/ string Id;
                /*0x28*/ System.Collections.Hashtable CustomProperties;
                /*0x30*/ System.Collections.IList CustomData;

                /*0x2532248*/ ProviderData();
                /*0x2531bb0*/ void CopyFrom(System.Runtime.Remoting.ProviderData other);
            }

            class FormatterData : System.Runtime.Remoting.ProviderData
            {
                /*0x20e74e8*/ FormatterData();
            }

            class RemotingException : System.SystemException
            {
                /*0x1993d30*/ RemotingException();
                /*0x198eb80*/ RemotingException(string message);
                /*0x1993d38*/ RemotingException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x1993d40*/ RemotingException(string message, System.Exception InnerException);
            }

            class RemotingServices
            {
                static /*0x0*/ System.Collections.Hashtable uri_hash;
                static /*0x8*/ System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _serializationFormatter;
                static /*0x10*/ System.Runtime.Serialization.Formatters.Binary.BinaryFormatter _deserializationFormatter;
                static /*0x18*/ string app_id;
                static /*0x20*/ object app_id_lock;
                static /*0x28*/ int next_id;
                static /*0x30*/ System.Reflection.MethodInfo FieldSetterMethod;
                static /*0x38*/ System.Reflection.MethodInfo FieldGetterMethod;

                static /*0x1994dc8*/ RemotingServices();
                static /*0x19950e4*/ object InternalExecute(System.Reflection.MethodBase method, object obj, object[] parameters, ref object[] out_args);
                static /*0x19950e8*/ System.Reflection.MethodBase GetVirtualMethod(System.Type type, System.Reflection.MethodBase method);
                static /*0x19950ec*/ bool IsTransparentProxy(object proxy);
                static /*0x199512c*/ System.Runtime.Remoting.Messaging.IMethodReturnMessage InternalExecuteMessage(System.MarshalByRefObject target, System.Runtime.Remoting.Messaging.IMethodCallMessage reqMsg);
                static /*0x1995bdc*/ object Connect(System.Type classToProxy, string url);
                static /*0x1995d00*/ object Connect(System.Type classToProxy, string url, object data);
                static /*0x1995da8*/ System.Type GetServerTypeForUri(string URI);
                static /*0x1995e70*/ object Unmarshal(System.Runtime.Remoting.ObjRef objectRef);
                static /*0x1995ed4*/ object Unmarshal(System.Runtime.Remoting.ObjRef objectRef, bool fRefine);
                static /*0x199628c*/ System.Runtime.Remoting.ObjRef Marshal(System.MarshalByRefObject Obj);
                static /*0x19962f4*/ System.Runtime.Remoting.ObjRef Marshal(System.MarshalByRefObject Obj, string ObjURI, System.Type RequestedType);
                static /*0x19963dc*/ string NewUri();
                static /*0x1996380*/ System.Runtime.Remoting.Proxies.RealProxy GetRealProxy(object proxy);
                static /*0x1996b50*/ System.Reflection.MethodBase GetMethodBaseFromMethodMessage(System.Runtime.Remoting.Messaging.IMethodMessage msg);
                static /*0x1996e64*/ System.Reflection.MethodBase GetMethodBaseFromName(System.Type type, string methodName, System.Type[] signature);
                static /*0x1997064*/ System.Reflection.MethodBase FindInterfaceMethod(System.Type type, string methodName, System.Type[] signature);
                static /*0x198d0e0*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                static /*0x19971b0*/ bool IsOneWay(System.Reflection.MethodBase method);
                static /*0x1997250*/ object CreateClientProxy(System.Runtime.Remoting.ActivatedClientTypeEntry entry, object[] activationAttributes);
                static /*0x19973bc*/ object CreateClientProxy(System.Type objectType, string url, object[] activationAttributes);
                static /*0x19975f8*/ object CreateClientProxy(System.Runtime.Remoting.WellKnownClientTypeEntry entry);
                static /*0x199766c*/ object CreateClientProxyForContextBound(System.Type type, object[] activationAttributes);
                static /*0x198e904*/ System.Runtime.Remoting.Identity GetIdentityForUri(string uri);
                static /*0x199788c*/ string RemoveAppNameFromUri(string uri);
                static /*0x19979a0*/ System.Runtime.Remoting.ClientIdentity GetOrCreateClientIdentity(System.Runtime.Remoting.ObjRef objRef, System.Type proxyType, ref object clientProxy);
                static /*0x199750c*/ System.Runtime.Remoting.Messaging.IMessageSink GetClientChannelSinkChain(string url, object channelData, ref string objectUri);
                static /*0x1997ebc*/ System.Runtime.Remoting.ClientActivatedIdentity CreateContextBoundObjectIdentity(System.Type objectType);
                static /*0x19969f8*/ System.Runtime.Remoting.ClientActivatedIdentity CreateClientActivatedServerIdentity(System.MarshalByRefObject realObject, System.Type objectType, string objectUri);
                static /*0x1992504*/ System.Runtime.Remoting.ServerIdentity CreateWellKnownServerIdentity(System.Type objectType, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);
                static /*0x19967d4*/ void RegisterServerIdentity(System.Runtime.Remoting.ServerIdentity identity);
                static /*0x1996184*/ object GetProxyForRemoteObject(System.Runtime.Remoting.ObjRef objref, System.Type classToProxy);
                static /*0x1995c80*/ object GetRemoteObject(System.Runtime.Remoting.ObjRef objRef, System.Type proxyType);
                static /*0x1997fa4*/ byte[] SerializeCallData(object obj);
                static /*0x1998104*/ object DeserializeCallData(byte[] array);
                static /*0x199827c*/ byte[] SerializeExceptionData(System.Exception ex);
                static /*0x1995088*/ void RegisterInternalChannels();
                static /*0x1994abc*/ void DisposeIdentity(System.Runtime.Remoting.Identity ident);
                static /*0x1998340*/ System.Runtime.Remoting.Identity GetMessageTargetIdentity(System.Runtime.Remoting.Messaging.IMessage msg);
                static /*0x19986a0*/ void SetMessageTargetIdentity(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Identity ident);
                static /*0x198eb88*/ bool UpdateOutArgObject(System.Reflection.ParameterInfo pi, object local, object remote);
                static /*0x1997810*/ string GetNormalizedUri(string uri);

                class CACD
                {
                    /*0x10*/ object d;
                    /*0x18*/ object c;

                    /*0x18191c4*/ CACD();
                }
            }

            class ServerIdentity : System.Runtime.Remoting.Identity
            {
                /*0x48*/ System.Type _objectType;
                /*0x50*/ System.MarshalByRefObject _serverObject;
                /*0x58*/ System.Runtime.Remoting.Messaging.IMessageSink _serverSink;
                /*0x60*/ System.Runtime.Remoting.Contexts.Context _context;
                /*0x68*/ System.Runtime.Remoting.Lifetime.Lease _lease;

                /*0x2057b1c*/ ServerIdentity(string objectUri, System.Runtime.Remoting.Contexts.Context context, System.Type objectType);
                /*0x2057b58*/ System.Type get_ObjectType();
                /*0x2057b60*/ void StartTrackingLifetime(System.Runtime.Remoting.Lifetime.ILease lease);
                /*0x2057cf0*/ void OnLifetimeExpired();
                /*0x2057d80*/ System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType);
                /*0x2057f34*/ void AttachServerObject(System.MarshalByRefObject serverObject, System.Runtime.Remoting.Contexts.Context context);
                /*0x2058044*/ System.Runtime.Remoting.Lifetime.Lease get_Lease();
                /*0x205804c*/ System.Runtime.Remoting.Contexts.Context get_Context();
                /*0x2058054*/ void set_Context(System.Runtime.Remoting.Contexts.Context value);
                System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                /*0x2057cf4*/ void DisposeServerObject();
            }

            class ClientActivatedIdentity : System.Runtime.Remoting.ServerIdentity
            {
                /*0x70*/ System.MarshalByRefObject _targetThis;

                /*0x1617ab4*/ ClientActivatedIdentity(string objectUri, System.Type objectType);
                /*0x1617ac4*/ System.MarshalByRefObject GetServerObject();
                /*0x1617acc*/ void SetClientProxy(System.MarshalByRefObject obj);
                /*0x1617ad4*/ void OnLifetimeExpired();
                /*0x1617b44*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0x1617df8*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class SingletonIdentity : System.Runtime.Remoting.ServerIdentity
            {
                /*0x205eea0*/ SingletonIdentity(string objectUri, System.Runtime.Remoting.Contexts.Context context, System.Type objectType);
                /*0x205eedc*/ System.MarshalByRefObject GetServerObject();
                /*0x205f0dc*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0x205f1c4*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class SingleCallIdentity : System.Runtime.Remoting.ServerIdentity
            {
                /*0x205ea70*/ SingleCallIdentity(string objectUri, System.Runtime.Remoting.Contexts.Context context, System.Type objectType);
                /*0x205eaac*/ System.Runtime.Remoting.Messaging.IMessage SyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0x205ecd4*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncObjectProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class DisposerReplySink : System.Runtime.Remoting.Messaging.IMessageSink
            {
                /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _next;
                /*0x18*/ System.IDisposable _disposable;

                /*0x2042940*/ DisposerReplySink(System.Runtime.Remoting.Messaging.IMessageSink next, System.IDisposable disposable);
                /*0x2042978*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                /*0x2042ab0*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
            }

            class SoapServices
            {
                static /*0x0*/ System.Collections.Hashtable _xmlTypes;
                static /*0x8*/ System.Collections.Hashtable _xmlElements;
                static /*0x10*/ System.Collections.Hashtable _soapActions;
                static /*0x18*/ System.Collections.Hashtable _soapActionsMethods;
                static /*0x20*/ System.Collections.Hashtable _typeInfos;

                static /*0x2062638*/ SoapServices();
                static /*0x20615b8*/ string get_XmlNsForClrTypeWithAssembly();
                static /*0x20615fc*/ string get_XmlNsForClrTypeWithNs();
                static /*0x2061640*/ string get_XmlNsForClrTypeWithNsAndAssembly();
                static /*0x2061684*/ string CodeXmlNamespaceForClrTypeNamespace(string typeNamespace, string assemblyName);
                static /*0x206192c*/ string GetNameKey(string name, string namspace);
                static /*0x20619a4*/ string GetAssemblyName(System.Reflection.MethodBase mb);
                static /*0x2061aec*/ bool GetXmlElementForInteropType(System.Type type, ref string xmlElement, ref string xmlNamespace);
                static /*0x2061510*/ string GetXmlNamespaceForMethodCall(System.Reflection.MethodBase mb);
                static /*0x2061470*/ string GetXmlNamespaceForMethodResponse(System.Reflection.MethodBase mb);
                static /*0x2061bc8*/ bool GetXmlTypeForInteropType(System.Type type, ref string xmlType, ref string xmlTypeNamespace);
                static /*0x2061c9c*/ void PreLoad(System.Reflection.Assembly assembly);
                static /*0x2061d74*/ void PreLoad(System.Type type);
                static /*0x2062490*/ void RegisterInteropXmlElement(string xmlElement, string xmlNamespace, System.Type type);
                static /*0x20622e8*/ void RegisterInteropXmlType(string xmlType, string xmlTypeNamespace, System.Type type);
                static /*0x2061844*/ string EncodeNs(string ns);

                class TypeInfo
                {
                    /*0x10*/ System.Collections.Hashtable Attributes;
                    /*0x18*/ System.Collections.Hashtable Elements;

                    /*0x181ab74*/ TypeInfo();
                }
            }

            class TypeEntry
            {
                /*0x10*/ string assembly_name;
                /*0x18*/ string type_name;

                /*0x207fe34*/ TypeEntry();
                /*0x207fe3c*/ string get_AssemblyName();
                /*0x207fe44*/ void set_AssemblyName(string value);
                /*0x207fe4c*/ string get_TypeName();
                /*0x207fe54*/ void set_TypeName(string value);
            }

            class TypeInfo : System.Runtime.Remoting.IRemotingTypeInfo
            {
                /*0x10*/ string serverType;
                /*0x18*/ string[] serverHierarchy;
                /*0x20*/ string[] interfacesImplemented;

                /*0x2080650*/ TypeInfo(System.Type type);
                /*0x20809c4*/ string get_TypeName();
                /*0x20809cc*/ bool CanCastTo(System.Type fromType, object o);
            }

            class WellKnownClientTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ System.Type obj_type;
                /*0x28*/ string obj_url;
                /*0x30*/ string app_url;

                /*0x2074628*/ WellKnownClientTypeEntry(string typeName, string assemblyName, string objectUrl);
                /*0x2074768*/ string get_ApplicationUrl();
                /*0x2074770*/ System.Type get_ObjectType();
                /*0x2074778*/ string get_ObjectUrl();
                /*0x2074780*/ string ToString();
            }

            enum WellKnownObjectMode
            {
                Singleton = 1,
                SingleCall = 2,
            }

            class WellKnownServiceTypeEntry : System.Runtime.Remoting.TypeEntry
            {
                /*0x20*/ System.Type obj_type;
                /*0x28*/ string obj_uri;
                /*0x30*/ System.Runtime.Remoting.WellKnownObjectMode obj_mode;

                /*0x207479c*/ WellKnownServiceTypeEntry(string typeName, string assemblyName, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);
                /*0x20748e0*/ System.Runtime.Remoting.WellKnownObjectMode get_Mode();
                /*0x20748e8*/ System.Type get_ObjectType();
                /*0x20748f0*/ string get_ObjectUri();
                /*0x20748f8*/ string ToString();
            }

            namespace Services
            {
                interface ITrackingHandler
                {
                    void DisconnectedObject(object obj);
                    void MarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                    void UnmarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                }

                class TrackingServices
                {
                    static /*0x0*/ System.Collections.ArrayList _handlers;

                    static /*0x2079b28*/ TrackingServices();
                    static /*0x20790e8*/ void NotifyMarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                    static /*0x20794b4*/ void NotifyUnmarshaledObject(object obj, System.Runtime.Remoting.ObjRef or);
                    static /*0x20797f4*/ void NotifyDisconnectedObject(object obj);
                }
            }

            namespace Proxies
            {
                class ProxyAttribute : System.Attribute
                {
                    /*0x25322ac*/ System.MarshalByRefObject CreateInstance(System.Type serverType);
                    /*0x25323b0*/ System.Runtime.Remoting.Proxies.RealProxy CreateProxy(System.Runtime.Remoting.ObjRef objRef, System.Type serverType, object serverObject, System.Runtime.Remoting.Contexts.Context serverContext);
                }

                class TransparentProxy
                {
                    /*0x10*/ System.Runtime.Remoting.Proxies.RealProxy _rp;
                    /*0x18*/ Mono.RuntimeRemoteClassHandle _class;
                    /*0x20*/ bool _custom_type_info;

                    /*0x207a34c*/ TransparentProxy();
                    /*0x2079b9c*/ System.RuntimeType GetProxyType();
                    /*0x2079c74*/ bool get_IsContextBoundObject();
                    /*0x2079cac*/ System.Runtime.Remoting.Contexts.Context get_TargetContext();
                    /*0x2079cc8*/ bool InCurrentContext();
                    /*0x2079d14*/ object LoadRemoteFieldNew(nint classPtr, nint fieldPtr);
                    /*0x207a06c*/ void StoreRemoteField(nint classPtr, nint fieldPtr, object arg);
                }

                class RealProxy
                {
                    /*0x10*/ System.Type class_to_proxy;
                    /*0x18*/ System.Runtime.Remoting.Contexts.Context _targetContext;
                    /*0x20*/ System.MarshalByRefObject _server;
                    /*0x28*/ int _targetDomainId;
                    /*0x30*/ string _targetUri;
                    /*0x38*/ System.Runtime.Remoting.Identity _objectIdentity;
                    /*0x40*/ object _objTP;
                    /*0x48*/ object _stubData;

                    static /*0x198cf88*/ System.Type InternalGetProxyType(object transparentProxy);
                    static /*0x198d224*/ object PrivateInvoke(System.Runtime.Remoting.Proxies.RealProxy rp, System.Runtime.Remoting.Messaging.IMessage msg, ref System.Exception exc, ref object[] out_args);
                    static /*0x198df14*/ object[] ProcessResponse(System.Runtime.Remoting.Messaging.IMethodReturnMessage mrm, System.Runtime.Remoting.Messaging.MonoMethodMessage call);
                    /*0x198cda8*/ RealProxy();
                    /*0x198cdb8*/ RealProxy(System.Type classToProxy);
                    /*0x198cf28*/ RealProxy(System.Type classToProxy, System.Runtime.Remoting.ClientIdentity identity);
                    /*0x198ce0c*/ RealProxy(System.Type classToProxy, nint stub, object stubData);
                    /*0x198cf8c*/ System.Type GetProxiedType();
                    /*0x198d040*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x198d214*/ System.Runtime.Remoting.Identity get_ObjectIdentity();
                    /*0x198d21c*/ void set_ObjectIdentity(System.Runtime.Remoting.Identity value);
                    System.Runtime.Remoting.Messaging.IMessage Invoke(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x198e648*/ object InternalGetTransparentProxy(string className);
                    /*0x198e64c*/ object GetTransparentProxy();
                    /*0x198e7cc*/ void AttachServer(System.MarshalByRefObject s);
                    /*0x198e7d4*/ void SetTargetDomain(int domainId);
                    /*0x198e7dc*/ object GetAppDomainTarget();
                }

                class RemotingProxy : System.Runtime.Remoting.Proxies.RealProxy, System.Runtime.Remoting.IRemotingTypeInfo
                {
                    static /*0x0*/ System.Reflection.MethodInfo _cache_GetTypeMethod;
                    static /*0x8*/ System.Reflection.MethodInfo _cache_GetHashCodeMethod;
                    /*0x50*/ System.Runtime.Remoting.Messaging.IMessageSink _sink;
                    /*0x58*/ bool _hasEnvoySink;
                    /*0x60*/ System.Runtime.Remoting.Messaging.ConstructionCall _ctorCall;

                    static /*0x1994cc8*/ RemotingProxy();
                    /*0x1993d48*/ RemotingProxy(System.Type type, System.Runtime.Remoting.ClientIdentity identity);
                    /*0x1993d90*/ RemotingProxy(System.Type type, string activationUrl, object[] activationAttributes);
                    /*0x1993de0*/ System.Runtime.Remoting.Messaging.IMessage Invoke(System.Runtime.Remoting.Messaging.IMessage request);
                    /*0x1994414*/ void AttachIdentity(System.Runtime.Remoting.Identity identity);
                    /*0x198db50*/ System.Runtime.Remoting.Messaging.IMessage ActivateRemoteObject(System.Runtime.Remoting.Messaging.IMethodMessage request);
                    /*0x1994654*/ string get_TypeName();
                    /*0x1994798*/ bool CanCastTo(System.Type fromType, object o);
                    /*0x19949c8*/ void Finalize();
                }
            }

            namespace Lifetime
            {
                interface ILease
                {
                    System.TimeSpan get_CurrentLeaseTime();
                    System.Runtime.Remoting.Lifetime.LeaseState get_CurrentState();
                    System.TimeSpan get_RenewOnCallTime();
                    System.TimeSpan Renew(System.TimeSpan renewalTime);
                }

                interface ISponsor
                {
                    System.TimeSpan Renewal(System.Runtime.Remoting.Lifetime.ILease lease);
                }

                class Lease : System.MarshalByRefObject, System.Runtime.Remoting.Lifetime.ILease
                {
                    /*0x18*/ System.DateTime _leaseExpireTime;
                    /*0x20*/ System.Runtime.Remoting.Lifetime.LeaseState _currentState;
                    /*0x28*/ System.TimeSpan _initialLeaseTime;
                    /*0x30*/ System.TimeSpan _renewOnCallTime;
                    /*0x38*/ System.TimeSpan _sponsorshipTimeout;
                    /*0x40*/ System.Collections.ArrayList _sponsors;
                    /*0x48*/ System.Collections.Queue _renewingSponsors;
                    /*0x50*/ System.Runtime.Remoting.Lifetime.Lease.RenewalDelegate _renewalDelegate;

                    /*0x1a92900*/ Lease();
                    /*0x1a92a8c*/ System.TimeSpan get_CurrentLeaseTime();
                    /*0x1a92b00*/ System.Runtime.Remoting.Lifetime.LeaseState get_CurrentState();
                    /*0x1a92b08*/ void Activate();
                    /*0x1a92b14*/ System.TimeSpan get_RenewOnCallTime();
                    /*0x1a92b1c*/ System.TimeSpan Renew(System.TimeSpan renewalTime);
                    /*0x1a92bb4*/ void Unregister(System.Runtime.Remoting.Lifetime.ISponsor obj);
                    /*0x1a92cfc*/ void UpdateState();
                    /*0x1a92e8c*/ void CheckNextSponsor();
                    /*0x1a930f0*/ void ProcessSponsorResponse(object state, bool timedOut);

                    class RenewalDelegate : System.MulticastDelegate
                    {
                        /*0x1814038*/ RenewalDelegate(object object, nint method);
                        /*0x1814098*/ System.TimeSpan Invoke(System.Runtime.Remoting.Lifetime.ILease lease);
                        /*0x1814418*/ System.IAsyncResult BeginInvoke(System.Runtime.Remoting.Lifetime.ILease lease, System.AsyncCallback callback, object object);
                        /*0x181443c*/ System.TimeSpan EndInvoke(System.IAsyncResult result);
                    }
                }

                class LeaseManager
                {
                    /*0x10*/ System.Collections.ArrayList _objects;
                    /*0x18*/ System.Threading.Timer _timer;

                    /*0x1a93910*/ LeaseManager();
                    /*0x1a932e4*/ void SetPollTime(System.TimeSpan timeSpan);
                    /*0x1a933dc*/ void TrackLifetime(System.Runtime.Remoting.ServerIdentity identity);
                    /*0x1a93518*/ void StartManager();
                    /*0x1a93690*/ void StopManager();
                    /*0x1a936ac*/ void ManageLeases(object state);
                }

                class LeaseSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _nextSink;

                    /*0x1a93974*/ LeaseSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                    /*0x1a939a0*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x1a93d28*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x1a93a64*/ void RenewLease(System.Runtime.Remoting.Messaging.IMessage msg);
                }

                enum LeaseState
                {
                    Null = 0,
                    Initial = 1,
                    Active = 2,
                    Renewing = 3,
                    Expired = 4,
                }

                class LifetimeServices
                {
                    static /*0x0*/ System.TimeSpan _leaseManagerPollTime;
                    static /*0x8*/ System.TimeSpan _leaseTime;
                    static /*0x10*/ System.TimeSpan _renewOnCallTime;
                    static /*0x18*/ System.TimeSpan _sponsorshipTimeout;
                    static /*0x20*/ System.Runtime.Remoting.Lifetime.LeaseManager _leaseManager;

                    static /*0x1a93e34*/ LifetimeServices();
                    static /*0x1a93f3c*/ System.TimeSpan get_LeaseManagerPollTime();
                    static /*0x1a93fa0*/ void set_LeaseManagerPollTime(System.TimeSpan value);
                    static /*0x1a94020*/ System.TimeSpan get_LeaseTime();
                    static /*0x1a94084*/ void set_LeaseTime(System.TimeSpan value);
                    static /*0x1a940ec*/ System.TimeSpan get_RenewOnCallTime();
                    static /*0x1a94150*/ void set_RenewOnCallTime(System.TimeSpan value);
                    static /*0x1a941b8*/ System.TimeSpan get_SponsorshipTimeout();
                    static /*0x1a9421c*/ void set_SponsorshipTimeout(System.TimeSpan value);
                    static /*0x1a94284*/ void TrackLifetime(System.Runtime.Remoting.ServerIdentity identity);
                }
            }

            namespace Contexts
            {
                class Context
                {
                    static /*0x0*/ object[] local_slots;
                    static /*0x8*/ System.Runtime.Remoting.Messaging.IMessageSink default_server_context_sink;
                    static /*0x10*/ int global_count;
                    static /*0x18*/ System.LocalDataStoreMgr _localDataStoreMgr;
                    static /*0x20*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection global_dynamic_properties;
                    /*0x10*/ int domain_id;
                    /*0x14*/ int context_id;
                    /*0x18*/ nuint static_data;
                    /*0x20*/ nuint data;
                    /*0x28*/ System.Runtime.Remoting.Messaging.IMessageSink server_context_sink_chain;
                    /*0x30*/ System.Runtime.Remoting.Messaging.IMessageSink client_context_sink_chain;
                    /*0x38*/ System.Collections.Generic.List<System.Runtime.Remoting.Contexts.IContextProperty> context_properties;
                    /*0x40*/ System.LocalDataStoreHolder _localDataStore;
                    /*0x48*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection context_dynamic_properties;
                    /*0x50*/ System.Runtime.Remoting.Contexts.ContextCallbackObject callback_object;

                    static /*0x1624d38*/ Context();
                    static /*0x162302c*/ void RegisterContext(System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0x1623030*/ void ReleaseContext(System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0x1623170*/ System.Runtime.Remoting.Contexts.Context get_DefaultContext();
                    static /*0x16232d0*/ bool RegisterDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty prop, System.ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0x1623570*/ bool UnregisterDynamicProperty(string name, System.ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0x1623358*/ System.Runtime.Remoting.Contexts.DynamicPropertyCollection GetDynamicPropertyCollection(System.ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);
                    static /*0x1618040*/ void NotifyGlobalDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
                    static /*0x16186dc*/ bool get_HasGlobalDynamicSinks();
                    static /*0x1623fd8*/ System.Runtime.Remoting.Contexts.Context SwitchToContext(System.Runtime.Remoting.Contexts.Context newContext);
                    static /*0x1623fe0*/ System.Runtime.Remoting.Contexts.Context CreateNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    static /*0x1624ae0*/ System.LocalDataStoreSlot AllocateDataSlot();
                    static /*0x1624b50*/ System.LocalDataStoreSlot AllocateNamedDataSlot(string name);
                    static /*0x1624bc8*/ void FreeNamedDataSlot(string name);
                    static /*0x1624c40*/ System.LocalDataStoreSlot GetNamedDataSlot(string name);
                    static /*0x1624cb8*/ object GetData(System.LocalDataStoreSlot slot);
                    static /*0x1624cf4*/ void SetData(System.LocalDataStoreSlot slot, object data);
                    /*0x1623034*/ Context();
                    /*0x16230c4*/ void Finalize();
                    /*0x1623178*/ int get_ContextID();
                    /*0x1623180*/ System.Runtime.Remoting.Contexts.IContextProperty[] get_ContextProperties();
                    /*0x16231f8*/ bool get_IsDefaultContext();
                    /*0x1623208*/ bool get_NeedsContextSink();
                    /*0x1618150*/ void NotifyDynamicSinks(bool start, System.Runtime.Remoting.Messaging.IMessage req_msg, bool client_site, bool async);
                    /*0x16186c8*/ bool get_HasDynamicSinks();
                    /*0x16235f8*/ bool get_HasExitSinks();
                    /*0x16238a4*/ System.Runtime.Remoting.Contexts.IContextProperty GetProperty(string name);
                    /*0x1623a70*/ void SetProperty(System.Runtime.Remoting.Contexts.IContextProperty prop);
                    /*0x1623bd8*/ void Freeze();
                    /*0x1623d68*/ string ToString();
                    /*0x16229e0*/ System.Runtime.Remoting.Messaging.IMessageSink GetServerContextSinkChain();
                    /*0x16236c4*/ System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSinkChain();
                    /*0x1617c30*/ System.Runtime.Remoting.Messaging.IMessageSink CreateServerObjectSinkChain(System.MarshalByRefObject obj, bool forceInternalExecute);
                    /*0x1623df0*/ System.Runtime.Remoting.Messaging.IMessageSink CreateEnvoySink(System.MarshalByRefObject serverObject);
                    /*0x16247e8*/ void DoCallBack(System.Runtime.Remoting.Contexts.CrossContextDelegate deleg);
                    /*0x1624958*/ System.LocalDataStore get_MyLocalStore();
                }

                class DynamicPropertyCollection
                {
                    /*0x10*/ System.Collections.ArrayList _properties;

                    /*0x20450d8*/ DynamicPropertyCollection();
                    /*0x20444d4*/ bool get_HasProperties();
                    /*0x2044508*/ bool RegisterDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty prop);
                    /*0x204496c*/ bool UnregisterDynamicProperty(string name);
                    /*0x2044ad8*/ void NotifyMessage(bool start, System.Runtime.Remoting.Messaging.IMessage msg, bool client_site, bool async);
                    /*0x20447fc*/ int FindProperty(string name);

                    class DynamicPropertyReg
                    {
                        /*0x10*/ System.Runtime.Remoting.Contexts.IDynamicProperty Property;
                        /*0x18*/ System.Runtime.Remoting.Contexts.IDynamicMessageSink Sink;

                        /*0x180fe38*/ DynamicPropertyReg();
                    }
                }

                class ContextCallbackObject : System.ContextBoundObject
                {
                    /*0x162494c*/ ContextCallbackObject();
                    /*0x1624954*/ void DoCallBack(System.Runtime.Remoting.Contexts.CrossContextDelegate deleg);
                }

                class CrossContextChannel : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x2516d04*/ CrossContextChannel();
                    /*0x2516438*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x2516870*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);

                    class ContextRestoreSink : System.Runtime.Remoting.Messaging.IMessageSink
                    {
                        /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _next;
                        /*0x18*/ System.Runtime.Remoting.Contexts.Context _context;
                        /*0x20*/ System.Runtime.Remoting.Messaging.IMessage _call;

                        /*0x180d6c4*/ ContextRestoreSink(System.Runtime.Remoting.Messaging.IMessageSink next, System.Runtime.Remoting.Contexts.Context context, System.Runtime.Remoting.Messaging.IMessage call);
                        /*0x180d704*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                        /*0x180d9f4*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    }
                }

                class CrossContextDelegate : System.MulticastDelegate
                {
                    /*0x2516d0c*/ CrossContextDelegate(object object, nint method);
                    /*0x2516d6c*/ void Invoke();
                    /*0x2516f78*/ System.IAsyncResult BeginInvoke(System.AsyncCallback callback, object object);
                    /*0x2516fa4*/ void EndInvoke(System.IAsyncResult result);
                }

                interface IContextAttribute
                {
                    void GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                    bool IsContextOK(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                interface IContextProperty
                {
                    string get_Name();
                    void Freeze(System.Runtime.Remoting.Contexts.Context newContext);
                    bool IsNewContextOK(System.Runtime.Remoting.Contexts.Context newCtx);
                }

                interface IContributeClientContextSink
                {
                    System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IContributeDynamicSink
                {
                    System.Runtime.Remoting.Contexts.IDynamicMessageSink GetDynamicSink();
                }

                interface IContributeEnvoySink
                {
                    System.Runtime.Remoting.Messaging.IMessageSink GetEnvoySink(System.MarshalByRefObject obj, System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IContributeObjectSink
                {
                    System.Runtime.Remoting.Messaging.IMessageSink GetObjectSink(System.MarshalByRefObject obj, System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IContributeServerContextSink
                {
                    System.Runtime.Remoting.Messaging.IMessageSink GetServerContextSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                }

                interface IDynamicMessageSink
                {
                    void ProcessMessageFinish(System.Runtime.Remoting.Messaging.IMessage replyMsg, bool bCliSide, bool bAsync);
                    void ProcessMessageStart(System.Runtime.Remoting.Messaging.IMessage reqMsg, bool bCliSide, bool bAsync);
                }

                interface IDynamicProperty
                {
                    string get_Name();
                }
            }

            namespace Channels
            {
                class ChannelServices
                {
                    static /*0x0*/ System.Collections.ArrayList registeredChannels;
                    static /*0x8*/ System.Collections.ArrayList delayedClientChannels;
                    static /*0x10*/ System.Runtime.Remoting.Contexts.CrossContextChannel _crossContextSink;
                    static /*0x18*/ string CrossContextUrl;
                    static /*0x20*/ System.Collections.IList oldStartModeTypes;

                    static /*0x16105b8*/ ChannelServices();
                    static /*0x160db1c*/ System.Runtime.Remoting.Contexts.CrossContextChannel get_CrossContextChannel();
                    static /*0x160db80*/ System.Runtime.Remoting.Messaging.IMessageSink CreateClientChannelSinkChain(string url, object remoteChannelData, ref string objectUri);
                    static /*0x160e3c8*/ System.Runtime.Remoting.Messaging.IMessageSink CreateClientChannelSinkChain(System.Runtime.Remoting.Channels.IChannelSender sender, string url, object[] channelDataArray, ref string objectUri);
                    static /*0x160e5fc*/ void RegisterChannel(System.Runtime.Remoting.Channels.IChannel chnl);
                    static /*0x160e660*/ void RegisterChannel(System.Runtime.Remoting.Channels.IChannel chnl, bool ensureSecurity);
                    static /*0x160ef34*/ void RegisterChannelConfig(System.Runtime.Remoting.ChannelData channel);
                    static /*0x160fb8c*/ object CreateProvider(System.Runtime.Remoting.ProviderData prov);
                    static /*0x1610024*/ System.Runtime.Remoting.Messaging.IMessage SyncDispatchMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    static /*0x16100fc*/ System.Runtime.Remoting.Messaging.ReturnMessage CheckIncomingMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    static /*0x16103cc*/ System.Runtime.Remoting.Messaging.IMessage CheckReturnMessage(System.Runtime.Remoting.Messaging.IMessage callMsg, System.Runtime.Remoting.Messaging.IMessage retMsg);
                    static /*0x16105b0*/ bool IsLocalCall(System.Runtime.Remoting.Messaging.IMessage callMsg);
                    static /*0x160d614*/ object[] GetCurrentChannelInfo();
                }

                class CrossAppDomainData
                {
                    /*0x10*/ object _ContextID;
                    /*0x18*/ int _DomainID;
                    /*0x20*/ string _processGuid;

                    /*0x2515548*/ CrossAppDomainData(int domainId);
                    /*0x2515abc*/ int get_DomainID();
                    /*0x2515ac4*/ string get_ProcessID();
                }

                class CrossAppDomainChannel : System.Runtime.Remoting.Channels.IChannel, System.Runtime.Remoting.Channels.IChannelSender, System.Runtime.Remoting.Channels.IChannelReceiver
                {
                    static /*0x0*/ object s_lock;

                    static /*0x2515a48*/ CrossAppDomainChannel();
                    static /*0x2515338*/ void RegisterCrossAppDomainChannel();
                    /*0x251548c*/ CrossAppDomainChannel();
                    /*0x2515494*/ string get_ChannelName();
                    /*0x25154d8*/ int get_ChannelPriority();
                    /*0x25154e0*/ object get_ChannelData();
                    /*0x25155f4*/ void StartListening(object data);
                    /*0x25155f8*/ System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object data, ref string uri);
                }

                class CrossAppDomainSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    static /*0x0*/ System.Collections.Hashtable s_sinks;
                    static /*0x8*/ System.Reflection.MethodInfo processMessageMethod;
                    /*0x10*/ int _domainID;

                    static /*0x25162ac*/ CrossAppDomainSink();
                    static /*0x2515788*/ System.Runtime.Remoting.Channels.CrossAppDomainSink GetSink(int domainID);
                    static /*0x2515b00*/ System.Runtime.Remoting.Channels.CrossAppDomainSink.ProcessMessageRes ProcessMessageInDomain(byte[] arrRequest, System.Runtime.Remoting.Messaging.CADMethodCallMessage cadMsg);
                    /*0x2515acc*/ CrossAppDomainSink(int domainID);
                    /*0x2515af8*/ int get_TargetDomainId();
                    /*0x2515c54*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msgRequest);
                    /*0x25160c4*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage reqMsg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x251618c*/ void SendAsyncMessage(object data);
                    /*0x25163a8*/ void <AsyncProcessMessage>b__10_0(object data);

                    struct ProcessMessageRes
                    {
                        /*0x10*/ byte[] arrResponse;
                        /*0x18*/ System.Runtime.Remoting.Messaging.CADMethodReturnMessage cadMrm;
                    }
                }

                class CADSerializer
                {
                    static /*0x1c5fd8c*/ System.Runtime.Remoting.Messaging.IMessage DeserializeMessage(System.IO.MemoryStream mem, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    static /*0x1c5fdcc*/ System.IO.MemoryStream SerializeMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    static /*0x1c5d324*/ object DeserializeObjectSafe(byte[] mem);
                    static /*0x1c5d1b4*/ System.IO.MemoryStream SerializeObject(object obj);
                    static /*0x1c5f584*/ object DeserializeObject(System.IO.MemoryStream mem);
                }

                class AsyncRequest
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink ReplySink;
                    /*0x18*/ System.Runtime.Remoting.Messaging.IMessage MsgRequest;

                    /*0x1c97204*/ AsyncRequest(System.Runtime.Remoting.Messaging.IMessage msgRequest, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                interface IChannel
                {
                    string get_ChannelName();
                    int get_ChannelPriority();
                }

                interface IChannelDataStore
                {
                }

                interface IChannelReceiver : System.Runtime.Remoting.Channels.IChannel
                {
                    object get_ChannelData();
                    void StartListening(object data);
                }

                interface IChannelSender : System.Runtime.Remoting.Channels.IChannel
                {
                    System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object remoteChannelData, ref string objectURI);
                }

                interface IClientChannelSinkProvider
                {
                    void set_Next(System.Runtime.Remoting.Channels.IClientChannelSinkProvider value);
                }

                interface ISecurableChannel
                {
                    void set_IsSecured(bool value);
                }

                interface IServerChannelSinkProvider
                {
                    void set_Next(System.Runtime.Remoting.Channels.IServerChannelSinkProvider value);
                }

                class SinkProviderData
                {
                    /*0x10*/ string sinkName;
                    /*0x18*/ System.Collections.ArrayList children;
                    /*0x20*/ System.Collections.Hashtable properties;

                    /*0x205f2b8*/ SinkProviderData(string name);
                    /*0x205f35c*/ System.Collections.IList get_Children();
                    /*0x205f364*/ System.Collections.IDictionary get_Properties();
                }
            }

            namespace Activation
            {
                class ActivationServices
                {
                    static /*0x0*/ System.Runtime.Remoting.Activation.IActivator _constructionActivator;

                    static /*0x1c87330*/ System.Runtime.Remoting.Activation.IActivator get_ConstructionActivator();
                    static /*0x1c873c0*/ System.Runtime.Remoting.Messaging.IMessage Activate(System.Runtime.Remoting.Proxies.RemotingProxy proxy, System.Runtime.Remoting.Messaging.ConstructionCall ctorCall);
                    static /*0x1c87610*/ System.Runtime.Remoting.Messaging.IMessage RemoteActivate(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                    static /*0x1c877fc*/ System.Runtime.Remoting.Messaging.ConstructionCall CreateConstructionCall(System.Type type, string activationUrl, object[] activationAttributes);
                    static /*0x1c881c4*/ System.Runtime.Remoting.Messaging.IMessage CreateInstanceFromMessage(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                    static /*0x1c88608*/ object CreateProxyForType(System.Type type);
                    static /*0x1c88604*/ object AllocateUninitializedClassInstance(System.Type type);
                    static /*0x1c88784*/ void EnableProxyActivation(System.Type type, bool enable);
                }

                class AppDomainLevelActivator : System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x10*/ string _activationUrl;
                    /*0x18*/ System.Runtime.Remoting.Activation.IActivator _next;

                    /*0x1c8818c*/ AppDomainLevelActivator(string activationUrl, System.Runtime.Remoting.Activation.IActivator next);
                    /*0x1c8ca58*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0x1c8ca60*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                }

                class ConstructionLevelActivator : System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x1622bd0*/ ConstructionLevelActivator();
                    /*0x16228dc*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0x16228e4*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                class ContextLevelActivator : System.Runtime.Remoting.Activation.IActivator
                {
                    /*0x10*/ System.Runtime.Remoting.Activation.IActivator m_NextActivator;

                    /*0x162515c*/ ContextLevelActivator(System.Runtime.Remoting.Activation.IActivator next);
                    /*0x1625188*/ System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    /*0x1625190*/ System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage ctorCall);
                }

                interface IActivator
                {
                    System.Runtime.Remoting.Activation.IActivator get_NextActivator();
                    System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage msg);
                }

                interface IConstructionCallMessage : System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage
                {
                    System.Type get_ActivationType();
                    string get_ActivationTypeName();
                    System.Runtime.Remoting.Activation.IActivator get_Activator();
                    void set_Activator(System.Runtime.Remoting.Activation.IActivator value);
                    object[] get_CallSiteActivationAttributes();
                    System.Collections.IList get_ContextProperties();
                }

                interface IConstructionReturnMessage : System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                }

                class RemoteActivator : System.MarshalByRefObject
                {
                }
            }

            namespace Metadata
            {
                class SoapAttribute : System.Attribute
                {
                    /*0x10*/ bool _useAttribute;
                    /*0x18*/ string ProtXmlNamespace;
                    /*0x20*/ object ReflectInfo;

                    /*0x206119c*/ SoapAttribute();
                    /*0x20611a4*/ bool get_UseAttribute();
                    /*0x20611ac*/ string get_XmlNamespace();
                    /*0x20611b4*/ void SetReflectionObject(object reflectionObject);
                }

                class SoapFieldAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x28*/ string _elementName;
                    /*0x30*/ bool _isElement;

                    /*0x20611bc*/ SoapFieldAttribute();
                    /*0x20611c4*/ string get_XmlElementName();
                    /*0x20611cc*/ bool IsInteropXmlElement();
                    /*0x20611d4*/ void SetReflectionObject(object reflectionObject);
                }

                class SoapMethodAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x28*/ string _responseElement;
                    /*0x30*/ string _responseNamespace;
                    /*0x38*/ string _returnElement;
                    /*0x40*/ string _soapAction;
                    /*0x48*/ bool _useAttribute;
                    /*0x50*/ string _namespace;

                    /*0x2061280*/ SoapMethodAttribute();
                    /*0x2061288*/ bool get_UseAttribute();
                    /*0x2061290*/ string get_XmlNamespace();
                    /*0x2061298*/ void SetReflectionObject(object reflectionObject);
                }

                class SoapParameterAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x20615b0*/ SoapParameterAttribute();
                }

                class SoapTypeAttribute : System.Runtime.Remoting.Metadata.SoapAttribute
                {
                    /*0x28*/ bool _useAttribute;
                    /*0x30*/ string _xmlElementName;
                    /*0x38*/ string _xmlNamespace;
                    /*0x40*/ string _xmlTypeName;
                    /*0x48*/ string _xmlTypeNamespace;
                    /*0x50*/ bool _isType;
                    /*0x51*/ bool _isElement;

                    /*0x2062734*/ SoapTypeAttribute();
                    /*0x206273c*/ bool get_UseAttribute();
                    /*0x2062744*/ string get_XmlElementName();
                    /*0x206274c*/ string get_XmlNamespace();
                    /*0x2062754*/ string get_XmlTypeName();
                    /*0x206275c*/ string get_XmlTypeNamespace();
                    /*0x2062764*/ bool get_IsInteropXmlElement();
                    /*0x206276c*/ bool get_IsInteropXmlType();
                    /*0x2062774*/ void SetReflectionObject(object reflectionObject);
                }
            }

            namespace Messaging
            {
                class CallContext
                {
                    static /*0x1609a80*/ object SetCurrentCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext ctx);
                    static /*0x1609a88*/ System.Runtime.Remoting.Messaging.LogicalCallContext SetLogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext callCtx);
                    /*0x1609a78*/ CallContext();
                }

                class IllogicalCallContext
                {
                    /*0x10*/ System.Collections.Hashtable m_Datastore;
                    /*0x18*/ object m_HostContext;

                    /*0x1a85ca4*/ IllogicalCallContext();
                    /*0x1a85984*/ System.Collections.Hashtable get_Datastore();
                    /*0x1a859ec*/ object get_HostContext();
                    /*0x1a859f4*/ void set_HostContext(object value);
                    /*0x1a859fc*/ bool get_HasUserData();
                    /*0x1a85a2c*/ System.Runtime.Remoting.Messaging.IllogicalCallContext CreateCopy();
                }

                class LogicalCallContext : System.Runtime.Serialization.ISerializable, System.ICloneable
                {
                    static string s_CorrelationMgrSlotName = "System.Diagnostics.Trace.CorrelationManagerSlot";
                    static /*0x0*/ System.Type s_callContextType;
                    /*0x10*/ System.Collections.Hashtable m_Datastore;
                    /*0x18*/ System.Runtime.Remoting.Messaging.CallContextRemotingData m_RemotingData;
                    /*0x20*/ System.Runtime.Remoting.Messaging.CallContextSecurityData m_SecurityData;
                    /*0x28*/ object m_HostContext;
                    /*0x30*/ bool m_IsCorrelationMgr;
                    /*0x38*/ System.Runtime.Remoting.Messaging.Header[] _sendHeaders;
                    /*0x40*/ System.Runtime.Remoting.Messaging.Header[] _recvHeaders;

                    static /*0x1a97608*/ LogicalCallContext();
                    /*0x1a96624*/ LogicalCallContext();
                    /*0x1a9662c*/ LogicalCallContext(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x1a96968*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x1a96d0c*/ object Clone();
                    /*0x1a9733c*/ void Merge(System.Runtime.Remoting.Messaging.LogicalCallContext lc);
                    /*0x1a97590*/ bool get_HasInfo();
                    /*0x1a96cdc*/ bool get_HasUserData();
                    /*0x1a96900*/ System.Collections.Hashtable get_Datastore();

                    struct Reader
                    {
                        /*0x10*/ System.Runtime.Remoting.Messaging.LogicalCallContext m_ctx;

                        /*0xacae50*/ Reader(System.Runtime.Remoting.Messaging.LogicalCallContext ctx);
                        /*0xacae58*/ bool get_IsNull();
                        /*0xacae68*/ bool get_HasInfo();
                        /*0xacae7c*/ System.Runtime.Remoting.Messaging.LogicalCallContext Clone();
                    }
                }

                class CallContextSecurityData : System.ICloneable
                {
                    /*0x10*/ System.Security.Principal.IPrincipal _principal;

                    /*0x1609be0*/ CallContextSecurityData();
                    /*0x1609b64*/ bool get_HasInfo();
                    /*0x1609b74*/ object Clone();
                }

                class CallContextRemotingData : System.ICloneable
                {
                    /*0x10*/ string _logicalCallID;

                    /*0x1609b5c*/ CallContextRemotingData();
                    /*0x1609ad0*/ string get_LogicalCallID();
                    /*0x1609ad8*/ void set_LogicalCallID(string value);
                    /*0x1609ae0*/ bool get_HasInfo();
                    /*0x1609af0*/ object Clone();
                }

                enum ArgInfoType
                {
                    In = 0,
                    Out = 1,
                }

                class ArgInfo
                {
                    /*0x10*/ int[] _paramMap;
                    /*0x18*/ int _inoutArgCount;
                    /*0x20*/ System.Reflection.MethodBase _method;

                    /*0x1c8d258*/ ArgInfo(System.Reflection.MethodBase method, System.Runtime.Remoting.Messaging.ArgInfoType type);
                    /*0x1c8d418*/ object[] GetInOutArgs(object[] args);
                }

                class AsyncResult : System.IAsyncResult, System.Runtime.Remoting.Messaging.IMessageSink, System.Threading.IThreadPoolWorkItem
                {
                    static /*0x0*/ System.Threading.ContextCallback ccb;
                    /*0x10*/ object async_state;
                    /*0x18*/ System.Threading.WaitHandle handle;
                    /*0x20*/ object async_delegate;
                    /*0x28*/ nint data;
                    /*0x30*/ object object_data;
                    /*0x38*/ bool sync_completed;
                    /*0x39*/ bool completed;
                    /*0x3a*/ bool endinvoke_called;
                    /*0x40*/ object async_callback;
                    /*0x48*/ System.Threading.ExecutionContext current;
                    /*0x50*/ System.Threading.ExecutionContext original;
                    /*0x58*/ long add_time;
                    /*0x60*/ System.Runtime.Remoting.Messaging.MonoMethodMessage call_message;
                    /*0x68*/ System.Runtime.Remoting.Messaging.IMessageCtrl message_ctrl;
                    /*0x70*/ System.Runtime.Remoting.Messaging.IMessage reply_message;
                    /*0x78*/ System.Threading.WaitCallback orig_cb;

                    static /*0x1c97820*/ AsyncResult();
                    static /*0x1c97338*/ void WaitCallback_Context(object state);
                    /*0x1c9723c*/ AsyncResult();
                    /*0x1c97244*/ AsyncResult(System.Threading.WaitCallback cb, object state, bool capture_context);
                    /*0x1c973c8*/ object get_AsyncState();
                    /*0x1c973d0*/ System.Threading.WaitHandle get_AsyncWaitHandle();
                    /*0x1c974e8*/ bool get_CompletedSynchronously();
                    /*0x1c974f0*/ bool get_IsCompleted();
                    /*0x1c974f8*/ bool get_EndInvokeCalled();
                    /*0x1c97500*/ void set_EndInvokeCalled(bool value);
                    /*0x1c9750c*/ object get_AsyncDelegate();
                    /*0x1c97514*/ System.Runtime.Remoting.Messaging.IMessageSink get_NextSink();
                    /*0x1c9751c*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x1c9755c*/ System.Runtime.Remoting.Messaging.IMessage GetReplyMessage();
                    /*0x1c97564*/ void SetMessageCtrl(System.Runtime.Remoting.Messaging.IMessageCtrl mc);
                    /*0x1c9756c*/ void SetCompletedSynchronously(bool completed);
                    /*0x1c97578*/ System.Runtime.Remoting.Messaging.IMessage EndInvoke();
                    /*0x1c97690*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x1c97804*/ System.Runtime.Remoting.Messaging.MonoMethodMessage get_CallMessage();
                    /*0x1c9780c*/ void set_CallMessage(System.Runtime.Remoting.Messaging.MonoMethodMessage value);
                    /*0x1c97814*/ void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem();
                    /*0x1c9781c*/ void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae);
                    /*0x1c97818*/ object Invoke();
                    /*0x1c978b0*/ void <.ctor>b__17_0(object <p0>);
                }

                class CADArgHolder
                {
                    /*0x10*/ int index;

                    /*0x1c5ce08*/ CADArgHolder(int i);
                }

                class CADObjRef
                {
                    /*0x10*/ System.Runtime.Remoting.ObjRef objref;
                    /*0x18*/ int SourceDomain;
                    /*0x20*/ byte[] TypeInfo;

                    /*0x1c5e5a4*/ CADObjRef(System.Runtime.Remoting.ObjRef o, int sourceDomain);
                }

                class CADMethodRef
                {
                    /*0x10*/ bool ctor;
                    /*0x18*/ string typeName;
                    /*0x20*/ string methodName;
                    /*0x28*/ string[] param_names;
                    /*0x30*/ string[] generic_arg_names;

                    /*0x1c5cec8*/ CADMethodRef(System.Runtime.Remoting.Messaging.IMethodMessage msg);
                    /*0x1c5f624*/ System.Type[] GetTypes(string[] typeArray);
                    /*0x1c5d3c4*/ System.Reflection.MethodBase Resolve();
                }

                class CADMessageBase
                {
                    /*0x10*/ object[] _args;
                    /*0x18*/ byte[] _serializedArgs;
                    /*0x20*/ int _propertyCount;
                    /*0x28*/ System.Runtime.Remoting.Messaging.CADArgHolder _callContext;
                    /*0x30*/ byte[] serializedMethod;

                    static /*0x1c5d7f8*/ System.Type[] GetSignature(System.Reflection.MethodBase methodBase, bool load);
                    static /*0x1c5d9bc*/ int MarshalProperties(System.Collections.IDictionary dict, ref System.Collections.ArrayList args);
                    static /*0x1c5e0c0*/ void UnmarshalProperties(System.Collections.IDictionary dict, int count, System.Collections.ArrayList args);
                    static /*0x1c5e208*/ bool IsPossibleToIgnoreMarshal(object obj);
                    /*0x1c5ce34*/ CADMessageBase(System.Runtime.Remoting.Messaging.IMethodMessage msg);
                    /*0x1c5d2a0*/ System.Reflection.MethodBase GetMethod();
                    /*0x1c5e3cc*/ object MarshalArgument(object arg, ref System.Collections.ArrayList args);
                    /*0x1c5e5f8*/ object UnmarshalArgument(object arg, System.Collections.ArrayList args);
                    /*0x1c5ecf0*/ object[] MarshalArguments(object[] arguments, ref System.Collections.ArrayList args);
                    /*0x1c5edfc*/ object[] UnmarshalArguments(object[] arguments, System.Collections.ArrayList args);
                    /*0x1c5ef08*/ void SaveLogicalCallContext(System.Runtime.Remoting.Messaging.IMethodMessage msg, ref System.Collections.ArrayList serializeList);
                    /*0x1c5f160*/ System.Runtime.Remoting.Messaging.LogicalCallContext GetLogicalCallContext(System.Collections.ArrayList args);
                }

                class CADMethodCallMessage : System.Runtime.Remoting.Messaging.CADMessageBase
                {
                    /*0x38*/ string _uri;

                    static /*0x1c5f1fc*/ System.Runtime.Remoting.Messaging.CADMethodCallMessage Create(System.Runtime.Remoting.Messaging.IMessage callMsg);
                    /*0x1c5f288*/ CADMethodCallMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage callMsg);
                    /*0x1c5f1f4*/ string get_Uri();
                    /*0x1c5f494*/ System.Collections.ArrayList GetArguments();
                    /*0x1c5f60c*/ object[] GetArgs(System.Collections.ArrayList args);
                    /*0x1c5f61c*/ int get_PropertiesCount();
                }

                class CADMethodReturnMessage : System.Runtime.Remoting.Messaging.CADMessageBase
                {
                    /*0x38*/ object _returnValue;
                    /*0x40*/ System.Runtime.Remoting.Messaging.CADArgHolder _exception;
                    /*0x48*/ System.Type[] _sig;

                    static /*0x1c5f78c*/ System.Runtime.Remoting.Messaging.CADMethodReturnMessage Create(System.Runtime.Remoting.Messaging.IMessage callMsg);
                    /*0x1c5f818*/ CADMethodReturnMessage(System.Runtime.Remoting.Messaging.IMethodReturnMessage retMsg);
                    /*0x1c5fbc4*/ System.Collections.ArrayList GetArguments();
                    /*0x1c5fcb4*/ object[] GetArgs(System.Collections.ArrayList args);
                    /*0x1c5fcc4*/ object GetReturnValue(System.Collections.ArrayList args);
                    /*0x1c5fcd4*/ System.Exception GetException(System.Collections.ArrayList args);
                    /*0x1c5fd84*/ int get_PropertiesCount();
                }

                class ClientContextTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Contexts.Context _context;

                    /*0x1618214*/ ClientContextTerminatorSink(System.Runtime.Remoting.Contexts.Context ctx);
                    /*0x1618240*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x1618440*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ClientContextReplySink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _replySink;
                    /*0x18*/ System.Runtime.Remoting.Contexts.Context _context;

                    /*0x1617ef0*/ ClientContextReplySink(System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x1617f28*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x16181d4*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ConstructionCall : System.Runtime.Remoting.Messaging.MethodCall, System.Runtime.Remoting.Activation.IConstructionCallMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage
                {
                    /*0x68*/ System.Runtime.Remoting.Activation.IActivator _activator;
                    /*0x70*/ object[] _activationAttributes;
                    /*0x78*/ System.Collections.IList _contextProperties;
                    /*0x80*/ System.Type _activationType;
                    /*0x88*/ string _activationTypeName;
                    /*0x90*/ bool _isContextOk;
                    /*0x98*/ System.Runtime.Remoting.Proxies.RemotingProxy _sourceProxy;

                    /*0x16217d8*/ ConstructionCall(System.Type type);
                    /*0x162182c*/ ConstructionCall(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x1621834*/ void InitDictionary();
                    /*0x1621930*/ bool get_IsContextOk();
                    /*0x1621938*/ void set_IsContextOk(bool value);
                    /*0x1621944*/ System.Type get_ActivationType();
                    /*0x1621a20*/ string get_ActivationTypeName();
                    /*0x1621a28*/ System.Runtime.Remoting.Activation.IActivator get_Activator();
                    /*0x1621a30*/ void set_Activator(System.Runtime.Remoting.Activation.IActivator value);
                    /*0x1621a38*/ object[] get_CallSiteActivationAttributes();
                    /*0x1621a40*/ void SetActivationAttributes(object[] attributes);
                    /*0x1621a48*/ System.Collections.IList get_ContextProperties();
                    /*0x1621ab0*/ void InitMethodProperty(string key, object value);
                    /*0x1621d14*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x1621ecc*/ System.Collections.IDictionary get_Properties();
                    /*0x1621ed4*/ System.Runtime.Remoting.Proxies.RemotingProxy get_SourceProxy();
                    /*0x1621edc*/ void set_SourceProxy(System.Runtime.Remoting.Proxies.RemotingProxy value);
                }

                class ConstructionCallDictionary : System.Runtime.Remoting.Messaging.MessageDictionary
                {
                    static /*0x0*/ string[] InternalKeys;

                    static /*0x1622590*/ ConstructionCallDictionary();
                    /*0x16218a8*/ ConstructionCallDictionary(System.Runtime.Remoting.Activation.IConstructionCallMessage message);
                    /*0x1621ee4*/ object GetMethodProperty(string key);
                    /*0x162230c*/ void SetMethodProperty(string key, object value);
                }

                class ConstructionResponse : System.Runtime.Remoting.Messaging.MethodResponse, System.Runtime.Remoting.Activation.IConstructionReturnMessage, System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0x1622bd8*/ ConstructionResponse(object resultObject, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0x1622bec*/ ConstructionResponse(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0x1622bf4*/ ConstructionResponse(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x1622bfc*/ System.Collections.IDictionary get_Properties();
                }

                class EnvoyTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    static /*0x0*/ System.Runtime.Remoting.Messaging.EnvoyTerminatorSink Instance;

                    static /*0x245ad14*/ EnvoyTerminatorSink();
                    /*0x245ad0c*/ EnvoyTerminatorSink();
                    /*0x245ab70*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x245ac34*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ErrorMessage : System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                    /*0x10*/ string _uri;

                    /*0x245aed4*/ ErrorMessage();
                    /*0x245af28*/ int get_ArgCount();
                    /*0x245af30*/ object[] get_Args();
                    /*0x245af38*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x245af40*/ string get_MethodName();
                    /*0x245af84*/ object get_MethodSignature();
                    /*0x245af8c*/ System.Collections.IDictionary get_Properties();
                    /*0x245af94*/ string get_TypeName();
                    /*0x245afd8*/ string get_Uri();
                    /*0x245afe0*/ object GetArg(int arg_num);
                    /*0x245afe8*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                }

                class Header
                {
                    /*0x10*/ string HeaderNamespace;
                    /*0x18*/ bool MustUnderstand;
                    /*0x20*/ string Name;
                    /*0x28*/ object Value;
                }

                class HeaderHandler : System.MulticastDelegate
                {
                    /*0x1a81230*/ HeaderHandler(object object, nint method);
                    /*0x1a81290*/ object Invoke(System.Runtime.Remoting.Messaging.Header[] headers);
                    /*0x1a81610*/ System.IAsyncResult BeginInvoke(System.Runtime.Remoting.Messaging.Header[] headers, System.AsyncCallback callback, object object);
                    /*0x1a81634*/ object EndInvoke(System.IAsyncResult result);
                }

                interface IInternalMessage
                {
                    System.Runtime.Remoting.Identity get_TargetIdentity();
                    void set_TargetIdentity(System.Runtime.Remoting.Identity value);
                    string get_Uri();
                    void set_Uri(string value);
                }

                interface IMessage
                {
                    System.Collections.IDictionary get_Properties();
                }

                interface IMessageCtrl
                {
                }

                interface IMessageSink
                {
                    System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                interface IMethodCallMessage : System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                }

                interface IMethodMessage : System.Runtime.Remoting.Messaging.IMessage
                {
                    int get_ArgCount();
                    object[] get_Args();
                    System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    System.Reflection.MethodBase get_MethodBase();
                    string get_MethodName();
                    object get_MethodSignature();
                    string get_TypeName();
                    string get_Uri();
                    object GetArg(int argNum);
                }

                interface IMethodReturnMessage : System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
                {
                    System.Exception get_Exception();
                    object[] get_OutArgs();
                    object get_ReturnValue();
                }

                class MethodCall : System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Serialization.ISerializable, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ string _uri;
                    /*0x18*/ string _typeName;
                    /*0x20*/ string _methodName;
                    /*0x28*/ object[] _args;
                    /*0x30*/ System.Type[] _methodSignature;
                    /*0x38*/ System.Reflection.MethodBase _methodBase;
                    /*0x40*/ System.Runtime.Remoting.Messaging.LogicalCallContext _callContext;
                    /*0x48*/ System.Runtime.Remoting.Identity _targetIdentity;
                    /*0x50*/ System.Type[] _genericArguments;
                    /*0x58*/ System.Collections.IDictionary ExternalProperties;
                    /*0x60*/ System.Collections.IDictionary InternalProperties;

                    static /*0x1c1cacc*/ string GetTypeNameFromAssemblyQualifiedName(string aqname);
                    /*0x1c1b054*/ MethodCall(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x1c1b0f0*/ MethodCall(System.Runtime.Remoting.Messaging.CADMethodCallMessage msg);
                    /*0x1c1b218*/ MethodCall();
                    /*0x1c1b220*/ void CopyFrom(System.Runtime.Remoting.Messaging.IMethodMessage call);
                    /*0x1c1b5a0*/ void InitMethodProperty(string key, object value);
                    /*0x1c1b990*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x1c1bde0*/ int get_ArgCount();
                    /*0x1c1bdfc*/ object[] get_Args();
                    /*0x1c1be04*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x1c1be6c*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x1c1c5e0*/ string get_MethodName();
                    /*0x1c1c620*/ object get_MethodSignature();
                    /*0x1c1c75c*/ System.Collections.IDictionary get_Properties();
                    /*0x1c1c798*/ void InitDictionary();
                    /*0x1c1c824*/ string get_TypeName();
                    /*0x1c1c878*/ string get_Uri();
                    /*0x1c1c880*/ void set_Uri(string value);
                    /*0x1c1c888*/ string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri();
                    /*0x1c1c890*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value);
                    /*0x1c1c898*/ object GetArg(int argNum);
                    /*0x1c1c8d4*/ void Init();
                    /*0x1c1bea4*/ void ResolveMethod();
                    /*0x1c1c8d8*/ System.Type CastTo(string clientType, System.Type serverType);
                    /*0x1c1cb78*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0x1c1cb80*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                    /*0x1c1ca84*/ System.Type[] get_GenericArguments();
                }

                class MCMDictionary : System.Runtime.Remoting.Messaging.MessageDictionary
                {
                    static /*0x0*/ string[] InternalKeys;

                    static /*0x1a9813c*/ MCMDictionary();
                    /*0x1a980b4*/ MCMDictionary(System.Runtime.Remoting.Messaging.IMethodMessage message);
                }

                class MessageDictionary : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable
                {
                    /*0x10*/ System.Collections.IDictionary _internalProperties;
                    /*0x18*/ System.Runtime.Remoting.Messaging.IMethodMessage _message;
                    /*0x20*/ string[] _methodKeys;
                    /*0x28*/ bool _ownProperties;

                    /*0x1c18558*/ MessageDictionary(System.Runtime.Remoting.Messaging.IMethodMessage message);
                    /*0x1c18584*/ bool HasUserData();
                    /*0x1c18690*/ System.Collections.IDictionary get_InternalDictionary();
                    /*0x1c18718*/ void set_MethodKeys(string[] value);
                    /*0x1c18720*/ System.Collections.IDictionary AllocInternalProperties();
                    /*0x1c18784*/ System.Collections.IDictionary GetInternalProperties();
                    /*0x1c187c0*/ bool IsOverridenKey(string key);
                    /*0x1c18858*/ object get_Item(object key);
                    /*0x1c189b8*/ void set_Item(object key, object value);
                    /*0x1c18b38*/ object GetMethodProperty(string key);
                    /*0x1c1915c*/ void SetMethodProperty(string key, object value);
                    /*0x1c19448*/ System.Collections.ICollection get_Keys();
                    /*0x1c19868*/ System.Collections.ICollection get_Values();
                    /*0x1c189bc*/ void Add(object key, object value);
                    /*0x1c19c64*/ bool Contains(object key);
                    /*0x1c19dc0*/ void Remove(object key);
                    /*0x1c19f58*/ int get_Count();
                    /*0x1c1a02c*/ bool get_IsSynchronized();
                    /*0x1c1a034*/ object get_SyncRoot();
                    /*0x1c1a038*/ void CopyTo(System.Array array, int index);
                    /*0x1c1a104*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    /*0x1c1a164*/ System.Collections.IDictionaryEnumerator GetEnumerator();

                    class DictionaryEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
                    {
                        /*0x10*/ System.Runtime.Remoting.Messaging.MessageDictionary _methodDictionary;
                        /*0x18*/ System.Collections.IDictionaryEnumerator _hashtableEnum;
                        /*0x20*/ int _posMethod;

                        /*0x1814bf0*/ DictionaryEnumerator(System.Runtime.Remoting.Messaging.MessageDictionary methodDictionary);
                        /*0x1814ce8*/ object get_Current();
                        /*0x1814ecc*/ bool MoveNext();
                        /*0x18150a8*/ void Reset();
                        /*0x1814d50*/ System.Collections.DictionaryEntry get_Entry();
                        /*0x1815160*/ object get_Key();
                        /*0x1815164*/ object get_Value();
                    }
                }

                class MethodResponse : System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Serialization.ISerializable, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ string _methodName;
                    /*0x18*/ string _uri;
                    /*0x20*/ string _typeName;
                    /*0x28*/ System.Reflection.MethodBase _methodBase;
                    /*0x30*/ object _returnValue;
                    /*0x38*/ System.Exception _exception;
                    /*0x40*/ System.Type[] _methodSignature;
                    /*0x48*/ System.Runtime.Remoting.Messaging.ArgInfo _inArgInfo;
                    /*0x50*/ object[] _args;
                    /*0x58*/ object[] _outArgs;
                    /*0x60*/ System.Runtime.Remoting.Messaging.IMethodCallMessage _callMsg;
                    /*0x68*/ System.Runtime.Remoting.Messaging.LogicalCallContext _callContext;
                    /*0x70*/ System.Runtime.Remoting.Identity _targetIdentity;
                    /*0x78*/ System.Collections.IDictionary ExternalProperties;
                    /*0x80*/ System.Collections.IDictionary InternalProperties;

                    /*0x1c1cdb8*/ MethodResponse(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0x1c1ced8*/ MethodResponse(object returnValue, object[] outArgs, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage msg);
                    /*0x1c1cfc0*/ MethodResponse(System.Runtime.Remoting.Messaging.IMethodCallMessage msg, System.Runtime.Remoting.Messaging.CADMethodReturnMessage retmsg);
                    /*0x1c1d234*/ MethodResponse(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x1c1d2b0*/ void InitMethodProperty(string key, object value);
                    /*0x1c1d70c*/ int get_ArgCount();
                    /*0x1c1d724*/ object[] get_Args();
                    /*0x1c1d72c*/ System.Exception get_Exception();
                    /*0x1c1d734*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x1c1d79c*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x1c1d8b8*/ string get_MethodName();
                    /*0x1c1da40*/ object get_MethodSignature();
                    /*0x1c1db44*/ object[] get_OutArgs();
                    /*0x1c1dbfc*/ System.Collections.IDictionary get_Properties();
                    /*0x1c1ddc4*/ object get_ReturnValue();
                    /*0x1c1d97c*/ string get_TypeName();
                    /*0x1c1ddcc*/ string get_Uri();
                    /*0x1c1de90*/ void set_Uri(string value);
                    /*0x1c1de98*/ string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri();
                    /*0x1c1de9c*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value);
                    /*0x1c1dea4*/ object GetArg(int argNum);
                    /*0x1c1dee0*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                    /*0x1c1e354*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0x1c1e35c*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                }

                class MethodReturnDictionary : System.Runtime.Remoting.Messaging.MessageDictionary
                {
                    static /*0x0*/ string[] InternalReturnKeys;
                    static /*0x8*/ string[] InternalExceptionKeys;

                    static /*0x1c1e364*/ MethodReturnDictionary();
                    /*0x1c1dc94*/ MethodReturnDictionary(System.Runtime.Remoting.Messaging.IMethodReturnMessage message);
                }

                class MonoMethodMessage : System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    static /*0x0*/ string CallContextKey;
                    static /*0x8*/ string UriKey;
                    /*0x10*/ System.Reflection.MonoMethod method;
                    /*0x18*/ object[] args;
                    /*0x20*/ string[] names;
                    /*0x28*/ byte[] arg_types;
                    /*0x30*/ System.Runtime.Remoting.Messaging.LogicalCallContext ctx;
                    /*0x38*/ object rval;
                    /*0x40*/ System.Exception exc;
                    /*0x48*/ System.Runtime.Remoting.Messaging.AsyncResult asyncResult;
                    /*0x50*/ System.Runtime.Remoting.Messaging.CallType call_type;
                    /*0x58*/ string uri;
                    /*0x60*/ System.Runtime.Remoting.Messaging.MCMDictionary properties;
                    /*0x68*/ System.Type[] methodSignature;
                    /*0x70*/ System.Runtime.Remoting.Identity identity;

                    static /*0x22a3aa0*/ MonoMethodMessage();
                    static /*0x22a32f0*/ System.Reflection.MethodInfo GetMethodInfo(System.Type type, string methodName);
                    /*0x22a30f4*/ MonoMethodMessage(System.Reflection.MethodBase method, object[] out_args);
                    /*0x22a31b8*/ MonoMethodMessage(System.Reflection.MethodInfo minfo, object[] in_args, object[] out_args);
                    /*0x22a33ac*/ MonoMethodMessage(System.Type type, string methodName, object[] in_args);
                    /*0x22a2e64*/ void InitMessage(System.Reflection.MonoMethod method, object[] out_args);
                    /*0x22a3440*/ System.Collections.IDictionary get_Properties();
                    /*0x22a34ac*/ int get_ArgCount();
                    /*0x22a3578*/ object[] get_Args();
                    /*0x22a3580*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x22a3588*/ void set_LogicalCallContext(System.Runtime.Remoting.Messaging.LogicalCallContext value);
                    /*0x22a3590*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x22a3598*/ string get_MethodName();
                    /*0x22a361c*/ object get_MethodSignature();
                    /*0x22a3744*/ string get_TypeName();
                    /*0x22a37dc*/ string get_Uri();
                    /*0x22a37e4*/ void set_Uri(string value);
                    /*0x22a37ec*/ object GetArg(int arg_num);
                    /*0x22a3828*/ System.Exception get_Exception();
                    /*0x22a3830*/ int get_OutArgCount();
                    /*0x22a38a8*/ object[] get_OutArgs();
                    /*0x22a39e4*/ object get_ReturnValue();
                    /*0x22a39ec*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0x22a39f4*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                    /*0x22a39fc*/ System.Runtime.Remoting.Messaging.AsyncResult get_AsyncResult();
                    /*0x22a34f0*/ System.Runtime.Remoting.Messaging.CallType get_CallType();
                    /*0x22a3a04*/ bool NeedsOutProcessing(ref int outCount);
                }

                enum CallType
                {
                    Sync = 0,
                    BeginInvoke = 1,
                    EndInvoke = 2,
                    OneWay = 3,
                }

                class OneWayAttribute : System.Attribute
                {
                }

                class RemotingSurrogate : System.Runtime.Serialization.ISerializationSurrogate
                {
                    /*0x1998898*/ RemotingSurrogate();
                    /*0x19987c0*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc);
                    /*0x1998858*/ object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc, System.Runtime.Serialization.ISurrogateSelector selector);
                }

                class ObjRefSurrogate : System.Runtime.Serialization.ISerializationSurrogate
                {
                    /*0x22b1794*/ ObjRefSurrogate();
                    /*0x22b1634*/ void GetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc);
                    /*0x22b1744*/ object SetObjectData(object obj, System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc, System.Runtime.Serialization.ISurrogateSelector selector);
                }

                class RemotingSurrogateSelector : System.Runtime.Serialization.ISurrogateSelector
                {
                    static /*0x0*/ System.Type s_cachedTypeObjRef;
                    static /*0x8*/ System.Runtime.Remoting.Messaging.ObjRefSurrogate _objRefSurrogate;
                    static /*0x10*/ System.Runtime.Remoting.Messaging.RemotingSurrogate _objRemotingSurrogate;
                    /*0x10*/ System.Runtime.Serialization.ISurrogateSelector _next;

                    static /*0x1998a60*/ RemotingSurrogateSelector();
                    /*0x1995080*/ RemotingSurrogateSelector();
                    /*0x19988a0*/ System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(System.Type type, System.Runtime.Serialization.StreamingContext context, ref System.Runtime.Serialization.ISurrogateSelector ssout);
                }

                class ReturnMessage : System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Remoting.Messaging.IInternalMessage
                {
                    /*0x10*/ object[] _outArgs;
                    /*0x18*/ object[] _args;
                    /*0x20*/ System.Runtime.Remoting.Messaging.LogicalCallContext _callCtx;
                    /*0x28*/ object _returnValue;
                    /*0x30*/ string _uri;
                    /*0x38*/ System.Exception _exception;
                    /*0x40*/ System.Reflection.MethodBase _methodBase;
                    /*0x48*/ string _methodName;
                    /*0x50*/ System.Type[] _methodSignature;
                    /*0x58*/ string _typeName;
                    /*0x60*/ System.Runtime.Remoting.Messaging.MethodReturnDictionary _properties;
                    /*0x68*/ System.Runtime.Remoting.Identity _targetIdentity;
                    /*0x70*/ System.Runtime.Remoting.Messaging.ArgInfo _inArgInfo;

                    /*0x198dd90*/ ReturnMessage(object ret, object[] outArgs, int outArgsCount, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm);
                    /*0x198dc34*/ ReturnMessage(System.Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm);
                    /*0x199fc38*/ int get_ArgCount();
                    /*0x199fc54*/ object[] get_Args();
                    /*0x199fc5c*/ System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext();
                    /*0x199fcc4*/ System.Reflection.MethodBase get_MethodBase();
                    /*0x199fccc*/ string get_MethodName();
                    /*0x199fd28*/ object get_MethodSignature();
                    /*0x199fe68*/ System.Collections.IDictionary get_Properties();
                    /*0x199fed4*/ string get_TypeName();
                    /*0x199ff44*/ string get_Uri();
                    /*0x199ff4c*/ void set_Uri(string value);
                    /*0x199ff54*/ string System.Runtime.Remoting.Messaging.IInternalMessage.get_Uri();
                    /*0x199ff5c*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_Uri(string value);
                    /*0x199ff64*/ object GetArg(int argNum);
                    /*0x199ffa0*/ System.Exception get_Exception();
                    /*0x199ffa8*/ object[] get_OutArgs();
                    /*0x19a0054*/ object get_ReturnValue();
                    /*0x19a005c*/ System.Runtime.Remoting.Identity System.Runtime.Remoting.Messaging.IInternalMessage.get_TargetIdentity();
                    /*0x19a0064*/ void System.Runtime.Remoting.Messaging.IInternalMessage.set_TargetIdentity(System.Runtime.Remoting.Identity value);
                }

                class ServerContextTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x2057b14*/ ServerContextTerminatorSink();
                    /*0x20578e0*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x2057a20*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ServerObjectTerminatorSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _nextSink;

                    /*0x20581b0*/ ServerObjectTerminatorSink(System.Runtime.Remoting.Messaging.IMessageSink nextSink);
                    /*0x20581dc*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x2058364*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class ServerObjectReplySink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.Runtime.Remoting.Messaging.IMessageSink _replySink;
                    /*0x18*/ System.Runtime.Remoting.ServerIdentity _identity;

                    /*0x205805c*/ ServerObjectReplySink(System.Runtime.Remoting.ServerIdentity identity, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x2058094*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x2058170*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                }

                class StackBuilderSink : System.Runtime.Remoting.Messaging.IMessageSink
                {
                    /*0x10*/ System.MarshalByRefObject _target;
                    /*0x18*/ System.Runtime.Remoting.Proxies.RealProxy _rp;

                    /*0x249fdf0*/ StackBuilderSink(System.MarshalByRefObject obj, bool forceInternalExecute);
                    /*0x249fea8*/ System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x24a03f0*/ System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);
                    /*0x24a0518*/ void ExecuteAsyncMessage(object ob);
                    /*0x249ff8c*/ void CheckParameters(System.Runtime.Remoting.Messaging.IMessage msg);
                    /*0x24a0948*/ void <AsyncProcessMessage>b__4_0(object data);
                }
            }
        }

        namespace ExceptionServices
        {
            class HandleProcessCorruptedStateExceptionsAttribute : System.Attribute
            {
                /*0x20f1780*/ HandleProcessCorruptedStateExceptionsAttribute();
            }

            class FirstChanceExceptionEventArgs : System.EventArgs
            {
            }

            class ExceptionDispatchInfo
            {
                /*0x10*/ System.Exception m_Exception;
                /*0x18*/ object m_stackTrace;

                static /*0x245d510*/ System.Runtime.ExceptionServices.ExceptionDispatchInfo Capture(System.Exception source);
                static /*0x245d618*/ void Throw(System.Exception source);
                /*0x245d3d4*/ ExceptionDispatchInfo(System.Exception exception);
                /*0x245d508*/ object get_BinaryStackTraceArray();
                /*0x245d5cc*/ System.Exception get_SourceException();
                /*0x245d5d4*/ void Throw();
            }
        }

        namespace ConstrainedExecution
        {
            class CriticalFinalizerObject
            {
                /*0x2515328*/ CriticalFinalizerObject();
                /*0x2515330*/ void Finalize();
            }

            enum Consistency
            {
                MayCorruptProcess = 0,
                MayCorruptAppDomain = 1,
                MayCorruptInstance = 2,
                WillNotCorruptState = 3,
            }

            enum Cer
            {
                None = 0,
                MayFail = 1,
                Success = 2,
            }

            class ReliabilityContractAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.ConstrainedExecution.Consistency _consistency;
                /*0x14*/ System.Runtime.ConstrainedExecution.Cer _cer;

                /*0x199145c*/ ReliabilityContractAttribute(System.Runtime.ConstrainedExecution.Consistency consistencyGuarantee, System.Runtime.ConstrainedExecution.Cer cer);
            }
        }

        namespace CompilerServices
        {
            interface ITuple
            {
                int get_Length();
            }

            class IsByRefLikeAttribute : System.Attribute
            {
                /*0x1a8a2dc*/ IsByRefLikeAttribute();
            }

            class IsReadOnlyAttribute : System.Attribute
            {
                /*0x1a8a2e4*/ IsReadOnlyAttribute();
            }

            class TupleElementNamesAttribute : System.Attribute
            {
                /*0x10*/ string[] _transformNames;

                /*0x207b604*/ TupleElementNamesAttribute(string[] transformNames);
            }

            struct AsyncVoidMethodBuilder
            {
                /*0x10*/ System.Threading.SynchronizationContext m_synchronizationContext;
                /*0x18*/ System.Runtime.CompilerServices.AsyncMethodBuilderCore m_coreState;
                /*0x28*/ System.Threading.Tasks.Task m_task;

                static /*0x1c4cb20*/ System.Runtime.CompilerServices.AsyncVoidMethodBuilder Create();
                void Start<TStateMachine>(ref TStateMachine stateMachine);
                /*0xad7234*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0xad7240*/ void SetResult();
                /*0xad7248*/ void SetException(System.Exception exception);
                /*0xad7250*/ void NotifySynchronizationContextOfCompletion();
                /*0xad7258*/ System.Threading.Tasks.Task get_Task();
            }

            struct AsyncTaskMethodBuilder
            {
                static /*0x0*/ System.Threading.Tasks.Task<System.Threading.Tasks.VoidTaskResult> s_cachedCompleted;
                /*0x10*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder<System.Threading.Tasks.VoidTaskResult> m_builder;

                static /*0x1c97cb4*/ AsyncTaskMethodBuilder();
                static /*0x1c97b20*/ System.Runtime.CompilerServices.AsyncTaskMethodBuilder Create();
                void Start<TStateMachine>(ref TStateMachine stateMachine);
                /*0xada028*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                /*0xada030*/ System.Threading.Tasks.Task get_Task();
                /*0xada038*/ void SetResult();
                /*0xada040*/ void SetException(System.Exception exception);
            }

            struct AsyncTaskMethodBuilder<TResult>
            {
                static /*0x0*/ System.Threading.Tasks.Task<TResult> s_defaultResultTask;
                /*0x0*/ System.Runtime.CompilerServices.AsyncMethodBuilderCore m_coreState;
                /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;

                static AsyncTaskMethodBuilder();
                static System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult> Create();
                void Start<TStateMachine>(ref TStateMachine stateMachine);
                void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine);
                System.Threading.Tasks.Task<TResult> get_Task();
                void SetResult(TResult result);
                void SetResult(System.Threading.Tasks.Task<TResult> completedTask);
                void SetException(System.Exception exception);
                System.Threading.Tasks.Task<TResult> GetTaskForResult(TResult result);
            }

            class AsyncTaskCache
            {
                static /*0x0*/ System.Threading.Tasks.Task<bool> TrueTask;
                static /*0x8*/ System.Threading.Tasks.Task<bool> FalseTask;
                static /*0x10*/ System.Threading.Tasks.Task<int> Int32Tasks;

                static /*0x1c97a8c*/ AsyncTaskCache();
                static /*0x1c97970*/ System.Threading.Tasks.Task<int> CreateInt32Tasks();
                static System.Threading.Tasks.Task<TResult> CreateCacheableTask<TResult>(TResult result);
            }

            struct AsyncMethodBuilderCore
            {
                /*0x10*/ System.Runtime.CompilerServices.IAsyncStateMachine m_stateMachine;
                /*0x18*/ System.Action m_defaultContextAction;

                static /*0x1c96e64*/ void ThrowAsync(System.Exception exception, System.Threading.SynchronizationContext targetContext);
                static /*0x1c96c60*/ System.Action CreateContinuationWrapper(System.Action continuation, System.Action invokeAction, System.Threading.Tasks.Task innerTask);
                static /*0x1c9716c*/ System.Threading.Tasks.Task TryGetContinuationTask(System.Action action);
                /*0xad9f94*/ void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                /*0xad9f9c*/ System.Action GetCompletionAction(System.Threading.Tasks.Task taskForTracing, ref System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner runnerToInitialize);
                /*0xad9fa4*/ System.Action OutputAsyncCausalityEvents(System.Threading.Tasks.Task innerTask, System.Action continuation);
                /*0xad9fa8*/ void PostBoxInitialization(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine, System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner runner, System.Threading.Tasks.Task builtTask);

                class MoveNextRunner
                {
                    static /*0x0*/ System.Threading.ContextCallback s_invokeMoveNext;
                    /*0x10*/ System.Threading.ExecutionContext m_context;
                    /*0x18*/ System.Runtime.CompilerServices.IAsyncStateMachine m_stateMachine;

                    static /*0x2271b60*/ void InvokeMoveNext(object stateMachine);
                    /*0x2271924*/ MoveNextRunner(System.Threading.ExecutionContext context, System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
                    /*0x227195c*/ void Run();
                }

                class ContinuationWrapper
                {
                    /*0x10*/ System.Action m_continuation;
                    /*0x18*/ System.Action m_invokeAction;
                    /*0x20*/ System.Threading.Tasks.Task m_innerTask;

                    /*0x22718b4*/ ContinuationWrapper(System.Action continuation, System.Action invokeAction, System.Threading.Tasks.Task innerTask);
                    /*0x2271908*/ void Invoke();
                }

                class <>c__DisplayClass4_0
                {
                    /*0x10*/ System.Threading.Tasks.Task innerTask;
                    /*0x18*/ System.Action continuation;

                    /*0x227184c*/ <>c__DisplayClass4_0();
                    /*0x2271854*/ void <OutputAsyncCausalityEvents>b__0();
                }

                class <>c
                {
                    static /*0x0*/ System.Runtime.CompilerServices.AsyncMethodBuilderCore.<> <>9;
                    static /*0x8*/ System.Threading.SendOrPostCallback <>9__6_0;
                    static /*0x10*/ System.Threading.WaitCallback <>9__6_1;

                    static /*0x2271714*/ <>c();
                    /*0x2271774*/ <>c();
                    /*0x227177c*/ void <ThrowAsync>b__6_0(object state);
                    /*0x22717e4*/ void <ThrowAsync>b__6_1(object state);
                }
            }

            class AsyncStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute
            {
                /*0x1c97968*/ AsyncStateMachineAttribute(System.Type stateMachineType);
            }

            interface IAsyncStateMachine
            {
                void MoveNext();
                void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
            }

            interface INotifyCompletion
            {
                void OnCompleted(System.Action continuation);
            }

            interface ICriticalNotifyCompletion : System.Runtime.CompilerServices.INotifyCompletion
            {
                void UnsafeOnCompleted(System.Action continuation);
            }

            class IteratorStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute
            {
                /*0x1a8a2ec*/ IteratorStateMachineAttribute(System.Type stateMachineType);
            }

            class RuntimeCompatibilityAttribute : System.Attribute
            {
                /*0x10*/ bool m_wrapNonExceptionThrows;

                /*0x2152fd4*/ RuntimeCompatibilityAttribute();
                /*0x2152fdc*/ void set_WrapNonExceptionThrows(bool value);
            }

            class RuntimeWrappedException : System.Exception
            {
                /*0x88*/ object m_wrappedException;

                /*0x2160f90*/ RuntimeWrappedException(object thrownObject);
                /*0x216117c*/ RuntimeWrappedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x2161290*/ RuntimeWrappedException();
                /*0x2161048*/ object get_WrappedException();
                /*0x2161050*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class StateMachineAttribute : System.Attribute
            {
                /*0x10*/ System.Type <StateMachineType>k__BackingField;

                /*0x24a27ac*/ StateMachineAttribute(System.Type stateMachineType);
                /*0x24a27a4*/ void set_StateMachineType(System.Type value);
            }

            struct TaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x10*/ System.Threading.Tasks.Task m_task;

                static /*0x1e2ebe0*/ void ValidateEnd(System.Threading.Tasks.Task task);
                static /*0x1e2ec30*/ void HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task task);
                static /*0x1e2eca4*/ void ThrowForNonSuccess(System.Threading.Tasks.Task task);
                static /*0x1e2eb40*/ void OnCompletedInternal(System.Threading.Tasks.Task task, System.Action continuation, bool continueOnCapturedContext, bool flowExecutionContext);
                /*0xaddde0*/ TaskAwaiter(System.Threading.Tasks.Task task);
                /*0xaddde8*/ bool get_IsCompleted();
                /*0xadde00*/ void OnCompleted(System.Action continuation);
                /*0xadde10*/ void UnsafeOnCompleted(System.Action continuation);
                /*0xadde20*/ void GetResult();
            }

            struct TaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
            {
                /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;

                TaskAwaiter(System.Threading.Tasks.Task<TResult> task);
                bool get_IsCompleted();
                void OnCompleted(System.Action continuation);
                void UnsafeOnCompleted(System.Action continuation);
                TResult GetResult();
            }

            struct ConfiguredTaskAwaitable
            {
                /*0x10*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter m_configuredTaskAwaiter;

                /*0xab4e34*/ ConfiguredTaskAwaitable(System.Threading.Tasks.Task task, bool continueOnCapturedContext);
                /*0xab4e74*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter GetAwaiter();

                struct ConfiguredTaskAwaiter : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    /*0x10*/ System.Threading.Tasks.Task m_task;
                    /*0x18*/ bool m_continueOnCapturedContext;

                    /*0xaca898*/ ConfiguredTaskAwaiter(System.Threading.Tasks.Task task, bool continueOnCapturedContext);
                    /*0xaca8a8*/ bool get_IsCompleted();
                    /*0xaca8c4*/ void OnCompleted(System.Action continuation);
                    /*0xaca8dc*/ void UnsafeOnCompleted(System.Action continuation);
                    /*0xaca8f4*/ void GetResult();
                }
            }

            struct ConfiguredTaskAwaitable<TResult>
            {
                /*0x0*/ System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<TResult> m_configuredTaskAwaiter;

                ConfiguredTaskAwaitable(System.Threading.Tasks.Task<TResult> task, bool continueOnCapturedContext);
                System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter<TResult> GetAwaiter();

                struct ConfiguredTaskAwaiter<TResult> : System.Runtime.CompilerServices.ICriticalNotifyCompletion, System.Runtime.CompilerServices.INotifyCompletion
                {
                    /*0x0*/ System.Threading.Tasks.Task<TResult> m_task;
                    /*0x0*/ bool m_continueOnCapturedContext;

                    ConfiguredTaskAwaiter(System.Threading.Tasks.Task<TResult> task, bool continueOnCapturedContext);
                    bool get_IsCompleted();
                    void OnCompleted(System.Action continuation);
                    void UnsafeOnCompleted(System.Action continuation);
                    TResult GetResult();
                }
            }

            class TypeForwardedFromAttribute : System.Attribute
            {
                /*0x10*/ string assemblyFullName;

                /*0x20802b8*/ TypeForwardedFromAttribute(string assemblyFullName);
                /*0x208033c*/ string get_AssemblyFullName();
            }

            enum LoadHint
            {
                Default = 0,
                Always = 1,
                Sometimes = 2,
            }

            class DefaultDependencyAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.CompilerServices.LoadHint loadHint;

                /*0x203e194*/ DefaultDependencyAttribute(System.Runtime.CompilerServices.LoadHint loadHintArgument);
            }

            enum CompilationRelaxations
            {
                NoStringInterning = 8,
            }

            class CompilationRelaxationsAttribute : System.Attribute
            {
                /*0x10*/ int m_relaxations;

                /*0x161c3e0*/ CompilationRelaxationsAttribute(int relaxations);
                /*0x161c40c*/ CompilationRelaxationsAttribute(System.Runtime.CompilerServices.CompilationRelaxations relaxations);
                /*0x161c438*/ int get_CompilationRelaxations();
            }

            class CompilerGeneratedAttribute : System.Attribute
            {
                /*0x161c440*/ CompilerGeneratedAttribute();
            }

            class CustomConstantAttribute : System.Attribute
            {
                /*0x25242d4*/ CustomConstantAttribute();
                object get_Value();
            }

            class DateTimeConstantAttribute : System.Runtime.CompilerServices.CustomConstantAttribute
            {
                /*0x10*/ System.DateTime date;

                /*0x19ffb0c*/ object get_Value();
            }

            class DecimalConstantAttribute : System.Attribute
            {
                /*0x10*/ decimal dec;

                /*0x2036608*/ DecimalConstantAttribute(byte scale, byte sign, uint hi, uint mid, uint low);
                /*0x2036684*/ decimal get_Value();
            }

            class ExtensionAttribute : System.Attribute
            {
                /*0x20df55c*/ ExtensionAttribute();
            }

            class FixedBufferAttribute : System.Attribute
            {
                /*0x10*/ System.Type elementType;
                /*0x18*/ int length;

                /*0x20e6c04*/ FixedBufferAttribute(System.Type elementType, int length);
                /*0x20e6c40*/ System.Type get_ElementType();
                /*0x20e6c48*/ int get_Length();
            }

            class InternalsVisibleToAttribute : System.Attribute
            {
                /*0x10*/ string _assemblyName;
                /*0x18*/ bool _allInternalsVisible;

                /*0x1a89bf8*/ InternalsVisibleToAttribute(string assemblyName);
                /*0x1a89c2c*/ string get_AssemblyName();
                /*0x1a89c34*/ bool get_AllInternalsVisible();
                /*0x1a89c3c*/ void set_AllInternalsVisible(bool value);
            }

            class FriendAccessAllowedAttribute : System.Attribute
            {
                /*0x20e98cc*/ FriendAccessAllowedAttribute();
            }

            class IsVolatile
            {
            }

            class TypeDependencyAttribute : System.Attribute
            {
                /*0x10*/ string typeName;

                /*0x207fdbc*/ TypeDependencyAttribute(string typeName);
            }

            class UnsafeValueTypeAttribute : System.Attribute
            {
                /*0x206c27c*/ UnsafeValueTypeAttribute();
            }

            class StringFreezingAttribute : System.Attribute
            {
                /*0x1e20078*/ StringFreezingAttribute();
            }

            class JitHelpers
            {
                static T UnsafeCast<T>(object o);
                static int UnsafeEnumCast<T>(T val);
                static long UnsafeEnumCastLong<T>(T val);
            }

            struct Ephemeron
            {
                /*0x10*/ object key;
                /*0x18*/ object value;
            }

            class ConditionalWeakTable<TKey, TValue>
            {
                /*0x0*/ System.Runtime.CompilerServices.Ephemeron[] data;
                /*0x0*/ object _lock;
                /*0x0*/ int size;

                ConditionalWeakTable();
                void Finalize();
                void RehashWithoutResize();
                void RecomputeSize();
                void Rehash();
                void Add(TKey key, TValue value);
                bool Remove(TKey key);
                bool TryGetValue(TKey key, ref TValue value);
                TValue GetValue(TKey key, System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback<TKey, TValue> createValueCallback);

                class CreateValueCallback<TKey, TValue> : System.MulticastDelegate
                {
                    CreateValueCallback(object object, nint method);
                    TValue Invoke(TKey key);
                    System.IAsyncResult BeginInvoke(TKey key, System.AsyncCallback callback, object object);
                    TValue EndInvoke(System.IAsyncResult result);
                }
            }

            class RuntimeHelpers
            {
                static /*0x2154010*/ void InitializeArray(System.Array array, nint fldHandle);
                static /*0x2154014*/ void InitializeArray(System.Array array, System.RuntimeFieldHandle fldHandle);
                static /*0x21540b0*/ int get_OffsetToStringData();
                static /*0x21540b4*/ int GetHashCode(object o);
                static /*0x21540bc*/ object GetObjectValue(object obj);
                static /*0x21540c0*/ bool SufficientExecutionStack();
                static /*0x21540c4*/ bool TryEnsureSufficientExecutionStack();
                static /*0x21540c8*/ void PrepareConstrainedRegions();
                static bool IsReferenceOrContainsReferences<T>();
            }

            class Unsafe
            {
                static ref T Add<T>(ref T source, int elementOffset);
                static ref T AddByteOffset<T>(ref T source, nint byteOffset);
                static T As<T>(object o);
                static ref T AsRef<T>(void* source);
                static nint ByteOffset<T>(ref T origin, ref T target);
            }
        }

        namespace InteropServices
        {
            class UnmanagedFunctionPointerAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.CallingConvention m_callingConvention;
                /*0x14*/ System.Runtime.InteropServices.CharSet CharSet;
                /*0x18*/ bool BestFitMapping;
                /*0x19*/ bool ThrowOnUnmappableChar;
                /*0x1a*/ bool SetLastError;

                /*0x206a90c*/ UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention callingConvention);
            }

            class DispIdAttribute : System.Attribute
            {
                /*0x10*/ int _val;

                /*0x2042914*/ DispIdAttribute(int dispId);
            }

            enum ComInterfaceType
            {
                InterfaceIsDual = 0,
                InterfaceIsIUnknown = 1,
                InterfaceIsIDispatch = 2,
                InterfaceIsIInspectable = 3,
            }

            class InterfaceTypeAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.ComInterfaceType _val;

                /*0x1a88754*/ InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType interfaceType);
            }

            class ComDefaultInterfaceAttribute : System.Attribute
            {
                /*0x10*/ System.Type _val;

                /*0x161a0cc*/ ComDefaultInterfaceAttribute(System.Type defaultInterface);
            }

            enum ClassInterfaceType
            {
                None = 0,
                AutoDispatch = 1,
                AutoDual = 2,
            }

            class ClassInterfaceAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.ClassInterfaceType _val;

                /*0x1617a88*/ ClassInterfaceAttribute(System.Runtime.InteropServices.ClassInterfaceType classInterfaceType);
            }

            class ComVisibleAttribute : System.Attribute
            {
                /*0x10*/ bool _val;

                /*0x161a100*/ ComVisibleAttribute(bool visibility);
            }

            enum VarEnum
            {
                VT_EMPTY = 0,
                VT_NULL = 1,
                VT_I2 = 2,
                VT_I4 = 3,
                VT_R4 = 4,
                VT_R8 = 5,
                VT_CY = 6,
                VT_DATE = 7,
                VT_BSTR = 8,
                VT_DISPATCH = 9,
                VT_ERROR = 10,
                VT_BOOL = 11,
                VT_VARIANT = 12,
                VT_UNKNOWN = 13,
                VT_DECIMAL = 14,
                VT_I1 = 16,
                VT_UI1 = 17,
                VT_UI2 = 18,
                VT_UI4 = 19,
                VT_I8 = 20,
                VT_UI8 = 21,
                VT_INT = 22,
                VT_UINT = 23,
                VT_VOID = 24,
                VT_HRESULT = 25,
                VT_PTR = 26,
                VT_SAFEARRAY = 27,
                VT_CARRAY = 28,
                VT_USERDEFINED = 29,
                VT_LPSTR = 30,
                VT_LPWSTR = 31,
                VT_RECORD = 36,
                VT_FILETIME = 64,
                VT_BLOB = 65,
                VT_STREAM = 66,
                VT_STORAGE = 67,
                VT_STREAMED_OBJECT = 68,
                VT_STORED_OBJECT = 69,
                VT_BLOB_OBJECT = 70,
                VT_CF = 71,
                VT_CLSID = 72,
                VT_VECTOR = 4096,
                VT_ARRAY = 8192,
                VT_BYREF = 16384,
            }

            enum UnmanagedType
            {
                Bool = 2,
                I1 = 3,
                U1 = 4,
                I2 = 5,
                U2 = 6,
                I4 = 7,
                U4 = 8,
                I8 = 9,
                U8 = 10,
                R4 = 11,
                R8 = 12,
                Currency = 15,
                BStr = 19,
                LPStr = 20,
                LPWStr = 21,
                LPTStr = 22,
                ByValTStr = 23,
                IUnknown = 25,
                IDispatch = 26,
                Struct = 27,
                Interface = 28,
                SafeArray = 29,
                ByValArray = 30,
                SysInt = 31,
                SysUInt = 32,
                VBByRefStr = 34,
                AnsiBStr = 35,
                TBStr = 36,
                VariantBool = 37,
                FunctionPtr = 38,
                AsAny = 40,
                LPArray = 42,
                LPStruct = 43,
                CustomMarshaler = 44,
                Error = 45,
                IInspectable = 46,
                HString = 47,
                LPUTF8Str = 48,
            }

            class ComImportAttribute : System.Attribute
            {
                /*0x161a0f8*/ ComImportAttribute();
            }

            class GuidAttribute : System.Attribute
            {
                /*0x10*/ string _val;

                /*0x20f048c*/ GuidAttribute(string guid);
            }

            class PreserveSigAttribute : System.Attribute
            {
                /*0x252ff98*/ PreserveSigAttribute();
            }

            class InAttribute : System.Attribute
            {
                /*0x1a85cac*/ InAttribute();
            }

            class OutAttribute : System.Attribute
            {
                /*0x214abf0*/ OutAttribute();
            }

            class OptionalAttribute : System.Attribute
            {
                /*0x214a89c*/ OptionalAttribute();
            }

            enum DllImportSearchPath
            {
                UseDllDirectoryForDependencies = 256,
                ApplicationDirectory = 512,
                UserDirectories = 1024,
                System32 = 2048,
                SafeDirectories = 4096,
                AssemblyDirectory = 2,
                LegacyBehavior = 0,
            }

            class DefaultDllImportSearchPathsAttribute : System.Attribute
            {
                /*0x10*/ System.Runtime.InteropServices.DllImportSearchPath _paths;

                /*0x203e1c0*/ DefaultDllImportSearchPathsAttribute(System.Runtime.InteropServices.DllImportSearchPath paths);
            }

            class DllImportAttribute : System.Attribute
            {
                /*0x10*/ string _val;
                /*0x18*/ string EntryPoint;
                /*0x20*/ System.Runtime.InteropServices.CharSet CharSet;
                /*0x24*/ bool SetLastError;
                /*0x25*/ bool ExactSpelling;
                /*0x26*/ bool PreserveSig;
                /*0x28*/ System.Runtime.InteropServices.CallingConvention CallingConvention;
                /*0x2c*/ bool BestFitMapping;
                /*0x2d*/ bool ThrowOnUnmappableChar;

                static /*0x2042bd0*/ System.Attribute GetCustomAttribute(System.Reflection.RuntimeMethodInfo method);
                static /*0x2042e70*/ bool IsDefined(System.Reflection.RuntimeMethodInfo method);
                /*0x2042dd4*/ DllImportAttribute(string dllName, string entryPoint, System.Runtime.InteropServices.CharSet charSet, bool exactSpelling, bool setLastError, bool preserveSig, System.Runtime.InteropServices.CallingConvention callingConvention, bool bestFitMapping, bool throwOnUnmappableChar);
                /*0x2042e9c*/ DllImportAttribute(string dllName);
                /*0x2042ec8*/ string get_Value();
            }

            class FieldOffsetAttribute : System.Attribute
            {
                /*0x10*/ int _val;

                /*0x20e066c*/ FieldOffsetAttribute(int offset);
            }

            class ComCompatibleVersionAttribute : System.Attribute
            {
                /*0x10*/ int _major;
                /*0x14*/ int _minor;
                /*0x18*/ int _build;
                /*0x1c*/ int _revision;

                /*0x161a080*/ ComCompatibleVersionAttribute(int major, int minor, int build, int revision);
            }

            enum CallingConvention
            {
                Winapi = 1,
                Cdecl = 2,
                StdCall = 3,
                ThisCall = 4,
                FastCall = 5,
            }

            enum CharSet
            {
                None = 1,
                Ansi = 2,
                Unicode = 3,
                Auto = 4,
            }

            class COMException : System.Runtime.InteropServices.ExternalException
            {
                /*0x1c5ffb0*/ COMException();
                /*0x1c60020*/ COMException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x1c60028*/ string ToString();
            }

            class ErrorWrapper
            {
                /*0x10*/ int m_ErrorCode;
            }

            class ExternalException : System.SystemException
            {
                /*0x20df564*/ ExternalException();
                /*0x20df5d4*/ ExternalException(string message);
                /*0x20df608*/ ExternalException(string message, int errorCode);
                /*0x20df63c*/ ExternalException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x20df644*/ string ToString();
            }

            struct HandleRef
            {
                /*0x10*/ object m_wrapper;
                /*0x18*/ nint m_handle;

                /*0xae11ac*/ HandleRef(object wrapper, nint handle);
                /*0xae11b4*/ nint get_Handle();
            }

            interface ICustomMarshaler
            {
                object MarshalNativeToManaged(nint pNativeData);
                nint MarshalManagedToNative(object ManagedObj);
                void CleanUpNativeData(nint pNativeData);
                void CleanUpManagedData(object ManagedObj);
                int GetNativeDataSize();
            }

            class MarshalDirectiveException : System.SystemException
            {
                /*0x1c13a48*/ MarshalDirectiveException();
                /*0x1c13ab8*/ MarshalDirectiveException(string message);
                /*0x1c13aec*/ MarshalDirectiveException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class SafeHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, System.IDisposable
            {
                static int RefCount_Mask = 2147483644;
                static int RefCount_One = 4;
                /*0x10*/ nint handle;
                /*0x18*/ int _state;
                /*0x1c*/ bool _ownsHandle;
                /*0x1d*/ bool _fullyInitialized;

                /*0x2167220*/ SafeHandle(nint invalidHandleValue, bool ownsHandle);
                /*0x21672c4*/ void Finalize();
                /*0x2167338*/ void SetHandle(nint handle);
                /*0x2167340*/ nint DangerousGetHandle();
                /*0x2167348*/ bool get_IsClosed();
                bool get_IsInvalid();
                /*0x2167354*/ void Close();
                /*0x2167364*/ void Dispose();
                /*0x2167374*/ void Dispose(bool disposing);
                bool ReleaseHandle();
                /*0x2167450*/ void SetHandleAsInvalid();
                /*0x2166fb0*/ void DangerousAddRef(ref bool success);
                /*0x21670c8*/ void DangerousRelease();
                /*0x2167390*/ void InternalDispose();
                /*0x216743c*/ void InternalFinalize();
                /*0x21674e0*/ void DangerousReleaseInternal(bool dispose);
            }

            class RuntimeInformation
            {
            }

            struct GCHandle
            {
                /*0x10*/ int handle;

                static /*0x20e9dac*/ System.Runtime.InteropServices.GCHandle Alloc(object value);
                static /*0x20e9dcc*/ System.Runtime.InteropServices.GCHandle Alloc(object value, System.Runtime.InteropServices.GCHandleType type);
                static /*0x20e9e7c*/ nint op_Explicit(System.Runtime.InteropServices.GCHandle value);
                static /*0x20e9e84*/ System.Runtime.InteropServices.GCHandle op_Explicit(nint value);
                static /*0x20e9f74*/ bool CheckCurrentDomain(int handle);
                static /*0x20e9c84*/ object GetTarget(int handle);
                static /*0x20e9c08*/ int GetTargetHandle(object obj, int handle, System.Runtime.InteropServices.GCHandleType type);
                static /*0x20e9e78*/ void FreeHandle(int handle);
                static /*0x20e9da8*/ nint GetAddrOfPinnedObject(int handle);
                static /*0x20e9f78*/ bool op_Equality(System.Runtime.InteropServices.GCHandle a, System.Runtime.InteropServices.GCHandle b);
                static /*0x20ea010*/ System.Runtime.InteropServices.GCHandle FromIntPtr(nint value);
                static /*0x20ea028*/ nint ToIntPtr(System.Runtime.InteropServices.GCHandle value);
                /*0xae0fb4*/ GCHandle(nint h);
                /*0xae0fe0*/ GCHandle(object obj);
                /*0xae1010*/ GCHandle(object value, System.Runtime.InteropServices.GCHandleType type);
                /*0xae1048*/ bool get_IsAllocated();
                /*0xae1058*/ object get_Target();
                /*0xae1060*/ void set_Target(object value);
                /*0xae1094*/ nint AddrOfPinnedObject();
                /*0xae109c*/ void Free();
                /*0xae10a4*/ bool Equals(object o);
                /*0xae10ac*/ int GetHashCode();
            }

            enum GCHandleType
            {
                Weak = 0,
                WeakTrackResurrection = 1,
                Normal = 2,
                Pinned = 3,
            }

            class Marshal
            {
                static /*0x0*/ int SystemMaxDBCSCharSize;
                static /*0x4*/ int SystemDefaultCharSize;

                static /*0x1c13868*/ Marshal();
                static /*0x1c12ce4*/ nint AllocCoTaskMem(int cb);
                static /*0x1c12ce8*/ nint AllocHGlobal(nint cb);
                static /*0x1c12cec*/ nint AllocHGlobal(int cb);
                static /*0x1c12d60*/ void copy_to_unmanaged(System.Array source, int startIndex, nint destination, int length);
                static /*0x1c12d64*/ void copy_from_unmanaged(nint source, int startIndex, System.Array destination, int length);
                static /*0x1c12d68*/ void Copy(byte[] source, int startIndex, nint destination, int length);
                static /*0x1c12df0*/ void Copy(nint source, byte[] destination, int startIndex, int length);
                static /*0x1c0dc98*/ void Copy(nint source, char[] destination, int startIndex, int length);
                static /*0x1c12e78*/ void FreeBSTR(nint ptr);
                static /*0x1c12e7c*/ void FreeHGlobal(nint hglobal);
                static /*0x1c12e80*/ void ClearUnicode(nint ptr);
                static /*0x1c12fc8*/ void ZeroFreeGlobalAllocUnicode(nint s);
                static /*0x1c13030*/ int GetHRForException(System.Exception e);
                static /*0x1c1303c*/ int GetLastWin32Error();
                static /*0x1c13040*/ string PtrToStringAnsi(nint ptr);
                static /*0x1c13044*/ string PtrToStringAnsi(nint ptr, int len);
                static /*0x1c13048*/ string PtrToStringUni(nint ptr);
                static /*0x1c1304c*/ object PtrToStructure(nint ptr, System.Type structureType);
                static T PtrToStructure<T>(nint ptr);
                static /*0x1c12f80*/ short ReadInt16(nint ptr, int ofs);
                static /*0x1c13050*/ int ReadInt32(nint ptr);
                static /*0x1c13098*/ long ReadInt64(nint ptr);
                static /*0x1c130f8*/ nint ReadIntPtr(nint ptr);
                static /*0x1c131a0*/ int ReleaseInternal(nint pUnk);
                static /*0x1c131a4*/ int Release(nint pUnk);
                static /*0x1c13280*/ int SizeOf(System.Type t);
                static int SizeOf<T>();
                static /*0x1c13284*/ nint SecureStringToCoTaskMemUnicode(System.Security.SecureString s);
                static /*0x1c13538*/ nint SecureStringToGlobalAllocUnicode(System.Security.SecureString s);
                static /*0x1c135e4*/ void StructureToPtr(object structure, nint ptr, bool fDeleteOld);
                static void StructureToPtr<T>(T structure, nint ptr, bool fDeleteOld);
                static /*0x1c135ec*/ nint UnsafeAddrOfPinnedArrayElement(System.Array arr, int index);
                static nint UnsafeAddrOfPinnedArrayElement<T>(T[] arr, int index);
                static /*0x1c12f2c*/ void WriteInt16(nint ptr, int ofs, short val);
                static /*0x1c135f0*/ System.Delegate GetDelegateForFunctionPointerInternal(nint ptr, System.Type t);
                static /*0x1c135f4*/ System.Delegate GetDelegateForFunctionPointer(nint ptr, System.Type t);
                static /*0x1c13864*/ nint GetFunctionPointerForDelegateInternal(System.Delegate d);
                static nint GetFunctionPointerForDelegate<TDelegate>(TDelegate d);
            }

            class MarshalAsAttribute : System.Attribute
            {
                /*0x10*/ string MarshalCookie;
                /*0x18*/ string MarshalType;
                /*0x20*/ System.Type MarshalTypeRef;
                /*0x28*/ System.Type SafeArrayUserDefinedSubType;
                /*0x30*/ System.Runtime.InteropServices.UnmanagedType utype;
                /*0x34*/ System.Runtime.InteropServices.UnmanagedType ArraySubType;
                /*0x38*/ System.Runtime.InteropServices.VarEnum SafeArraySubType;
                /*0x3c*/ int SizeConst;
                /*0x40*/ int IidParameterIndex;
                /*0x44*/ short SizeParamIndex;

                /*0x1c138d8*/ System.Runtime.InteropServices.MarshalAsAttribute Copy();
            }

            class SafeBuffer : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
            {
                /*0x1e*/ bool inited;

                /*0x2166f24*/ void AcquirePointer(ref byte* pointer);
                /*0x2167078*/ void ReleasePointer();
            }

            interface _Activator
            {
            }

            interface _Assembly
            {
            }

            interface _AssemblyName
            {
            }

            interface _ConstructorInfo
            {
            }

            interface _EventInfo
            {
            }

            interface _Exception
            {
            }

            interface _FieldInfo
            {
            }

            interface _MemberInfo
            {
            }

            interface _MethodBase
            {
            }

            interface _MethodInfo
            {
            }

            interface _Module
            {
            }

            interface _ParameterInfo
            {
            }

            interface _PropertyInfo
            {
            }

            interface _Thread
            {
            }

            interface _Type
            {
            }
        }
    }

    namespace Collections
    {
        struct DictionaryEntry
        {
            /*0x10*/ object _key;
            /*0x18*/ object _value;

            /*0xadff24*/ DictionaryEntry(object key, object value);
            /*0xadff2c*/ object get_Key();
            /*0xadff34*/ object get_Value();
        }

        class LowLevelComparer : System.Collections.IComparer
        {
            static /*0x0*/ System.Collections.LowLevelComparer Default;

            static /*0x1a97b54*/ LowLevelComparer();
            /*0x1a9798c*/ LowLevelComparer();
            /*0x1a97994*/ int Compare(object a, object b);
        }

        class ArrayList : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            static /*0x0*/ object[] emptyArray;
            /*0x10*/ object[] _items;
            /*0x18*/ int _size;
            /*0x1c*/ int _version;
            /*0x20*/ object _syncRoot;

            static /*0x1c936e8*/ ArrayList();
            static /*0x1c9269c*/ System.Collections.ArrayList Adapter(System.Collections.IList list);
            static /*0x1c92fbc*/ System.Collections.IList ReadOnly(System.Collections.IList list);
            static /*0x1c93064*/ System.Collections.ArrayList ReadOnly(System.Collections.ArrayList list);
            /*0x1c85238*/ ArrayList();
            /*0x1c9202c*/ ArrayList(int capacity);
            /*0x1c92190*/ ArrayList(System.Collections.ICollection c);
            /*0x1c9233c*/ void set_Capacity(int value);
            /*0x1c9245c*/ int get_Count();
            /*0x1c92464*/ bool get_IsFixedSize();
            /*0x1c9246c*/ bool get_IsReadOnly();
            /*0x1c92474*/ bool get_IsSynchronized();
            /*0x1c9247c*/ object get_SyncRoot();
            /*0x1c924f0*/ object get_Item(int index);
            /*0x1c925a4*/ void set_Item(int index, object value);
            /*0x1c92744*/ int Add(object value);
            /*0x1c92850*/ void AddRange(System.Collections.ICollection c);
            /*0x1c9286c*/ void Clear();
            /*0x1c928b0*/ object Clone();
            /*0x1c92948*/ bool Contains(object item);
            /*0x1c92a1c*/ void CopyTo(System.Array array);
            /*0x1c92a30*/ void CopyTo(System.Array array, int arrayIndex);
            /*0x1c92ad0*/ void CopyTo(int index, System.Array array, int arrayIndex, int count);
            /*0x1c927f8*/ void EnsureCapacity(int min);
            /*0x1c92b9c*/ System.Collections.IEnumerator GetEnumerator();
            /*0x1c92bfc*/ int IndexOf(object value);
            /*0x1c92c10*/ void Insert(int index, object value);
            /*0x1c92d4c*/ void InsertRange(int index, System.Collections.ICollection c);
            /*0x1c9310c*/ void Remove(object obj);
            /*0x1c9315c*/ void RemoveAt(int index);
            /*0x1c93248*/ void RemoveRange(int index, int count);
            /*0x1c933c8*/ void Sort(System.Collections.IComparer comparer);
            /*0x1c93418*/ void Sort(int index, int count, System.Collections.IComparer comparer);
            /*0x1c93540*/ object[] ToArray();
            /*0x1c935b4*/ System.Array ToArray(System.Type type);

            class IListWrapper : System.Collections.ArrayList
            {
                /*0x28*/ System.Collections.IList _list;

                /*0x226ea38*/ IListWrapper(System.Collections.IList list);
                /*0x226eab4*/ void set_Capacity(int value);
                /*0x226eb50*/ int get_Count();
                /*0x226ec00*/ bool get_IsReadOnly();
                /*0x226ecb0*/ bool get_IsFixedSize();
                /*0x226ed60*/ bool get_IsSynchronized();
                /*0x226ee10*/ object get_Item(int index);
                /*0x226eecc*/ void set_Item(int index, object value);
                /*0x226efa4*/ object get_SyncRoot();
                /*0x226f054*/ int Add(object obj);
                /*0x226f124*/ void AddRange(System.Collections.ICollection c);
                /*0x226f170*/ void Clear();
                /*0x226f2f8*/ object Clone();
                /*0x226f358*/ bool Contains(object obj);
                /*0x226f418*/ void CopyTo(System.Array array, int index);
                /*0x226f4dc*/ void CopyTo(int index, System.Array array, int arrayIndex, int count);
                /*0x226f81c*/ System.Collections.IEnumerator GetEnumerator();
                /*0x226f8c8*/ int IndexOf(object value);
                /*0x226f988*/ void Insert(int index, object obj);
                /*0x226fa60*/ void InsertRange(int index, System.Collections.ICollection c);
                /*0x226fe68*/ void Remove(object value);
                /*0x226feb8*/ void RemoveAt(int index);
                /*0x226ff88*/ void RemoveRange(int index, int count);
                /*0x22701cc*/ void Sort(int index, int count, System.Collections.IComparer comparer);
                /*0x22704bc*/ object[] ToArray();
                /*0x22705b4*/ System.Array ToArray(System.Type type);
            }

            class ReadOnlyList : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.IList _list;

                /*0x2270ea8*/ ReadOnlyList(System.Collections.IList l);
                /*0x2270ed4*/ int get_Count();
                /*0x2270f84*/ bool get_IsReadOnly();
                /*0x2270f8c*/ bool get_IsFixedSize();
                /*0x2270f94*/ bool get_IsSynchronized();
                /*0x2271044*/ object get_Item(int index);
                /*0x2271100*/ void set_Item(int index, object value);
                /*0x227115c*/ object get_SyncRoot();
                /*0x227120c*/ int Add(object obj);
                /*0x2271268*/ void Clear();
                /*0x22712c4*/ bool Contains(object obj);
                /*0x2271384*/ void CopyTo(System.Array array, int index);
                /*0x2271448*/ System.Collections.IEnumerator GetEnumerator();
                /*0x22714f4*/ int IndexOf(object value);
                /*0x22715b4*/ void Insert(int index, object obj);
                /*0x2271610*/ void Remove(object value);
                /*0x227166c*/ void RemoveAt(int index);
            }

            class ReadOnlyArrayList : System.Collections.ArrayList
            {
                /*0x28*/ System.Collections.ArrayList _list;

                /*0x22707cc*/ ReadOnlyArrayList(System.Collections.ArrayList l);
                /*0x2270844*/ int get_Count();
                /*0x2270868*/ bool get_IsReadOnly();
                /*0x2270870*/ bool get_IsFixedSize();
                /*0x2270878*/ bool get_IsSynchronized();
                /*0x227089c*/ object get_Item(int index);
                /*0x22708c0*/ void set_Item(int index, object value);
                /*0x227091c*/ object get_SyncRoot();
                /*0x2270940*/ int Add(object obj);
                /*0x227099c*/ void AddRange(System.Collections.ICollection c);
                /*0x22709f8*/ void set_Capacity(int value);
                /*0x2270a54*/ void Clear();
                /*0x2270ab0*/ object Clone();
                /*0x2270b84*/ bool Contains(object obj);
                /*0x2270ba8*/ void CopyTo(System.Array array, int index);
                /*0x2270bcc*/ void CopyTo(int index, System.Array array, int arrayIndex, int count);
                /*0x2270bf0*/ System.Collections.IEnumerator GetEnumerator();
                /*0x2270c14*/ int IndexOf(object value);
                /*0x2270c38*/ void Insert(int index, object obj);
                /*0x2270c94*/ void InsertRange(int index, System.Collections.ICollection c);
                /*0x2270cf0*/ void Remove(object value);
                /*0x2270d4c*/ void RemoveAt(int index);
                /*0x2270da8*/ void RemoveRange(int index, int count);
                /*0x2270e04*/ void Sort(int index, int count, System.Collections.IComparer comparer);
                /*0x2270e60*/ object[] ToArray();
                /*0x2270e84*/ System.Array ToArray(System.Type type);
            }

            class ArrayListEnumeratorSimple : System.Collections.IEnumerator, System.ICloneable
            {
                static /*0x0*/ object dummyObject;
                /*0x10*/ System.Collections.ArrayList list;
                /*0x18*/ int index;
                /*0x1c*/ int version;
                /*0x20*/ object currentElement;
                /*0x28*/ bool isArrayList;

                static /*0x226e9c4*/ ArrayListEnumeratorSimple();
                /*0x226e4e4*/ ArrayListEnumeratorSimple(System.Collections.ArrayList list);
                /*0x226e600*/ object Clone();
                /*0x226e608*/ bool MoveNext();
                /*0x226e7fc*/ object get_Current();
                /*0x226e8e4*/ void Reset();
            }

            class ArrayListDebugView
            {
            }
        }

        class BitArray : System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ int[] m_array;
            /*0x18*/ int m_length;
            /*0x1c*/ int _version;
            /*0x20*/ object _syncRoot;

            static /*0x1c57ed0*/ int GetArrayLength(int n, int div);
            /*0x1c57d7c*/ BitArray();
            /*0x1c57d84*/ BitArray(int length);
            /*0x1c57d8c*/ BitArray(int length, bool defaultValue);
            /*0x1c57eec*/ BitArray(int[] values);
            /*0x1c58098*/ bool get_Item(int index);
            /*0x1c58168*/ void set_Item(int index, bool value);
            /*0x1c5809c*/ bool Get(int index);
            /*0x1c58170*/ void Set(int index, bool value);
            /*0x1c58254*/ int get_Length();
            /*0x1c5825c*/ void set_Length(int value);
            /*0x1c5843c*/ void CopyTo(System.Array array, int index);
            /*0x1c587ec*/ int get_Count();
            /*0x1c587f4*/ object Clone();
            /*0x1c58874*/ object get_SyncRoot();
            /*0x1c588e8*/ bool get_IsSynchronized();
            /*0x1c588f0*/ System.Collections.IEnumerator GetEnumerator();

            class BitArrayEnumeratorSimple : System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.BitArray bitarray;
                /*0x18*/ int index;
                /*0x1c*/ int version;
                /*0x20*/ bool currentElement;

                /*0x227414c*/ BitArrayEnumeratorSimple(System.Collections.BitArray bitarray);
                /*0x2274190*/ object Clone();
                /*0x2274198*/ bool MoveNext();
                /*0x227425c*/ object get_Current();
                /*0x227433c*/ void Reset();
            }
        }

        class CaseInsensitiveComparer : System.Collections.IComparer
        {
            /*0x10*/ System.Globalization.CompareInfo m_compareInfo;

            static /*0x160c4fc*/ System.Collections.CaseInsensitiveComparer get_Default();
            /*0x160c3ec*/ CaseInsensitiveComparer();
            /*0x160c474*/ CaseInsensitiveComparer(System.Globalization.CultureInfo culture);
            /*0x160c590*/ int Compare(object a, object b);
        }

        class CaseInsensitiveHashCodeProvider : System.Collections.IHashCodeProvider
        {
            /*0x10*/ System.Globalization.TextInfo m_text;

            static /*0x160c9bc*/ System.Collections.CaseInsensitiveHashCodeProvider get_Default();
            /*0x160c8ac*/ CaseInsensitiveHashCodeProvider();
            /*0x160c934*/ CaseInsensitiveHashCodeProvider(System.Globalization.CultureInfo culture);
            /*0x160ca50*/ int GetHashCode(object obj);
        }

        class CollectionBase : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x10*/ System.Collections.ArrayList list;

            /*0x161936c*/ CollectionBase();
            /*0x16193d4*/ System.Collections.ArrayList get_InnerList();
            /*0x161943c*/ System.Collections.IList get_List();
            /*0x1619440*/ int get_Count();
            /*0x161945c*/ void Clear();
            /*0x16194b8*/ void RemoveAt(int index);
            /*0x16196b4*/ bool System.Collections.IList.get_IsReadOnly();
            /*0x16196dc*/ bool System.Collections.IList.get_IsFixedSize();
            /*0x1619704*/ bool System.Collections.ICollection.get_IsSynchronized();
            /*0x161972c*/ object System.Collections.ICollection.get_SyncRoot();
            /*0x1619754*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
            /*0x1619794*/ object System.Collections.IList.get_Item(int index);
            /*0x161985c*/ void System.Collections.IList.set_Item(int index, object value);
            /*0x1619a68*/ bool System.Collections.IList.Contains(object value);
            /*0x1619aa0*/ int System.Collections.IList.Add(object value);
            /*0x1619c08*/ void System.Collections.IList.Remove(object value);
            /*0x1619dc8*/ int System.Collections.IList.IndexOf(object value);
            /*0x1619e00*/ void System.Collections.IList.Insert(int index, object value);
            /*0x1619fdc*/ System.Collections.IEnumerator GetEnumerator();
            /*0x161a004*/ void OnSet(int index, object oldValue, object newValue);
            /*0x161a008*/ void OnInsert(int index, object value);
            /*0x161a00c*/ void OnClear();
            /*0x161a010*/ void OnRemove(int index, object value);
            /*0x161a014*/ void OnValidate(object value);
            /*0x161a070*/ void OnSetComplete(int index, object oldValue, object newValue);
            /*0x161a074*/ void OnInsertComplete(int index, object value);
            /*0x161a078*/ void OnClearComplete();
            /*0x161a07c*/ void OnRemoveComplete(int index, object value);
        }

        class Comparer : System.Collections.IComparer, System.Runtime.Serialization.ISerializable
        {
            static /*0x0*/ System.Collections.Comparer Default;
            static /*0x8*/ System.Collections.Comparer DefaultInvariant;
            /*0x10*/ System.Globalization.CompareInfo m_compareInfo;

            static /*0x161bfac*/ Comparer();
            /*0x161bcc8*/ Comparer();
            /*0x161bcf0*/ Comparer(System.Globalization.CultureInfo culture);
            /*0x161bd78*/ Comparer(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x160c688*/ int Compare(object a, object b);
            /*0x161beec*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
        }

        class CompatibleComparer : System.Collections.IEqualityComparer
        {
            /*0x10*/ System.Collections.IComparer _comparer;
            /*0x18*/ System.Collections.IHashCodeProvider _hcp;

            /*0x161c080*/ CompatibleComparer(System.Collections.IComparer comparer, System.Collections.IHashCodeProvider hashCodeProvider);
            /*0x161c0b8*/ int Compare(object a, object b);
            /*0x161c294*/ bool Equals(object a, object b);
            /*0x161c2b0*/ int GetHashCode(object obj);
            /*0x161c3d0*/ System.Collections.IComparer get_Comparer();
            /*0x161c3d8*/ System.Collections.IHashCodeProvider get_HashCodeProvider();
        }

        class EmptyReadOnlyDictionaryInternal : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x2045260*/ EmptyReadOnlyDictionaryInternal();
            /*0x2045268*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x20452c0*/ void CopyTo(System.Array array, int index);
            /*0x2045448*/ int get_Count();
            /*0x2045450*/ object get_SyncRoot();
            /*0x2045454*/ bool get_IsSynchronized();
            /*0x204545c*/ object get_Item(object key);
            /*0x20454d8*/ void set_Item(object key, object value);
            /*0x2045664*/ System.Collections.ICollection get_Keys();
            /*0x20456c8*/ bool Contains(object key);
            /*0x20456d0*/ void Add(object key, object value);
            /*0x204585c*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x20458b4*/ void Remove(object key);

            class NodeEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
            {
                /*0x180fe40*/ NodeEnumerator();
                /*0x180fe48*/ bool MoveNext();
                /*0x180fe50*/ object get_Current();
                /*0x180feac*/ void Reset();
                /*0x180feb0*/ object get_Key();
                /*0x180ff0c*/ object get_Value();
                /*0x180ff68*/ System.Collections.DictionaryEntry get_Entry();
            }
        }

        class Hashtable : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.ICloneable
        {
            static int HashPrime = 101;
            static int InitialSize = 3;
            static string LoadFactorName = "LoadFactor";
            static string VersionName = "Version";
            static string ComparerName = "Comparer";
            static string HashCodeProviderName = "HashCodeProvider";
            static string HashSizeName = "HashSize";
            static string KeysName = "Keys";
            static string ValuesName = "Values";
            static string KeyComparerName = "KeyComparer";
            /*0x10*/ System.Collections.Hashtable.bucket[] buckets;
            /*0x18*/ int count;
            /*0x1c*/ int occupancy;
            /*0x20*/ int loadsize;
            /*0x24*/ float loadFactor;
            /*0x28*/ int version;
            /*0x2c*/ bool isWriterInProgress;
            /*0x30*/ System.Collections.ICollection keys;
            /*0x38*/ System.Collections.ICollection values;
            /*0x40*/ System.Collections.IEqualityComparer _keycomparer;
            /*0x48*/ object _syncRoot;

            static /*0x20f3ef8*/ System.Collections.Hashtable Synchronized(System.Collections.Hashtable table);
            /*0x20f219c*/ Hashtable(bool trash);
            /*0x20f21a4*/ Hashtable();
            /*0x20f2494*/ Hashtable(int capacity);
            /*0x20f21b0*/ Hashtable(int capacity, float loadFactor);
            /*0x20f249c*/ Hashtable(int capacity, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
            /*0x20f2548*/ Hashtable(int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer);
            /*0x20f2570*/ Hashtable(System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
            /*0x20f2584*/ Hashtable(System.Collections.IEqualityComparer equalityComparer);
            /*0x20f25b4*/ Hashtable(int capacity, System.Collections.IEqualityComparer equalityComparer);
            /*0x20f25e0*/ Hashtable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x20f2680*/ uint InitHash(object key, int hashsize, ref uint seed, ref uint incr);
            /*0x20f26e0*/ void Add(object key, object value);
            /*0x20f2ba8*/ void Clear();
            /*0x20f2ccc*/ object Clone();
            /*0x20f2df4*/ bool Contains(object key);
            /*0x20f2e04*/ bool ContainsKey(object key);
            /*0x20f2f84*/ void CopyKeys(System.Array array, int arrayIndex);
            /*0x20f3030*/ void CopyEntries(System.Array array, int arrayIndex);
            /*0x20f3148*/ void CopyTo(System.Array array, int arrayIndex);
            /*0x20f32c8*/ void CopyValues(System.Array array, int arrayIndex);
            /*0x20f3380*/ object get_Item(object key);
            /*0x20f35a0*/ void set_Item(object key, object value);
            /*0x20f35a8*/ void expand();
            /*0x20f3798*/ void rehash();
            /*0x20f2c9c*/ void UpdateVersion();
            /*0x20f3624*/ void rehash(int newsize, bool forceNewHashCode);
            /*0x20f389c*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x20f3900*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x20f3964*/ int GetHash(object key);
            /*0x20f3a44*/ bool get_IsSynchronized();
            /*0x20f3a4c*/ bool KeyEquals(object item, object key);
            /*0x20f3b60*/ System.Collections.ICollection get_Keys();
            /*0x20f3bcc*/ System.Collections.ICollection get_Values();
            /*0x20f26e8*/ void Insert(object key, object nvalue, bool add);
            /*0x20f37b8*/ void putEntry(System.Collections.Hashtable.bucket[] newBuckets, object key, object nvalue, int hashcode);
            /*0x20f3c38*/ void Remove(object key);
            /*0x20f3e7c*/ object get_SyncRoot();
            /*0x20f3ef0*/ int get_Count();
            /*0x20f3fa4*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            /*0x20f454c*/ void OnDeserialization(object sender);

            struct bucket
            {
                /*0x10*/ object key;
                /*0x18*/ object val;
                /*0x20*/ int hash_coll;
            }

            class KeyCollection : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.Hashtable _hashtable;

                /*0x1812dac*/ KeyCollection(System.Collections.Hashtable hashtable);
                /*0x1812dd8*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x1812f4c*/ System.Collections.IEnumerator GetEnumerator();
                /*0x1812fb0*/ bool get_IsSynchronized();
                /*0x1812fd4*/ object get_SyncRoot();
                /*0x1812ff8*/ int get_Count();
            }

            class ValueCollection : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.Hashtable _hashtable;

                /*0x1813d98*/ ValueCollection(System.Collections.Hashtable hashtable);
                /*0x1813dc4*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x1813f38*/ System.Collections.IEnumerator GetEnumerator();
                /*0x1813f9c*/ bool get_IsSynchronized();
                /*0x1813fc0*/ object get_SyncRoot();
                /*0x1813fe4*/ int get_Count();
            }

            class SyncHashtable : System.Collections.Hashtable, System.Collections.IEnumerable
            {
                /*0x50*/ System.Collections.Hashtable _table;

                /*0x1813014*/ SyncHashtable(System.Collections.Hashtable table);
                /*0x1813044*/ SyncHashtable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x18131c8*/ void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                /*0x181338c*/ int get_Count();
                /*0x18133b0*/ bool get_IsSynchronized();
                /*0x18133b8*/ object get_Item(object key);
                /*0x18133dc*/ void set_Item(object key, object value);
                /*0x18134e4*/ object get_SyncRoot();
                /*0x1813508*/ void Add(object key, object value);
                /*0x1813610*/ void Clear();
                /*0x1813708*/ bool Contains(object key);
                /*0x181372c*/ bool ContainsKey(object key);
                /*0x18137c4*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x18138cc*/ object Clone();
                /*0x1813a3c*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                /*0x1813a60*/ System.Collections.IDictionaryEnumerator GetEnumerator();
                /*0x1813a84*/ System.Collections.ICollection get_Keys();
                /*0x1813b8c*/ System.Collections.ICollection get_Values();
                /*0x1813c94*/ void Remove(object key);
                /*0x1813d94*/ void OnDeserialization(object sender);
            }

            class HashtableEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.Hashtable hashtable;
                /*0x18*/ int bucket;
                /*0x1c*/ int version;
                /*0x20*/ bool current;
                /*0x24*/ int getObjectRetType;
                /*0x28*/ object currentKey;
                /*0x30*/ object currentValue;

                /*0x1812910*/ HashtableEnumerator(System.Collections.Hashtable hashtable, int getObjRetType);
                /*0x1812974*/ object Clone();
                /*0x181297c*/ object get_Key();
                /*0x18129e8*/ bool MoveNext();
                /*0x1812b0c*/ System.Collections.DictionaryEntry get_Entry();
                /*0x1812b9c*/ object get_Current();
                /*0x1812c8c*/ object get_Value();
                /*0x1812cf8*/ void Reset();
            }

            class HashtableDebugView
            {
            }
        }

        class HashHelpers
        {
            static /*0x0*/ int[] primes;
            static /*0x8*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> s_SerializationInfoTable;

            static /*0x20f2068*/ HashHelpers();
            static /*0x20f1c58*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> get_SerializationInfoTable();
            static /*0x20f1d50*/ bool IsPrime(int candidate);
            static /*0x20f1e1c*/ int GetPrime(int min);
            static /*0x20f1fd8*/ int ExpandPrime(int oldSize);
        }

        interface ICollection : System.Collections.IEnumerable
        {
            void CopyTo(System.Array array, int index);
            int get_Count();
            object get_SyncRoot();
            bool get_IsSynchronized();
        }

        interface IComparer
        {
            int Compare(object x, object y);
        }

        interface IDictionary : System.Collections.ICollection, System.Collections.IEnumerable
        {
            object get_Item(object key);
            void set_Item(object key, object value);
            System.Collections.ICollection get_Keys();
            bool Contains(object key);
            void Add(object key, object value);
            System.Collections.IDictionaryEnumerator GetEnumerator();
            void Remove(object key);
        }

        interface IDictionaryEnumerator : System.Collections.IEnumerator
        {
            object get_Key();
            object get_Value();
            System.Collections.DictionaryEntry get_Entry();
        }

        interface IEnumerable
        {
            System.Collections.IEnumerator GetEnumerator();
        }

        interface IEnumerator
        {
            bool MoveNext();
            object get_Current();
            void Reset();
        }

        interface IEqualityComparer
        {
            bool Equals(object x, object y);
            int GetHashCode(object obj);
        }

        interface IHashCodeProvider
        {
            int GetHashCode(object obj);
        }

        interface IList : System.Collections.ICollection, System.Collections.IEnumerable
        {
            object get_Item(int index);
            void set_Item(int index, object value);
            int Add(object value);
            bool Contains(object value);
            void Clear();
            bool get_IsReadOnly();
            bool get_IsFixedSize();
            int IndexOf(object value);
            void Insert(int index, object value);
            void Remove(object value);
            void RemoveAt(int index);
        }

        interface IStructuralComparable
        {
            int CompareTo(object other, System.Collections.IComparer comparer);
        }

        interface IStructuralEquatable
        {
            bool Equals(object other, System.Collections.IEqualityComparer comparer);
            int GetHashCode(System.Collections.IEqualityComparer comparer);
        }

        class ListDictionaryInternal : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x10*/ System.Collections.ListDictionaryInternal.DictionaryNode head;
            /*0x18*/ int version;
            /*0x1c*/ int count;
            /*0x20*/ object _syncRoot;

            /*0x1a942f8*/ ListDictionaryInternal();
            /*0x1a94300*/ object get_Item(object key);
            /*0x1a943c0*/ void set_Item(object key, object value);
            /*0x1a945e4*/ int get_Count();
            /*0x1a945ec*/ System.Collections.ICollection get_Keys();
            /*0x1a94650*/ bool get_IsSynchronized();
            /*0x1a94658*/ object get_SyncRoot();
            /*0x1a946cc*/ void Add(object key, object value);
            /*0x1a94994*/ bool Contains(object key);
            /*0x1a94a54*/ void CopyTo(System.Array array, int index);
            /*0x1a94c70*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x1a94cd0*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x1a94d30*/ void Remove(object key);

            class NodeEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
            {
                /*0x10*/ System.Collections.ListDictionaryInternal list;
                /*0x18*/ System.Collections.ListDictionaryInternal.DictionaryNode current;
                /*0x20*/ int version;
                /*0x24*/ bool start;

                /*0x1814470*/ NodeEnumerator(System.Collections.ListDictionaryInternal list);
                /*0x18144b8*/ object get_Current();
                /*0x1814520*/ System.Collections.DictionaryEntry get_Entry();
                /*0x18145b0*/ object get_Key();
                /*0x181461c*/ object get_Value();
                /*0x1814688*/ bool MoveNext();
                /*0x1814738*/ void Reset();
            }

            class NodeKeyValueCollection : System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.ListDictionaryInternal list;
                /*0x18*/ bool isKeys;

                /*0x18147c8*/ NodeKeyValueCollection(System.Collections.ListDictionaryInternal list, bool isKeys);
                /*0x1814808*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
                /*0x18149f4*/ int System.Collections.ICollection.get_Count();
                /*0x1814a2c*/ bool System.Collections.ICollection.get_IsSynchronized();
                /*0x1814a34*/ object System.Collections.ICollection.get_SyncRoot();
                /*0x1814a50*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class NodeKeyValueEnumerator : System.Collections.IEnumerator
                {
                    /*0x10*/ System.Collections.ListDictionaryInternal list;
                    /*0x18*/ System.Collections.ListDictionaryInternal.DictionaryNode current;
                    /*0x20*/ int version;
                    /*0x24*/ bool isKeys;
                    /*0x25*/ bool start;

                    /*0x2aa5018*/ NodeKeyValueEnumerator(System.Collections.ListDictionaryInternal list, bool isKeys);
                    /*0x2aa5074*/ object get_Current();
                    /*0x2aa50f4*/ bool MoveNext();
                    /*0x2aa51a4*/ void Reset();
                }
            }

            class DictionaryNode
            {
                /*0x10*/ object key;
                /*0x18*/ object value;
                /*0x20*/ System.Collections.ListDictionaryInternal.DictionaryNode next;

                /*0x1814468*/ DictionaryNode();
            }
        }

        class Queue : System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ object[] _array;
            /*0x18*/ int _head;
            /*0x1c*/ int _tail;
            /*0x20*/ int _size;
            /*0x24*/ int _growFactor;
            /*0x28*/ int _version;
            /*0x30*/ object _syncRoot;

            /*0x2532470*/ Queue();
            /*0x2532684*/ Queue(int capacity);
            /*0x253247c*/ Queue(int capacity, float growFactor);
            /*0x253268c*/ Queue(System.Collections.ICollection col);
            /*0x2532938*/ int get_Count();
            /*0x2532940*/ object Clone();
            /*0x2532a28*/ bool get_IsSynchronized();
            /*0x2532a30*/ object get_SyncRoot();
            /*0x2532aa8*/ void CopyTo(System.Array array, int index);
            /*0x2532c84*/ void Enqueue(object obj);
            /*0x2532e84*/ System.Collections.IEnumerator GetEnumerator();
            /*0x2532ee4*/ object Dequeue();
            /*0x2532fcc*/ object Peek();
            /*0x2533078*/ object GetElement(int i);
            /*0x2532d8c*/ void SetCapacity(int capacity);

            class QueueEnumerator : System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.Queue _q;
                /*0x18*/ int _index;
                /*0x1c*/ int _version;
                /*0x20*/ object currentElement;

                /*0x1818b24*/ QueueEnumerator(System.Collections.Queue q);
                /*0x1818b78*/ object Clone();
                /*0x1818b80*/ bool MoveNext();
                /*0x1818c5c*/ object get_Current();
                /*0x1818cf8*/ void Reset();
            }

            class QueueDebugView
            {
            }
        }

        class ReadOnlyCollectionBase : System.Collections.ICollection, System.Collections.IEnumerable
        {
            /*0x10*/ System.Collections.ArrayList list;

            /*0x198c918*/ ReadOnlyCollectionBase();
            /*0x198c7d0*/ System.Collections.ArrayList get_InnerList();
            /*0x198c838*/ int get_Count();
            /*0x198c860*/ bool System.Collections.ICollection.get_IsSynchronized();
            /*0x198c888*/ object System.Collections.ICollection.get_SyncRoot();
            /*0x198c8b0*/ void System.Collections.ICollection.CopyTo(System.Array array, int index);
            /*0x198c8f0*/ System.Collections.IEnumerator GetEnumerator();
        }

        class SortedList : System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            static int _defaultCapacity = 16;
            static /*0x0*/ object[] emptyArray;
            /*0x10*/ object[] keys;
            /*0x18*/ object[] values;
            /*0x20*/ int _size;
            /*0x24*/ int version;
            /*0x28*/ System.Collections.IComparer comparer;
            /*0x30*/ System.Collections.SortedList.KeyList keyList;
            /*0x38*/ System.Collections.SortedList.ValueList valueList;
            /*0x40*/ object _syncRoot;

            static /*0x249e634*/ SortedList();
            static /*0x249e588*/ System.Collections.SortedList Synchronized(System.Collections.SortedList list);
            /*0x249d1d8*/ SortedList();
            /*0x249d2f0*/ SortedList(int initialCapacity);
            /*0x249d440*/ SortedList(System.Collections.IComparer comparer);
            /*0x249d478*/ SortedList(System.Collections.IComparer comparer, int capacity);
            /*0x249d200*/ void Init();
            /*0x249d4b0*/ void Add(object key, object value);
            /*0x249d774*/ int get_Capacity();
            /*0x249d790*/ void set_Capacity(int value);
            /*0x249d944*/ int get_Count();
            /*0x249d94c*/ System.Collections.ICollection get_Keys();
            /*0x249d95c*/ System.Collections.ICollection get_Values();
            /*0x249d96c*/ bool get_IsSynchronized();
            /*0x249d974*/ object get_SyncRoot();
            /*0x249d9e8*/ object Clone();
            /*0x249daa8*/ bool Contains(object key);
            /*0x249dad0*/ bool ContainsKey(object key);
            /*0x249daf8*/ bool ContainsValue(object value);
            /*0x249db20*/ void CopyTo(System.Array array, int arrayIndex);
            /*0x249dd94*/ void EnsureCapacity(int min);
            /*0x249dde0*/ object GetByIndex(int index);
            /*0x249deac*/ System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
            /*0x249df24*/ System.Collections.IDictionaryEnumerator GetEnumerator();
            /*0x249df9c*/ object GetKey(int index);
            /*0x249e068*/ System.Collections.IList GetKeyList();
            /*0x249e0d4*/ System.Collections.IList GetValueList();
            /*0x249e140*/ object get_Item(object key);
            /*0x249e1a4*/ void set_Item(object key, object value);
            /*0x249e2d8*/ int IndexOfKey(object key);
            /*0x249e380*/ int IndexOfValue(object value);
            /*0x249d638*/ void Insert(int index, object key, object value);
            /*0x249e3e4*/ void RemoveAt(int index);
            /*0x249e538*/ void Remove(object key);

            class SyncSortedList : System.Collections.SortedList
            {
                /*0x48*/ System.Collections.SortedList _list;
                /*0x50*/ object _root;

                /*0x181b5b8*/ SyncSortedList(System.Collections.SortedList list);
                /*0x181b650*/ int get_Count();
                /*0x181b73c*/ object get_SyncRoot();
                /*0x181b744*/ bool get_IsSynchronized();
                /*0x181b74c*/ object get_Item(object key);
                /*0x181b840*/ void set_Item(object key, object value);
                /*0x181b92c*/ void Add(object key, object value);
                /*0x181ba18*/ int get_Capacity();
                /*0x181bb04*/ object Clone();
                /*0x181bbf0*/ bool Contains(object key);
                /*0x181bce4*/ bool ContainsKey(object key);
                /*0x181bdd8*/ bool ContainsValue(object key);
                /*0x181becc*/ void CopyTo(System.Array array, int index);
                /*0x181bfb8*/ object GetByIndex(int index);
                /*0x181c0ac*/ System.Collections.IDictionaryEnumerator GetEnumerator();
                /*0x181c198*/ object GetKey(int index);
                /*0x181c28c*/ System.Collections.IList GetKeyList();
                /*0x181c378*/ System.Collections.IList GetValueList();
                /*0x181c464*/ int IndexOfKey(object key);
                /*0x181c5c4*/ int IndexOfValue(object value);
                /*0x181c6b8*/ void RemoveAt(int index);
                /*0x181c79c*/ void Remove(object key);
            }

            class SortedListEnumerator : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.SortedList sortedList;
                /*0x18*/ object key;
                /*0x20*/ object value;
                /*0x28*/ int index;
                /*0x2c*/ int startIndex;
                /*0x30*/ int endIndex;
                /*0x34*/ int version;
                /*0x38*/ bool current;
                /*0x3c*/ int getObjectRetType;

                /*0x181af38*/ SortedListEnumerator(System.Collections.SortedList sortedList, int index, int count, int getObjRetType);
                /*0x181b138*/ object Clone();
                /*0x181b140*/ object get_Key();
                /*0x181b1dc*/ bool MoveNext();
                /*0x181b2e0*/ System.Collections.DictionaryEntry get_Entry();
                /*0x181b398*/ object get_Current();
                /*0x181b488*/ object get_Value();
                /*0x181b524*/ void Reset();
            }

            class KeyList : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.SortedList sortedList;

                /*0x181ab7c*/ KeyList(System.Collections.SortedList sortedList);
                /*0x181aba8*/ int get_Count();
                /*0x181abc4*/ bool get_IsReadOnly();
                /*0x181abcc*/ bool get_IsFixedSize();
                /*0x181abd4*/ bool get_IsSynchronized();
                /*0x181abf8*/ object get_SyncRoot();
                /*0x181ac1c*/ int Add(object key);
                /*0x181ac78*/ void Clear();
                /*0x181acd4*/ bool Contains(object key);
                /*0x181acf8*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x181adc4*/ void Insert(int index, object value);
                /*0x181ae20*/ object get_Item(int index);
                /*0x181ae44*/ void set_Item(int index, object value);
                /*0x181aea0*/ System.Collections.IEnumerator GetEnumerator();
                /*0x181afa4*/ int IndexOf(object key);
                /*0x181b080*/ void Remove(object key);
                /*0x181b0dc*/ void RemoveAt(int index);
            }

            class ValueList : System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
            {
                /*0x10*/ System.Collections.SortedList sortedList;

                /*0x181c880*/ ValueList(System.Collections.SortedList sortedList);
                /*0x181c8ac*/ int get_Count();
                /*0x181c8c8*/ bool get_IsReadOnly();
                /*0x181c8d0*/ bool get_IsFixedSize();
                /*0x181c8d8*/ bool get_IsSynchronized();
                /*0x181c8fc*/ object get_SyncRoot();
                /*0x181c920*/ int Add(object key);
                /*0x181c97c*/ void Clear();
                /*0x181c9d8*/ bool Contains(object value);
                /*0x181c9fc*/ void CopyTo(System.Array array, int arrayIndex);
                /*0x181cac8*/ void Insert(int index, object value);
                /*0x181cb24*/ object get_Item(int index);
                /*0x181cb48*/ void set_Item(int index, object value);
                /*0x181cba4*/ System.Collections.IEnumerator GetEnumerator();
                /*0x181cc3c*/ int IndexOf(object value);
                /*0x181ccc0*/ void Remove(object value);
                /*0x181cd1c*/ void RemoveAt(int index);
            }

            class SortedListDebugView
            {
            }
        }

        class Stack : System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
        {
            /*0x10*/ object[] _array;
            /*0x18*/ int _size;
            /*0x1c*/ int _version;
            /*0x20*/ object _syncRoot;

            /*0x249f5d4*/ Stack();
            /*0x249f634*/ Stack(int initialCapacity);
            /*0x249f710*/ int get_Count();
            /*0x249f718*/ bool get_IsSynchronized();
            /*0x249f720*/ object get_SyncRoot();
            /*0x249f794*/ void Clear();
            /*0x249f7d0*/ object Clone();
            /*0x249f86c*/ void CopyTo(System.Array array, int index);
            /*0x249fb30*/ System.Collections.IEnumerator GetEnumerator();
            /*0x249fb90*/ object Peek();
            /*0x249fc30*/ object Pop();
            /*0x249fce0*/ void Push(object obj);

            class StackEnumerator : System.Collections.IEnumerator, System.ICloneable
            {
                /*0x10*/ System.Collections.Stack _stack;
                /*0x18*/ int _index;
                /*0x1c*/ int _version;
                /*0x20*/ object currentElement;

                /*0x181cd78*/ StackEnumerator(System.Collections.Stack stack);
                /*0x181cdbc*/ object Clone();
                /*0x181cdc4*/ bool MoveNext();
                /*0x181cec0*/ object get_Current();
                /*0x181cf4c*/ void Reset();
            }

            class StackDebugView
            {
            }
        }

        namespace ObjectModel
        {
            class Collection<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ System.Collections.Generic.IList<T> items;
                /*0x0*/ object _syncRoot;

                static bool IsCompatibleObject(object value);
                Collection();
                Collection(System.Collections.Generic.IList<T> list);
                int get_Count();
                System.Collections.Generic.IList<T> get_Items();
                T get_Item(int index);
                void set_Item(int index, T value);
                void Add(T item);
                void Clear();
                void CopyTo(T[] array, int index);
                bool Contains(T item);
                System.Collections.Generic.IEnumerator<T> GetEnumerator();
                int IndexOf(T item);
                void Insert(int index, T item);
                bool Remove(T item);
                void RemoveAt(int index);
                void ClearItems();
                void InsertItem(int index, T item);
                void RemoveItem(int index);
                void SetItem(int index, T item);
                bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                void System.Collections.ICollection.CopyTo(System.Array array, int index);
                object System.Collections.IList.get_Item(int index);
                void System.Collections.IList.set_Item(int index, object value);
                bool System.Collections.IList.get_IsReadOnly();
                bool System.Collections.IList.get_IsFixedSize();
                int System.Collections.IList.Add(object value);
                bool System.Collections.IList.Contains(object value);
                int System.Collections.IList.IndexOf(object value);
                void System.Collections.IList.Insert(int index, object value);
                void System.Collections.IList.Remove(object value);
            }

            class KeyedCollection<TKey, TItem> : System.Collections.ObjectModel.Collection<TItem>
            {
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> comparer;
                /*0x0*/ System.Collections.Generic.Dictionary<TKey, TItem> dict;
                /*0x0*/ int keyCount;
                /*0x0*/ int threshold;

                KeyedCollection();
                KeyedCollection(System.Collections.Generic.IEqualityComparer<TKey> comparer);
                KeyedCollection(System.Collections.Generic.IEqualityComparer<TKey> comparer, int dictionaryCreationThreshold);
                TItem get_Item(TKey key);
                bool Contains(TKey key);
                System.Collections.Generic.IDictionary<TKey, TItem> get_Dictionary();
                void ClearItems();
                TKey GetKeyForItem(TItem item);
                void InsertItem(int index, TItem item);
                void RemoveItem(int index);
                void SetItem(int index, TItem item);
                void AddKey(TKey key, TItem item);
                void CreateDictionary();
                void RemoveKey(TKey key);
            }

            class ReadOnlyCollection<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ System.Collections.Generic.IList<T> list;
                /*0x0*/ object _syncRoot;

                static bool IsCompatibleObject(object value);
                ReadOnlyCollection(System.Collections.Generic.IList<T> list);
                int get_Count();
                T get_Item(int index);
                bool Contains(T value);
                void CopyTo(T[] array, int index);
                System.Collections.Generic.IEnumerator<T> GetEnumerator();
                int IndexOf(T value);
                System.Collections.Generic.IList<T> get_Items();
                bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                T System.Collections.Generic.IList<T>.get_Item(int index);
                void System.Collections.Generic.IList<T>.set_Item(int index, T value);
                void System.Collections.Generic.ICollection<T>.Add(T value);
                void System.Collections.Generic.ICollection<T>.Clear();
                void System.Collections.Generic.IList<T>.Insert(int index, T value);
                bool System.Collections.Generic.ICollection<T>.Remove(T value);
                void System.Collections.Generic.IList<T>.RemoveAt(int index);
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                void System.Collections.ICollection.CopyTo(System.Array array, int index);
                bool System.Collections.IList.get_IsFixedSize();
                bool System.Collections.IList.get_IsReadOnly();
                object System.Collections.IList.get_Item(int index);
                void System.Collections.IList.set_Item(int index, object value);
                int System.Collections.IList.Add(object value);
                void System.Collections.IList.Clear();
                bool System.Collections.IList.Contains(object value);
                int System.Collections.IList.IndexOf(object value);
                void System.Collections.IList.Insert(int index, object value);
                void System.Collections.IList.Remove(object value);
                void System.Collections.IList.RemoveAt(int index);
            }

            class ReadOnlyDictionary<TKey, TValue> : System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
            {
                /*0x0*/ System.Collections.Generic.IDictionary<TKey, TValue> m_dictionary;
                /*0x0*/ object m_syncRoot;
                /*0x0*/ System.Collections.ObjectModel.ReadOnlyDictionary.KeyCollection<TKey, TValue> m_keys;
                /*0x0*/ System.Collections.ObjectModel.ReadOnlyDictionary.ValueCollection<TKey, TValue> m_values;

                static bool IsCompatibleKey(object key);
                ReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary);
                System.Collections.ObjectModel.ReadOnlyDictionary.KeyCollection<TKey, TValue> get_Keys();
                System.Collections.ObjectModel.ReadOnlyDictionary.ValueCollection<TKey, TValue> get_Values();
                bool ContainsKey(TKey key);
                System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
                bool TryGetValue(TKey key, ref TValue value);
                System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
                TValue get_Item(TKey key);
                void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
                bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
                TValue System.Collections.Generic.IDictionary<TKey,TValue>.get_Item(TKey key);
                void System.Collections.Generic.IDictionary<TKey,TValue>.set_Item(TKey key, TValue value);
                int get_Count();
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> item);
                void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int arrayIndex);
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
                void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> item);
                void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear();
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> item);
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator();
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                void System.Collections.IDictionary.Add(object key, object value);
                bool System.Collections.IDictionary.Contains(object key);
                System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
                System.Collections.ICollection System.Collections.IDictionary.get_Keys();
                void System.Collections.IDictionary.Remove(object key);
                object System.Collections.IDictionary.get_Item(object key);
                void System.Collections.IDictionary.set_Item(object key, object value);
                void System.Collections.ICollection.CopyTo(System.Array array, int index);
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();

                struct DictionaryEnumerator<TKey, TValue> : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.IDictionary<TKey, TValue> m_dictionary;
                    /*0x0*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> m_enumerator;

                    DictionaryEnumerator(System.Collections.Generic.IDictionary<TKey, TValue> dictionary);
                    System.Collections.DictionaryEntry get_Entry();
                    object get_Key();
                    object get_Value();
                    object get_Current();
                    bool MoveNext();
                    void Reset();
                }

                class KeyCollection<TKey, TValue> : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TKey>
                {
                    /*0x0*/ System.Collections.Generic.ICollection<TKey> m_collection;
                    /*0x0*/ object m_syncRoot;

                    KeyCollection(System.Collections.Generic.ICollection<TKey> collection);
                    KeyCollection();
                    void System.Collections.Generic.ICollection<TKey>.Add(TKey item);
                    void System.Collections.Generic.ICollection<TKey>.Clear();
                    bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item);
                    void CopyTo(TKey[] array, int arrayIndex);
                    int get_Count();
                    bool System.Collections.Generic.ICollection<TKey>.get_IsReadOnly();
                    bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item);
                    System.Collections.Generic.IEnumerator<TKey> GetEnumerator();
                    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    bool System.Collections.ICollection.get_IsSynchronized();
                    object System.Collections.ICollection.get_SyncRoot();
                }

                class ValueCollection<TKey, TValue> : System.Collections.Generic.ICollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TValue>
                {
                    /*0x0*/ System.Collections.Generic.ICollection<TValue> m_collection;
                    /*0x0*/ object m_syncRoot;

                    ValueCollection(System.Collections.Generic.ICollection<TValue> collection);
                    ValueCollection();
                    void System.Collections.Generic.ICollection<TValue>.Add(TValue item);
                    void System.Collections.Generic.ICollection<TValue>.Clear();
                    bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item);
                    void CopyTo(TValue[] array, int arrayIndex);
                    int get_Count();
                    bool System.Collections.Generic.ICollection<TValue>.get_IsReadOnly();
                    bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item);
                    System.Collections.Generic.IEnumerator<TValue> GetEnumerator();
                    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    bool System.Collections.ICollection.get_IsSynchronized();
                    object System.Collections.ICollection.get_SyncRoot();
                }
            }

            class ReadOnlyDictionaryHelpers
            {
                static void CopyToNonGenericICollectionHelper<T>(System.Collections.Generic.ICollection<T> collection, System.Array array, int index);
            }
        }

        namespace Concurrent
        {
            class CDSCollectionETWBCLProvider : System.Diagnostics.Tracing.EventSource
            {
                static /*0x0*/ System.Collections.Concurrent.CDSCollectionETWBCLProvider Log;

                static /*0x1c5ff20*/ CDSCollectionETWBCLProvider();
                /*0x1c5feb8*/ CDSCollectionETWBCLProvider();
                /*0x1c5ff1c*/ void ConcurrentDictionary_AcquiringAllLocks(int numOfBuckets);
            }

            class ConcurrentDictionary<TKey, TValue> : System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
            {
                static /*0x0*/ bool s_isValueWriteAtomic;
                /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Tables<TKey, TValue> _tables;
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> _comparer;
                /*0x0*/ bool _growLockArray;
                /*0x0*/ int _budget;

                static ConcurrentDictionary();
                static bool IsValueWriteAtomic();
                static void ThrowKeyNotFoundException();
                static void ThrowKeyNullException();
                static int GetBucket(int hashcode, int bucketCount);
                static void GetBucketAndLockNo(int hashcode, ref int bucketNo, ref int lockNo, int bucketCount, int lockCount);
                static int get_DefaultConcurrencyLevel();
                ConcurrentDictionary();
                ConcurrentDictionary(System.Collections.Generic.IEqualityComparer<TKey> comparer);
                ConcurrentDictionary(int concurrencyLevel, int capacity, bool growLockArray, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                bool TryAdd(TKey key, TValue value);
                bool ContainsKey(TKey key);
                bool TryRemove(TKey key, ref TValue value);
                bool TryRemoveInternal(TKey key, ref TValue value, bool matchValue, TValue oldValue);
                bool TryGetValue(TKey key, ref TValue value);
                bool TryGetValueInternal(TKey key, int hashcode, ref TValue value);
                void Clear();
                void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                void CopyToPairs(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                void CopyToEntries(System.Collections.DictionaryEntry[] array, int index);
                void CopyToObjects(object[] array, int index);
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator();
                bool TryAddInternal(TKey key, int hashcode, TValue value, bool updateIfExists, bool acquireLock, ref TValue resultingValue);
                TValue get_Item(TKey key);
                void set_Item(TKey key, TValue value);
                int get_Count();
                int GetCountInternal();
                TValue GetOrAdd(TKey key, System.Func<TKey, TValue> valueFactory);
                void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
                bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
                System.Collections.Generic.ICollection<TKey> get_Keys();
                System.Collections.Generic.ICollection<TValue> get_Values();
                void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                void System.Collections.IDictionary.Add(object key, object value);
                bool System.Collections.IDictionary.Contains(object key);
                System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
                System.Collections.ICollection System.Collections.IDictionary.get_Keys();
                void System.Collections.IDictionary.Remove(object key);
                object System.Collections.IDictionary.get_Item(object key);
                void System.Collections.IDictionary.set_Item(object key, object value);
                void System.Collections.ICollection.CopyTo(System.Array array, int index);
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                void GrowTable(System.Collections.Concurrent.ConcurrentDictionary.Tables<TKey, TValue> tables);
                void AcquireAllLocks(ref int locksAcquired);
                void AcquireLocks(int fromInclusive, int toExclusive, ref int locksAcquired);
                void ReleaseLocks(int fromInclusive, int toExclusive);
                System.Collections.ObjectModel.ReadOnlyCollection<TKey> GetKeys();
                System.Collections.ObjectModel.ReadOnlyCollection<TValue> GetValues();

                class Tables<TKey, TValue>
                {
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> _buckets;
                    /*0x0*/ object[] _locks;
                    /*0x0*/ int[] _countPerLock;

                    Tables(System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> buckets, object[] locks, int[] countPerLock);
                }

                class Node<TKey, TValue>
                {
                    /*0x0*/ TKey _key;
                    /*0x0*/ TValue _value;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> _next;
                    /*0x0*/ int _hashcode;

                    Node(TKey key, TValue value, int hashcode, System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> next);
                }

                class DictionaryEnumerator<TKey, TValue> : System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> _enumerator;

                    DictionaryEnumerator(System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> dictionary);
                    System.Collections.DictionaryEntry get_Entry();
                    object get_Key();
                    object get_Value();
                    object get_Current();
                    bool MoveNext();
                    void Reset();
                }

                class <GetEnumerator>d__3<TKey, TValue> : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ int <>1__state;
                    /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> <>2__current;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> <>4__this;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> <buckets>5__1;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentDictionary.Node<TKey, TValue> <current>5__2;
                    /*0x0*/ int <i>5__3;

                    <GetEnumerator>d__3(int <>1__state);
                    void System.IDisposable.Dispose();
                    bool MoveNext();
                    System.Collections.Generic.KeyValuePair<TKey, TValue> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_Current();
                    void System.Collections.IEnumerator.Reset();
                    object System.Collections.IEnumerator.get_Current();
                }
            }

            class IDictionaryDebugView<K, V>
            {
            }

            class ConcurrentQueue<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ object _crossSegmentLock;
                /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> _tail;
                /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> _head;

                static int GetCount(System.Collections.Concurrent.ConcurrentQueue.Segment<T> s, int head, int tail);
                static long GetCount(System.Collections.Concurrent.ConcurrentQueue.Segment<T> head, int headHead, System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail, int tailTail);
                ConcurrentQueue();
                void System.Collections.ICollection.CopyTo(System.Array array, int index);
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                T[] ToArray();
                int get_Count();
                void CopyTo(T[] array, int index);
                System.Collections.Generic.IEnumerator<T> GetEnumerator();
                void SnapForObservation(ref System.Collections.Concurrent.ConcurrentQueue.Segment<T> head, ref int headHead, ref System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail, ref int tailTail);
                T GetItemWhenAvailable(System.Collections.Concurrent.ConcurrentQueue.Segment<T> segment, int i);
                System.Collections.Generic.IEnumerator<T> Enumerate(System.Collections.Concurrent.ConcurrentQueue.Segment<T> head, int headHead, System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail, int tailTail);
                void Enqueue(T item);
                void EnqueueSlow(T item);
                bool TryDequeue(ref T result);
                bool TryDequeueSlow(ref T item);

                class Segment<T>
                {
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment.Slot<T> _slots;
                    /*0x0*/ int _slotsMask;
                    /*0x0*/ System.Collections.Concurrent.PaddedHeadAndTail _headAndTail;
                    /*0x0*/ bool _preservedForObservation;
                    /*0x0*/ bool _frozenForEnqueues;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> _nextSegment;

                    Segment(int boundedLength);
                    int get_Capacity();
                    int get_FreezeOffset();
                    void EnsureFrozenForEnqueues();
                    bool TryDequeue(ref T item);
                    bool TryEnqueue(T item);

                    struct Slot<T>
                    {
                        /*0x0*/ T Item;
                        /*0x0*/ int SequenceNumber;
                    }
                }

                class <Enumerate>d__27<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ int <>1__state;
                    /*0x0*/ T <>2__current;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> head;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> tail;
                    /*0x0*/ int tailTail;
                    /*0x0*/ int headHead;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue<T> <>4__this;
                    /*0x0*/ int <i>5__1;
                    /*0x0*/ int <headTail>5__2;
                    /*0x0*/ int <i>5__3;
                    /*0x0*/ int <i>5__4;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentQueue.Segment<T> <s>5__5;
                    /*0x0*/ int <i>5__6;
                    /*0x0*/ int <sTail>5__7;
                    /*0x0*/ int <i>5__8;

                    <Enumerate>d__27(int <>1__state);
                    void System.IDisposable.Dispose();
                    bool MoveNext();
                    T System.Collections.Generic.IEnumerator<T>.get_Current();
                    void System.Collections.IEnumerator.Reset();
                    object System.Collections.IEnumerator.get_Current();
                }
            }

            struct PaddedHeadAndTail
            {
                /*0x90*/ int Head;
                /*0x110*/ int Tail;
            }

            class ConcurrentStack<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>
            {
                /*0x0*/ System.Collections.Concurrent.ConcurrentStack.Node<T> _head;

                ConcurrentStack();
                ConcurrentStack(System.Collections.Generic.IEnumerable<T> collection);
                void InitializeFromCollection(System.Collections.Generic.IEnumerable<T> collection);
                int get_Count();
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                void System.Collections.ICollection.CopyTo(System.Array array, int index);
                System.Collections.Generic.List<T> ToList();
                System.Collections.Generic.List<T> ToList(System.Collections.Concurrent.ConcurrentStack.Node<T> curr);
                System.Collections.Generic.IEnumerator<T> GetEnumerator();
                System.Collections.Generic.IEnumerator<T> GetEnumerator(System.Collections.Concurrent.ConcurrentStack.Node<T> head);
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();

                class Node<T>
                {
                    /*0x0*/ T _value;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentStack.Node<T> _next;

                    Node(T value);
                }

                class <GetEnumerator>d__35<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ int <>1__state;
                    /*0x0*/ T <>2__current;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentStack.Node<T> head;
                    /*0x0*/ System.Collections.Concurrent.ConcurrentStack.Node<T> <current>5__1;

                    <GetEnumerator>d__35(int <>1__state);
                    void System.IDisposable.Dispose();
                    bool MoveNext();
                    T System.Collections.Generic.IEnumerator<T>.get_Current();
                    void System.Collections.IEnumerator.Reset();
                    object System.Collections.IEnumerator.get_Current();
                }
            }

            class IProducerConsumerCollectionDebugView<T>
            {
            }
        }

        namespace Generic
        {
            class CollectionExtensions
            {
                static TValue GetValueOrDefault<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> dictionary, TKey key);
                static TValue GetValueOrDefault<TKey, TValue>(System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue);
            }

            class KeyValuePair
            {
                static /*0x1a91a20*/ string PairToString(object key, object value);
            }

            struct KeyValuePair<TKey, TValue>
            {
                /*0x0*/ TKey key;
                /*0x0*/ TValue value;

                KeyValuePair(TKey key, TValue value);
                TKey get_Key();
                TValue get_Value();
                string ToString();
            }

            class IntrospectiveSortUtilities
            {
                static /*0x1a89db4*/ int FloorLog2(int n);
                static /*0x1a89de8*/ void ThrowOrIgnoreBadComparer(object comparer);
            }

            class ArraySortHelper<T>
            {
                static void Sort(T[] keys, int index, int length, System.Collections.Generic.IComparer<T> comparer);
                static int BinarySearch(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
                static void Sort(T[] keys, int index, int length, System.Comparison<T> comparer);
                static int InternalBinarySearch(T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
                static void SwapIfGreater(T[] keys, System.Comparison<T> comparer, int a, int b);
                static void Swap(T[] a, int i, int j);
                static void IntrospectiveSort(T[] keys, int left, int length, System.Comparison<T> comparer);
                static void IntroSort(T[] keys, int lo, int hi, int depthLimit, System.Comparison<T> comparer);
                static int PickPivotAndPartition(T[] keys, int lo, int hi, System.Comparison<T> comparer);
                static void Heapsort(T[] keys, int lo, int hi, System.Comparison<T> comparer);
                static void DownHeap(T[] keys, int i, int n, int lo, System.Comparison<T> comparer);
                static void InsertionSort(T[] keys, int lo, int hi, System.Comparison<T> comparer);
            }

            class ArraySortHelper<TKey, TValue>
            {
                static /*0x0*/ System.Collections.Generic.ArraySortHelper<TKey, TValue> s_defaultArraySortHelper;

                static System.Collections.Generic.ArraySortHelper<TKey, TValue> get_Default();
                static System.Collections.Generic.ArraySortHelper<TKey, TValue> CreateArraySortHelper();
                static void SwapIfGreaterWithItems(TKey[] keys, TValue[] values, System.Collections.Generic.IComparer<TKey> comparer, int a, int b);
                static void Swap(TKey[] keys, TValue[] values, int i, int j);
                static void IntrospectiveSort(TKey[] keys, TValue[] values, int left, int length, System.Collections.Generic.IComparer<TKey> comparer);
                static void IntroSort(TKey[] keys, TValue[] values, int lo, int hi, int depthLimit, System.Collections.Generic.IComparer<TKey> comparer);
                static int PickPivotAndPartition(TKey[] keys, TValue[] values, int lo, int hi, System.Collections.Generic.IComparer<TKey> comparer);
                static void Heapsort(TKey[] keys, TValue[] values, int lo, int hi, System.Collections.Generic.IComparer<TKey> comparer);
                static void DownHeap(TKey[] keys, TValue[] values, int i, int n, int lo, System.Collections.Generic.IComparer<TKey> comparer);
                static void InsertionSort(TKey[] keys, TValue[] values, int lo, int hi, System.Collections.Generic.IComparer<TKey> comparer);
                ArraySortHelper();
                void Sort(TKey[] keys, TValue[] values, int index, int length, System.Collections.Generic.IComparer<TKey> comparer);
            }

            enum InsertionBehavior
            {
                None = 0,
                OverwriteExisting = 1,
                ThrowOnExisting = 2,
            }

            class Dictionary<TKey, TValue> : System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
            {
                static string VersionName = "Version";
                static string HashSizeName = "HashSize";
                static string KeyValuePairsName = "KeyValuePairs";
                static string ComparerName = "Comparer";
                /*0x0*/ int[] buckets;
                /*0x0*/ System.Collections.Generic.Dictionary.Entry<TKey, TValue> entries;
                /*0x0*/ int count;
                /*0x0*/ int version;
                /*0x0*/ int freeList;
                /*0x0*/ int freeCount;
                /*0x0*/ System.Collections.Generic.IEqualityComparer<TKey> comparer;
                /*0x0*/ System.Collections.Generic.Dictionary.KeyCollection<TKey, TValue> keys;
                /*0x0*/ System.Collections.Generic.Dictionary.ValueCollection<TKey, TValue> values;
                /*0x0*/ object _syncRoot;

                static bool IsCompatibleKey(object key);
                Dictionary();
                Dictionary(int capacity);
                Dictionary(System.Collections.Generic.IEqualityComparer<TKey> comparer);
                Dictionary(int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                Dictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary);
                Dictionary(System.Collections.Generic.IDictionary<TKey, TValue> dictionary, System.Collections.Generic.IEqualityComparer<TKey> comparer);
                Dictionary(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                System.Collections.Generic.IEqualityComparer<TKey> get_Comparer();
                int get_Count();
                System.Collections.Generic.Dictionary.KeyCollection<TKey, TValue> get_Keys();
                System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys();
                System.Collections.Generic.Dictionary.ValueCollection<TKey, TValue> get_Values();
                System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.get_Values();
                TValue get_Item(TKey key);
                void set_Item(TKey key, TValue value);
                void Add(TKey key, TValue value);
                void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> keyValuePair);
                void Clear();
                bool ContainsKey(TKey key);
                bool ContainsValue(TValue value);
                void CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                System.Collections.Generic.Dictionary.Enumerator<TKey, TValue> GetEnumerator();
                System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator();
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                int FindEntry(TKey key);
                void Initialize(int capacity);
                bool TryInsert(TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior);
                void OnDeserialization(object sender);
                void Resize();
                void Resize(int newSize, bool forceNewHashCodes);
                bool Remove(TKey key);
                bool TryGetValue(TKey key, ref TValue value);
                bool TryAdd(TKey key, TValue value);
                bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
                void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue> array, int index);
                void System.Collections.ICollection.CopyTo(System.Array array, int index);
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                System.Collections.ICollection System.Collections.IDictionary.get_Keys();
                object System.Collections.IDictionary.get_Item(object key);
                void System.Collections.IDictionary.set_Item(object key, object value);
                void System.Collections.IDictionary.Add(object key, object value);
                bool System.Collections.IDictionary.Contains(object key);
                System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
                void System.Collections.IDictionary.Remove(object key);

                struct Entry<TKey, TValue>
                {
                    /*0x0*/ int hashCode;
                    /*0x0*/ int next;
                    /*0x0*/ TKey key;
                    /*0x0*/ TValue value;
                }

                struct Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.IDisposable, System.Collections.IEnumerator, System.Collections.IDictionaryEnumerator
                {
                    /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> dictionary;
                    /*0x0*/ int version;
                    /*0x0*/ int index;
                    /*0x0*/ System.Collections.Generic.KeyValuePair<TKey, TValue> current;
                    /*0x0*/ int getEnumeratorRetType;

                    Enumerator(System.Collections.Generic.Dictionary<TKey, TValue> dictionary, int getEnumeratorRetType);
                    bool MoveNext();
                    System.Collections.Generic.KeyValuePair<TKey, TValue> get_Current();
                    void Dispose();
                    object System.Collections.IEnumerator.get_Current();
                    void System.Collections.IEnumerator.Reset();
                    System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.get_Entry();
                    object System.Collections.IDictionaryEnumerator.get_Key();
                    object System.Collections.IDictionaryEnumerator.get_Value();
                }

                class KeyCollection<TKey, TValue> : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TKey>
                {
                    /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> dictionary;

                    KeyCollection(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                    System.Collections.Generic.Dictionary.KeyCollection.Enumerator<TKey, TValue> GetEnumerator();
                    void CopyTo(TKey[] array, int index);
                    int get_Count();
                    bool System.Collections.Generic.ICollection<TKey>.get_IsReadOnly();
                    void System.Collections.Generic.ICollection<TKey>.Add(TKey item);
                    void System.Collections.Generic.ICollection<TKey>.Clear();
                    bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item);
                    bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item);
                    System.Collections.Generic.IEnumerator<TKey> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator();
                    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    bool System.Collections.ICollection.get_IsSynchronized();
                    object System.Collections.ICollection.get_SyncRoot();

                    struct Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<TKey>, System.IDisposable, System.Collections.IEnumerator
                    {
                        /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> dictionary;
                        /*0x0*/ int index;
                        /*0x0*/ int version;
                        /*0x0*/ TKey currentKey;

                        Enumerator(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                        void Dispose();
                        bool MoveNext();
                        TKey get_Current();
                        object System.Collections.IEnumerator.get_Current();
                        void System.Collections.IEnumerator.Reset();
                    }
                }

                class ValueCollection<TKey, TValue> : System.Collections.Generic.ICollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TValue>
                {
                    /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> dictionary;

                    ValueCollection(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                    System.Collections.Generic.Dictionary.ValueCollection.Enumerator<TKey, TValue> GetEnumerator();
                    void CopyTo(TValue[] array, int index);
                    int get_Count();
                    bool System.Collections.Generic.ICollection<TValue>.get_IsReadOnly();
                    void System.Collections.Generic.ICollection<TValue>.Add(TValue item);
                    bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item);
                    void System.Collections.Generic.ICollection<TValue>.Clear();
                    bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item);
                    System.Collections.Generic.IEnumerator<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator();
                    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                    void System.Collections.ICollection.CopyTo(System.Array array, int index);
                    bool System.Collections.ICollection.get_IsSynchronized();
                    object System.Collections.ICollection.get_SyncRoot();

                    struct Enumerator<TKey, TValue> : System.Collections.Generic.IEnumerator<TValue>, System.IDisposable, System.Collections.IEnumerator
                    {
                        /*0x0*/ System.Collections.Generic.Dictionary<TKey, TValue> dictionary;
                        /*0x0*/ int index;
                        /*0x0*/ int version;
                        /*0x0*/ TValue currentValue;

                        Enumerator(System.Collections.Generic.Dictionary<TKey, TValue> dictionary);
                        void Dispose();
                        bool MoveNext();
                        TValue get_Current();
                        object System.Collections.IEnumerator.get_Current();
                        void System.Collections.IEnumerator.Reset();
                    }
                }
            }

            class DictionaryHashHelpers
            {
                static /*0x0*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> <SerializationInfoTable>k__BackingField;

                static /*0x2040910*/ DictionaryHashHelpers();
                static /*0x20408ac*/ System.Runtime.CompilerServices.ConditionalWeakTable<object, System.Runtime.Serialization.SerializationInfo> get_SerializationInfoTable();
            }

            class IDictionaryDebugView<K, V>
            {
            }

            class DictionaryKeyCollectionDebugView<TKey, TValue>
            {
            }

            class DictionaryValueCollectionDebugView<TKey, TValue>
            {
            }

            class NonRandomizedStringEqualityComparer : System.Collections.Generic.EqualityComparer<string>
            {
                /*0x22a679c*/ NonRandomizedStringEqualityComparer();
                /*0x22a6774*/ bool Equals(string x, string y);
                /*0x22a6784*/ int GetHashCode(string obj);
            }

            class ObjectEqualityComparer : System.Collections.IEqualityComparer
            {
                static /*0x0*/ System.Collections.Generic.ObjectEqualityComparer Default;

                static /*0x22b1cd0*/ ObjectEqualityComparer();
                /*0x22b1c7c*/ ObjectEqualityComparer();
                /*0x22b1c80*/ int System.Collections.IEqualityComparer.GetHashCode(object obj);
                /*0x22b1ca0*/ bool System.Collections.IEqualityComparer.Equals(object x, object y);
            }

            class Comparer<T> : System.Collections.IComparer, System.Collections.Generic.IComparer<T>
            {
                static /*0x0*/ System.Collections.Generic.Comparer<T> defaultComparer;

                static System.Collections.Generic.Comparer<T> get_Default();
                static System.Collections.Generic.Comparer<T> CreateComparer();
                Comparer();
                int Compare(T x, T y);
                int System.Collections.IComparer.Compare(object x, object y);
            }

            class GenericComparer<T> : System.Collections.Generic.Comparer<T>
            {
                GenericComparer();
                int Compare(T x, T y);
                bool Equals(object obj);
                int GetHashCode();
            }

            class NullableComparer<T> : System.Collections.Generic.Comparer<System.Nullable<T>>
            {
                NullableComparer();
                int Compare(System.Nullable<T> x, System.Nullable<T> y);
                bool Equals(object obj);
                int GetHashCode();
            }

            class ObjectComparer<T> : System.Collections.Generic.Comparer<T>
            {
                ObjectComparer();
                int Compare(T x, T y);
                bool Equals(object obj);
                int GetHashCode();
            }

            class Mscorlib_CollectionDebugView<T>
            {
            }

            class Mscorlib_DictionaryDebugView<K, V>
            {
            }

            class Mscorlib_KeyedCollectionDebugView<K, T>
            {
            }

            class EqualityComparer<T> : System.Collections.IEqualityComparer, System.Collections.Generic.IEqualityComparer<T>
            {
                static /*0x0*/ System.Collections.Generic.EqualityComparer<T> defaultComparer;

                static System.Collections.Generic.EqualityComparer<T> get_Default();
                static System.Collections.Generic.EqualityComparer<T> CreateComparer();
                EqualityComparer();
                bool Equals(T x, T y);
                int GetHashCode(T obj);
                int IndexOf(T[] array, T value, int startIndex, int count);
                int LastIndexOf(T[] array, T value, int startIndex, int count);
                int System.Collections.IEqualityComparer.GetHashCode(object obj);
                bool System.Collections.IEqualityComparer.Equals(object x, object y);
            }

            class GenericEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>
            {
                GenericEqualityComparer();
                bool Equals(T x, T y);
                int GetHashCode(T obj);
                int IndexOf(T[] array, T value, int startIndex, int count);
                int LastIndexOf(T[] array, T value, int startIndex, int count);
                bool Equals(object obj);
                int GetHashCode();
            }

            class NullableEqualityComparer<T> : System.Collections.Generic.EqualityComparer<System.Nullable<T>>
            {
                NullableEqualityComparer();
                bool Equals(System.Nullable<T> x, System.Nullable<T> y);
                int GetHashCode(System.Nullable<T> obj);
                int IndexOf(System.Nullable<T> array, System.Nullable<T> value, int startIndex, int count);
                int LastIndexOf(System.Nullable<T> array, System.Nullable<T> value, int startIndex, int count);
                bool Equals(object obj);
                int GetHashCode();
            }

            class ObjectEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>
            {
                ObjectEqualityComparer();
                bool Equals(T x, T y);
                int GetHashCode(T obj);
                int IndexOf(T[] array, T value, int startIndex, int count);
                int LastIndexOf(T[] array, T value, int startIndex, int count);
                bool Equals(object obj);
                int GetHashCode();
            }

            class ByteEqualityComparer : System.Collections.Generic.EqualityComparer<byte>
            {
                /*0x1c5c720*/ ByteEqualityComparer();
                /*0x1c5c470*/ bool Equals(byte x, byte y);
                /*0x1c5c480*/ int GetHashCode(byte b);
                /*0x1c5c488*/ int IndexOf(byte[] array, byte value, int startIndex, int count);
                /*0x1c5c608*/ int LastIndexOf(byte[] array, byte value, int startIndex, int count);
                /*0x1c5c66c*/ bool Equals(object obj);
                /*0x1c5c6e8*/ int GetHashCode();
            }

            class EnumEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                EnumEqualityComparer();
                EnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                bool Equals(T x, T y);
                int GetHashCode(T obj);
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
                bool Equals(object obj);
                int GetHashCode();
            }

            class SByteEnumEqualityComparer<T> : System.Collections.Generic.EnumEqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                SByteEnumEqualityComparer();
                SByteEnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                int GetHashCode(T obj);
            }

            class ShortEnumEqualityComparer<T> : System.Collections.Generic.EnumEqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                ShortEnumEqualityComparer();
                ShortEnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                int GetHashCode(T obj);
            }

            class LongEnumEqualityComparer<T> : System.Collections.Generic.EqualityComparer<T>, System.Runtime.Serialization.ISerializable
            {
                LongEnumEqualityComparer();
                LongEnumEqualityComparer(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context);
                bool Equals(T x, T y);
                int GetHashCode(T obj);
                bool Equals(object obj);
                int GetHashCode();
                void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class InternalStringComparer : System.Collections.Generic.EqualityComparer<string>
            {
                /*0x1a89b30*/ InternalStringComparer();
                /*0x1a89a78*/ int GetHashCode(string obj);
                /*0x1a89a98*/ bool Equals(string x, string y);
                /*0x1a89ac8*/ int IndexOf(string[] array, string value, int startIndex, int count);
            }

            interface ICollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                int get_Count();
                bool get_IsReadOnly();
                void Add(T item);
                void Clear();
                bool Contains(T item);
                void CopyTo(T[] array, int arrayIndex);
                bool Remove(T item);
            }

            interface IComparer<T>
            {
                int Compare(T x, T y);
            }

            interface IDictionary<TKey, TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
            {
                TValue get_Item(TKey key);
                void set_Item(TKey key, TValue value);
                System.Collections.Generic.ICollection<TKey> get_Keys();
                System.Collections.Generic.ICollection<TValue> get_Values();
                bool ContainsKey(TKey key);
                void Add(TKey key, TValue value);
                bool Remove(TKey key);
                bool TryGetValue(TKey key, ref TValue value);
            }

            interface IEnumerable<T> : System.Collections.IEnumerable
            {
                System.Collections.Generic.IEnumerator<T> GetEnumerator();
            }

            interface IEnumerator<T> : System.IDisposable, System.Collections.IEnumerator
            {
                T get_Current();
            }

            interface IEqualityComparer<T>
            {
                bool Equals(T x, T y);
                int GetHashCode(T obj);
            }

            interface IList<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                T get_Item(int index);
                void set_Item(int index, T value);
                int IndexOf(T item);
                void Insert(int index, T item);
                void RemoveAt(int index);
            }

            interface IReadOnlyCollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                int get_Count();
            }

            interface IReadOnlyDictionary<TKey, TValue> : System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.IEnumerable
            {
                bool TryGetValue(TKey key, ref TValue value);
            }

            interface IReadOnlyList<T> : System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable
            {
                T get_Item(int index);
            }

            class KeyNotFoundException : System.SystemException, System.Runtime.Serialization.ISerializable
            {
                /*0x1a8fca8*/ KeyNotFoundException();
                /*0x1a8fd18*/ KeyNotFoundException(string message);
                /*0x1a8fd4c*/ KeyNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
            }

            class List<T> : System.Collections.Generic.IList<T>, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IReadOnlyCollection<T>
            {
                static int _defaultCapacity = 4;
                static /*0x0*/ T[] _emptyArray;
                /*0x0*/ T[] _items;
                /*0x0*/ int _size;
                /*0x0*/ int _version;
                /*0x0*/ object _syncRoot;

                static List();
                static bool IsCompatibleObject(object value);
                List();
                List(int capacity);
                List(System.Collections.Generic.IEnumerable<T> collection);
                int get_Capacity();
                void set_Capacity(int value);
                int get_Count();
                bool System.Collections.IList.get_IsFixedSize();
                bool System.Collections.Generic.ICollection<T>.get_IsReadOnly();
                bool System.Collections.IList.get_IsReadOnly();
                bool System.Collections.ICollection.get_IsSynchronized();
                object System.Collections.ICollection.get_SyncRoot();
                T get_Item(int index);
                void set_Item(int index, T value);
                object System.Collections.IList.get_Item(int index);
                void System.Collections.IList.set_Item(int index, object value);
                void Add(T item);
                int System.Collections.IList.Add(object item);
                void AddRange(System.Collections.Generic.IEnumerable<T> collection);
                System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly();
                void Clear();
                bool Contains(T item);
                bool System.Collections.IList.Contains(object item);
                System.Collections.Generic.List<TOutput> ConvertAll<TOutput>(System.Converter<T, TOutput> converter);
                void CopyTo(T[] array);
                void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex);
                void CopyTo(int index, T[] array, int arrayIndex, int count);
                void CopyTo(T[] array, int arrayIndex);
                void EnsureCapacity(int min);
                bool Exists(System.Predicate<T> match);
                T Find(System.Predicate<T> match);
                System.Collections.Generic.List<T> FindAll(System.Predicate<T> match);
                int FindIndex(System.Predicate<T> match);
                int FindIndex(int startIndex, int count, System.Predicate<T> match);
                int FindLastIndex(System.Predicate<T> match);
                int FindLastIndex(int startIndex, int count, System.Predicate<T> match);
                void ForEach(System.Action<T> action);
                System.Collections.Generic.List.Enumerator<T> GetEnumerator();
                System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
                System.Collections.Generic.List<T> GetRange(int index, int count);
                int IndexOf(T item);
                int System.Collections.IList.IndexOf(object item);
                void Insert(int index, T item);
                void System.Collections.IList.Insert(int index, object item);
                void InsertRange(int index, System.Collections.Generic.IEnumerable<T> collection);
                bool Remove(T item);
                void System.Collections.IList.Remove(object item);
                int RemoveAll(System.Predicate<T> match);
                void RemoveAt(int index);
                void RemoveRange(int index, int count);
                void Reverse();
                void Reverse(int index, int count);
                void Sort();
                void Sort(System.Collections.Generic.IComparer<T> comparer);
                void Sort(int index, int count, System.Collections.Generic.IComparer<T> comparer);
                void Sort(System.Comparison<T> comparison);
                T[] ToArray();
                void TrimExcess();

                struct Enumerator<T> : System.Collections.Generic.IEnumerator<T>, System.IDisposable, System.Collections.IEnumerator
                {
                    /*0x0*/ System.Collections.Generic.List<T> list;
                    /*0x0*/ int index;
                    /*0x0*/ int version;
                    /*0x0*/ T current;

                    Enumerator(System.Collections.Generic.List<T> list);
                    void Dispose();
                    bool MoveNext();
                    bool MoveNextRare();
                    T get_Current();
                    object System.Collections.IEnumerator.get_Current();
                    void System.Collections.IEnumerator.Reset();
                }
            }
        }
    }

    namespace Diagnostics
    {
        class ConditionalAttribute : System.Attribute
        {
            /*0x10*/ string m_conditionString;

            /*0x161c538*/ ConditionalAttribute(string conditionString);
        }

        class DebuggerStepThroughAttribute : System.Attribute
        {
            /*0x2033610*/ DebuggerStepThroughAttribute();
        }

        class DebuggerHiddenAttribute : System.Attribute
        {
            /*0x2033600*/ DebuggerHiddenAttribute();
        }

        class DebuggerNonUserCodeAttribute : System.Attribute
        {
            /*0x2033608*/ DebuggerNonUserCodeAttribute();
        }

        class DebuggableAttribute : System.Attribute
        {
            /*0x10*/ System.Diagnostics.DebuggableAttribute.DebuggingModes m_debuggingModes;

            /*0x2033410*/ DebuggableAttribute(System.Diagnostics.DebuggableAttribute.DebuggingModes modes);

            enum DebuggingModes
            {
                None = 0,
                Default = 1,
                DisableOptimizations = 256,
                IgnoreSymbolStoreSequencePoints = 2,
                EnableEditAndContinue = 4,
            }
        }

        enum DebuggerBrowsableState
        {
            Never = 0,
            Collapsed = 2,
            RootHidden = 3,
        }

        class DebuggerBrowsableAttribute : System.Attribute
        {
            /*0x10*/ System.Diagnostics.DebuggerBrowsableState state;

            /*0x2033500*/ DebuggerBrowsableAttribute(System.Diagnostics.DebuggerBrowsableState state);
        }

        class DebuggerTypeProxyAttribute : System.Attribute
        {
            /*0x10*/ string typeName;

            /*0x2033618*/ DebuggerTypeProxyAttribute(System.Type type);
        }

        class DebuggerDisplayAttribute : System.Attribute
        {
            /*0x10*/ string name;
            /*0x18*/ string value;
            /*0x20*/ string type;

            /*0x203357c*/ DebuggerDisplayAttribute(string value);
        }

        class Debugger
        {
            static /*0x0*/ string DefaultCategory;

            static /*0x203349c*/ Debugger();
            static /*0x203343c*/ bool get_IsAttached();
            static /*0x2033494*/ bool IsAttached_internal();
            static /*0x2033498*/ void NotifyOfCrossThreadDependency();
        }

        class StackFrame
        {
            static int OFFSET_UNKNOWN = -1;
            /*0x10*/ int ilOffset;
            /*0x14*/ int nativeOffset;
            /*0x18*/ long methodAddress;
            /*0x20*/ uint methodIndex;
            /*0x28*/ System.Reflection.MethodBase methodBase;
            /*0x30*/ string fileName;
            /*0x38*/ int lineNumber;
            /*0x3c*/ int columnNumber;
            /*0x40*/ string internalMethodName;

            static /*0x24a09d8*/ bool get_frame_info(int skip, bool needFileInfo, ref System.Reflection.MethodBase method, ref int iloffset, ref int native_offset, ref string file, ref int line, ref int column);
            /*0x24a09e0*/ StackFrame();
            /*0x24a0a3c*/ StackFrame(int skipFrames, bool fNeedFileInfo);
            /*0x24a0aa8*/ int GetFileLineNumber();
            /*0x24a0ab0*/ string GetFileName();
            /*0x24a0ab8*/ string GetSecureFileName();
            /*0x24a0b90*/ int GetILOffset();
            /*0x24a0b98*/ System.Reflection.MethodBase GetMethod();
            /*0x24a0ba0*/ int GetNativeOffset();
            /*0x24a0ba8*/ long GetMethodAddress();
            /*0x24a0bb0*/ uint GetMethodIndex();
            /*0x24a0bb8*/ string GetInternalMethodName();
            /*0x24a0bc0*/ string ToString();
        }

        class StackTrace
        {
            static int METHODS_TO_SKIP = 0;
            static /*0x0*/ bool isAotidSet;
            static /*0x8*/ string aotid;
            /*0x10*/ System.Diagnostics.StackFrame[] frames;
            /*0x18*/ System.Diagnostics.StackTrace[] captured_traces;
            /*0x20*/ bool debug_info;

            static /*0x24a1360*/ System.Diagnostics.StackFrame[] get_trace(System.Exception e, int skipFrames, bool fNeedFileInfo);
            static /*0x24a14e4*/ string GetAotId();
            /*0x24a10e8*/ StackTrace();
            /*0x24a12ec*/ StackTrace(bool fNeedFileInfo);
            /*0x24a1320*/ StackTrace(int skipFrames, bool fNeedFileInfo);
            /*0x24a1368*/ StackTrace(System.Exception e, bool fNeedFileInfo);
            /*0x24a1374*/ StackTrace(System.Exception e, int skipFrames, bool fNeedFileInfo);
            /*0x24a1118*/ void init_frames(int skipFrames, bool fNeedFileInfo);
            /*0x24a1460*/ int get_FrameCount();
            /*0x24a1478*/ System.Diagnostics.StackFrame GetFrame(int index);
            /*0x24a15c0*/ bool AddFrames(System.Text.StringBuilder sb);
            /*0x24a1cdc*/ void GetFullNameForStackTrace(System.Text.StringBuilder sb, System.Reflection.MethodBase mi);
            /*0x24a2264*/ string ToString();
            /*0x24a2388*/ string ToString(System.Diagnostics.StackTrace.TraceFormat traceFormat);

            enum TraceFormat
            {
                Normal = 0,
                TrailingNewLine = 1,
                NoResourceLookup = 2,
            }
        }

        namespace Contracts
        {
            class Contract
            {
                static bool ForAll<T>(System.Collections.Generic.IEnumerable<T> collection, System.Predicate<T> predicate);
            }
        }

        namespace Tracing
        {
            class EventSource : System.IDisposable
            {
                static /*0x0*/ byte[] namespaceBytes;
                static /*0x8*/ System.Guid AspNetEventSourceGuid;
                [ThreadStatic] static byte m_EventSourceExceptionRecurenceCount;

                static /*0x245b9f8*/ EventSource();
                /*0x245b9e8*/ EventSource();
                /*0x245b98c*/ bool IsEnabled();
                /*0x245b994*/ string ToString();
                /*0x245b9f0*/ void Dispose();
                /*0x245b9f4*/ void Finalize();
            }
        }
    }
}

class <PrivateImplementationDetails>
{
    static /*0x0*/ <PrivateImplementationDetails> 0392525BCB01691D1F319D89F2C12BF93A478467;
    static /*0x100*/ <PrivateImplementationDetails> 0588059ACBD52F7EA2835882F977A9CF72EB9775;
    static /*0x148*/ <PrivateImplementationDetails> 0A1ADB22C1D3E1F4B2448EE3F27DF9DE63329C4C;
    static /*0x19c*/ <PrivateImplementationDetails> 121EC59E23F7559B28D338D562528F6299C2DE22;
    static /*0x28c*/ <PrivateImplementationDetails> 12D04472A8285260EA12FD3813CDFA9F2D2B548C;
    static /*0x28f*/ <PrivateImplementationDetails> 13A35EF1A549297C70E2AD46045BBD2ECA17852D;
    static /*0x292*/ <PrivateImplementationDetails> 1730F09044E91DB8371B849EFF5E6D17BDE4AED0;
    static /*0x2aa*/ <PrivateImplementationDetails> 1A84029C80CB5518379F199F53FF08A7B764F8FD;
    static /*0x2ad*/ <PrivateImplementationDetails> 1AEF3D8DF416A46288C91C724CBF7B154D9E5BF3;
    static /*0x12ad*/ <PrivateImplementationDetails> 1E41C4CD0767AEA21C00DEABA2EA9407F1E6CEA5;
    static /*0x1aad*/ <PrivateImplementationDetails> 1FE6CE411858B3D864679DE2139FB081F08BFACD;
    static /*0x1abd*/ <PrivateImplementationDetails> 235D99572263B22ADFEE10FDA0C25E12F4D94FFC;
    static /*0x1ac0*/ <PrivateImplementationDetails> 25420D0055076FA8D3E4DD96BC53AE24DE6E619F;
    static /*0x1ae8*/ <PrivateImplementationDetails> 25CF935D2AE9EDF05DD75BCD47FF84D9255D6F6E;
    static /*0x1fa0*/ <PrivateImplementationDetails> 29C1A61550F0E3260E1953D4FAD71C256218EF40;
    static /*0x1fca*/ <PrivateImplementationDetails> 2B33BEC8C30DFDC49DAFE20D3BDE19487850D717;
    static /*0x1fd6*/ <PrivateImplementationDetails> 2BA840FF6020B8FF623DBCB7188248CF853FAF4F;
    static /*0x1ffa*/ <PrivateImplementationDetails> 2C840AFA48C27B9C05593E468C1232CA1CC74AFD;
    static /*0x2042*/ <PrivateImplementationDetails> 2D1DA5BB407F0C11C3B5116196C0C6374D932B20;
    static /*0x2052*/ <PrivateImplementationDetails> 2D3CF0F15AC2DDEC2956EA1B7BBE43FB8B923130;
    static /*0x2060*/ <PrivateImplementationDetails> 2F71D2DA12F3CD0A6A112F5A5A75B4FDC6FE8547;
    static /*0x20a8*/ <PrivateImplementationDetails> 320B018758ECE3752FFEDBAEB1A6DB67C80B9359;
    static /*0x20e8*/ <PrivateImplementationDetails> 34476C29F6F81C989CFCA42F7C06E84C66236834;
    static /*0x2130*/ <PrivateImplementationDetails> 35EED060772F2748D13B745DAEC8CD7BD3B87604;
    static /*0x2a7e*/ <PrivateImplementationDetails> 375F9AE9769A3D1DA789E9ACFE81F3A1BB14F0D3;
    static /*0x2aa4*/ <PrivateImplementationDetails> 379C06C9E702D31469C29033F0DD63931EB349F5;
    static /*0x304e*/ <PrivateImplementationDetails> 399BD13E240F33F808CA7940293D6EC4E6FD5A00;
    static /*0x3058*/ <PrivateImplementationDetails> 39C9CE73C7B0619D409EF28344F687C1B5C130FE;
    static /*0x30a0*/ <PrivateImplementationDetails> 3C53AFB51FEC23491684C7BEDBC6D4E0F409F851;
    static /*0x31e0*/ <PrivateImplementationDetails> 3E3442C7396F3F2BB4C7348F4A2074C7DC677D68;
    static /*0x31e3*/ <PrivateImplementationDetails> 3E823444D2DFECF0F90B436B88F02A533CB376F1;
    static /*0x31ef*/ <PrivateImplementationDetails> 3FE6C283BCF384FD2C8789880DFF59664E2AB4A1;
    static /*0x3237*/ <PrivateImplementationDetails> 40981BAA39513E58B28DCF0103CC04DE2A0A0444;
    static /*0x38b8*/ <PrivateImplementationDetails> 40E7C49413D261F3F38AD3A870C0AC69C8BDA048;
    static /*0x38e0*/ <PrivateImplementationDetails> 421EC7E82F2967DF6CA8C3605514DC6F29EE5845;
    static /*0x3928*/ <PrivateImplementationDetails> 433175D38B13FFE177FDD661A309F1B528B3F6E2;
    static /*0x3a28*/ <PrivateImplementationDetails> 46232052BC757E030490D851F265FB47FA100902;
    static /*0x3aa0*/ <PrivateImplementationDetails> 4858DB4AA76D3933F1CA9E6712D4FDB16903F628;
    static /*0x3ae8*/ <PrivateImplementationDetails> 4E3B533C39447AAEB59A8E48FABD7E15B5B5D195;
    static /*0x3b18*/ <PrivateImplementationDetails> 4F7A8890F332B22B8DE0BD29D36FA7364748D76A;
    static /*0x3b40*/ <PrivateImplementationDetails> 536422B321459B242ADED7240B7447E904E083E3;
    static /*0x3b88*/ <PrivateImplementationDetails> 5382CEF491F422BFE0D6FC46EFAFF9EF9D4C89F3;
    static /*0x3fc0*/ <PrivateImplementationDetails> 56DFA5053B3131883637F53219E7D88CCEF35949;
    static /*0x3fca*/ <PrivateImplementationDetails> 57218C316B6921E2CD61027A2387EDC31A2D9471;
    static /*0x3fcd*/ <PrivateImplementationDetails> 57F320D62696EC99727E0FE2045A05F1289CC0C6;
    static /*0x3ff5*/ <PrivateImplementationDetails> 594A33A00BC4F785DFD43E3C6C44FBA1242CCAF3;
    static /*0x40c9*/ <PrivateImplementationDetails> 5BBDF8058D4235C33F2E8DCF76004031B6187A2F;
    static /*0x40ed*/ <PrivateImplementationDetails> 5BCD21C341BE6DDF8FFFAE1A23ABA24DCBB612BF;
    static /*0x420d*/ <PrivateImplementationDetails> 5BFE2819B4778217C56416C7585FF0E56EBACD89;
    static /*0x4255*/ <PrivateImplementationDetails> 5EDFD8200B7AD157878FBA46F22A1C345662F2E3;
    static /*0x4289*/ <PrivateImplementationDetails> 609C0E8D8DA86A09D6013D301C86BA8782C16B8C;
    static /*0x4309*/ <PrivateImplementationDetails> 62BAB0F245E66C3EB982CF5A7015F0A7C3382283;
    static /*0x4339*/ <PrivateImplementationDetails> 646036A65DECCD6835C914A46E6E44B729433B60;
    static /*0x4b39*/ <PrivateImplementationDetails> 65E32B4E150FD8D24B93B0D42A17F1DAD146162B;
    static /*0x4b61*/ <PrivateImplementationDetails> 6770974FEF1E98B9C1864370E2B5B786EB0EA39E;
    static /*0x4b95*/ <PrivateImplementationDetails> 67EEAD805D708D9AA4E14BF747E44CED801744F3;
    static /*0x4bdd*/ <PrivateImplementationDetails> 6C71197D228427B2864C69B357FEF73D8C9D59DF;
    static /*0x4c55*/ <PrivateImplementationDetails> 6CEE45445AFD150B047A5866FFA76AA651CDB7B7;
    static /*0x4c65*/ <PrivateImplementationDetails> 6D49C9D487D7AD3491ECE08732D68A593CC2038D;
    static /*0x4c6e*/ <PrivateImplementationDetails> 6D797C11E1D4FB68B6570CF2A92B792433527065;
    static /*0x546e*/ <PrivateImplementationDetails> 6E5DC824F803F8565AF31B42199DAE39FE7F4EA9;
    static /*0x60aa*/ <PrivateImplementationDetails> 6FC754859E4EC74E447048364B216D825C6F8FE7;
    static /*0x60f6*/ <PrivateImplementationDetails> 704939CD172085D1295FCE3F1D92431D685D7AA2;
    static /*0x611e*/ <PrivateImplementationDetails> 7088AAE49F0627B72729078DE6E3182DDCF8ED99;
    static /*0x6136*/ <PrivateImplementationDetails> 7341C933A70EAE383CC50C4B945ADB8E08F06737;
    static /*0x617e*/ <PrivateImplementationDetails> 736D39815215889F11249D9958F6ED12D37B9F57;
    static /*0x6181*/ <PrivateImplementationDetails> 75E0C38E75E507EDE41C1C4F5F5612852B31A4EF;
    static /*0x6741*/ <PrivateImplementationDetails> 7F42F2EDC974BE29B2746957416ED1AEFA605F47;
    static /*0x7741*/ <PrivateImplementationDetails> 7FE820C9CF0F0B90445A71F1D262D22E4F0C4C68;
    static /*0x7769*/ <PrivateImplementationDetails> 811A927B7DADD378BE60BBDE794B9277AA9B50EC;
    static /*0xca6d*/ <PrivateImplementationDetails> 81917F1E21F3C22B9F916994547A614FB03E968E;
    static /*0xca91*/ <PrivateImplementationDetails> 823566DA642D6EA356E15585921F2A4CA23D6760;
    static /*0xcab9*/ <PrivateImplementationDetails> 82C2A59850B2E85BCE1A45A479537A384DF6098D;
    static /*0xcac5*/ <PrivateImplementationDetails> 82C383F8E6E4D3D87AEBB986A5D0077E8AD157C4;
    static /*0xcaf1*/ <PrivateImplementationDetails> 86F4F563FA2C61798AE6238D789139739428463A;
    static /*0xcaf4*/ <PrivateImplementationDetails> 871B9CF85DB352BAADF12BAE8F19857683E385AC;
    static /*0xcb1c*/ <PrivateImplementationDetails> 89A040451C8CC5C8FB268BE44BDD74964C104155;
    static /*0xcb2c*/ <PrivateImplementationDetails> 8CAA092E783257106251246FF5C97F88D28517A6;
    static /*0xcb54*/ <PrivateImplementationDetails> 8D231DD55FE1AD7631BBD0905A17D5EB616C2154;
    static /*0xd388*/ <PrivateImplementationDetails> 8E10AC2F34545DFBBF3FCBC06055D797A8C99991;
    static /*0xd3b0*/ <PrivateImplementationDetails> 8F22C9ECE1331718CBD268A9BBFD2F5E451441E3;
    static /*0xd4b0*/ <PrivateImplementationDetails> 90A0542282A011472F94E97CEAE59F8B3B1A3291;
    static /*0xd730*/ <PrivateImplementationDetails> 93A63E90605400F34B49F0EB3361D23C89164BDA;
    static /*0xd73c*/ <PrivateImplementationDetails> 94841DD2F330CCB1089BF413E4FA9B04505152E2;
    static /*0xd784*/ <PrivateImplementationDetails> 95264589E48F94B7857CFF398FB72A537E13EEE2;
    static /*0xd790*/ <PrivateImplementationDetails> 95C48758CAE1715783472FB073AB158AB8A0AB2A;
    static /*0xd7d8*/ <PrivateImplementationDetails> 973417296623D8DC6961B09664E54039E44CA5D8;
    static /*0xd820*/ <PrivateImplementationDetails> 97FB30C84FF4A41CD4625B44B2940BFC8DB43003;
    static /*0xd823*/ <PrivateImplementationDetails> 99E2E88877D14C7DDC4E957A0ED7079CA0E9EB24;
    static /*0xe823*/ <PrivateImplementationDetails> 9A9C3962CD4753376E3507C8CB5FD8FCC4B4EDB5;
    static /*0xe863*/ <PrivateImplementationDetails> 9BB00D1FCCBAF03165447FC8028E7CA07CA9FE88;
    static /*0xe866*/ <PrivateImplementationDetails> A0074C15377C0C870B055927403EA9FA7A349D12;
    static /*0xe88e*/ <PrivateImplementationDetails> A1319B706116AB2C6D44483F60A7D0ACEA543396;
    static /*0xe910*/ long A13AA52274D951A18029131A8DDECF76B569A15D;
    static /*0xe918*/ <PrivateImplementationDetails> A323DB0813C4D072957BA6FDA79D9776674CD06B;
    static /*0xe91b*/ <PrivateImplementationDetails> A5444763673307F6828C748D4B9708CFC02B0959;
    static /*0xe9ef*/ <PrivateImplementationDetails> A6732F8E7FC23766AB329B492D6BF82E3B33233F;
    static /*0xea37*/ <PrivateImplementationDetails> A705A106D95282BD15E13EEA6B0AF583FF786D83;
    static /*0xeae5*/ <PrivateImplementationDetails> A8A491E4CED49AE0027560476C10D933CE70C8DF;
    static /*0xeedf*/ <PrivateImplementationDetails> AC791C4F39504D1184B73478943D0636258DA7B1;
    static /*0xef27*/ <PrivateImplementationDetails> AFCD4E1211233E99373A3367B23105A3D624B1F2;
    static /*0xef5b*/ <PrivateImplementationDetails> B472ED77CB3B2A66D49D179F1EE2081B70A6AB61;
    static /*0xef83*/ <PrivateImplementationDetails> B4FBD02AAB5B16E0F4BD858DA5D9E348F3CE501D;
    static /*0xef93*/ <PrivateImplementationDetails> B53A2C6DF21FC88B17AEFC40EB895B8D63210CDF;
    static /*0xf093*/ <PrivateImplementationDetails> B6002BBF29B2704922EC3BBF0F9EE40ABF185D6B;
    static /*0x10093*/ <PrivateImplementationDetails> B881DA88BE0B68D8A6B6B6893822586B8B2CFC45;
    static /*0x10479*/ <PrivateImplementationDetails> B8864ACB9DD69E3D42151513C840AAE270BF21C8;
    static /*0x1051b*/ <PrivateImplementationDetails> B8F87834C3597B2EEF22BA6D3A392CC925636401;
    static /*0x10683*/ <PrivateImplementationDetails> B9B670F134A59FB1107AF01A9FE8F8E3980B3093;
    static /*0x106cb*/ <PrivateImplementationDetails> BE1BDEC0AA74B4DCB079943E70528096CCA985F8;
    static /*0x106df*/ <PrivateImplementationDetails> BEBC9ECC660A13EFC359BA3383411F698CFF25DB;
    static /*0x10727*/ <PrivateImplementationDetails> BEE1CFE5DFAA408E14CE4AF4DCD824FA2E42DCB7;
    static /*0x1074f*/ <PrivateImplementationDetails> BF477463CE2F5EF38FC4C644BBBF4DF109E7670A;
    static /*0x10752*/ <PrivateImplementationDetails> BF5EB60806ECB74EE484105DD9D6F463BF994867;
    static /*0x10758*/ long C1A1100642BA9685B30A84D97348484E14AA1865;
    static /*0x10760*/ <PrivateImplementationDetails> C6F364A0AD934EFED8909446C215752E565D77C1;
    static /*0x10770*/ <PrivateImplementationDetails> CE5835130F5277F63D716FC9115526B0AC68FFAD;
    static /*0x1081e*/ <PrivateImplementationDetails> CE93C35B755802BC4B3D180716B048FC61701EF7;
    static /*0x10824*/ <PrivateImplementationDetails> CF0B42666EF5E37EDEA0AB8E173E42C196D03814;
    static /*0x10864*/ <PrivateImplementationDetails> D002CBBE1FF33721AF7C4D1D3ECAD1B7DB5258B7;
    static /*0x10964*/ <PrivateImplementationDetails> D117188BE8D4609C0D531C51B0BB911A4219DEBE;
    static /*0x10984*/ <PrivateImplementationDetails> D28E8ABDBD777A482CE0EE5C24814ACAE52AABFE;
    static /*0x109a4*/ <PrivateImplementationDetails> D2C5BAE967587C6F3D9F2C4551911E0575A1101F;
    static /*0x10aa4*/ <PrivateImplementationDetails> D78D08081C7A5AD6FBA7A8DC86BCD6D7A577C636;
    static /*0x10ad0*/ <PrivateImplementationDetails> DA19DB47B583EFCF7825D2E39D661D2354F28219;
    static /*0x10b1c*/ <PrivateImplementationDetails> DC2B830D8CD59AD6A4E4332D21CA0DCA2821AD82;
    static /*0x10b54*/ <PrivateImplementationDetails> DD3AEFEADB1CD615F3017763F1568179FEE640B0;
    static /*0x10b88*/ <PrivateImplementationDetails> E1827270A5FE1C85F5352A66FD87BA747213D006;
    static /*0x10bac*/ <PrivateImplementationDetails> E45BAB43F7D5D038672B3E3431F92E34A7AF2571;
    static /*0x10bd4*/ <PrivateImplementationDetails> E75835D001C843F156FBA01B001DFE1B8029AC17;
    static /*0x10c14*/ <PrivateImplementationDetails> E92B39D8233061927D9ACDE54665E68E7535635A;
    static /*0x10c48*/ <PrivateImplementationDetails> EA9506959484C55CFE0C139C624DF6060E285866;
    static /*0x10c54*/ <PrivateImplementationDetails> EB5E9A80A40096AB74D2E226650C7258D7BC5E9D;
    static /*0x10d5a*/ <PrivateImplementationDetails> EBF68F411848D603D059DFDEA2321C5A5EA78044;
    static /*0x10d9a*/ <PrivateImplementationDetails> EC5BB4F59D4B9B2E9ECD3904D44A8275F23AFB11;
    static /*0x10da4*/ <PrivateImplementationDetails> EC83FB16C20052BEE2B4025159BC2ED45C9C70C3;
    static /*0x10da7*/ <PrivateImplementationDetails> EC89C317EA2BF49A70EFF5E89C691E34733D7C37;
    static /*0x10def*/ <PrivateImplementationDetails> F06E829E62F3AFBC045D064E10A4F5DF7C969612;
    static /*0x10e17*/ <PrivateImplementationDetails> F073AA332018FDA0D572E99448FFF1D6422BD520;
    static /*0x13b75*/ <PrivateImplementationDetails> F34B0E10653402E8F788F8BC3F7CD7090928A429;
    static /*0x13bed*/ <PrivateImplementationDetails> F37E34BEADB04F34FCC31078A59F49856CA83D5B;
    static /*0x13c35*/ <PrivateImplementationDetails> F512A9ABF88066AAEB92684F95CC05D8101B462B;
    static /*0x13c93*/ <PrivateImplementationDetails> F8FAABB821300AA500C2CEC6091B3782A7FB44A4;
    static /*0x13c9f*/ <PrivateImplementationDetails> FCBD2781A933F0828ED4AAF88FD8B08D76DDD49B;

    static /*0x1c81fa0*/ uint ComputeStringHash(string s);

    struct __StaticArrayInitTypeSize=3
    {
    }

    struct __StaticArrayInitTypeSize=6
    {
    }

    struct __StaticArrayInitTypeSize=9
    {
    }

    struct __StaticArrayInitTypeSize=10
    {
    }

    struct __StaticArrayInitTypeSize=12
    {
    }

    struct __StaticArrayInitTypeSize=14
    {
    }

    struct __StaticArrayInitTypeSize=16
    {
    }

    struct __StaticArrayInitTypeSize=20
    {
    }

    struct __StaticArrayInitTypeSize=24
    {
    }

    struct __StaticArrayInitTypeSize=32
    {
    }

    struct __StaticArrayInitTypeSize=36
    {
    }

    struct __StaticArrayInitTypeSize=38
    {
    }

    struct __StaticArrayInitTypeSize=40
    {
    }

    struct __StaticArrayInitTypeSize=42
    {
    }

    struct __StaticArrayInitTypeSize=44
    {
    }

    struct __StaticArrayInitTypeSize=48
    {
    }

    struct __StaticArrayInitTypeSize=52
    {
    }

    struct __StaticArrayInitTypeSize=56
    {
    }

    struct __StaticArrayInitTypeSize=64
    {
    }

    struct __StaticArrayInitTypeSize=72
    {
    }

    struct __StaticArrayInitTypeSize=76
    {
    }

    struct __StaticArrayInitTypeSize=84
    {
    }

    struct __StaticArrayInitTypeSize=94
    {
    }

    struct __StaticArrayInitTypeSize=120
    {
    }

    struct __StaticArrayInitTypeSize=128
    {
    }

    struct __StaticArrayInitTypeSize=130
    {
    }

    struct __StaticArrayInitTypeSize=162
    {
    }

    struct __StaticArrayInitTypeSize=174
    {
    }

    struct __StaticArrayInitTypeSize=212
    {
    }

    struct __StaticArrayInitTypeSize=240
    {
    }

    struct __StaticArrayInitTypeSize=256
    {
    }

    struct __StaticArrayInitTypeSize=262
    {
    }

    struct __StaticArrayInitTypeSize=288
    {
    }

    struct __StaticArrayInitTypeSize=320
    {
    }

    struct __StaticArrayInitTypeSize=360
    {
    }

    struct __StaticArrayInitTypeSize=640
    {
    }

    struct __StaticArrayInitTypeSize=998
    {
    }

    struct __StaticArrayInitTypeSize=1018
    {
    }

    struct __StaticArrayInitTypeSize=1080
    {
    }

    struct __StaticArrayInitTypeSize=1208
    {
    }

    struct __StaticArrayInitTypeSize=1450
    {
    }

    struct __StaticArrayInitTypeSize=1472
    {
    }

    struct __StaticArrayInitTypeSize=1665
    {
    }

    struct __StaticArrayInitTypeSize=2048
    {
    }

    struct __StaticArrayInitTypeSize=2100
    {
    }

    struct __StaticArrayInitTypeSize=2350
    {
    }

    struct __StaticArrayInitTypeSize=2382
    {
    }

    struct __StaticArrayInitTypeSize=3132
    {
    }

    struct __StaticArrayInitTypeSize=4096
    {
    }

    struct __StaticArrayInitTypeSize=11614
    {
    }

    struct __StaticArrayInitTypeSize=21252
    {
    }
}

namespace System
{
    namespace Reflection
    {
        namespace Emit
        {
            class UnmanagedMarshal
            {
                /*0x206a938*/ UnmanagedMarshal();
            }

            class DynamicMethod : System.Reflection.MethodInfo
            {
                /*0x204418c*/ DynamicMethod(string name, System.Type returnType, System.Type[] parameterTypes, System.Type owner, bool skipVisibility);
                /*0x20441c8*/ System.Reflection.MethodAttributes get_Attributes();
                /*0x2044204*/ System.Type get_DeclaringType();
                /*0x2044240*/ System.RuntimeMethodHandle get_MethodHandle();
                /*0x204427c*/ string get_Name();
                /*0x20442b8*/ System.Type get_ReflectedType();
                /*0x20442f4*/ System.Reflection.MethodInfo GetBaseDefinition();
                /*0x2044330*/ object[] GetCustomAttributes(bool inherit);
                /*0x204436c*/ object[] GetCustomAttributes(System.Type attributeType, bool inherit);
                /*0x20443a8*/ System.Reflection.Emit.ILGenerator GetILGenerator();
                /*0x20443e4*/ System.Reflection.MethodImplAttributes GetMethodImplementationFlags();
                /*0x2044420*/ System.Reflection.ParameterInfo[] GetParameters();
                /*0x204445c*/ object Invoke(object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
                /*0x2044498*/ bool IsDefined(System.Type attributeType, bool inherit);
            }
        }
    }
}

namespace Unity
{
    class ThrowStub : System.ObjectDisposedException
    {
        static /*0x1d32fd4*/ void ThrowNotSupportedException();
    }
}

namespace System
{
    class __Il2CppComObject
    {
        /*0x226c528*/ void Finalize();
    }

    class __Il2CppComDelegate : System.__Il2CppComObject
    {
        /*0x226c524*/ void Finalize();
    }
}
